<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Searene</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://searene.github.io/"/>
  <updated>2022-01-27T14:48:36.615Z</updated>
  <id>https://searene.github.io/</id>
  
  <author>
    <name>Searene</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一篇新的博客</title>
    <link href="https://searene.github.io/2022/01/26/%E4%B8%80%E7%AF%87%E6%96%B0%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://searene.github.io/2022/01/26/一篇新的博客/</id>
    <published>2022-01-26T15:27:55.000Z</published>
    <updated>2022-01-27T14:48:36.615Z</updated>
    
    <content type="html"><![CDATA[<p>今天又开始写博客了，上一次写博客还是 1 年半前，后面在很长的一段时间里，我都是热衷于记笔记，曾经一度觉得记笔记才是最好的学习方式，然而笔记确实有它的局限性，因为笔记是写给自己看的，这跟写给别人看的博客还是两码事，很多时候，把一件东西解释给自己听，和把一件东西解释给别人听是两种不太一样的技能，我需要训练一下后面的一种技能。</p><p>再次拾起博客的另外一个原因是，我希望我能够有个地方记录我的生活，我希望能够没事拍拍照片，甚至拍拍视频，把我的生活记录下来，也许以后当我看这个博客的时候，我能够有所回忆。</p><p>今天先暂时写到这里吧，挺晚的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天又开始写博客了，上一次写博客还是 1 年半前，后面在很长的一段时间里，我都是热衷于记笔记，曾经一度觉得记笔记才是最好的学习方式，然而笔记确实有它的局限性，因为笔记是写给自己看的，这跟写给别人看的博客还是两码事，很多时候，把一件东西解释给自己听，和把一件东西解释给别人听是
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Nothing makes sense</title>
    <link href="https://searene.github.io/2020/07/10/Nothing-makes-sense/"/>
    <id>https://searene.github.io/2020/07/10/Nothing-makes-sense/</id>
    <published>2020-07-10T14:52:12.000Z</published>
    <updated>2020-07-10T15:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I felt pretty upset. I talked for a while with one of my female colleagues, I asked her if I would ever come into a girl that liked me. The reason why I asked this question was that I lacked confidence in myself. She didn’t answer me directly. She talked indirectly about something that was related to the topic. Meanwhile, she mentioned that most girls she knew liked men who talked few but were confident. I talk few, but I don’t feel confident. I’m an indecisive person, which is the opposite of the man she described.</p><p>I felt sad. I don’t know why. Maybe it’s because I’m not young any more, yet still I’m single. I have nothing to show for, yet I cannot work too hard because my health condition doesn’t allow me to do that. I want to become the man that a lot of girls like but I just cannot. The most important characteristics that a successful man should have are the ones that are too hard to get for me. For example, high IQ, health, perseverance, hard-working, none of them is related to me any more. I feel sad, and I cannot change myself. I go to gym every day to fix my health problem but I’m still unhealthy. I’m always wondering if I can fix my problem but no one can answer. And time passes by, I’m getting older. I’m still alone, Loneliness is my fate.</p><p>I even cried for a little bit tonight. I know it’s not good for a man to cry, which is deemed to be weak. But I need to vent. I have no one to talk about my problem, I have to find some way to relieve. But crying wouldn’t solve my problem, and it didn’t solve my problem.</p><p>I don’t know what to do. Time still passes by, I’m still lonely, maybe, I will keep being lonely, that is my fate. This world doesn’t make sense.</p><p>I need to endure the loneliness. I shouldn’t talk too much to others, it’s not good.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I felt pretty upset. I talked for a while with one of my female colleagues, I asked her if I would ever come into a girl that liked
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>I had a dream last night</title>
    <link href="https://searene.github.io/2020/06/26/I-had-a-dream-last-night/"/>
    <id>https://searene.github.io/2020/06/26/I-had-a-dream-last-night/</id>
    <published>2020-06-26T08:07:39.000Z</published>
    <updated>2020-06-26T09:47:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>I put this blog back online today. I think I need a blog to express my feelings and record my life. The only problem of this blog is that it is written in English, which is not my native language. I’ve always tried to start a new blog using my native language, so I can write more freely in that way. However, bringing up a blog takes a lot of efforts, so I haven’t done it in these years.</p><p>Back to the topic, I had a dream last night. I dreamed about a girl that I liked a lot. She is my workmates. We used to work together frequently in the past, but after some changes in the workplace, I have few opportunities to talk with her now. In my dream, we worked together again, which made me happy. I also dreamed that she went to learn swimming in a pool. Her teacher was a male, which made me envious. I think it might imply that I still have feelings for her. But my chance of getting her is not good. I didn’t try hard to go after her in the past, maybe part of the reason is I’m afraid of being rejected. The fear of rejection is so big that I would rather give up altogether. And I also know that I cannot match up to her because I have some illnesses that are hard to cure. She may find someone better. It’s a sad story, but it’s true. God doesn’t give me enough to marry a girl like her.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I put this blog back online today. I think I need a blog to express my feelings and record my life. The only problem of this blog is that
      
    
    </summary>
    
      <category term="Life" scheme="https://searene.github.io/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>I need to stop making my life worse</title>
    <link href="https://searene.github.io/2019/09/10/I-need-to-stop-making-my-life-worse/"/>
    <id>https://searene.github.io/2019/09/10/I-need-to-stop-making-my-life-worse/</id>
    <published>2019-09-10T13:43:49.000Z</published>
    <updated>2019-09-10T14:42:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’m reading a book recently, it’s called <a href="https://www.amazon.com/gp/product/B075SR5DQJ/ref=ppx_yo_dt_b_d_asin_title_o00?ie=UTF8&amp;psc=1" target="_blank" rel="noopener">Surviving and Thriving with an Invisible Chronic Illness: How to Stay Sane and Live One Step Ahead of Your Symptoms</a>. The reason why I’m interested in this book is that I also have some chronic illnesses, some of them might be cured(although I haven’t found a way to cure it), some of them may never be cured due to the limitations of the modern medicine. I’ve been struggling with these illnesses for years, the most horrible thing about having these illnesses is that, you don’t know how to lead a life with them. Sometimes they force you to give up your love, your job and give you no alternative. You don’t know what to do because no one can tell you. Most people in the world are just being told to work hard, to go for what they want, they are not being told how to live a life with several chronic illnesses. You can work hard until your body tells you otherwise, and your body may tell you to give up your dream because your health condition is just not good enough to pursue it. It’s tragically real.</p><p>I haven’t finished this book yet. But I’ve seen something that strikes me a lot. It’s called “accept your conditions”. Yes, it’s true. Although we have dreams, we need to work hard to make money, to get social status, and to get a better life, we also need a good body to achieve it. If you don’t have good health, it just wouldn’t happen. Accept your conditions doesn’t mean to be pathetic, to give up everything. It means you should stop making unrealistic goals about your life, because when you cannot achieve it, you will feel bad and miserable, which will finally do harm to your life. You should make goals that is achievable to you, and try to realize it. You may never have as good a life as others, some goals are doomed not achievable to you, but it doesn’t mean you cannot live a quality life with your conditions. It’s still possible, the most important thing is to keep moving on with your life. The rule is, you are either full of sufferings and miseries, or you can try and see if you can get a good life, IOW you can at least stop making your life worse.</p><p>Yes, stop making my life worse. I know that is an important rule because I’ve been violating it for months, or even years. Sometimes I just feel so hopeless about my current health conditions that I think I will not have a future. What do you do when you don’t have a future? You make your life worse. You keep wasting your time and indulge yourself in useless things. Who cares the result if you can never have a great life? What’s the point of working hard if you can never have a life you want? So I keep making my life worse. Maybe it’s time to stop. Maybe if I could just stop making my life miserable, I might have a chance to live a decent life, or maybe a life that I want, although the probability is not that high, it’s still possible.</p><p>It’s also ridiculous that my bad health exacerbates my loneliness. Due to my bad health conditions, I’ve always been afraid to meet a girl and be with her. I’m afraid that she would dump me because of it. I met a girl several months ago. She is beautiful. I told her that I had lower-back pain, I couldn’t sit for a long time because of it. Well, that is just one of the health problems that I have. She mentioned it when we were eating, and she seems to care about it a lot. Maybe she really thought about it a lot and decided that us being together was not a good thing. I think so, too, ironically. When I looked at her, I saw a girl that was not crushed by life. She didn’t know what was suffering, she didn’t know what was like to live with health problems. I do not want pass bad genes to her children. I don’t want to see her suffer, especially for things that I cannot control. Yes, I’m unable to control my health conditions, I’m unable to stop my bad genes from passing down to my children, which are also her children. The most sensible thing for me to do is just stop communicating with her. So she can find another person who has good genes, at least they will have a healthy child. And that’s what I did.</p><p>This kind of thought keeps me from looking for a girl. I do not want them to suffer. But my life is also getting worse because of it. I feel extremely lonely sometimes and I don’t know who I should talk with to relive my pain. Nobody. Who would want be miserable anyway? We are taught to be tough. This society punishes those who express their miserable lives. I was walking on the street at night the day before yesterday and I didn’t know how to go on with my life. No one can tell me what to do if I’m unable to get a life you want. The most sensible thing that I can think of is that, my genes are not good enough, my genes are going to be thrown away in the history of evolution. and I, unfortunately, are going to be the last one to carry my genes.</p><p>You see, when you lose faith in life, you start making your life worse. So I started wasting my time. What’s the alternative? Work hard? Sorry, I’m not healthy enough to work hard. I’m not even sure how long I should work. The current rule is, I should stop working for such a long time. And it makes sense somehow, especially when I’ve got no one to make my life better. It’s easy to live, it’s hard to live a quality life.</p><p>But I feel that I need to stop doing that any more. I would not have a future if I just gave up myself. I need to find a girl, I need to move on with my life. I cannot endure the loneliness that comes out of my deeds. Yes, I can still live a life for now. But what about next year, or 2 years later? The most horrible thing is, there’s never a thing called “stay in the current”, if you are not moving forward, you are moving backward, because you keep getting older every day. Maybe I do not have good health, and I may never have, but I can stop make my life worse. It’s not an easy thing, especially when I’m not healthy. Sometimes the most difficult thing is to figure out what’s the right thing to do. Is working hard a right thing to do? Yeah, but how about your health conditions, when your body keeps telling you that you cannot hold on any more. Then how about lying on bed? It’s called wasting time but you do not feel the pain any more. The line is hard to draw, but I will try. I’ll try to draw a fine line and stop making my life worse any more.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’m reading a book recently, it’s called &lt;a href=&quot;https://www.amazon.com/gp/product/B075SR5DQJ/ref=ppx_yo_dt_b_d_asin_title_o00?ie=UTF8&amp;a
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Finished Home Deus, a brief history of tomorrow</title>
    <link href="https://searene.github.io/2019/06/14/Finished-Home-Deus-a-brief-history-of-tomorrow/"/>
    <id>https://searene.github.io/2019/06/14/Finished-Home-Deus-a-brief-history-of-tomorrow/</id>
    <published>2019-06-14T12:55:50.000Z</published>
    <updated>2019-06-15T08:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>I just finished reading “Homo Deus, A Brief History of Tomorrow” today, oh, sorry, it’s not reading, it’s listening. I listened through the whole book. This is the first time I listen through a complete English book, and I feel really great! The voice of the audio book is quite comfortable, and the book is full of interesting and intelligent thoughts. Although I need to mention that reading and listening are two kinds of behaviors. When you encounter something you don’t understand or some word/phrase you don’t know the meaning of in the process of listening, you don’t get the chance to stop(unless you really want to break the sound flow). Also, sometimes I just zoned out while listening. Yes, I bet that it could happen to everyone. And after you get back from your imaginary world, you lose the contents in between. That said, listening to an audio book is still full of fun. You can listen to an audio book any time you want. Sometimes I just put on my earphones while going out for a walk, I got to enjoy the environment around me while immersed in the book, that’s really something worthy of trying!</p><p>Let’s get back to the book itself. This is an excellent book. It details various possible futures of the mankind, wherein the most prominent one is dataism. After two revolutionary ideas, religion(which dictates an all-mighty God) and humanism(which discards the God and put more emphasis on human feelings and thoughts), we are going to embrace dataism in the 21st century. Dataism means the free flow of the information that is collected everywhere from every person, which not only includes something easier to get, like your job, your posts, your resources and property, but also something hard to get, like your genes, your health conditions, etc. Those data will be sent to one or several processing units and get fully analyzed. All things considered, these processing units will tell you which person you should marry, which job you should take, which life path you should follow. Listening to the AI’s suggestions is important, because it knows much more than you do. Soon, the ordinary human beings are no longer useful. They will be replaced by the unconscious AI, who will be the next leader of the world.</p><p>What strikes me most is not dataism, it’s the idea of fixing our minds through bio-engineering. For example, it’s hard for you to study for 2 straight hours, right? No problem, let’s just put on a special device on your head, which sends an electrical current every few minutes to certain areas of your brain, after that, you will forget your surroundings and focus on your job. You will hardly notice the time passing in this case. Actually this is not the future, it has already happened. This technology is used on the miliary field so that soldiers can focus on the target without any distraction. Not only about that, you can re-engineer your brain to cure depression, neuroticism and various other mental diseases. This has happened, too. Researchers implanted a tiny device in the patients body to suppress the activity the “depression area” of the brain. After switching on the device, the patients reported that they had returned to a normal person, they no longer felt sad and hopeless anymore. I think this technology is really promising. I’m also a neurotic person, I think neuroticism has almost destroyed my life, and it continues to do so. With this technology, I can re-engineer my brain and may have a chance to live a happy life. I suspect that this technology is still immature, but it will become mature and get widely used in the near future.</p><p>OK, that’s all I want to say. My mental condition is still unstable for now, and I doubt it will ever become stable. But I have to live anyway. I have no other choices. If there’s anything I want to do, I want change the structure of my brain so that I could have a chance to live a happy life.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just finished reading “Homo Deus, A Brief History of Tomorrow” today, oh, sorry, it’s not reading, it’s listening. I listened through t
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Solve the problem of failing to connect to certain Wifi occasionally when using NetworkManger on archlinux</title>
    <link href="https://searene.github.io/2018/08/19/Solve-the-problem-of-failing-to-connect-to-certain-Wifi-occasionally-when-using-NetworkManger-on-archlinux/"/>
    <id>https://searene.github.io/2018/08/19/Solve-the-problem-of-failing-to-connect-to-certain-Wifi-occasionally-when-using-NetworkManger-on-archlinux/</id>
    <published>2018-08-19T04:29:25.000Z</published>
    <updated>2018-08-19T04:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>I use archlinux and network-manager, and every now and then, I failed to connect to a certain wifi, while the other wifi worked pretty well. I didn’t figure out the reason, but I found a solution.</p><p>First check which wifi connections do you have.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ls /etc/NetworkManager/system-connections</span><br><span class="line">AndroidAPOpenWrt15</span><br></pre></td></tr></table></figure><p>Suppose we have a problem connecting to <code>OpenWrt15</code>, what we need to do is just run the following command to move <code>OpenWrt15</code> to another location(Warning: make sure you know the wifi password of <code>OpenWrt15</code> before moving the file, because you will need to re-input the password again later on. Usually you can find the password in the <code>OpenWrt15</code> file)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/NetworkManager/system-connections/OpenWrt15 /tmp</span><br></pre></td></tr></table></figure><p>Then restart NetworkManager.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart NetworkManager.service</span><br></pre></td></tr></table></figure><p>And try connecting to that wifi again. You will need to re-input the password. If you don’t know the password, you can probably find it in the original <code>/tmp/OpenWrt15</code> file.</p><p>Happy Hacking!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I use archlinux and network-manager, and every now and then, I failed to connect to a certain wifi, while the other wifi worked pretty we
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="linux" scheme="https://searene.github.io/tags/linux/"/>
    
      <category term="archlinux" scheme="https://searene.github.io/tags/archlinux/"/>
    
      <category term="network-manager" scheme="https://searene.github.io/tags/network-manager/"/>
    
  </entry>
  
  <entry>
    <title>Went to Qiandao Lake</title>
    <link href="https://searene.github.io/2018/04/07/Went-to-Qiandao-Lake/"/>
    <id>https://searene.github.io/2018/04/07/Went-to-Qiandao-Lake/</id>
    <published>2018-04-07T02:48:09.000Z</published>
    <updated>2018-04-07T03:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.</p><p>Qiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.</p><p>When the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.</p><p><img src="/images/IMG_20180406_084153.jpg" alt></p><p>There were even bigger ones, which looked like a building.</p><p><img src="/images/IMG_20180406_123639.jpg" alt></p><p>I found that the scenery was not bad, maybe slightly better than I thought. This is small island.</p><p><img src="/images/IMG_20180406_090110.jpg" alt></p><p><img src="/images/IMG_20180406_094127.jpg" alt></p><p><img src="/images/IMG_20180406_095808.jpg" alt></p><p>On our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn’t finish dealing with the accident until 8 o’clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn’t need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.</p><p>Then we drove to my company and had a supper around it, it was about 9 o’clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao L
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Go to KTV alone</title>
    <link href="https://searene.github.io/2018/04/03/Go-to-KTV-alone/"/>
    <id>https://searene.github.io/2018/04/03/Go-to-KTV-alone/</id>
    <published>2018-04-02T23:10:10.000Z</published>
    <updated>2018-04-02T23:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.</p><p>Well, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn’t care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it’s obviously for lovers, yet I’m all alone, whatever.</p><p>Then I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn’t give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don’t care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don’t have a good throat, you won’t be able to be a good singer, period.</p><p>Anyway, it’s just an experience. Although I’m not able to be a singer, it may not be a bad thing. I just need to know it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself 
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>live a quite life</title>
    <link href="https://searene.github.io/2018/04/01/live-a-quite-life/"/>
    <id>https://searene.github.io/2018/04/01/live-a-quite-life/</id>
    <published>2018-04-01T01:50:26.000Z</published>
    <updated>2018-04-01T02:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That’s all. I’m not saying it’s wrong. Actually it couldn’t be more correct, especially when living in this world is pretty hard. But I’m not attractive to her any more, I don’t know why. Maybe that’s who I am.</p><p>I found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don’t know why. Maybe it’s just because she’s quite.</p><p>I often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It’s not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it’s a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don’t know where to go. Now I understand why depressed people tend to be insomnia, it’s caused by despair. You cannot go to sleep when tomorrow also sucks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She w
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>The meaning of life</title>
    <link href="https://searene.github.io/2018/03/05/The-meaning-of-life/"/>
    <id>https://searene.github.io/2018/03/05/The-meaning-of-life/</id>
    <published>2018-03-05T10:53:53.000Z</published>
    <updated>2018-03-06T00:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, <em>The Meaning Of Life</em>.</p><p>The question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that <em>Life had no meaning at all</em>.</p><p>I guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:</p><ol><li>We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.</li><li>Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.</li></ol><p>I learned a word <em>nihilism</em> when I was learning English, the definition of this word is as follows(From Longman DOCE).</p><blockquote><p>the belief that nothing has any meaning or value</p></blockquote><p>Now that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!</p><p>I think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that’s why some people choose to commit suicide in the end, there’s just no hope in their lives.</p><p>We have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what’s the answer?</p><p>This is a hard question, but in my humble option, the answer is <em>no</em>, we should not adopt it.</p><p>The reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don’t adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.</p><p>But maybe you have noticed, I only described the outcome of our choice, I didn’t mention the answer of our ultimate question, what’s the meaning of our lives?</p><p>Before trying to get the answer, let’s just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?</p><p>No, the only thing you would question is, why you are mortal? It’s obvious that you want to live forever in this wonderful world.</p><p>So you see, it’s not about the question, it’s about why we would ask this question, there maybe two reasons.</p><ol><li>This world is horrible.</li><li>We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.</li></ol><p>About the first one, we cannot change this world, whether it’s good, horrible, the truth is, it already exists and there’s nothing we can do to change it.</p><p>So it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That’s the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn’t exist in your head any more.</p><p>But it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others’ lives, which may not be so bad otherwise. Think about it, it’s not an option.</p><p>So we are back to the second point again. We are suffering, is there a solution?</p><p>In most cases, yes, just do everything you can to make your life better.</p><p>Don’t have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.</p><p>In fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don’t have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor… God has a thousand ways to make your life miserable and you cannot even change it, what should you do?</p><p>I want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God’s intention over and over again. But finally, he found the purpose of his life, which is <em>to be an inspiration, to help others live a better life</em>, because if he can do it, it’s obvious that most people should be able to do it.</p><p><img src="/images/nick.jpg" alt="Nick"></p><p>So, as you can see, maybe you haven’t tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.</p><p>But what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That’s exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don’t have anything to show for in your life. What should you do? Maybe lower your goals is one option.</p><p>I went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don’t try to pursue the useless in your life, and only then will you find your purpose.</p><p>I agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that’s not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.</p><p>Still, I’m struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a questio
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
      <category term="life" scheme="https://searene.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>We are either young or old, never something in between</title>
    <link href="https://searene.github.io/2018/01/20/We-are-either-young-or-old-never-something-in-between/"/>
    <id>https://searene.github.io/2018/01/20/We-are-either-young-or-old-never-something-in-between/</id>
    <published>2018-01-20T07:55:01.000Z</published>
    <updated>2018-01-20T08:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.</p><p>I remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.</p><p>Well, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.</p><p>I once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It’s true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn’t notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.</p><p>I miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It’s not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn’t getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don’t know what to do with my money, I just want to go back to the past, when I don’t have money but I’m still young, when everything is possible.</p><p><img src="/images/128910133_14610369084721n.jpg" alt="垫底辣妹"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the mo
      
    
    </summary>
    
      <category term="Journey" scheme="https://searene.github.io/categories/Journey/"/>
    
    
  </entry>
  
  <entry>
    <title>Write Machine Learning Algorithms From Scratch: Random Forest</title>
    <link href="https://searene.github.io/2017/12/23/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest/"/>
    <id>https://searene.github.io/2017/12/23/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest/</id>
    <published>2017-12-23T02:14:33.000Z</published>
    <updated>2018-01-09T15:24:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Random Forest is a supervised classification algorithm, it can classify data according to various given features.</p><p>Assuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.</p><table><thead><tr><th>Person</th><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th><th>Gender</th></tr></thead><tbody><tr><td>A</td><td>50</td><td>1.62</td><td>18</td><td>Female</td></tr><tr><td>B</td><td>70</td><td>1.81</td><td>16</td><td>Male</td></tr><tr><td>C</td><td>60</td><td>1.72</td><td>15</td><td>Female</td></tr><tr><td>D</td><td>70</td><td>1.71</td><td>19</td><td>Male</td></tr><tr><td>E</td><td>52</td><td>1.69</td><td>17</td><td>Female</td></tr></tbody></table><p>We can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person’s gender using the trained model.</p><table><thead><tr><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th></tr></thead><tbody><tr><td>60</td><td>1.62</td><td>16</td></tr></tbody></table><p>Notice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won’t dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.</p><p>All the code mentioned in the post is available for download. So please refer to the code if there’s anything unclear in the post.</p><h1 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h1><p>Let’s first run the code that we will write, so we could know what it’s like.</p><ol><li><p>Install Python3</p></li><li><p>Download code</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class="built_in">cd</span> demos/RandomForest</span><br></pre></td></tr></table></figure></li><li><p>Download Dependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy pandas</span><br></pre></td></tr></table></figure></li><li><p>Execution</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">python evaluate_random_forest.py</span><br><span class="line">Average cross validation accuracy <span class="keyword">for</span> 1 trees: 0.6887700534759359</span><br><span class="line">Test accuracy <span class="keyword">for</span> 1 trees: 0.6190476190476191</span><br><span class="line">Average cross validation accuracy <span class="keyword">for</span> 3 trees: 0.6898395721925135</span><br><span class="line">Test accuracy <span class="keyword">for</span> 3 trees: 0.8571428571428571</span><br><span class="line">Average cross validation accuracy <span class="keyword">for</span> 10 trees: 0.6983957219251338</span><br><span class="line">Test accuracy <span class="keyword">for</span> 10 trees: 0.7619047619047619</span><br></pre></td></tr></table></figure></li></ol><p>So you can see that, we get the highest accuracy with 3 trees, which is about 85%.</p><h1 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h1><p>Random Forest is rather complex, so let’s use an example.</p><table><thead><tr><th>Person</th><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th><th>Gender</th></tr></thead><tbody><tr><td>A</td><td>50</td><td>1.62</td><td>18</td><td>Female</td></tr><tr><td>B</td><td>70</td><td>1.81</td><td>16</td><td>Male</td></tr><tr><td>C</td><td>60</td><td>1.72</td><td>15</td><td>Female</td></tr><tr><td>D</td><td>70</td><td>1.71</td><td>19</td><td>Male</td></tr><tr><td>E</td><td>52</td><td>1.69</td><td>17</td><td>Female</td></tr></tbody></table><p>We mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.</p><ol><li><p>Based on D’s height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don’t think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">     A, B, C, D, E</span><br><span class="line">    /             \</span><br><span class="line">   /               \</span><br><span class="line">A, D, E           B, C</span><br></pre></td></tr></table></figure></li><li><p>For group <code>A, D, E</code>, based on A’s 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group <code>B, C</code>. Based on C’s height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       A, B, C, D, E</span><br><span class="line">      /             \</span><br><span class="line">     /               \</span><br><span class="line">   B, C            A, D, E</span><br><span class="line">  /    \          /      \</span><br><span class="line"> /      \        /        \</span><br><span class="line">C        B     A, E        D</span><br></pre></td></tr></table></figure></li><li><p>Now only group <code>A, E</code> could be further split. So let’s base on A’s weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">          A, B, C, D, E</span><br><span class="line">         /             \</span><br><span class="line">        /               \</span><br><span class="line">      B, C            A, D, E</span><br><span class="line">     /    \          /      \</span><br><span class="line">    /      \        /        \</span><br><span class="line">C(F)       B(M)   A, E       D(M)</span><br><span class="line">                  /   \</span><br><span class="line">                 /     \</span><br><span class="line">               A(F)   E(M)</span><br></pre></td></tr></table></figure><p>That’s it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person’s gender:</p></li></ol><table><thead><tr><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th></tr></thead><tbody><tr><td>60</td><td>1.62</td><td>16</td></tr></tbody></table><p>   Just like training, this person’s height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group <code>B, C</code> in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is <code>Female</code>. This is the whole process of prediction.</p><h1 id="The-Principle-To-Split-A-Tree-Into-Two-Groups"><a href="#The-Principle-To-Split-A-Tree-Into-Two-Groups" class="headerlink" title="The Principle To Split A Tree Into Two Groups"></a>The Principle To Split A Tree Into Two Groups</h1><p>   In the above example, we first split the whole data into two groups according to D’s height, then continue to split them according to D’s height, A’s weight, etc. What’s going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it’s true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A’s weight, we will get two groups of data: <code>A</code> and <code>B, C, D, E</code>. Let’s call them group1 and group2 respectively, then we can calculate gini index according to the following equation.</p>   <div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\times$ (the number of people in group2 / the total number of people in both groups)</div><p>   So the gini index should be calculated as follows if we split the data based on A’s weight.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \times 0.8 = 0.4<br>$$</p><p>   We can also split the data based on A’s height, to get another gini index.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \times 0.8 = 0.4<br>$$<br>We can also split based on A’s 100m-race time, B’s weight, B’s height, …, E’s 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D’s weight if we got the smallest gini index based on D’s weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it’s more about the math rather than the implementation.</p><p>The code to calculate gini index is as follows.</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gini_index</span><span class="params">(left, right, categories)</span>:</span></span><br><span class="line">    gini_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> left, right:</span><br><span class="line">        <span class="keyword">if</span> len(group) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categories:</span><br><span class="line">            p = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> group].count(category) / len(group)</span><br><span class="line">            score += p * p</span><br><span class="line">        gini_index += (<span class="number">1</span> - score) * (len(group) / len(left + right))</span><br><span class="line">    <span class="keyword">return</span> gini_index</span><br></pre></td></tr></table></figure><p>   We use the above piece of code in this way:</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">50</span>, <span class="number">1.62</span>, <span class="number">18</span>, <span class="string">'Female'</span>]</span><br><span class="line">B = [<span class="number">70</span>, <span class="number">1.81</span>, <span class="number">16</span>, <span class="string">'Male'</span>]</span><br><span class="line">C = [<span class="number">60</span>, <span class="number">1.72</span>, <span class="number">15</span>, <span class="string">'Female'</span>]</span><br><span class="line">D = [<span class="number">70</span>, <span class="number">1.71</span>, <span class="number">19</span>, <span class="string">'Male'</span>]</span><br><span class="line">E = [<span class="number">52</span>, <span class="number">1.69</span>, <span class="number">17</span>, <span class="string">'Female'</span>]</span><br><span class="line">left = [A]</span><br><span class="line">right = [B, C, D, E]</span><br><span class="line">gini_index = get_gini_index(left, right, [<span class="string">'Male'</span>, <span class="string">'Female'</span>])</span><br><span class="line">print(gini_index) <span class="comment"># 0.4</span></span><br></pre></td></tr></table></figure><h1 id="Use-multiple-trees-to-boost-the-accuracy"><a href="#Use-multiple-trees-to-boost-the-accuracy" class="headerlink" title="Use multiple trees to boost the accuracy"></a>Use multiple trees to boost the accuracy</h1><p>You may wonder why it’s called the random forest when we only used one tree? Good question! In fact, we shouldn’t only use one tree. The correct process is as follows.</p><ol><li>Choose 90% of the data randomly for training.</li><li>Train those data, i.e. the process of building a tree shown above.</li><li>Use this tree to predict, get the prediction <code>x</code>.</li><li>Repeat the above three steps, build another tree, get another prediction <code>y</code>.</li><li>Repeat the first three steps again, get another prediction <code>z</code>.</li><li>Choose the one that appears the most in <code>x, y, z</code>, which should be our final prediction, return it.</li></ol><p>So you should know why it’s call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.</p><p>The purpose of building multiple trees is to avoid overfitting. From Wikipedia:</p><blockquote><p>In statistics, <strong>overfitting</strong> is “the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably”.</p></blockquote><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>Now that we know how it works, it’s time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let’s review them together.</p><ol><li>min_size: when the number of data in some node is less than <code>min_size</code>, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.</li><li>max_depth: The maximum depth of a tree, further splitting is not allowed when <code>max_depth</code> is exceeded, the value of the node is determined by the category that appears the most in the group.</li><li>n_features: The number of features chosen to build the current tree. In case if you don’t know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose <code>n_features</code> features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.</li></ol><p>Code to implement random forest is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># all the data that is held by this node</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># left child node</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># right child node</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># category if the current node is a leaf node</span></span><br><span class="line">        self.category = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># a tuple: (row, column), representing the point where we split the data</span></span><br><span class="line">        <span class="comment"># into the left/right node</span></span><br><span class="line">        self.split_point = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate)</span>:</span></span><br><span class="line">    trees = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_trees):</span><br><span class="line">        random.shuffle(train_data)</span><br><span class="line">        n_samples = int(len(train_data) * n_sample_rate)</span><br><span class="line">        tree = build_tree(train_data[: n_samples], <span class="number">1</span>, max_depth, min_size, n_features)</span><br><span class="line">        trees.append(tree)</span><br><span class="line">    <span class="keyword">return</span> trees</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_with_single_tree</span><span class="params">(tree, row)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree.category <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> tree.category</span><br><span class="line">    x, y = tree.split_point</span><br><span class="line">    split_value = tree.data[x][y]</span><br><span class="line">    <span class="keyword">if</span> row[y] &lt;= split_value:</span><br><span class="line">        <span class="keyword">return</span> predict_with_single_tree(tree.left, row)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> predict_with_single_tree(tree.right, row)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(trees, row)</span>:</span></span><br><span class="line">    prediction = []</span><br><span class="line">    <span class="keyword">for</span> tree <span class="keyword">in</span> trees:</span><br><span class="line">        prediction.append(predict_with_single_tree(tree, row))</span><br><span class="line">    <span class="keyword">return</span> max(set(prediction), key=prediction.count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_most_common_category</span><span class="params">(data)</span>:</span></span><br><span class="line">    categories = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> data]</span><br><span class="line">    <span class="keyword">return</span> max(set(categories), key=categories.count)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(train_data, depth, max_depth, min_size, n_features)</span>:</span></span><br><span class="line">    root = Node(train_data)</span><br><span class="line">    x, y = get_split_point(train_data, n_features)</span><br><span class="line">    left_group, right_group = split(train_data, x, y)</span><br><span class="line">    <span class="keyword">if</span> len(left_group) == <span class="number">0</span> <span class="keyword">or</span> len(right_group) == <span class="number">0</span> <span class="keyword">or</span> depth &gt;= max_depth:</span><br><span class="line">        root.category = get_most_common_category(left_group + right_group)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        root.split_point = (x, y)</span><br><span class="line">        <span class="keyword">if</span> len(left_group) &lt; min_size:</span><br><span class="line">            root.left = Node(left_group)</span><br><span class="line">            root.left.category = get_most_common_category(left_group)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.left = build_tree(left_group, depth + <span class="number">1</span>, max_depth, min_size, n_features)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(right_group) &lt; min_size:</span><br><span class="line">            root.right = Node(right_group)</span><br><span class="line">            root.right.category = get_most_common_category(right_group)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.right = build_tree(right_group, depth + <span class="number">1</span>, max_depth, min_size, n_features)</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_features</span><span class="params">(n_selected_features, n_total_features)</span>:</span></span><br><span class="line">    features = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n_total_features)]</span><br><span class="line">    random.shuffle(features)</span><br><span class="line">    <span class="keyword">return</span> features[:n_selected_features]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_categories</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> set([row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> data])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_split_point</span><span class="params">(data, n_features)</span>:</span></span><br><span class="line">    n_total_features = len(data[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line">    features = get_features(n_features, n_total_features)</span><br><span class="line">    categories = get_categories(data)</span><br><span class="line">    x, y, gini_index = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</span><br><span class="line">            left, right = split(data, index, feature)</span><br><span class="line">            current_gini_index = get_gini_index(left, right, categories)</span><br><span class="line">            <span class="keyword">if</span> gini_index <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> current_gini_index &lt; gini_index:</span><br><span class="line">                x, y, gini_index = index, feature, current_gini_index</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gini_index</span><span class="params">(left, right, categories)</span>:</span></span><br><span class="line">    gini_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> left, right:</span><br><span class="line">        <span class="keyword">if</span> len(group) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categories:</span><br><span class="line">            p = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> group].count(category) / len(group)</span><br><span class="line">            score += p * p</span><br><span class="line">        gini_index += (<span class="number">1</span> - score) * (len(group) / len(left + right))</span><br><span class="line">    <span class="keyword">return</span> gini_index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(data, x, y)</span>:</span></span><br><span class="line">    split_value = data[x][y]</span><br><span class="line">    left, right = [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> row[y] &lt;= split_value:</span><br><span class="line">            left.append(row)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right.append(row)</span><br><span class="line">    <span class="keyword">return</span> left, right</span><br></pre></td></tr></table></figure><p>So how to use this piece of code? Let’s take <a href="https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29" target="_blank" rel="noopener">Sonar</a>, which is real-life data as an example(You can have a glimpse of its contents in <a href="https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv" target="_blank" rel="noopener">here</a>). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let’s load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.</p><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random_forest <span class="keyword">import</span> build_model, predict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrossValidationSplitter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, k_fold)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.k_fold = k_fold</span><br><span class="line">        self.n_iteration = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.n_iteration &gt;= self.k_fold:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.n_iteration += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.__load_data()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__load_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        n_train_data = (<span class="number">1</span> / self.k_fold) * len(self.data)</span><br><span class="line">        data_copy = self.data[:]</span><br><span class="line">        train_data = []</span><br><span class="line">        <span class="keyword">while</span> len(train_data) &lt; n_train_data:</span><br><span class="line">            train_data.append(self.__pop_random_row(data_copy))</span><br><span class="line">        test_data = data_copy</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pop_random_row</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        random.shuffle(data)</span><br><span class="line">        <span class="keyword">return</span> data[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data, rate)</span>:</span></span><br><span class="line">    random.shuffle(data)</span><br><span class="line">    n_train_data = int(len(data) * rate)</span><br><span class="line">    <span class="keyword">return</span> data[: n_train_data], data[n_train_data:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_accuracy</span><span class="params">(model, validate_data)</span>:</span></span><br><span class="line">    n_total = <span class="number">0</span></span><br><span class="line">    n_correct = <span class="number">0</span></span><br><span class="line">    predicted_categories = [predict(model, row[:<span class="number">-1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> validate_data]</span><br><span class="line">    correct_categories = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> validate_data]</span><br><span class="line">    <span class="keyword">for</span> predicted_category, correct_category <span class="keyword">in</span> zip(predicted_categories, correct_categories):</span><br><span class="line">        n_total += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> predicted_category == correct_category:</span><br><span class="line">            n_correct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n_correct / n_total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'resources/sonar.all-data.csv'</span>, header=<span class="literal">None</span>)</span><br><span class="line">data = df.values.tolist()</span><br><span class="line">train_data_all, test_data = split_data(data, <span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n_tree <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>]:</span><br><span class="line">    accuracies = []</span><br><span class="line">    cross_validation_splitter = CrossValidationSplitter(train_data_all, <span class="number">5</span>)</span><br><span class="line">    model = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> train_data, validate_data <span class="keyword">in</span> cross_validation_splitter:</span><br><span class="line">        n_features = int(sqrt(len(train_data[<span class="number">0</span>]) - <span class="number">1</span>))</span><br><span class="line">        model = build_model(</span><br><span class="line">            train_data=train_data,</span><br><span class="line">            n_trees=n_tree,</span><br><span class="line">            max_depth=<span class="number">5</span>,</span><br><span class="line">            min_size=<span class="number">1</span>,</span><br><span class="line">            n_features=n_features,</span><br><span class="line">            n_sample_rate=<span class="number">0.9</span></span><br><span class="line">        )</span><br><span class="line">        accuracies.append(calculate_accuracy(model, validate_data))</span><br><span class="line">    print(<span class="string">"Average cross validation accuracy for &#123;&#125; trees: &#123;&#125;"</span>.format(n_tree, np.mean(accuracies)))</span><br><span class="line">    print(<span class="string">"Test accuracy for &#123;&#125; trees: &#123;&#125;"</span>.format(n_tree, calculate_accuracy(model, test_data)))</span><br></pre></td></tr></table></figure><p>The result is as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Average cross validation accuracy for 1 trees: 0.6887700534759359</span><br><span class="line">Test accuracy for 1 trees: 0.6190476190476191</span><br><span class="line">Average cross validation accuracy for 3 trees: 0.6898395721925135</span><br><span class="line">Test accuracy for 3 trees: 0.8571428571428571</span><br><span class="line">Average cross validation accuracy for 10 trees: 0.6983957219251338</span><br><span class="line">Test accuracy for 10 trees: 0.7619047619047619</span><br></pre></td></tr></table></figure><p>As you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Random Forest is a supervised 
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="machine learning" scheme="https://searene.github.io/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>My Last Weekend At Cisco</title>
    <link href="https://searene.github.io/2017/12/17/My-Last-Weekend-At-Cisco/"/>
    <id>https://searene.github.io/2017/12/17/My-Last-Weekend-At-Cisco/</id>
    <published>2017-12-17T09:05:54.000Z</published>
    <updated>2017-12-17T09:57:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I’m not sure if this is the right choice, maybe there is no right choice at all.</p><p>I remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn’t sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.</p><p>It was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.</p><p>While I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I’m still living in it.</p><p>All right, besides those nonsense, it’s time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It’s also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.</p><p>I chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn’t find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.</p><p>I’m about to turn 30 in the next few years, yet I’m still lonely.</p><p>Maybe I’ve said too much, while staying at the office, all alone.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more crue
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Use Deep Learning to Detect Programming Languages</title>
    <link href="https://searene.github.io/2017/11/26/use-neural-networks-to-detect-programming-languages/"/>
    <id>https://searene.github.io/2017/11/26/use-neural-networks-to-detect-programming-languages/</id>
    <published>2017-11-26T07:56:45.000Z</published>
    <updated>2017-12-09T10:10:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This post introduces a way to use deep learning to detect programming languages. Take the following code as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"something"</span>)</span><br></pre></td></tr></table></figure><p>We will get an answer <code>python</code> if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.</p><h1 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h1><p>First let’s try running the program, so we can have an intuitive perspective on what the program is about.</p><ol><li><p>Install third-party libraries</p><ul><li><p><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda(Python 3.6+)</a></p></li><li><p>Gensim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c anaconda gensim</span><br></pre></td></tr></table></figure></li><li><p>Keras</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge keras</span><br></pre></td></tr></table></figure></li><li><p>Tensorflow</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow==1.3.0</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Download the program</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class="built_in">cd</span> demos/PLDetector-demo</span><br></pre></td></tr></table></figure></li><li><p>Train the model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">python -m src.neural_network_trainer                                                  </span><br><span class="line">Using TensorFlow backend.                                                                                             </span><br><span class="line">...</span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#</span></span><br><span class="line">=================================================================</span><br><span class="line">embedding_1 (Embedding)      (None, 500, 100)          773100</span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          </span><br><span class="line">_________________________________________________________________                                                     </span><br><span class="line">max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              </span><br><span class="line">_________________________________________________________________                                                     </span><br><span class="line">flatten_1 (Flatten)          (None, 31744)             0                                                              </span><br><span class="line">_________________________________________________________________                                                     </span><br><span class="line">dense_1 (Dense)              (None, 8)                 253960                                                         </span><br><span class="line">=================================================================                                                     </span><br><span class="line">Total params: 1,091,188                                                                                               </span><br><span class="line">Trainable params: 318,088</span><br><span class="line">Non-trainable params: 773,100</span><br><span class="line">_________________________________________________________________</span><br><span class="line">INFO:root:None</span><br><span class="line">Epoch 1/10</span><br><span class="line"> - 1s - loss: 0.4304 - acc: 0.8823</span><br><span class="line">Epoch 2/10</span><br><span class="line"> - 1s - loss: 0.1357 - acc: 0.9657</span><br><span class="line">Epoch 3/10</span><br><span class="line"> - 1s - loss: 0.0706 - acc: 0.9788</span><br><span class="line">Epoch 4/10</span><br><span class="line"> - 1s - loss: 0.0392 - acc: 0.9887</span><br><span class="line">Epoch 5/10</span><br><span class="line"> - 1s - loss: 0.0266 - acc: 0.9927</span><br><span class="line">Epoch 6/10</span><br><span class="line"> - 1s - loss: 0.0203 - acc: 0.9945</span><br><span class="line">Epoch 7/10</span><br><span class="line"> - 1s - loss: 0.0169 - acc: 0.9948</span><br><span class="line">Epoch 8/10</span><br><span class="line"> - 1s - loss: 0.0145 - acc: 0.9956</span><br><span class="line">Epoch 9/10</span><br><span class="line"> - 1s - loss: 0.0131 - acc: 0.9959                                                                                    </span><br><span class="line">Epoch 10/10                                                                                                           </span><br><span class="line"> - 1s - loss: 0.0120 - acc: 0.9959                                                                                    </span><br><span class="line">INFO:root:Test Accuracy: 94.642857</span><br></pre></td></tr></table></figure><p>We will have three important files as soon as the above step is completed.</p><ul><li>resources/models/model.h5</li><li>resources/models/model.json</li><li>resources/vocab_tokenizer</li></ul><p>We will introduce the three files in detail later on.</p></li><li><p>Detection</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -m src.detector</span><br><span class="line"></span><br><span class="line">Using TensorFlow backend.</span><br><span class="line">Python</span><br></pre></td></tr></table></figure><p>The following python code is detected by default by <code>detector.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"something"</span>)</span><br></pre></td></tr></table></figure><p>Of course you can modify <code>detector.py</code> to detect other code.</p></li></ol><h1 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h1><p>Let’s first have a rough idea of the project structure. Don’t worry, it will only take 1 ~ 2 minutes.</p><ul><li><p>resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.</p><p><img src="/images/2017-11-26-163206_448x610_scrot.png" alt="train文件夹结构"></p></li><li><p>resources/code/test: the same as <code>resources/code/train</code> except that it’s used for testing accuracy instead of training.</p></li><li><code>models</code> directory &amp; <code>vocab_tokenizer</code>: stored training result</li><li>src/config.py: some constants used in the program</li><li>src/neural_network_trainer.py: code used to train the model</li><li>src/detector.py: code used to load the model and detect programming languages</li></ul><h1 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h1><h2 id="Construct-Vocabulary"><a href="#Construct-Vocabulary" class="headerlink" title="Construct Vocabulary"></a>Construct Vocabulary</h2><p>let’s first get our heads around the training process, aka the contents in <code>neural_network_trainer.py</code>. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.</p><p>OK, you might want to ask, why removing words that are not in the vocabulary? Wouldn’t it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don’t have word vectors to map, which means the neural network is unable to process this word.</p><p>So how do we build the vocabulary? It’s fairly easy, we just need to scan all the code in <code>resources/code/train</code> and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab</span><span class="params">(train_data_dir)</span>:</span></span><br><span class="line">    vocabulary = Counter()</span><br><span class="line">    files = get_files(train_data_dir)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        words = load_words_from_file(f)</span><br><span class="line">        vocabulary.update(words)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># remove rare words</span></span><br><span class="line">    min_count = <span class="number">5</span></span><br><span class="line">    vocabulary = [word <span class="keyword">for</span> word, count <span class="keyword">in</span> vocabulary.items() <span class="keyword">if</span> count &gt;= min_count]</span><br><span class="line">    <span class="keyword">return</span> vocabulary</span><br></pre></td></tr></table></figure><p>Run <code>build_vocab</code> to get the vocabulary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vocab = build_vocab(config.train_data_dir)</span><br><span class="line">print(vocab) <span class="comment"># [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]</span></span><br></pre></td></tr></table></figure><p>So, as you can see, the vocabulary is just a list of words, that’s it.</p><h2 id="Build-vocab-tokenizer"><a href="#Build-vocab-tokenizer" class="headerlink" title="Build vocab_tokenizer"></a>Build vocab_tokenizer</h2><p>The next step is to build <code>vocab_tokenizer</code>. So what is <code>vocab_tokenzier</code>? It’s a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.</p><p>We use <code>Tokenizer</code> provided by <code>Keras</code> to build <code>vocab_tokenizer</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab_tokenizer_from_set</span><span class="params">(vocab)</span>:</span></span><br><span class="line">    vocab_tokenizer = Tokenizer(lower=<span class="literal">False</span>, filters=<span class="string">""</span>)</span><br><span class="line">    vocab_tokenizer.fit_on_texts(vocab)</span><br><span class="line">    <span class="keyword">return</span> vocab_tokenizer</span><br></pre></td></tr></table></figure><p>Then we save this <code>vocab_tokenizer</code> as a file, to be used later.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_vocab_tokenizer</span><span class="params">(vocab_tokenzier_location, vocab_tokenizer)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(vocab_tokenzier_location, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)</span><br></pre></td></tr></table></figure><h2 id="Build-Word-Vectors"><a href="#Build-Word-Vectors" class="headerlink" title="Build Word Vectors"></a>Build Word Vectors</h2><p>Before diving into word vectors, we first need to know what they are.</p><p>To put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let’s take the following Java code as an example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"something"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>word2vec</code> variable we are building here is actually a dictionary, which is like this(word -&gt; word_vector).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">word2vec = &#123;</span><br><span class="line">    <span class="string">'public'</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>],</span><br><span class="line">    <span class="string">'static'</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="string">'main'</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'String'</span>: [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'args'</span>: [<span class="number">1</span>, <span class="number">40</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'System'</span>: [<span class="number">20</span>, <span class="number">10</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'out'</span>: [<span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'println'</span>: [<span class="number">1</span>, <span class="number">39</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">'something'</span>: [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here comes the question. Why would we build word vectors, instead of just using the number given by <code>vocab_tokenizer</code>? This is because word vectors have a very special and useful characteristic: <strong>The more close two words are, the smaller their word vectors are</strong>(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn’t matter if you don’t know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.</p><p>For example, <code>public</code> and <code>staic</code> are only seen together in Java, so the distance between their word vectors should be small. However, <code>public</code> and <code>System</code> is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.</p><p>Now that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the <code>Word2Vec</code> algorithm provided by <code>gensim</code> to achieve it. Steps are as follows.</p><ol><li>Load all the training data, extract those words which are in the vocabulary.</li><li>Map each word into its respective number by using <code>vocab_tokenizer</code>.</li><li>Put those numbers into <code>Word2Vec</code> library and obtain word vectors.</li></ol><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_word2vec</span><span class="params">(train_data_dir, vocab_tokenizer)</span>:</span></span><br><span class="line">    all_words = []</span><br><span class="line">    files = get_files(train_data_dir)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">        words = load_words_from_file(f)</span><br><span class="line">        all_words.append([word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> is_in_vocab(word, vocab_tokenizer)])</span><br><span class="line">    model = Word2Vec(all_words, size=<span class="number">100</span>, window=<span class="number">5</span>, workers=<span class="number">8</span>, min_count=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;word: model[word] <span class="keyword">for</span> word <span class="keyword">in</span> model.wv.index2word&#125;</span><br></pre></td></tr></table></figure><h2 id="Build-the-Neural-Network"><a href="#Build-the-Neural-Network" class="headerlink" title="Build the Neural Network"></a>Build the Neural Network</h2><p>Everything is ready, now it’s the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"something"</span>)</span><br></pre></td></tr></table></figure><p>Map <code>def</code>, <code>test</code>, <code>print</code> and <code>something</code> into their respective numbers, we get the input</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>The output of the neural network is the probability of each language.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output = [<span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">0.04</span>, <span class="number">0.06</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.05</span>, <span class="number">0.05</span>]</span><br></pre></td></tr></table></figure><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_languages = [<span class="string">"Python"</span>, <span class="string">"C"</span>, <span class="string">"Java"</span>, <span class="string">"Scala"</span>, <span class="string">"Javascript"</span>, <span class="string">"CSS"</span>, <span class="string">"C#"</span>, <span class="string">"HTML"</span>]</span><br></pre></td></tr></table></figure><p>So we know the above code is most likely to be written by Python, because Python has the most probability(0.5)</p><p>Now that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.</p><ol><li>Embedding Layer: it’s used to map each word into its respective word vector</li><li>Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.</li><li>Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.</li></ol><p>Key code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(train_data_dir, vocab_tokenizer, word2vec)</span>:</span></span><br><span class="line">    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># build the embedding layer</span></span><br><span class="line">    input_dim = len(vocab_tokenizer.word_index) + <span class="number">1</span></span><br><span class="line">    output_dim = get_word2vec_dimension(word2vec)</span><br><span class="line">    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)</span><br><span class="line"></span><br><span class="line">    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,</span><br><span class="line">                                trainable=<span class="literal">False</span>)</span><br><span class="line">    model = Sequential()</span><br><span class="line">    model.add(embedding_layer)</span><br><span class="line">    model.add(Conv1D(filters=<span class="number">128</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">"relu"</span>))</span><br><span class="line">    model.add(MaxPooling1D(pool_size=<span class="number">2</span>))</span><br><span class="line">    model.add(Flatten())</span><br><span class="line">    model.add(Dense(len(all_languages), activation=<span class="string">"sigmoid"</span>))</span><br><span class="line">    logging.info(model.summary())</span><br><span class="line">    model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">    model.fit(x_train, y_train, epochs=<span class="number">10</span>, verbose=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>All right, we built our neural network, not a trivial achievement! Then let’s write a function, which uses the neural network to detect test code, check out its accuracy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_model</span><span class="params">(test_data_dir, vocab_tokenizer, model)</span>:</span></span><br><span class="line">    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)</span><br><span class="line">    loss, acc = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</span><br><span class="line">    logging.info(<span class="string">'Test Accuracy: %f'</span> % (acc * <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>As what we have got before, the test accuracy is around 94%~95%, which is good enough. Let’s save the neural network as files, so we can load it when detecting.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(model, model_file_location, weights_file_location)</span>:</span></span><br><span class="line">    os.makedirs(os.path.dirname(model_file_location), exist_ok=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">with</span> open(model_file_location, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(model.to_json())</span><br><span class="line">    model.save_weights(weights_file_location)</span><br></pre></td></tr></table></figure><h2 id="Load-the-Neural-Network-For-Detection"><a href="#Load-the-Neural-Network-For-Detection" class="headerlink" title="Load the Neural Network For Detection"></a>Load the Neural Network For Detection</h2><p>This part is simple, we only need to load <code>vocab_tokenizer</code> and the neural network for detection. The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)</span><br><span class="line">model = load_model(config.model_file_location, config.weights_file_location)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_language</span><span class="params">(binary_list)</span>:</span></span><br><span class="line">    i = np.argmax(binary_list)</span><br><span class="line">    <span class="keyword">return</span> all_languages[i]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_neural_network_input</span><span class="params">(code)</span>:</span></span><br><span class="line">    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)</span><br><span class="line">    <span class="keyword">return</span> pad_sequences([encoded_sentence], maxlen=input_length)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(code)</span>:</span></span><br><span class="line">    y_proba = model.predict(get_neural_network_input(code))</span><br><span class="line">    <span class="keyword">return</span> to_language(y_proba)</span><br></pre></td></tr></table></figure><p>Use it like this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">code = <span class="string">"""</span></span><br><span class="line"><span class="string">def test():</span></span><br><span class="line"><span class="string">    print("something")</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(detect(code)) <span class="comment"># Python</span></span><br></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>All in all, here are the steps to build the neural network.</p><ol><li>Build vocabulary.</li><li>Build <code>vocab_tokenizer</code> using vocabulary, which is used to convert words into numbers.</li><li>Load words into <code>Word2Vec</code> to build word vectors.</li><li>Load word vectors into the neural network as part of the input layer.</li><li>Load all the training data, extract words that are in the vocabulary, convert them into numbers using <code>vocab_tokenizer</code>, load them into the neural network for training.</li></ol><p>Three steps for detection:</p><ol><li>Extract words in the code and remove those that are not in the vocabulary.</li><li>Convert those words into number through <code>vocab_tokenizer</code>, and load them into the neural network.</li><li>Choose the language which has the most probability, which the answer we want.</li></ol><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>You may have already found out that, we only saved <code>vocab_tokenizer</code> and the neural network(which lies in the model directory), why didn’t we save <code>word2vec</code> and <code>vocab</code>?</p><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>If you have any question, please leave it in the comment below, I’ll try to answer it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;This post introduces a way to 
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="Neural Network" scheme="https://searene.github.io/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Right associativity in Scala</title>
    <link href="https://searene.github.io/2017/10/07/Right-associativity-in-Scala/"/>
    <id>https://searene.github.io/2017/10/07/Right-associativity-in-Scala/</id>
    <published>2017-10-07T05:07:50.000Z</published>
    <updated>2017-10-07T05:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>We define two methods here, <code>++</code> and <code>++:</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>:(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ValFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> foo = <span class="keyword">new</span> <span class="type">Foo</span></span><br><span class="line">    foo.++(<span class="number">1</span>)</span><br><span class="line">    foo.++:(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nothing special, right? Yes, for now, until we try removing the parentheses in it.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>:(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ValFunctionTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> foo = <span class="keyword">new</span> <span class="type">Foo</span></span><br><span class="line">    foo ++ <span class="number">1</span></span><br><span class="line">    <span class="number">1</span> ++: foo</span><br><span class="line">    </span><br><span class="line">    foo ++: <span class="number">1</span> <span class="comment">// error</span></span><br><span class="line">    <span class="number">1</span> ++ foo <span class="comment">// error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So the difference is, <code>foo</code> can only be placed on the <em>left</em> side when using <code>++</code>, and it can only be placed on <em>right</em> side when using <code>++:</code>. The latter is called <em>right associativity</em>, and <strong>methods ending with : are used in the right associativity</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We define two methods here, &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;++:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="Scala" scheme="https://searene.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Cast away on the moon</title>
    <link href="https://searene.github.io/2017/10/06/Cast-away-on-the-moon/"/>
    <id>https://searene.github.io/2017/10/06/Cast-away-on-the-moon/</id>
    <published>2017-10-06T02:36:40.000Z</published>
    <updated>2017-10-06T03:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>I watched a movie these days, it’s called <em>Cast Away on the Moon</em>(or <em>金氏漂流记</em> , <em>김씨 표류기</em>).</p><p>A man was saddled with debts of more than $20,000, and he couldn’t afford to pay it off. One day he jumped off a bridge to kill himself, but he didn’t die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.</p><p>To the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.</p><p>In the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said “Hello”. The man found this bottle and the piece of paper, then he replied to the girl “How are you?” on the beach. They kept communicating with each other in this way.</p><p>Finally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.</p><p>I vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn’t want to ruin it by accepting the girl’s takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it’s achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.</p><p>That’s all, it’s a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don’t know how long it will take, or whether I can meet her at all.</p><p><img src="/images/cast-away-on-the-moon.jpg" alt="Ryeo-won Jeong"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I watched a movie these days, it’s called &lt;em&gt;Cast Away on the Moon&lt;/em&gt;(or &lt;em&gt;金氏漂流记&lt;/em&gt; , &lt;em&gt;김씨 표류기&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A man was saddled w
      
    
    </summary>
    
      <category term="Journal" scheme="https://searene.github.io/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>The difference between a case class and a normal class in Scala</title>
    <link href="https://searene.github.io/2017/10/06/The-difference-between-a-case-class-and-a-normal-class-in-Scala/"/>
    <id>https://searene.github.io/2017/10/06/The-difference-between-a-case-class-and-a-normal-class-in-Scala/</id>
    <published>2017-10-06T01:03:48.000Z</published>
    <updated>2017-10-06T09:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-a-case-class-like"><a href="#What-is-a-case-class-like" class="headerlink" title="What is a case class like"></a>What is a case class like</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    println(person.toString)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Can-be-Instantiated-without-the-new-keyword"><a href="#Can-be-Instantiated-without-the-new-keyword" class="headerlink" title="Can be Instantiated without the new keyword"></a>Can be Instantiated without the new keyword</h1><p>Case classes have prebuilt companion objects with <code>apply()</code> implemented, so a case class can be instantiated without using <code>new</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Both ways have the same effect</span></span><br><span class="line">    <span class="keyword">val</span> person1 = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    <span class="keyword">val</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Why removing the <code>new</code> keyword? Because case classes are often used to implement <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="noopener">algebraic data types</a>, it’s more elegant to do so without the <code>new</code> keyword.</p><h1 id="Default-equals-and-hashCode-implementation"><a href="#Default-equals-and-hashCode-implementation" class="headerlink" title="Default equals and hashCode implementation"></a>Default equals and hashCode implementation</h1><p>Case classes have default equals and hashCode implementations. Let’s pick <code>equals</code> and talk about it in this part, because it’s easier to verify.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person1 = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    <span class="keyword">val</span> person2 = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    println(person1 == person2) <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Because Case classes have default <code>equals</code> implementation, so although <code>person1</code> and <code>person2</code> are different objects(I’m talking about their references), they are still equal because Scala only checks field values(<code>name</code> in this case) for case classes.</p><p>The result is different if we use a normal class, which compares equality by references.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    <span class="keyword">val</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    println(person1 == person2) <span class="comment">// false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><p>Case classes can be serialized.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">FileOutputStream</span>, <span class="type">ObjectOutputStream</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// creat an instance</span></span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// serialize</span></span><br><span class="line">    <span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"/tmp/person"</span>))</span><br><span class="line">    oos.writeObject(person)</span><br><span class="line">    oos.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A normal class cannot be serialized by default.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// creat an instance</span></span><br><span class="line">    <span class="keyword">val</span> person = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// serialize</span></span><br><span class="line">    <span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"/tmp/person"</span>))</span><br><span class="line">    oos.writeObject(person) <span class="comment">// Exception in thread "main" java.io.NotSerializableException: com.example.Person</span></span><br><span class="line">    oos.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Better-toString"><a href="#Better-toString" class="headerlink" title="Better toString"></a>Better toString</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Animal</span>(<span class="params">name: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</span><br><span class="line">    <span class="keyword">val</span> animal = <span class="keyword">new</span> <span class="type">Animal</span>(<span class="string">"Dog"</span>)</span><br><span class="line"></span><br><span class="line">    println(person.toString) <span class="comment">// Person(John)</span></span><br><span class="line">    println(animal.toString) <span class="comment">// com.example.Animal@5a39699c</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h1><p>Case classes support pattern matching.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Dog</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">Cat</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> animal = <span class="type">Dog</span>()</span><br><span class="line">    printType(animal)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printType</span></span>(animal: <span class="type">Animal</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    animal <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Dog</span>() =&gt; println(<span class="string">"It's a dog."</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cat</span>() =&gt; println(<span class="string">"It's a cat."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Can we achieve pattern matching using a normal class? Of course, just implement the <code>unapply</code> method, here is an example.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Dog</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Cat</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Dog</span> = <span class="keyword">new</span> <span class="type">Dog</span>()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(arg: <span class="type">Animal</span>): <span class="type">Boolean</span> = arg.isInstanceOf[<span class="type">Dog</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Cat</span> = <span class="keyword">new</span> <span class="type">Cat</span>()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(arg: <span class="type">Animal</span>): <span class="type">Boolean</span> = arg.isInstanceOf[<span class="type">Cat</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> animal = <span class="type">Dog</span>()</span><br><span class="line">    printType(animal)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printType</span></span>(animal: <span class="type">Animal</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    animal <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Dog</span>() =&gt; println(<span class="string">"It's a dog."</span>)</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Cat</span>() =&gt; println(<span class="string">"It's a cat."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So we can use pattern matching with normal classes, but with case classes, we don’t need to write those boilerplate code any more.</p><h1 id="Case-classes-extend-the-Product-class"><a href="#Case-classes-extend-the-Product-class" class="headerlink" title="Case classes extend the Product class"></a>Case classes extend the Product class</h1><p>Case classes extend the <code>Product</code> class, so it has some methods inherited from it, like <code>productArity</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, address: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>, <span class="string">"Earth"</span>)</span><br><span class="line">    println(person.productArity) <span class="comment">// 2, the size of the product, i.e. the number of arguments</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Other-Interesting-stuff"><a href="#Other-Interesting-stuff" class="headerlink" title="Other Interesting stuff"></a>Other Interesting stuff</h1><p>Case classes also have other interesting stuff, e.g. we can copy a case class by calling <code>copy</code> on it.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, address: <span class="type">String</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">object</span> <span class="title">CaseClassTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>, <span class="string">"Earth"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> copiedPerson = person.copy()</span><br><span class="line">    println(copiedPerson) <span class="comment">// Person(John,Earth)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> copiedPersonWithModifiedName = person.copy(<span class="string">"Johnson"</span>)</span><br><span class="line">    println(copiedPersonWithModifiedName) <span class="comment">// Person(Johnson,Earth)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I think I’ve covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-a-case-class-like&quot;&gt;&lt;a href=&quot;#What-is-a-case-class-like&quot; class=&quot;headerlink&quot; title=&quot;What is a case class like&quot;&gt;&lt;/a&gt;What is a c
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="Scala" scheme="https://searene.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Some Linux Commands</title>
    <link href="https://searene.github.io/2017/10/05/Some-Linux_Commands/"/>
    <id>https://searene.github.io/2017/10/05/Some-Linux_Commands/</id>
    <published>2017-10-05T00:37:42.000Z</published>
    <updated>2017-10-05T03:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title=":-"></a>:-</h1><p>Take <code>${val1:-val2}</code> for example, if <code>val1</code> is unset or null, return <code>val2</code>, otherwise return <code>val1</code>.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">default=<span class="string">"default"</span></span><br><span class="line">preset=<span class="string">"preset"</span></span><br><span class="line">value=<span class="string">"This is <span class="variable">$&#123;preset:-"$default"&#125;</span> value"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span>  <span class="comment"># This is preset value</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">default=<span class="string">"default"</span></span><br><span class="line">value=<span class="string">"This is <span class="variable">$&#123;preset:-"$default"&#125;</span> value"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$value</span>  <span class="comment"># This is default value</span></span><br></pre></td></tr></table></figure><h1 id="set-a"><a href="#set-a" class="headerlink" title="set -a"></a>set -a</h1><p>Definition from the <a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin" target="_blank" rel="noopener">Bash Manual</a></p><blockquote><p><code>-a</code></p><p>Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.</p></blockquote><p>Honestly I haven’t fully comprehended the definition, but we can set up an example to see what it does.</p><ol><li><p>Create <code>foo.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -a</span><br><span class="line">. <span class="string">"./bar.sh"</span></span><br><span class="line"><span class="built_in">set</span> +a</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"a=<span class="variable">$a</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"b=<span class="variable">$b</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"c=<span class="variable">$c</span>"</span></span><br></pre></td></tr></table></figure></li><li><p>Create <code>bar.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=3</span><br></pre></td></tr></table></figure></li><li><p>Set executable permission</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x foo.sh</span><br><span class="line">chmod +x bar.sh</span><br></pre></td></tr></table></figure></li><li><p>Source <code>foo.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ./foo.sh</span><br></pre></td></tr></table></figure></li><li><p>Result</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=1</span><br><span class="line">b=2</span><br><span class="line">c=3</span><br></pre></td></tr></table></figure><p>As you can see, we can access all the variables defined in <code>bar.sh</code> in <code>foo.sh</code>, just as if they are marked as <code>export</code>. If we didn’t use <code>set -a</code>, the result would be</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=</span><br><span class="line">b=</span><br><span class="line">c=</span><br></pre></td></tr></table></figure></li><li><p>We can access it directly in the terminal too, they are exported all the way to the top bash environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line">1</span><br><span class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$b</span></span><br><span class="line">2</span><br><span class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$c</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure></li></ol><h1 id="Bash-Regular-Expressions"><a href="#Bash-Regular-Expressions" class="headerlink" title="Bash Regular Expressions"></a>Bash Regular Expressions</h1><p>We can use regular expressions with the help of <code>=~</code>, here is an example.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">foo=1</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$foo</span> =~ [[:digit:]]+$ ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> number</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number</span><br></pre></td></tr></table></figure><p>Notice that you cannot use <code>\d</code> or <code>\\d</code> to replace <code>[[:digit:]]</code>, because <code>\d</code> is PCRE, while it uses POSIX regex here, which doesn’t recognize <code>\d</code>. If you think <code>[[:digit:]]</code> is too long, you can use <code>[0-9]</code> to replace it, which has the same effect.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">foo=1</span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$foo</span> =~ [0-9]+$ ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> number</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;:-&quot;&gt;&lt;/a&gt;:-&lt;/h1&gt;&lt;p&gt;Take &lt;code&gt;${val1:-val2}&lt;/code&gt; for example, if &lt;code&gt;val1&lt;/code&gt; is unset or
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="linux" scheme="https://searene.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>newInstance in Java</title>
    <link href="https://searene.github.io/2017/10/03/newInstance-in-Java/"/>
    <id>https://searene.github.io/2017/10/03/newInstance-in-Java/</id>
    <published>2017-10-03T09:03:53.000Z</published>
    <updated>2017-10-03T09:05:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>newInstance</code> is used to instantiate an instance of a class dynamically. Here is an example written in Scala.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s"print something"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> testClass = <span class="type">Class</span>.forName(<span class="string">"Printer"</span>).newInstance().asInstanceOf[<span class="type">Printer</span>]</span><br><span class="line">    testClass.print()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print something</span><br></pre></td></tr></table></figure><p>By the way, <code>asInstanceOf[Printer]</code> is used for casting in Scala, it’s just like <code>(Printer) Class.forName(&quot;Printer&quot;).newInstance()</code> in Java.</p><p>What if we want to call Printer’s constructor with arguments? We can use <code>getDeclaredConstructor</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span>(<span class="params">val name: <span class="type">String</span>, val description: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">s"product name: <span class="subst">$name</span>, description: <span class="subst">$description</span>"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> testClass = <span class="type">Class</span>.forName(<span class="string">"Printer"</span>)</span><br><span class="line">      .getDeclaredConstructor(classOf[<span class="type">String</span>], classOf[<span class="type">String</span>])</span><br><span class="line">      .newInstance(<span class="string">"kindle"</span>, <span class="string">"used for reading"</span>)</span><br><span class="line">      .asInstanceOf[<span class="type">Printer</span>]</span><br><span class="line">    testClass.print()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">product name: kindle, description: used for reading</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;newInstance&lt;/code&gt; is us
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="Java, Scala" scheme="https://searene.github.io/tags/Java-Scala/"/>
    
  </entry>
  
  <entry>
    <title>When and how to use InheritableThreadLocal</title>
    <link href="https://searene.github.io/2017/10/02/When-and-how-to-use-InheritableThreadLocal/"/>
    <id>https://searene.github.io/2017/10/02/When-and-how-to-use-InheritableThreadLocal/</id>
    <published>2017-10-02T14:02:51.000Z</published>
    <updated>2017-10-02T14:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I was reading Spark’s source code, and found <code>InheritableThreadLocal</code> in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>Before diving into <code>InheritableThreadLocal</code>, we need to understand <code>ThreadLocal</code>. <code>ThreadLocal</code> is used to create separate variables for each thread, as follows.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">Double</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    number.set(<span class="type">Math</span>.random())</span><br><span class="line">    println(number.get())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line"></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.5157676349493098</span><br><span class="line">0.37557496403907353</span><br></pre></td></tr></table></figure><p>The above code is written in Scala.</p><p>As you can see, <code>thread1</code> and <code>thread2</code> have different values for <code>number</code>, because we use <code>ThreadLocal</code> here, so the result is different.</p><h1 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h1><p>Now we decided to start a child thread within thread1/thread2, obtain the value of <code>number</code> and print it, can we achieve it?</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">Double</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    number.set(<span class="type">Math</span>.random())</span><br><span class="line">    println(number.get())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(number.get())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    childThread.start()</span><br><span class="line">    childThread.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line"></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.5475226099407153</span><br><span class="line">0.8376546404552231</span><br><span class="line">null</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>No, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use <code>InheritableThreadLocal</code>!</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">InheritableThreadLocal</span>[<span class="type">Double</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    number.set(<span class="type">Math</span>.random())</span><br><span class="line">    println(number.get())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(number.get())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    childThread.start()</span><br><span class="line">    childThread.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line"></span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br><span class="line">    thread1.join()</span><br><span class="line">    thread2.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.006425375134899158</span><br><span class="line">0.021932306310074368</span><br><span class="line">0.006425375134899158</span><br><span class="line">0.021932306310074368</span><br></pre></td></tr></table></figure><p>Notice that we cannot set the value of InheritableThreadLocal in the child thread.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">InheritableThreadLocal</span>[<span class="type">Double</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    number.set(<span class="type">Math</span>.random())</span><br><span class="line">    println(number.get())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(number.get())</span><br><span class="line">        number.set(<span class="number">0.1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    childThread.start()</span><br><span class="line">    childThread.join()</span><br><span class="line">    println(number.get())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></span><br><span class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread1.join()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.7413853012849937</span><br><span class="line">0.7413853012849937</span><br><span class="line">0.7413853012849937</span><br></pre></td></tr></table></figure><p>As you can see, setting the value of <code>InheritableThreadLocal</code> doesn’t have any effect.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I was reading Spark’s source code, and found &lt;code&gt;InheritableThreadLocal&lt;/code&gt; in it. Little information could be found online ab
      
    
    </summary>
    
      <category term="Coding" scheme="https://searene.github.io/categories/Coding/"/>
    
    
      <category term="multi-thread, java, scala" scheme="https://searene.github.io/tags/multi-thread-java-scala/"/>
    
  </entry>
  
</feed>
