<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Searene</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://searene.me/"/>
  <updated>2018-04-07T03:11:28.155Z</updated>
  <id>http://searene.me/</id>
  
  <author>
    <name>Searene</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Went to Qiandao Lake</title>
    <link href="http://searene.me/2018/04/07/Went-to-Qiandao-Lake/"/>
    <id>http://searene.me/2018/04/07/Went-to-Qiandao-Lake/</id>
    <published>2018-04-07T02:48:09.000Z</published>
    <updated>2018-04-07T03:11:28.155Z</updated>
    
    <content type="html"><![CDATA[<p>Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.</p><p>Qiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.</p><p>When the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.</p><p><img src="/images/IMG_20180406_084153.jpg" alt=""></p><p>There were even bigger ones, which looked like a building.</p><p><img src="/images/IMG_20180406_123639.jpg" alt=""></p><p>I found that the scenery was not bad, maybe slightly better than I thought. This is small island.</p><p><img src="/images/IMG_20180406_090110.jpg" alt=""></p><p><img src="/images/IMG_20180406_094127.jpg" alt=""></p><p><img src="/images/IMG_20180406_095808.jpg" alt=""></p><p>On our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn’t finish dealing with the accident until 8 o’clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn’t need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.</p><p>Then we drove to my company and had a supper around it, it was about 9 o’clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao L
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Go to KTV alone</title>
    <link href="http://searene.me/2018/04/03/Go-to-KTV-alone/"/>
    <id>http://searene.me/2018/04/03/Go-to-KTV-alone/</id>
    <published>2018-04-02T23:10:10.000Z</published>
    <updated>2018-04-02T23:35:32.163Z</updated>
    
    <content type="html"><![CDATA[<p>I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.</p><p>Well, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn’t care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it’s obviously for lovers, yet I’m all alone, whatever.</p><p>Then I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn’t give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don’t care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don’t have a good throat, you won’t be able to be a good singer, period.</p><p>Anyway, it’s just an experience. Although I’m not able to be a singer, it may not be a bad thing. I just need to know it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself 
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>live a quite life</title>
    <link href="http://searene.me/2018/04/01/live-a-quite-life/"/>
    <id>http://searene.me/2018/04/01/live-a-quite-life/</id>
    <published>2018-04-01T01:50:26.000Z</published>
    <updated>2018-04-01T02:25:06.967Z</updated>
    
    <content type="html"><![CDATA[<p>It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That’s all. I’m not saying it’s wrong. Actually it couldn’t be more correct, especially when living in this world is pretty hard. But I’m not attractive to her any more, I don’t know why. Maybe that’s who I am.</p><p>I found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don’t know why. Maybe it’s just because she’s quite.</p><p>I often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It’s not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it’s a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don’t know where to go. Now I understand why depressed people tend to be insomnia, it’s caused by despair. You cannot go to sleep when tomorrow also sucks.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She w
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>The meaning of life</title>
    <link href="http://searene.me/2018/03/05/The-meaning-of-life/"/>
    <id>http://searene.me/2018/03/05/The-meaning-of-life/</id>
    <published>2018-03-05T10:53:53.000Z</published>
    <updated>2018-03-06T00:00:48.819Z</updated>
    
    <content type="html"><![CDATA[<p>I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, <em>The Meaning Of Life</em>.</p><p>The question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that <em>Life had no meaning at all</em>.</p><p>I guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:</p><ol><li>We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.</li><li>Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.</li></ol><p>I learned a word <em>nihilism</em> when I was learning English, the definition of this word is as follows(From Longman DOCE).</p><blockquote><p>the belief that nothing has any meaning or value</p></blockquote><p>Now that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!</p><p>I think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that’s why some people choose to commit suicide in the end, there’s just no hope in their lives.</p><p>We have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what’s the answer?</p><p>This is a hard question, but in my humble option, the answer is <em>no</em>, we should not adopt it.</p><p>The reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don’t adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.</p><p>But maybe you have noticed, I only described the outcome of our choice, I didn’t mention the answer of our ultimate question, what’s the meaning of our lives?</p><p>Before trying to get the answer, let’s just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?</p><p>No, the only thing you would question is, why you are mortal? It’s obvious that you want to live forever in this wonderful world.</p><p>So you see, it’s not about the question, it’s about why we would ask this question, there maybe two reasons.</p><ol><li>This world is horrible.</li><li>We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.</li></ol><p>About the first one, we cannot change this world, whether it’s good, horrible, the truth is, it already exists and there’s nothing we can do to change it.</p><p>So it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That’s the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn’t exist in your head any more.</p><p>But it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others’ lives, which may not be so bad otherwise. Think about it, it’s not an option.</p><p>So we are back to the second point again. We are suffering, is there a solution?</p><p>In most cases, yes, just do everything you can to make your life better.</p><p>Don’t have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.</p><p>In fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don’t have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor… God has a thousand ways to make your life miserable and you cannot even change it, what should you do?</p><p>I want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God’s intention over and over again. But finally, he found the purpose of his life, which is <em>to be an inspiration, to help others live a better life</em>, because if he can do it, it’s obvious that most people should be able to do it.</p><p><img src="/images/nick.jpg" alt="Nick"></p><p>So, as you can see, maybe you haven’t tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.</p><p>But what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That’s exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don’t have anything to show for in your life. What should you do? Maybe lower your goals is one option.</p><p>I went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don’t try to pursue the useless in your life, and only then will you find your purpose.</p><p>I agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that’s not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.</p><p>Still, I’m struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a questio
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
      <category term="life" scheme="http://searene.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>We are either young or old, never something in between</title>
    <link href="http://searene.me/2018/01/20/We-are-either-young-or-old-never-something-in-between/"/>
    <id>http://searene.me/2018/01/20/We-are-either-young-or-old-never-something-in-between/</id>
    <published>2018-01-20T07:55:01.000Z</published>
    <updated>2018-01-20T08:42:01.727Z</updated>
    
    <content type="html"><![CDATA[<p>Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.</p><p>I remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.</p><p>Well, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.</p><p>I once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It’s true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn’t notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.</p><p>I miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It’s not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn’t getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don’t know what to do with my money, I just want to go back to the past, when I don’t have money but I’m still young, when everything is possible.</p><p><img src="/images/128910133_14610369084721n.jpg" alt="垫底辣妹"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the mo
      
    
    </summary>
    
      <category term="Journey" scheme="http://searene.me/categories/Journey/"/>
    
    
  </entry>
  
  <entry>
    <title>Write Machine Learning Algorithms From Scratch: Random Forest</title>
    <link href="http://searene.me/2017/12/23/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest/"/>
    <id>http://searene.me/2017/12/23/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest/</id>
    <published>2017-12-23T02:14:33.000Z</published>
    <updated>2018-01-09T15:24:17.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Random Forest is a supervised classification algorithm, it can classify data according to various given features.</p><p>Assuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.</p><table><thead><tr><th>Person</th><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th><th>Gender</th></tr></thead><tbody><tr><td>A</td><td>50</td><td>1.62</td><td>18</td><td>Female</td></tr><tr><td>B</td><td>70</td><td>1.81</td><td>16</td><td>Male</td></tr><tr><td>C</td><td>60</td><td>1.72</td><td>15</td><td>Female</td></tr><tr><td>D</td><td>70</td><td>1.71</td><td>19</td><td>Male</td></tr><tr><td>E</td><td>52</td><td>1.69</td><td>17</td><td>Female</td></tr></tbody></table><p>We can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person’s gender using the trained model.</p><table><thead><tr><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th></tr></thead><tbody><tr><td>60</td><td>1.62</td><td>16</td></tr></tbody></table><p>Notice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won’t dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.</p><p>All the code mentioned in the post is available for download. So please refer to the code if there’s anything unclear in the post.</p><h1 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h1><p>Let’s first run the code that we will write, so we could know what it’s like.</p><ol><li><p>Install Python3</p></li><li><p>Download code</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class="built_in">cd</span> demos/RandomForest</div></pre></td></tr></table></figure></li><li><p>Download Dependencies</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install numpy pandas</div></pre></td></tr></table></figure></li><li><p>Execution</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">python evaluate_random_forest.py</div><div class="line">Average cross validation accuracy <span class="keyword">for</span> 1 trees: 0.6887700534759359</div><div class="line">Test accuracy <span class="keyword">for</span> 1 trees: 0.6190476190476191</div><div class="line">Average cross validation accuracy <span class="keyword">for</span> 3 trees: 0.6898395721925135</div><div class="line">Test accuracy <span class="keyword">for</span> 3 trees: 0.8571428571428571</div><div class="line">Average cross validation accuracy <span class="keyword">for</span> 10 trees: 0.6983957219251338</div><div class="line">Test accuracy <span class="keyword">for</span> 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure></li></ol><p>So you can see that, we get the highest accuracy with 3 trees, which is about 85%.</p><h1 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h1><p>Random Forest is rather complex, so let’s use an example.</p><table><thead><tr><th>Person</th><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th><th>Gender</th></tr></thead><tbody><tr><td>A</td><td>50</td><td>1.62</td><td>18</td><td>Female</td></tr><tr><td>B</td><td>70</td><td>1.81</td><td>16</td><td>Male</td></tr><tr><td>C</td><td>60</td><td>1.72</td><td>15</td><td>Female</td></tr><tr><td>D</td><td>70</td><td>1.71</td><td>19</td><td>Male</td></tr><tr><td>E</td><td>52</td><td>1.69</td><td>17</td><td>Female</td></tr></tbody></table><p>We mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.</p><ol><li><p>Based on D’s height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don’t think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">     A, B, C, D, E</div><div class="line">    /             \</div><div class="line">   /               \</div><div class="line">A, D, E           B, C</div></pre></td></tr></table></figure></li><li><p>For group <code>A, D, E</code>, based on A’s 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group <code>B, C</code>. Based on C’s height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">       A, B, C, D, E</div><div class="line">      /             \</div><div class="line">     /               \</div><div class="line">   B, C            A, D, E</div><div class="line">  /    \          /      \</div><div class="line"> /      \        /        \</div><div class="line">C        B     A, E        D</div></pre></td></tr></table></figure></li><li><p>Now only group <code>A, E</code> could be further split. So let’s base on A’s weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">          A, B, C, D, E</div><div class="line">         /             \</div><div class="line">        /               \</div><div class="line">      B, C            A, D, E</div><div class="line">     /    \          /      \</div><div class="line">    /      \        /        \</div><div class="line">C(F)       B(M)   A, E       D(M)</div><div class="line">                  /   \</div><div class="line">                 /     \</div><div class="line">               A(F)   E(M)</div></pre></td></tr></table></figure><p>That’s it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person’s gender:</p></li></ol><table><thead><tr><th>Weight(kg)</th><th>Height(meter)</th><th>100m-race time(second)</th></tr></thead><tbody><tr><td>60</td><td>1.62</td><td>16</td></tr></tbody></table><p>   Just like training, this person’s height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group <code>B, C</code> in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is <code>Female</code>. This is the whole process of prediction.</p><h1 id="The-Principle-To-Split-A-Tree-Into-Two-Groups"><a href="#The-Principle-To-Split-A-Tree-Into-Two-Groups" class="headerlink" title="The Principle To Split A Tree Into Two Groups"></a>The Principle To Split A Tree Into Two Groups</h1><p>   In the above example, we first split the whole data into two groups according to D’s height, then continue to split them according to D’s height, A’s weight, etc. What’s going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it’s true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A’s weight, we will get two groups of data: <code>A</code> and <code>B, C, D, E</code>. Let’s call them group1 and group2 respectively, then we can calculate gini index according to the following equation.</p>   <div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\times$ (the number of people in group2 / the total number of people in both groups)</div><p>   So the gini index should be calculated as follows if we split the data based on A’s weight.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \times 0.8 = 0.4<br>$$</p><p>   We can also split the data based on A’s height, to get another gini index.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \times 0.8 = 0.4<br>$$<br>We can also split based on A’s 100m-race time, B’s weight, B’s height, …, E’s 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D’s weight if we got the smallest gini index based on D’s weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it’s more about the math rather than the implementation.</p><p>The code to calculate gini index is as follows.</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gini_index</span><span class="params">(left, right, categories)</span>:</span></div><div class="line">    gini_index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> left, right:</div><div class="line">        <span class="keyword">if</span> len(group) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        score = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categories:</div><div class="line">            p = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> group].count(category) / len(group)</div><div class="line">            score += p * p</div><div class="line">        gini_index += (<span class="number">1</span> - score) * (len(group) / len(left + right))</div><div class="line">    <span class="keyword">return</span> gini_index</div></pre></td></tr></table></figure><p>   We use the above piece of code in this way:</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">A = [<span class="number">50</span>, <span class="number">1.62</span>, <span class="number">18</span>, <span class="string">'Female'</span>]</div><div class="line">B = [<span class="number">70</span>, <span class="number">1.81</span>, <span class="number">16</span>, <span class="string">'Male'</span>]</div><div class="line">C = [<span class="number">60</span>, <span class="number">1.72</span>, <span class="number">15</span>, <span class="string">'Female'</span>]</div><div class="line">D = [<span class="number">70</span>, <span class="number">1.71</span>, <span class="number">19</span>, <span class="string">'Male'</span>]</div><div class="line">E = [<span class="number">52</span>, <span class="number">1.69</span>, <span class="number">17</span>, <span class="string">'Female'</span>]</div><div class="line">left = [A]</div><div class="line">right = [B, C, D, E]</div><div class="line">gini_index = get_gini_index(left, right, [<span class="string">'Male'</span>, <span class="string">'Female'</span>])</div><div class="line">print(gini_index) <span class="comment"># 0.4</span></div></pre></td></tr></table></figure><h1 id="Use-multiple-trees-to-boost-the-accuracy"><a href="#Use-multiple-trees-to-boost-the-accuracy" class="headerlink" title="Use multiple trees to boost the accuracy"></a>Use multiple trees to boost the accuracy</h1><p>You may wonder why it’s called the random forest when we only used one tree? Good question! In fact, we shouldn’t only use one tree. The correct process is as follows.</p><ol><li>Choose 90% of the data randomly for training.</li><li>Train those data, i.e. the process of building a tree shown above.</li><li>Use this tree to predict, get the prediction <code>x</code>.</li><li>Repeat the above three steps, build another tree, get another prediction <code>y</code>.</li><li>Repeat the first three steps again, get another prediction <code>z</code>.</li><li>Choose the one that appears the most in <code>x, y, z</code>, which should be our final prediction, return it.</li></ol><p>So you should know why it’s call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.</p><p>The purpose of building multiple trees is to avoid overfitting. From Wikipedia:</p><blockquote><p>In statistics, <strong>overfitting</strong> is “the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably”.</p></blockquote><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>Now that we know how it works, it’s time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let’s review them together.</p><ol><li>min_size: when the number of data in some node is less than <code>min_size</code>, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.</li><li>max_depth: The maximum depth of a tree, further splitting is not allowed when <code>max_depth</code> is exceeded, the value of the node is determined by the category that appears the most in the group.</li><li>n_features: The number of features chosen to build the current tree. In case if you don’t know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose <code>n_features</code> features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.</li></ol><p>Code to implement random forest is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></div><div class="line"></div><div class="line">        <span class="comment"># all the data that is held by this node</span></div><div class="line">        self.data = data</div><div class="line"></div><div class="line">        <span class="comment"># left child node</span></div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment"># right child node</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment"># category if the current node is a leaf node</span></div><div class="line">        self.category = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="comment"># a tuple: (row, column), representing the point where we split the data</span></div><div class="line">        <span class="comment"># into the left/right node</span></div><div class="line">        self.split_point = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate)</span>:</span></div><div class="line">    trees = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_trees):</div><div class="line">        random.shuffle(train_data)</div><div class="line">        n_samples = int(len(train_data) * n_sample_rate)</div><div class="line">        tree = build_tree(train_data[: n_samples], <span class="number">1</span>, max_depth, min_size, n_features)</div><div class="line">        trees.append(tree)</div><div class="line">    <span class="keyword">return</span> trees</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_with_single_tree</span><span class="params">(tree, row)</span>:</span></div><div class="line">    <span class="keyword">if</span> tree.category <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> tree.category</div><div class="line">    x, y = tree.split_point</div><div class="line">    split_value = tree.data[x][y]</div><div class="line">    <span class="keyword">if</span> row[y] &lt;= split_value:</div><div class="line">        <span class="keyword">return</span> predict_with_single_tree(tree.left, row)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> predict_with_single_tree(tree.right, row)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(trees, row)</span>:</span></div><div class="line">    prediction = []</div><div class="line">    <span class="keyword">for</span> tree <span class="keyword">in</span> trees:</div><div class="line">        prediction.append(predict_with_single_tree(tree, row))</div><div class="line">    <span class="keyword">return</span> max(set(prediction), key=prediction.count)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_most_common_category</span><span class="params">(data)</span>:</span></div><div class="line">    categories = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> data]</div><div class="line">    <span class="keyword">return</span> max(set(categories), key=categories.count)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_tree</span><span class="params">(train_data, depth, max_depth, min_size, n_features)</span>:</span></div><div class="line">    root = Node(train_data)</div><div class="line">    x, y = get_split_point(train_data, n_features)</div><div class="line">    left_group, right_group = split(train_data, x, y)</div><div class="line">    <span class="keyword">if</span> len(left_group) == <span class="number">0</span> <span class="keyword">or</span> len(right_group) == <span class="number">0</span> <span class="keyword">or</span> depth &gt;= max_depth:</div><div class="line">        root.category = get_most_common_category(left_group + right_group)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        root.split_point = (x, y)</div><div class="line">        <span class="keyword">if</span> len(left_group) &lt; min_size:</div><div class="line">            root.left = Node(left_group)</div><div class="line">            root.left.category = get_most_common_category(left_group)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            root.left = build_tree(left_group, depth + <span class="number">1</span>, max_depth, min_size, n_features)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> len(right_group) &lt; min_size:</div><div class="line">            root.right = Node(right_group)</div><div class="line">            root.right.category = get_most_common_category(right_group)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            root.right = build_tree(right_group, depth + <span class="number">1</span>, max_depth, min_size, n_features)</div><div class="line">    <span class="keyword">return</span> root</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_features</span><span class="params">(n_selected_features, n_total_features)</span>:</span></div><div class="line">    features = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n_total_features)]</div><div class="line">    random.shuffle(features)</div><div class="line">    <span class="keyword">return</span> features[:n_selected_features]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_categories</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">return</span> set([row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> data])</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_split_point</span><span class="params">(data, n_features)</span>:</span></div><div class="line">    n_total_features = len(data[<span class="number">0</span>]) - <span class="number">1</span></div><div class="line">    features = get_features(n_features, n_total_features)</div><div class="line">    categories = get_categories(data)</div><div class="line">    x, y, gini_index = <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)):</div><div class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> features:</div><div class="line">            left, right = split(data, index, feature)</div><div class="line">            current_gini_index = get_gini_index(left, right, categories)</div><div class="line">            <span class="keyword">if</span> gini_index <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> current_gini_index &lt; gini_index:</div><div class="line">                x, y, gini_index = index, feature, current_gini_index</div><div class="line">    <span class="keyword">return</span> x, y</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gini_index</span><span class="params">(left, right, categories)</span>:</span></div><div class="line">    gini_index = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> left, right:</div><div class="line">        <span class="keyword">if</span> len(group) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        score = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> category <span class="keyword">in</span> categories:</div><div class="line">            p = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> group].count(category) / len(group)</div><div class="line">            score += p * p</div><div class="line">        gini_index += (<span class="number">1</span> - score) * (len(group) / len(left + right))</div><div class="line">    <span class="keyword">return</span> gini_index</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(data, x, y)</span>:</span></div><div class="line">    split_value = data[x][y]</div><div class="line">    left, right = [], []</div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data:</div><div class="line">        <span class="keyword">if</span> row[y] &lt;= split_value:</div><div class="line">            left.append(row)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            right.append(row)</div><div class="line">    <span class="keyword">return</span> left, right</div></pre></td></tr></table></figure><p>So how to use this piece of code? Let’s take <a href="https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29" target="_blank" rel="external">Sonar</a>, which is real-life data as an example(You can have a glimpse of its contents in <a href="https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv" target="_blank" rel="external">here</a>). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let’s load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.</p><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</div><div class="line"></div><div class="line"><span class="keyword">from</span> random_forest <span class="keyword">import</span> build_model, predict</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrossValidationSplitter</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, k_fold)</span>:</span></div><div class="line">        self.data = data</div><div class="line">        self.k_fold = k_fold</div><div class="line">        self.n_iteration = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.n_iteration &gt;= self.k_fold:</div><div class="line">            <span class="keyword">raise</span> StopIteration</div><div class="line">        self.n_iteration += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> self.__load_data()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__load_data</span><span class="params">(self)</span>:</span></div><div class="line">        n_train_data = (<span class="number">1</span> / self.k_fold) * len(self.data)</div><div class="line">        data_copy = self.data[:]</div><div class="line">        train_data = []</div><div class="line">        <span class="keyword">while</span> len(train_data) &lt; n_train_data:</div><div class="line">            train_data.append(self.__pop_random_row(data_copy))</div><div class="line">        test_data = data_copy</div><div class="line">        <span class="keyword">return</span> train_data, test_data</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pop_random_row</span><span class="params">(self, data)</span>:</span></div><div class="line">        random.shuffle(data)</div><div class="line">        <span class="keyword">return</span> data[<span class="number">0</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_data</span><span class="params">(data, rate)</span>:</span></div><div class="line">    random.shuffle(data)</div><div class="line">    n_train_data = int(len(data) * rate)</div><div class="line">    <span class="keyword">return</span> data[: n_train_data], data[n_train_data:]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_accuracy</span><span class="params">(model, validate_data)</span>:</span></div><div class="line">    n_total = <span class="number">0</span></div><div class="line">    n_correct = <span class="number">0</span></div><div class="line">    predicted_categories = [predict(model, row[:<span class="number">-1</span>]) <span class="keyword">for</span> row <span class="keyword">in</span> validate_data]</div><div class="line">    correct_categories = [row[<span class="number">-1</span>] <span class="keyword">for</span> row <span class="keyword">in</span> validate_data]</div><div class="line">    <span class="keyword">for</span> predicted_category, correct_category <span class="keyword">in</span> zip(predicted_categories, correct_categories):</div><div class="line">        n_total += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> predicted_category == correct_category:</div><div class="line">            n_correct += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n_correct / n_total</div><div class="line"></div><div class="line"></div><div class="line">df = pd.read_csv(<span class="string">'resources/sonar.all-data.csv'</span>, header=<span class="keyword">None</span>)</div><div class="line">data = df.values.tolist()</div><div class="line">train_data_all, test_data = split_data(data, <span class="number">0.9</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> n_tree <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>]:</div><div class="line">    accuracies = []</div><div class="line">    cross_validation_splitter = CrossValidationSplitter(train_data_all, <span class="number">5</span>)</div><div class="line">    model = <span class="keyword">None</span></div><div class="line">    <span class="keyword">for</span> train_data, validate_data <span class="keyword">in</span> cross_validation_splitter:</div><div class="line">        n_features = int(sqrt(len(train_data[<span class="number">0</span>]) - <span class="number">1</span>))</div><div class="line">        model = build_model(</div><div class="line">            train_data=train_data,</div><div class="line">            n_trees=n_tree,</div><div class="line">            max_depth=<span class="number">5</span>,</div><div class="line">            min_size=<span class="number">1</span>,</div><div class="line">            n_features=n_features,</div><div class="line">            n_sample_rate=<span class="number">0.9</span></div><div class="line">        )</div><div class="line">        accuracies.append(calculate_accuracy(model, validate_data))</div><div class="line">    print(<span class="string">"Average cross validation accuracy for &#123;&#125; trees: &#123;&#125;"</span>.format(n_tree, np.mean(accuracies)))</div><div class="line">    print(<span class="string">"Test accuracy for &#123;&#125; trees: &#123;&#125;"</span>.format(n_tree, calculate_accuracy(model, test_data)))</div></pre></td></tr></table></figure><p>The result is as follows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Average cross validation accuracy for 1 trees: 0.6887700534759359</div><div class="line">Test accuracy for 1 trees: 0.6190476190476191</div><div class="line">Average cross validation accuracy for 3 trees: 0.6898395721925135</div><div class="line">Test accuracy for 3 trees: 0.8571428571428571</div><div class="line">Average cross validation accuracy for 10 trees: 0.6983957219251338</div><div class="line">Test accuracy for 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure><p>As you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Random Forest is a supervised 
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="machine learning" scheme="http://searene.me/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>My Last Weekend At Cisco</title>
    <link href="http://searene.me/2017/12/17/My-Last-Weekend-At-Cisco/"/>
    <id>http://searene.me/2017/12/17/My-Last-Weekend-At-Cisco/</id>
    <published>2017-12-17T09:05:54.000Z</published>
    <updated>2017-12-17T09:57:20.373Z</updated>
    
    <content type="html"><![CDATA[<p>Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I’m not sure if this is the right choice, maybe there is no right choice at all.</p><p>I remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn’t sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.</p><p>It was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.</p><p>While I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I’m still living in it.</p><p>All right, besides those nonsense, it’s time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It’s also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.</p><p>I chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn’t find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.</p><p>I’m about to turn 30 in the next few years, yet I’m still lonely.</p><p>Maybe I’ve said too much, while staying at the office, all alone.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more crue
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>Use Deep Learning to Detect Programming Languages</title>
    <link href="http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/"/>
    <id>http://searene.me/2017/11/26/use-neural-networks-to-detect-programming-languages/</id>
    <published>2017-11-26T07:56:45.000Z</published>
    <updated>2017-12-09T10:10:51.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This post introduces a way to use deep learning to detect programming languages. Take the following code as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"something"</span>)</div></pre></td></tr></table></figure><p>We will get an answer <code>python</code> if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.</p><h1 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h1><p>First let’s try running the program, so we can have an intuitive perspective on what the program is about.</p><ol><li><p>Install third-party libraries</p><ul><li><p><a href="https://www.anaconda.com/download/" target="_blank" rel="external">Anaconda(Python 3.6+)</a></p></li><li><p>Gensim</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install -c anaconda gensim</div></pre></td></tr></table></figure></li><li><p>Keras</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conda install -c conda-forge keras</div></pre></td></tr></table></figure></li><li><p>Tensorflow</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install tensorflow==1.3.0</div></pre></td></tr></table></figure></li></ul></li><li><p>Download the program</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class="built_in">cd</span> demos/PLDetector-demo</div></pre></td></tr></table></figure></li><li><p>Train the model</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">python -m src.neural_network_trainer                                                  </div><div class="line">Using TensorFlow backend.                                                                                             </div><div class="line">...</div><div class="line">_________________________________________________________________</div><div class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#</span></div><div class="line">=================================================================</div><div class="line">embedding_1 (Embedding)      (None, 500, 100)          773100</div><div class="line">_________________________________________________________________</div><div class="line">conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          </div><div class="line">_________________________________________________________________                                                     </div><div class="line">max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              </div><div class="line">_________________________________________________________________                                                     </div><div class="line">flatten_1 (Flatten)          (None, 31744)             0                                                              </div><div class="line">_________________________________________________________________                                                     </div><div class="line">dense_1 (Dense)              (None, 8)                 253960                                                         </div><div class="line">=================================================================                                                     </div><div class="line">Total params: 1,091,188                                                                                               </div><div class="line">Trainable params: 318,088</div><div class="line">Non-trainable params: 773,100</div><div class="line">_________________________________________________________________</div><div class="line">INFO:root:None</div><div class="line">Epoch 1/10</div><div class="line"> - 1s - loss: 0.4304 - acc: 0.8823</div><div class="line">Epoch 2/10</div><div class="line"> - 1s - loss: 0.1357 - acc: 0.9657</div><div class="line">Epoch 3/10</div><div class="line"> - 1s - loss: 0.0706 - acc: 0.9788</div><div class="line">Epoch 4/10</div><div class="line"> - 1s - loss: 0.0392 - acc: 0.9887</div><div class="line">Epoch 5/10</div><div class="line"> - 1s - loss: 0.0266 - acc: 0.9927</div><div class="line">Epoch 6/10</div><div class="line"> - 1s - loss: 0.0203 - acc: 0.9945</div><div class="line">Epoch 7/10</div><div class="line"> - 1s - loss: 0.0169 - acc: 0.9948</div><div class="line">Epoch 8/10</div><div class="line"> - 1s - loss: 0.0145 - acc: 0.9956</div><div class="line">Epoch 9/10</div><div class="line"> - 1s - loss: 0.0131 - acc: 0.9959                                                                                    </div><div class="line">Epoch 10/10                                                                                                           </div><div class="line"> - 1s - loss: 0.0120 - acc: 0.9959                                                                                    </div><div class="line">INFO:root:Test Accuracy: 94.642857</div></pre></td></tr></table></figure><p>We will have three important files as soon as the above step is completed.</p><ul><li>resources/models/model.h5</li><li>resources/models/model.json</li><li>resources/vocab_tokenizer</li></ul><p>We will introduce the three files in detail later on.</p></li><li><p>Detection</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">python -m src.detector</div><div class="line"></div><div class="line">Using TensorFlow backend.</div><div class="line">Python</div></pre></td></tr></table></figure><p>The following python code is detected by default by <code>detector.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"something"</span>)</div></pre></td></tr></table></figure><p>Of course you can modify <code>detector.py</code> to detect other code.</p></li></ol><h1 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h1><p>Let’s first have a rough idea of the project structure. Don’t worry, it will only take 1 ~ 2 minutes.</p><ul><li><p>resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.</p><p><img src="/images/2017-11-26-163206_448x610_scrot.png" alt="train文件夹结构"></p></li><li><p>resources/code/test: the same as <code>resources/code/train</code> except that it’s used for testing accuracy instead of training.</p></li><li><code>models</code> directory &amp; <code>vocab_tokenizer</code>: stored training result</li><li>src/config.py: some constants used in the program</li><li>src/neural_network_trainer.py: code used to train the model</li><li>src/detector.py: code used to load the model and detect programming languages</li></ul><h1 id="How-It-Works"><a href="#How-It-Works" class="headerlink" title="How It Works"></a>How It Works</h1><h2 id="Construct-Vocabulary"><a href="#Construct-Vocabulary" class="headerlink" title="Construct Vocabulary"></a>Construct Vocabulary</h2><p>let’s first get our heads around the training process, aka the contents in <code>neural_network_trainer.py</code>. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.</p><p>OK, you might want to ask, why removing words that are not in the vocabulary? Wouldn’t it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don’t have word vectors to map, which means the neural network is unable to process this word.</p><p>So how do we build the vocabulary? It’s fairly easy, we just need to scan all the code in <code>resources/code/train</code> and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab</span><span class="params">(train_data_dir)</span>:</span></div><div class="line">    vocabulary = Counter()</div><div class="line">    files = get_files(train_data_dir)</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</div><div class="line">        words = load_words_from_file(f)</div><div class="line">        vocabulary.update(words)</div><div class="line"></div><div class="line">    <span class="comment"># remove rare words</span></div><div class="line">    min_count = <span class="number">5</span></div><div class="line">    vocabulary = [word <span class="keyword">for</span> word, count <span class="keyword">in</span> vocabulary.items() <span class="keyword">if</span> count &gt;= min_count]</div><div class="line">    <span class="keyword">return</span> vocabulary</div></pre></td></tr></table></figure><p>Run <code>build_vocab</code> to get the vocabulary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vocab = build_vocab(config.train_data_dir)</div><div class="line">print(vocab) <span class="comment"># [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]</span></div></pre></td></tr></table></figure><p>So, as you can see, the vocabulary is just a list of words, that’s it.</p><h2 id="Build-vocab-tokenizer"><a href="#Build-vocab-tokenizer" class="headerlink" title="Build vocab_tokenizer"></a>Build vocab_tokenizer</h2><p>The next step is to build <code>vocab_tokenizer</code>. So what is <code>vocab_tokenzier</code>? It’s a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.</p><p>We use <code>Tokenizer</code> provided by <code>Keras</code> to build <code>vocab_tokenizer</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab_tokenizer_from_set</span><span class="params">(vocab)</span>:</span></div><div class="line">    vocab_tokenizer = Tokenizer(lower=<span class="keyword">False</span>, filters=<span class="string">""</span>)</div><div class="line">    vocab_tokenizer.fit_on_texts(vocab)</div><div class="line">    <span class="keyword">return</span> vocab_tokenizer</div></pre></td></tr></table></figure><p>Then we save this <code>vocab_tokenizer</code> as a file, to be used later.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_vocab_tokenizer</span><span class="params">(vocab_tokenzier_location, vocab_tokenizer)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(vocab_tokenzier_location, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)</div></pre></td></tr></table></figure><h2 id="Build-Word-Vectors"><a href="#Build-Word-Vectors" class="headerlink" title="Build Word Vectors"></a>Build Word Vectors</h2><p>Before diving into word vectors, we first need to know what they are.</p><p>To put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let’s take the following Java code as an example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"something"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>The <code>word2vec</code> variable we are building here is actually a dictionary, which is like this(word -&gt; word_vector).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">word2vec = &#123;</div><div class="line">    <span class="string">'public'</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>],</div><div class="line">    <span class="string">'static'</span>: [<span class="number">2</span>, <span class="number">1</span>, <span class="number">9</span>],</div><div class="line">    <span class="string">'main'</span>: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'String'</span>: [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'args'</span>: [<span class="number">1</span>, <span class="number">40</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'System'</span>: [<span class="number">20</span>, <span class="number">10</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'out'</span>: [<span class="number">3</span>, <span class="number">10</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'println'</span>: [<span class="number">1</span>, <span class="number">39</span>, <span class="number">3</span>],</div><div class="line">    <span class="string">'something'</span>: [<span class="number">1</span>, <span class="number">20</span>, <span class="number">3</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Here comes the question. Why would we build word vectors, instead of just using the number given by <code>vocab_tokenizer</code>? This is because word vectors have a very special and useful characteristic: <strong>The more close two words are, the smaller their word vectors are</strong>(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn’t matter if you don’t know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.</p><p>For example, <code>public</code> and <code>staic</code> are only seen together in Java, so the distance between their word vectors should be small. However, <code>public</code> and <code>System</code> is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.</p><p>Now that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the <code>Word2Vec</code> algorithm provided by <code>gensim</code> to achieve it. Steps are as follows.</p><ol><li>Load all the training data, extract those words which are in the vocabulary.</li><li>Map each word into its respective number by using <code>vocab_tokenizer</code>.</li><li>Put those numbers into <code>Word2Vec</code> library and obtain word vectors.</li></ol><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_word2vec</span><span class="params">(train_data_dir, vocab_tokenizer)</span>:</span></div><div class="line">    all_words = []</div><div class="line">    files = get_files(train_data_dir)</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> files:</div><div class="line">        words = load_words_from_file(f)</div><div class="line">        all_words.append([word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> is_in_vocab(word, vocab_tokenizer)])</div><div class="line">    model = Word2Vec(all_words, size=<span class="number">100</span>, window=<span class="number">5</span>, workers=<span class="number">8</span>, min_count=<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> &#123;word: model[word] <span class="keyword">for</span> word <span class="keyword">in</span> model.wv.index2word&#125;</div></pre></td></tr></table></figure><h2 id="Build-the-Neural-Network"><a href="#Build-the-Neural-Network" class="headerlink" title="Build the Neural Network"></a>Build the Neural Network</h2><p>Everything is ready, now it’s the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"something"</span>)</div></pre></td></tr></table></figure><p>Map <code>def</code>, <code>test</code>, <code>print</code> and <code>something</code> into their respective numbers, we get the input</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><p>The output of the neural network is the probability of each language.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">output = [<span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">0.04</span>, <span class="number">0.06</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.05</span>, <span class="number">0.05</span>]</div></pre></td></tr></table></figure><p>The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">all_languages = [<span class="string">"Python"</span>, <span class="string">"C"</span>, <span class="string">"Java"</span>, <span class="string">"Scala"</span>, <span class="string">"Javascript"</span>, <span class="string">"CSS"</span>, <span class="string">"C#"</span>, <span class="string">"HTML"</span>]</div></pre></td></tr></table></figure><p>So we know the above code is most likely to be written by Python, because Python has the most probability(0.5)</p><p>Now that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.</p><ol><li>Embedding Layer: it’s used to map each word into its respective word vector</li><li>Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.</li><li>Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.</li></ol><p>Key code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span><span class="params">(train_data_dir, vocab_tokenizer, word2vec)</span>:</span></div><div class="line">    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)</div><div class="line"></div><div class="line">    <span class="comment"># build the embedding layer</span></div><div class="line">    input_dim = len(vocab_tokenizer.word_index) + <span class="number">1</span></div><div class="line">    output_dim = get_word2vec_dimension(word2vec)</div><div class="line">    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)</div><div class="line"></div><div class="line">    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,</div><div class="line">                                trainable=<span class="keyword">False</span>)</div><div class="line">    model = Sequential()</div><div class="line">    model.add(embedding_layer)</div><div class="line">    model.add(Conv1D(filters=<span class="number">128</span>, kernel_size=<span class="number">5</span>, activation=<span class="string">"relu"</span>))</div><div class="line">    model.add(MaxPooling1D(pool_size=<span class="number">2</span>))</div><div class="line">    model.add(Flatten())</div><div class="line">    model.add(Dense(len(all_languages), activation=<span class="string">"sigmoid"</span>))</div><div class="line">    logging.info(model.summary())</div><div class="line">    model.compile(loss=<span class="string">'binary_crossentropy'</span>, optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</div><div class="line">    model.fit(x_train, y_train, epochs=<span class="number">10</span>, verbose=<span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> model</div></pre></td></tr></table></figure><p>All right, we built our neural network, not a trivial achievement! Then let’s write a function, which uses the neural network to detect test code, check out its accuracy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_model</span><span class="params">(test_data_dir, vocab_tokenizer, model)</span>:</span></div><div class="line">    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)</div><div class="line">    loss, acc = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</div><div class="line">    logging.info(<span class="string">'Test Accuracy: %f'</span> % (acc * <span class="number">100</span>))</div></pre></td></tr></table></figure><p>As what we have got before, the test accuracy is around 94%~95%, which is good enough. Let’s save the neural network as files, so we can load it when detecting.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(model, model_file_location, weights_file_location)</span>:</span></div><div class="line">    os.makedirs(os.path.dirname(model_file_location), exist_ok=<span class="keyword">True</span>)</div><div class="line">    <span class="keyword">with</span> open(model_file_location, <span class="string">"w"</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(model.to_json())</div><div class="line">    model.save_weights(weights_file_location)</div></pre></td></tr></table></figure><h2 id="Load-the-Neural-Network-For-Detection"><a href="#Load-the-Neural-Network-For-Detection" class="headerlink" title="Load the Neural Network For Detection"></a>Load the Neural Network For Detection</h2><p>This part is simple, we only need to load <code>vocab_tokenizer</code> and the neural network for detection. The code is as follows.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">vocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)</div><div class="line">model = load_model(config.model_file_location, config.weights_file_location)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_language</span><span class="params">(binary_list)</span>:</span></div><div class="line">    i = np.argmax(binary_list)</div><div class="line">    <span class="keyword">return</span> all_languages[i]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_neural_network_input</span><span class="params">(code)</span>:</span></div><div class="line">    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)</div><div class="line">    <span class="keyword">return</span> pad_sequences([encoded_sentence], maxlen=input_length)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect</span><span class="params">(code)</span>:</span></div><div class="line">    y_proba = model.predict(get_neural_network_input(code))</div><div class="line">    <span class="keyword">return</span> to_language(y_proba)</div></pre></td></tr></table></figure><p>Use it like this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">code = <span class="string">"""</span></div><div class="line">def test():</div><div class="line">    print("something")</div><div class="line">"""</div><div class="line">print(detect(code)) <span class="comment"># Python</span></div></pre></td></tr></table></figure><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>All in all, here are the steps to build the neural network.</p><ol><li>Build vocabulary.</li><li>Build <code>vocab_tokenizer</code> using vocabulary, which is used to convert words into numbers.</li><li>Load words into <code>Word2Vec</code> to build word vectors.</li><li>Load word vectors into the neural network as part of the input layer.</li><li>Load all the training data, extract words that are in the vocabulary, convert them into numbers using <code>vocab_tokenizer</code>, load them into the neural network for training.</li></ol><p>Three steps for detection:</p><ol><li>Extract words in the code and remove those that are not in the vocabulary.</li><li>Convert those words into number through <code>vocab_tokenizer</code>, and load them into the neural network.</li><li>Choose the language which has the most probability, which the answer we want.</li></ol><h1 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h1><p>You may have already found out that, we only saved <code>vocab_tokenizer</code> and the neural network(which lies in the model directory), why didn’t we save <code>word2vec</code> and <code>vocab</code>?</p><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><p>If you have any question, please leave it in the comment below, I’ll try to answer it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;This post introduces a way to 
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="Neural Network" scheme="http://searene.me/tags/Neural-Network/"/>
    
  </entry>
  
  <entry>
    <title>Right associativity in Scala</title>
    <link href="http://searene.me/2017/10/07/Right-associativity-in-Scala/"/>
    <id>http://searene.me/2017/10/07/Right-associativity-in-Scala/</id>
    <published>2017-10-07T05:07:50.000Z</published>
    <updated>2017-10-07T05:56:44.634Z</updated>
    
    <content type="html"><![CDATA[<p>We define two methods here, <code>++</code> and <code>++:</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>:(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ValFunctionTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> foo = <span class="keyword">new</span> <span class="type">Foo</span></div><div class="line">    foo.++(<span class="number">1</span>)</div><div class="line">    foo.++:(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Nothing special, right? Yes, for now, until we try removing the parentheses in it.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">++</span></span>:(n: <span class="type">Int</span>): <span class="type">Unit</span> = println(n + <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ValFunctionTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> foo = <span class="keyword">new</span> <span class="type">Foo</span></div><div class="line">    foo ++ <span class="number">1</span></div><div class="line">    <span class="number">1</span> ++: foo</div><div class="line">    </div><div class="line">    foo ++: <span class="number">1</span> <span class="comment">// error</span></div><div class="line">    <span class="number">1</span> ++ foo <span class="comment">// error</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>So the difference is, <code>foo</code> can only be placed on the <em>left</em> side when using <code>++</code>, and it can only be placed on <em>right</em> side when using <code>++:</code>. The latter is called <em>right associativity</em>, and <strong>methods ending with : are used in the right associativity</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We define two methods here, &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;++:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="Scala" scheme="http://searene.me/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Cast away on the moon</title>
    <link href="http://searene.me/2017/10/06/Cast-away-on-the-moon/"/>
    <id>http://searene.me/2017/10/06/Cast-away-on-the-moon/</id>
    <published>2017-10-06T02:36:40.000Z</published>
    <updated>2017-10-06T03:25:27.836Z</updated>
    
    <content type="html"><![CDATA[<p>I watched a movie these days, it’s called <em>Cast Away on the Moon</em>(or <em>金氏漂流记</em> , <em>김씨 표류기</em>).</p><p>A man was saddled with debts of more than $20,000, and he couldn’t afford to pay it off. One day he jumped off a bridge to kill himself, but he didn’t die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.</p><p>To the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.</p><p>In the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said “Hello”. The man found this bottle and the piece of paper, then he replied to the girl “How are you?” on the beach. They kept communicating with each other in this way.</p><p>Finally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.</p><p>I vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn’t want to ruin it by accepting the girl’s takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it’s achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.</p><p>That’s all, it’s a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don’t know how long it will take, or whether I can meet her at all.</p><p><img src="/images/cast-away-on-the-moon.jpg" alt="Ryeo-won Jeong"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I watched a movie these days, it’s called &lt;em&gt;Cast Away on the Moon&lt;/em&gt;(or &lt;em&gt;金氏漂流记&lt;/em&gt; , &lt;em&gt;김씨 표류기&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;A man was saddled w
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
  </entry>
  
  <entry>
    <title>The difference between a case class and a normal class in Scala</title>
    <link href="http://searene.me/2017/10/06/The-difference-between-a-case-class-and-a-normal-class-in-Scala/"/>
    <id>http://searene.me/2017/10/06/The-difference-between-a-case-class-and-a-normal-class-in-Scala/</id>
    <published>2017-10-06T01:03:48.000Z</published>
    <updated>2017-10-06T09:05:46.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-is-a-case-class-like"><a href="#What-is-a-case-class-like" class="headerlink" title="What is a case class like"></a>What is a case class like</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    println(person.toString)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Can-be-Instantiated-without-the-new-keyword"><a href="#Can-be-Instantiated-without-the-new-keyword" class="headerlink" title="Can be Instantiated without the new keyword"></a>Can be Instantiated without the new keyword</h1><p>Case classes have prebuilt companion objects with <code>apply()</code> implemented, so a case class can be instantiated without using <code>new</code>.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Both ways have the same effect</span></div><div class="line">    <span class="keyword">val</span> person1 = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    <span class="keyword">val</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Why removing the <code>new</code> keyword? Because case classes are often used to implement <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="external">algebraic data types</a>, it’s more elegant to do so without the <code>new</code> keyword.</p><h1 id="Default-equals-and-hashCode-implementation"><a href="#Default-equals-and-hashCode-implementation" class="headerlink" title="Default equals and hashCode implementation"></a>Default equals and hashCode implementation</h1><p>Case classes have default equals and hashCode implementations. Let’s pick <code>equals</code> and talk about it in this part, because it’s easier to verify.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> person1 = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    <span class="keyword">val</span> person2 = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    println(person1 == person2) <span class="comment">// true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Because Case classes have default <code>equals</code> implementation, so although <code>person1</code> and <code>person2</code> are different objects(I’m talking about their references), they are still equal because Scala only checks field values(<code>name</code> in this case) for case classes.</p><p>The result is different if we use a normal class, which compares equality by references.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> person1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    <span class="keyword">val</span> person2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    println(person1 == person2) <span class="comment">// false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h1><p>Case classes can be serialized.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">FileOutputStream</span>, <span class="type">ObjectOutputStream</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// creat an instance</span></div><div class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// serialize</span></div><div class="line">    <span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"/tmp/person"</span>))</div><div class="line">    oos.writeObject(person)</div><div class="line">    oos.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>A normal class cannot be serialized by default.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// creat an instance</span></div><div class="line">    <span class="keyword">val</span> person = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// serialize</span></div><div class="line">    <span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"/tmp/person"</span>))</div><div class="line">    oos.writeObject(person) <span class="comment">// Exception in thread "main" java.io.NotSerializableException: com.example.Person</span></div><div class="line">    oos.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Better-toString"><a href="#Better-toString" class="headerlink" title="Better toString"></a>Better toString</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">name: <span class="type">String</span></span>)</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>)</div><div class="line">    <span class="keyword">val</span> animal = <span class="keyword">new</span> <span class="type">Animal</span>(<span class="string">"Dog"</span>)</div><div class="line"></div><div class="line">    println(person.toString) <span class="comment">// Person(John)</span></div><div class="line">    println(animal.toString) <span class="comment">// com.example.Animal@5a39699c</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Pattern-Matching"><a href="#Pattern-Matching" class="headerlink" title="Pattern Matching"></a>Pattern Matching</h1><p>Case classes support pattern matching.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> animal = <span class="type">Dog</span>()</div><div class="line">    printType(animal)</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printType</span></span>(animal: <span class="type">Animal</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    animal <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Dog</span>() =&gt; println(<span class="string">"It's a dog."</span>)</div><div class="line">      <span class="keyword">case</span> <span class="type">Cat</span>() =&gt; println(<span class="string">"It's a cat."</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Can we achieve pattern matching using a normal class? Of course, just implement the <code>unapply</code> method, here is an example.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span></span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Dog</span> = <span class="keyword">new</span> <span class="type">Dog</span>()</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(arg: <span class="type">Animal</span>): <span class="type">Boolean</span> = arg.isInstanceOf[<span class="type">Dog</span>]</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Cat</span> = <span class="keyword">new</span> <span class="type">Cat</span>()</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(arg: <span class="type">Animal</span>): <span class="type">Boolean</span> = arg.isInstanceOf[<span class="type">Cat</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> animal = <span class="type">Dog</span>()</div><div class="line">    printType(animal)</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printType</span></span>(animal: <span class="type">Animal</span>): <span class="type">Unit</span> = &#123;</div><div class="line">    animal <span class="keyword">match</span> &#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Dog</span>() =&gt; println(<span class="string">"It's a dog."</span>)</div><div class="line">      <span class="keyword">case</span> <span class="type">Cat</span>() =&gt; println(<span class="string">"It's a cat."</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>So we can use pattern matching with normal classes, but with case classes, we don’t need to write those boilerplate code any more.</p><h1 id="Case-classes-extend-the-Product-class"><a href="#Case-classes-extend-the-Product-class" class="headerlink" title="Case classes extend the Product class"></a>Case classes extend the Product class</h1><p>Case classes extend the <code>Product</code> class, so it has some methods inherited from it, like <code>productArity</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, address: <span class="type">String</span></span>)</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>, <span class="string">"Earth"</span>)</div><div class="line">    println(person.productArity) <span class="comment">// 2, the size of the product, i.e. the number of arguments</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Other-Interesting-stuff"><a href="#Other-Interesting-stuff" class="headerlink" title="Other Interesting stuff"></a>Other Interesting stuff</h1><p>Case classes also have other interesting stuff, e.g. we can copy a case class by calling <code>copy</code> on it.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, address: <span class="type">String</span></span>)</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> person = <span class="type">Person</span>(<span class="string">"John"</span>, <span class="string">"Earth"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">val</span> copiedPerson = person.copy()</div><div class="line">    println(copiedPerson) <span class="comment">// Person(John,Earth)</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> copiedPersonWithModifiedName = person.copy(<span class="string">"Johnson"</span>)</div><div class="line">    println(copiedPersonWithModifiedName) <span class="comment">// Person(Johnson,Earth)</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>I think I’ve covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;What-is-a-case-class-like&quot;&gt;&lt;a href=&quot;#What-is-a-case-class-like&quot; class=&quot;headerlink&quot; title=&quot;What is a case class like&quot;&gt;&lt;/a&gt;What is a c
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="Scala" scheme="http://searene.me/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Some Linux Commands</title>
    <link href="http://searene.me/2017/10/05/Some-Linux_Commands/"/>
    <id>http://searene.me/2017/10/05/Some-Linux_Commands/</id>
    <published>2017-10-05T00:37:42.000Z</published>
    <updated>2017-10-05T03:57:24.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=":-"></a>:-</h1><p>Take <code>${val1:-val2}</code> for example, if <code>val1</code> is unset or null, return <code>val2</code>, otherwise return <code>val1</code>.</p><p>Example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">default=<span class="string">"default"</span></div><div class="line">preset=<span class="string">"preset"</span></div><div class="line">value=<span class="string">"This is <span class="variable">$&#123;preset:-"$default"&#125;</span> value"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$value</span>  <span class="comment"># This is preset value</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">default=<span class="string">"default"</span></div><div class="line">value=<span class="string">"This is <span class="variable">$&#123;preset:-"$default"&#125;</span> value"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$value</span>  <span class="comment"># This is default value</span></div></pre></td></tr></table></figure><h1 id="set-a"><a href="#set-a" class="headerlink" title="set -a"></a>set -a</h1><p>Definition from the <a href="https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin" target="_blank" rel="external">Bash Manual</a></p><blockquote><p><code>-a</code></p><p>Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.</p></blockquote><p>Honestly I haven’t fully comprehended the definition, but we can set up an example to see what it does.</p><ol><li><p>Create <code>foo.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line"><span class="built_in">set</span> <span class="_">-a</span></div><div class="line">. <span class="string">"./bar.sh"</span></div><div class="line"><span class="built_in">set</span> +a</div><div class="line"><span class="built_in">echo</span> <span class="string">"a=<span class="variable">$a</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"b=<span class="variable">$b</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"c=<span class="variable">$c</span>"</span></div></pre></td></tr></table></figure></li><li><p>Create <code>bar.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">a=1</div><div class="line">b=2</div><div class="line">c=3</div></pre></td></tr></table></figure></li><li><p>Set executable permission</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod +x foo.sh</div><div class="line">chmod +x bar.sh</div></pre></td></tr></table></figure></li><li><p>Source <code>foo.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">. ./foo.sh</div></pre></td></tr></table></figure></li><li><p>Result</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=1</div><div class="line">b=2</div><div class="line">c=3</div></pre></td></tr></table></figure><p>As you can see, we can access all the variables defined in <code>bar.sh</code> in <code>foo.sh</code>, just as if they are marked as <code>export</code>. If we didn’t use <code>set -a</code>, the result would be</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a=</div><div class="line">b=</div><div class="line">c=</div></pre></td></tr></table></figure></li><li><p>We can access it directly in the terminal too, they are exported all the way to the top bash environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$a</span></div><div class="line">1</div><div class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$b</span></div><div class="line">2</div><div class="line">➜  /tmp <span class="built_in">echo</span> <span class="variable">$c</span></div><div class="line">3</div></pre></td></tr></table></figure></li></ol><h1 id="Bash-Regular-Expressions"><a href="#Bash-Regular-Expressions" class="headerlink" title="Bash Regular Expressions"></a>Bash Regular Expressions</h1><p>We can use regular expressions with the help of <code>=~</code>, here is an example.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">foo=1</div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$foo</span> =~ [[:digit:]]+$ ]]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> number</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">number</div></pre></td></tr></table></figure><p>Notice that you cannot use <code>\d</code> or <code>\\d</code> to replace <code>[[:digit:]]</code>, because <code>\d</code> is PCRE, while it uses POSIX regex here, which doesn’t recognize <code>\d</code>. If you think <code>[[:digit:]]</code> is too long, you can use <code>[0-9]</code> to replace it, which has the same effect.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">foo=1</div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$foo</span> =~ [0-9]+$ ]]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> number</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">number</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;:-&quot;&gt;&lt;/a&gt;:-&lt;/h1&gt;&lt;p&gt;Take &lt;code&gt;${val1:-val2}&lt;/code&gt; for example, if &lt;code&gt;val1&lt;/code&gt; is unset
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="linux" scheme="http://searene.me/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>newInstance in Java</title>
    <link href="http://searene.me/2017/10/03/newInstance-in-Java/"/>
    <id>http://searene.me/2017/10/03/newInstance-in-Java/</id>
    <published>2017-10-03T09:03:53.000Z</published>
    <updated>2017-10-03T09:05:46.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>newInstance</code> is used to instantiate an instance of a class dynamically. Here is an example written in Scala.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    println(<span class="string">s"print something"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> testClass = <span class="type">Class</span>.forName(<span class="string">"Printer"</span>).newInstance().asInstanceOf[<span class="type">Printer</span>]</div><div class="line">    testClass.print()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print something</div></pre></td></tr></table></figure><p>By the way, <code>asInstanceOf[Printer]</code> is used for casting in Scala, it’s just like <code>(Printer) Class.forName(&quot;Printer&quot;).newInstance()</code> in Java.</p><p>What if we want to call Printer’s constructor with arguments? We can use <code>getDeclaredConstructor</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Printer</span>(<span class="params">val name: <span class="type">String</span>, val description: <span class="type">String</span></span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">print</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    println(<span class="string">s"product name: <span class="subst">$name</span>, description: <span class="subst">$description</span>"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaTest</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> testClass = <span class="type">Class</span>.forName(<span class="string">"Printer"</span>)</div><div class="line">      .getDeclaredConstructor(classOf[<span class="type">String</span>], classOf[<span class="type">String</span>])</div><div class="line">      .newInstance(<span class="string">"kindle"</span>, <span class="string">"used for reading"</span>)</div><div class="line">      .asInstanceOf[<span class="type">Printer</span>]</div><div class="line">    testClass.print()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">product name: kindle, description: used for reading</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;newInstance&lt;/code&gt; is us
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="Java, Scala" scheme="http://searene.me/tags/Java-Scala/"/>
    
  </entry>
  
  <entry>
    <title>When and how to use InheritableThreadLocal</title>
    <link href="http://searene.me/2017/10/02/When-and-how-to-use-InheritableThreadLocal/"/>
    <id>http://searene.me/2017/10/02/When-and-how-to-use-InheritableThreadLocal/</id>
    <published>2017-10-02T14:02:51.000Z</published>
    <updated>2017-10-02T14:29:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I was reading Spark’s source code, and found <code>InheritableThreadLocal</code> in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>Before diving into <code>InheritableThreadLocal</code>, we need to understand <code>ThreadLocal</code>. <code>ThreadLocal</code> is used to create separate variables for each thread, as follows.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">Double</span>]</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    number.set(<span class="type">Math</span>.random())</div><div class="line">    println(number.get())</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line"></div><div class="line">    thread1.start()</div><div class="line">    thread2.start()</div><div class="line"></div><div class="line">    thread1.join()</div><div class="line">    thread2.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0.5157676349493098</div><div class="line">0.37557496403907353</div></pre></td></tr></table></figure><p>The above code is written in Scala.</p><p>As you can see, <code>thread1</code> and <code>thread2</code> have different values for <code>number</code>, because we use <code>ThreadLocal</code> here, so the result is different.</p><h1 id="InheritableThreadLocal"><a href="#InheritableThreadLocal" class="headerlink" title="InheritableThreadLocal"></a>InheritableThreadLocal</h1><p>Now we decided to start a child thread within thread1/thread2, obtain the value of <code>number</code> and print it, can we achieve it?</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">ThreadLocal</span>[<span class="type">Double</span>]</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    number.set(<span class="type">Math</span>.random())</div><div class="line">    println(number.get())</div><div class="line">    </div><div class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</div><div class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">        println(number.get())</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    childThread.start()</div><div class="line">    childThread.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line"></div><div class="line">    thread1.start()</div><div class="line">    thread2.start()</div><div class="line"></div><div class="line">    thread1.join()</div><div class="line">    thread2.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0.5475226099407153</div><div class="line">0.8376546404552231</div><div class="line">null</div><div class="line">null</div></pre></td></tr></table></figure><p>No, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use <code>InheritableThreadLocal</code>!</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">InheritableThreadLocal</span>[<span class="type">Double</span>]</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    number.set(<span class="type">Math</span>.random())</div><div class="line">    println(number.get())</div><div class="line"></div><div class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</div><div class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">        println(number.get())</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    childThread.start()</div><div class="line">    childThread.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line">    <span class="keyword">val</span> thread2 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line"></div><div class="line">    thread1.start()</div><div class="line">    thread2.start()</div><div class="line"></div><div class="line">    thread1.join()</div><div class="line">    thread2.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0.006425375134899158</div><div class="line">0.021932306310074368</div><div class="line">0.006425375134899158</div><div class="line">0.021932306310074368</div></pre></td></tr></table></figure><p>Notice that we cannot set the value of InheritableThreadLocal in the child thread.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrintRunnable</span> <span class="keyword">extends</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">  <span class="keyword">val</span> number = <span class="keyword">new</span> <span class="type">InheritableThreadLocal</span>[<span class="type">Double</span>]</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">    number.set(<span class="type">Math</span>.random())</div><div class="line">    println(number.get())</div><div class="line"></div><div class="line">    <span class="keyword">val</span> childThread = <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</div><div class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</div><div class="line">        println(number.get())</div><div class="line">        number.set(<span class="number">0.1</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    childThread.start()</div><div class="line">    childThread.join()</div><div class="line">    println(number.get())</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleApp</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</div><div class="line">    <span class="keyword">val</span> printRunnable = <span class="keyword">new</span> <span class="type">PrintRunnable</span></div><div class="line">    <span class="keyword">val</span> thread1 = <span class="keyword">new</span> <span class="type">Thread</span>(printRunnable)</div><div class="line">    thread1.start()</div><div class="line">    thread1.join()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>Output</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0.7413853012849937</div><div class="line">0.7413853012849937</div><div class="line">0.7413853012849937</div></pre></td></tr></table></figure><p>As you can see, setting the value of <code>InheritableThreadLocal</code> doesn’t have any effect.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I was reading Spark’s source code, and found &lt;code&gt;InheritableThreadLocal&lt;/code&gt; in it. Little information could be found online ab
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="multi-thread, java, scala" scheme="http://searene.me/tags/multi-thread-java-scala/"/>
    
  </entry>
  
  <entry>
    <title>The difference between wait and sleep</title>
    <link href="http://searene.me/2017/09/09/The-difference-between-wait-and-sleep/"/>
    <id>http://searene.me/2017/09/09/The-difference-between-wait-and-sleep/</id>
    <published>2017-09-09T08:29:09.000Z</published>
    <updated>2017-09-09T09:01:04.210Z</updated>
    
    <content type="html"><![CDATA[<p><code>wait</code> and <code>sleep</code> can both be used to put a thread into sleep and wait for a while. So what’s the difference? To find it out, we need to figure out how to use them first.</p><h1 id="Wait"><a href="#Wait" class="headerlink" title="Wait"></a>Wait</h1><p>To use wait, you have to put <code>mon.wait()</code> and <code>mon.notify()</code> inside the <code>synchronized</code> block, where <code>mon</code> is the monitor object. <code>mon</code> is used such that only one thread can enter the <code>synchronized</code> block. It’s easier to see it with the code.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object mon = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stopWaiting = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Thread boyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (mon) &#123;</div><div class="line">                    System.out.println(<span class="string">"I'm waiting for the girl to show up"</span>);</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">while</span>(!stopWaiting) mon.wait();</div><div class="line">                        System.out.println(<span class="string">"The girl showed up, I can stop waiting now."</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread girlThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"I'm wearing make-ups, the boy need to wait for me for 5 seconds."</span>);</div><div class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line">                    System.out.println(<span class="string">"Make-up is completed, I'm going to see the boy and stop him from waiting"</span>);</div><div class="line"></div><div class="line">                    stopWaiting = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">synchronized</span> (mon) &#123;</div><div class="line">                        mon.notify();</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        boyThread.start();</div><div class="line">        girlThread.start();</div><div class="line"></div><div class="line">        boyThread.join();</div><div class="line">        girlThread.join();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"The test is completed."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I<span class="string">'m waiting for the girl to show up</span></div><div class="line">I'm wearing make-ups, the boy need to <span class="built_in">wait</span> <span class="keyword">for</span> me <span class="keyword">for</span> 5 seconds.</div><div class="line">Make-up is completed, I<span class="string">'m going to see the boy and stop him from waiting</span></div><div class="line">The girl showed up, I can stop waiting now.</div><div class="line">The test is completed.</div></pre></td></tr></table></figure><p>Here the girl needs to wear the make-up before going out to see the boy. When she finishes, <code>mon.notify()</code> is called and the boy stops waiting, and they meet in the end.</p><h1 id="Sleep"><a href="#Sleep" class="headerlink" title="Sleep"></a>Sleep</h1><p><code>sleep</code> can also be used to put a thread into sleep for a while, and you can use <code>thread.interrupt()</code> to cancel the sleep and put the thread into running. Let’s see an example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread boyThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"I'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting."</span>);</div><div class="line">                    Thread.sleep(<span class="number">5</span> * <span class="number">1000</span>);</div><div class="line">                    System.out.println(<span class="string">"The girl didn't show up, bummer."</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    System.out.println(<span class="string">"The girl showed up, great!"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread girlThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"I'm going to wear make-ups, which will take 3 seconds"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">3</span> * <span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"I'm done, going to see my boy and stop him from waiting"</span>);</div><div class="line">                boyThread.interrupt();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        boyThread.start();</div><div class="line">        girlThread.start();</div><div class="line"></div><div class="line">        boyThread.join();</div><div class="line">        girlThread.join();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"The test is completed."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I<span class="string">'m going to sleep for 5 seconds. If the girl wouldn'</span>t show up after 5 second, I<span class="string">'ll stop waiting.</span></div><div class="line">I'm going to wear make-ups, <span class="built_in">which</span> will take 3 seconds</div><div class="line">I<span class="string">'m done, going to see my boy and stop him from waiting</span></div><div class="line">The girl showed up, great!</div><div class="line">The test is completed.</div></pre></td></tr></table></figure><p>The girl takes 3 seconds to wear her make-up, and when it’s done, she tells the boy to stop sleeping by calling <code>boyThread.interrupt()</code>, the boy stops sleeping and they meet in the end.</p><h1 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h1><p>So what’s the difference?</p><ol><li><code>wait</code> should be used in a <code>synchronized</code> block, while <code>sleep</code> doesn’t need to.</li><li><code>wait</code> belongs to <code>java.lang.Object</code> and is an instance method, while <code>sleep</code> belongs to <code>java.lang.Thread</code> and is a static method.</li><li><code>wait</code> can be woken by <code>notify</code>, <code>notifyAll</code> and <code>interrupt</code>, while <code>sleep</code> can only be woken by <code>interrupt</code>.</li><li><code>wait</code> and <code>notify</code> release the lock, which means you can enter the <code>synchronized</code> block for multiple times as long as those threads call <code>wait</code>, while <code>sleep</code> doesn’t release the lock.</li></ol><h1 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h1><p><code>sleep</code> is a normal way to put the thread into sleep for a pre-defined time, and <code>interrupt</code> is only a way to cancel the sleep.</p><p><code>wait</code> is a normal way for inter-thread communication, and usually you can build a publish-subscribe system by it. notify =&gt; publish, wait =&gt; subscribe. When you call <code>notify</code>, it means some messages are available, and one thread will be woken to consume those messages.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;wait&lt;/code&gt; and &lt;code&gt;sleep&lt;/code&gt; can both be used to put a thread into sleep and wait for a while. So what’s the difference? To f
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="java" scheme="http://searene.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode: Combination Sum II</title>
    <link href="http://searene.me/2017/07/15/Leetcode-Combination-Sum-II/"/>
    <id>http://searene.me/2017/07/15/Leetcode-Combination-Sum-II/</id>
    <published>2017-07-15T00:33:03.000Z</published>
    <updated>2017-07-15T00:44:59.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given a collection of candidate numbers (<strong>C</strong>) and a target number (<strong>T</strong>), find all unique combinations in <strong>C</strong> where the candidate numbers sums to <strong>T</strong>.</p><p>Each number in <strong>C</strong> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>,<br>A solution set is: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [1, 7],</div><div class="line">  [1, 2, 5],</div><div class="line">  [2, 6],</div><div class="line">  [1, 1, 6]</div><div class="line">]</div></pre></td></tr></table></figure><hr><h1 id="Leetcode-Link"><a href="#Leetcode-Link" class="headerlink" title="Leetcode Link"></a>Leetcode Link</h1><p><a href="https://leetcode.com/problems/combination-sum-ii/#/description" target="_blank" rel="external">https://leetcode.com/problems/combination-sum-ii/#/description</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>This problem can be solved using DFS:</p><ul><li>Get the result starting with the <strong>first</strong> number</li><li>Get the result starting with the <strong>second</strong> number</li><li>…</li><li>Get the result starting with the <strong>last</strong> number</li></ul><p>But we need to sort the array first in order to remove duplicate records.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">if</span>(candidates == <span class="keyword">null</span> || candidates.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">        Arrays.sort(candidates);</div><div class="line">        <span class="keyword">return</span> combinationSum2(candidates, target, <span class="keyword">new</span> ArrayList&lt;&gt;(), <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, List&lt;Integer&gt; prefix, <span class="keyword">int</span> startPos) &#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>) &#123;</div><div class="line">            result.add(<span class="keyword">new</span> ArrayList&lt;&gt;(prefix));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = startPos; i &lt; candidates.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(i &gt; startPos &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                prefix.add(candidates[i]);</div><div class="line">                List&lt;List&lt;Integer&gt;&gt; subResult = combinationSum2(candidates, target - candidates[i], prefix, i + <span class="number">1</span>);</div><div class="line">                prefix.remove(prefix.size() - <span class="number">1</span>);</div><div class="line"></div><div class="line">                result.addAll(subResult);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h1&gt;&lt;p&gt;Given a collection of candidate numbers (&lt;strong&gt;C
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="leetcode" scheme="http://searene.me/tags/leetcode/"/>
    
      <category term="algorithm" scheme="http://searene.me/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Why is Kafka so fast</title>
    <link href="http://searene.me/2017/07/09/Why-is-Kafka-so-fast/"/>
    <id>http://searene.me/2017/07/09/Why-is-Kafka-so-fast/</id>
    <published>2017-07-09T00:45:39.000Z</published>
    <updated>2018-08-05T03:38:26.070Z</updated>
    
    <content type="html"><![CDATA[<p>As we all know that Kafka is very fast, much faster than most of its competitors. So what’s the reason here?</p><h1 id="Avoid-Random-Disk-Access"><a href="#Avoid-Random-Disk-Access" class="headerlink" title="Avoid Random Disk Access"></a>Avoid Random Disk Access</h1><p>Kafka writes everything onto the disk in order and consumers fetch data in order too. So disk access always works sequentially instead of randomly. For traditional hard disks(HDD), sequential access is much faster than random access. Here is a comparison:</p><table><thead><tr><th>hardware</th><th>sequential writes</th><th>random writes</th></tr></thead><tbody><tr><td>6 * 7200rpm SATA RAID-5</td><td>300MB/s</td><td>50KB/s</td></tr></tbody></table><h1 id="Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory"><a href="#Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory" class="headerlink" title="Kafka Writes Everything Onto The Disk Instead of Memory"></a>Kafka Writes Everything Onto The Disk Instead of Memory</h1><p>Yes, you read that right. Kafka writes everything onto the disk instead of memory. But wait a moment, isn’t memory supposed to be faster than disks? Typically it’s the case, for Random Disk Access.  But for sequential access, the difference is much smaller. Here is a comparison taken from <a href="https://queue.acm.org/detail.cfm?id=1563874" target="_blank" rel="external">https://queue.acm.org/detail.cfm?id=1563874</a></p><p><img src="/images/comparison-between-disk-and-memory.jpg" alt="comparison"></p><p>As you can see, it’s not that different. But still, sequential memory access is faster than Sequential Disk Access, why not choose memory? Because Kafka runs on top of JVM, which gives us two disadvantages.</p><ol><li>The memory overhead of objects is very high, often <strong>doubling</strong> the size of the data stored(or even higher).</li><li>Garbage Collection happens every now and then, so creating objects in memory is very expensive as in-heap data increases because we will need more time to collect unused data(which is garbage).</li></ol><p>So writing to file systems may be better than writing to memory. Even better, we can utilize MMAP(memory mapped files) to make it faster.</p><h1 id="Memory-Mapped-Files-MMAP"><a href="#Memory-Mapped-Files-MMAP" class="headerlink" title="Memory Mapped Files(MMAP)"></a>Memory Mapped Files(MMAP)</h1><p>Basically, MMAP(Memory Mapped Files) can map the file contents from the disk into memory. And when we write something into the mapped memory, the OS will flush the change onto the disk sometime later. So everything is faster because we are using memory actually, but in an indirect way. So here comes the question. Why would we use MMAP to write data onto disks, which later will be mapped into memory? It seems to be a roundabout route. Why not just write data into memory directly? As we have learned previously, Kafka runs on top of JVM, if we wrote data into memory directly, the memory overhead would be high and GC would happen frequently. So we use MMAP here to avoid the issue.</p><h1 id="Zero-Copy"><a href="#Zero-Copy" class="headerlink" title="Zero Copy"></a>Zero Copy</h1><p>Suppose that we are fetching data from the memory and sending them to the Internet. What is happening in the process is usually twofold.</p><ol><li>To fetch data from the memory, we need to copy those data from the Kernel Context into the Application Context.</li><li>To send those data to the Internet, we need to copy the data from the Application Context into the Kernel Context.</li></ol><p><img src="/images/no-zero-copy.png" alt="no zero copy"></p><p>As you can see, it’s redundant to copy data between the Kernel Context and the Application Context. Can we avoid it? Yes, using Zero Copy we can copy data directly from the Kernel Context to the Kernel Context.</p><p><img src="/images/zero-copy.png" alt="zero copy"></p><h1 id="Batch-Data"><a href="#Batch-Data" class="headerlink" title="Batch Data"></a>Batch Data</h1><p>Kafka only sends data when <code>batch.size</code> is reached instead of one by one. Assuming the bandwidth is 10MB/s, sending 10MB data in one go is much faster than sending 10000 messages one by one(assuming each message takes 100 bytes).</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.slideshare.net/baniuyao/kafka-24299168https://www.slideshare.net/baniuyao/kafka-24299168" target="_blank" rel="external">https://www.slideshare.net/baniuyao/kafka-24299168</a></li><li><a href="https://toutiao.io/posts/508935/app_preview" target="_blank" rel="external">https://toutiao.io/posts/508935/app_preview</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As we all know that Kafka is very fast, much faster than most of its competitors. So what’s the reason here?&lt;/p&gt;
&lt;h1 id=&quot;Avoid-Random-Dis
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="Big Data" scheme="http://searene.me/tags/Big-Data/"/>
    
      <category term="Kafka" scheme="http://searene.me/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka in a nutshell</title>
    <link href="http://searene.me/2017/05/18/kafka-in-a-nutshell/"/>
    <id>http://searene.me/2017/05/18/kafka-in-a-nutshell/</id>
    <published>2017-05-18T13:51:28.000Z</published>
    <updated>2017-05-21T09:58:15.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Kafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.</p><h1 id="Basic-Model"><a href="#Basic-Model" class="headerlink" title="Basic Model"></a>Basic Model</h1><p>Basically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.</p><p><img src="/images/producer-consumer.svg" alt="producer-consumer model"></p><p>Notice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.</p><p>There are some keywords you need to about first before getting into some details of Kafka.</p><p><strong>Topic</strong>: When you are sending data to Kafka using producers, you have to tell producers, “Hey, could you please send these data to <em>that place</em> in the Kafka server?” Here <em>that place</em> should be replaced with <em>topic</em>. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, <em>game</em>, <em>website</em> and <em>log</em>, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.</p><p><strong>Partition</strong>: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.</p><p><strong>Offset</strong>: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, <em>offset</em> starts from 0 and increases by one each time a message is received from producers.</p><p><img src="/images/topic-partition-offset.svg" alt="topic-partition-offset"></p><p><strong>Broker</strong>: Each server in Kafka is called a <em>broker</em>.</p><p><strong>Leader &amp; Follower</strong>: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it’s safe to say that the same partition is replicated across multiple servers. One of those partitions is called <em>leader</em>, and others are called <em>follower</em>.</p><p>Suppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:</p><p><img src="/images/leader and follower.svg" alt="leader and follower"></p><h1 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h1><p>When producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower…until all followers have the same data as the leader.</p><p><img src="/images/replicate.svg" alt="replicate"></p><p>Each broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker’s commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.</p><p><img src="/images/commit-log.svg" alt="commit log"></p><p>So when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.</p><ol><li><p>Producer returns immediately right after the message is written into the leader, don’t wait for commit.</p><p><img src="/images/return-immediately.svg" alt="no confirm"></p></li><li><p>Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.</p><p><img src="/images/wait-for-leader.svg" alt="wait for leader"></p></li><li><p>Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.</p><p><img src="/images/wait-for-all.svg" alt="wait for all"></p></li></ol><h1 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h1><p>Consumers in Kafka use the <code>poll()</code> function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.</p><ol><li><p>Commit At Most Once</p><p>You have to set the following properties to use this mode:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">enable.auto.commit = true</div><div class="line">auto.commit.interval.ms = 15</div></pre></td></tr></table></figure><p>The value of <code>auto.commit.interval.ms</code> could be any number. Now let’s talk about what these properties mean and how the mode works.</p><p>The following steps will be proceeded if this mode is turned on:</p><ol><li>Consumer fetches some data from Kafka.</li><li>Consumer checks whether <code>auto.commit.interval.ms</code> is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what <code>enable.auto.commit</code> means.</li><li>Consumer processes the fetched data.</li><li>Repeat above steps.</li></ol><p>Let’s use a picture to illustrate the process.</p><p><img src="/images/receive-at-most-once.svg" alt="receive at most once"></p><p>Regarding the above diagram, what will happen if error occurs while processing data?</p><p><img src="/images/receive-at-most-once-exception.svg" alt="receive at most once exception"></p><p>Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.</p></li><li><p>Commit At Least Once</p><p>You have to set the following properties to turn on this mode.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enable.auto.commit = false</div></pre></td></tr></table></figure><p>As you can see, <code>enable.auto.commit</code> is set <code>false</code>, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.</p><ol><li>Consumer fetches some data from Kafka.</li><li>Consumer processes those data.</li><li>Consumer commit offsets regarding those data manually.</li><li>Repeat above steps.</li></ol><p>Here is a picture to illustrate the process.</p><p><img src="/images/receive-at-least-once.svg" alt="receive at least once"></p><p>What if an exception occurs while we are processing data, just like the last mode mentioned before?</p><p><img src="/images/receive-at-least-once-exception.svg" alt="receive at least once exception"></p><p>Well, as you can see, nothing is lost here because we haven’t committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That’s totally fine as long as we have a proper filter system to filter out those duplicated data.</p><p>Since this mode is safer than the last one, we often choose to use <code>receive at least once</code> in Kafka to fetch data.</p><p>There’s also another mode called <code>commit exactly once</code>, where the committed messages and offsets will get through a transaction system. It’s even safer than <code>receive at least once</code> but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.</p></li></ol><h1 id="When-Brokers-Are-Down"><a href="#When-Brokers-Are-Down" class="headerlink" title="When Brokers Are Down"></a>When Brokers Are Down</h1><p>Let’s say we have three brokers, one is Leader, the other two are followers. Now one of the follower is down.</p><p>What will happen? Nothing. We just lost one replica, it’s not that a big deal.</p><p>OK, the second follower is down.</p><p>How about that? Never mind! The leader is still up and running, this is enough.</p><p>Now the Leader is down…</p><p>All right, we have no brokers any more. Producers and consumers will both stop. What will happen next is determined by the type of broker brought back online first.</p><ol><li>If the Leader is brought back online first, nothing will be lost because producers and consumers stop while the leader is offline.</li><li>If one of the follower is brought back online first, it will become Leader, and some data fetched between the time the follower is down and the time the leader is up may be lost. When the leader is up, it will become a follower, and it will find out that some data have been committed in itself which don’t belong to other brokers, those data will be discarded.</li></ol><p>Now let’s say the three brokers are up and running, and the leader is down. What will happen then?</p><p>One of the followers will be elected as the leader. Nothing will be lost. This may take a few seconds and result in <code>LeaderNotAvailable</code> error from the client, but it doesn’t matter because a new leader will be elected soon.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;Kafka is a distributed publish
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="kafka" scheme="http://searene.me/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>what does &quot;this&quot; refer to in javascript?</title>
    <link href="http://searene.me/2017/05/15/what-does-this-refer-to-in-javascript/"/>
    <id>http://searene.me/2017/05/15/what-does-this-refer-to-in-javascript/</id>
    <published>2017-05-15T15:30:32.000Z</published>
    <updated>2017-05-17T12:32:52.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>this</code> in javascript is always a mysterious thing. Some programmers who have written a lot of javascript code still cannot tell the value of <code>this</code> every now and then. So today, I decided to write an article about it to solve the problem once and for all. I think you would be able to fully understand what <code>this</code> refers to in almost all situations after you read this article.</p><h1 id="Rule-1-Basic-Rule"><a href="#Rule-1-Basic-Rule" class="headerlink" title="Rule 1: Basic Rule"></a>Rule 1: Basic Rule</h1><div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273"><strong>Rule 1</strong>: When <code>this</code> is used in a normal function(i.e. not an arrow function), <code>this</code> refers to the object that calls the function.</div><p>This is the most important rule, let’s use several examples to illustrate what it means.</p><h4 id="when-the-function-is-called-by-an-object"><a href="#when-the-function-is-called-by-an-object" class="headerlink" title="when the function is called by an object."></a>when the function is called by an object.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this?</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.foo();</div></pre></td></tr></table></figure><p><code>this</code> is in a normal function <code>foo</code>, and <code>foo</code> is called by <code>obj</code>. So <code>this</code> refers to <code>obj</code> here.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>obj</strong></div><h4 id="when-the-function-is-called-all-by-itself"><a href="#when-the-function-is-called-all-by-itself" class="headerlink" title="when the function is called all by itself."></a>when the function is called all by itself.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this?</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div></pre></td></tr></table></figure><p>This is different, nothing calls <code>foo()</code>, right? Well, not exactly. In fact, <code>foo()</code> is the same as <code>window.foo()</code>, so <code>this</code> refers to <code>window</code> here, which is the global object in javascript.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>window</strong></div><h4 id="when-the-function-is-assigned-to-another-function"><a href="#when-the-function-is-assigned-to-another-function" class="headerlink" title="when the function is assigned to another function"></a>when the function is assigned to another function</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this?</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> bar = obj.foo;</div><div class="line">bar();</div></pre></td></tr></table></figure><p>This time the function that gets executed is not <code>obj.foo</code>, it’s <code>bar</code>, because <code>obj.foo</code> is assigned to <code>bar</code>.</p><p><code>this</code> refers to object that calls <code>bar</code> instead of <code>obj.foo</code> in this case, because <code>obj.foo</code> has been assigned to <code>bar</code>. Who calls <code>bar</code>? <code>window</code>. So <code>this</code> refers to <code>window</code> here.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px; margin-bottom: 30px">answer: <strong>window</strong></div><div style="background-color: #EBF4F7; border-color: #ffe273; padding: 10px;"><strong>A Gotcha Moment</strong>: <code>this</code> is only injected into context when the function which contains <code>this</code> is called. We cannot determine the value of <code>this</code> only by its definition. We have to see who calls <code>this</code> to determine its value. You can find it in the above code that the value of <code>this</code> may be different when it’s called in different ways.</div><h1 id="Rule-2-Eval"><a href="#Rule-2-Eval" class="headerlink" title="Rule 2: Eval"></a>Rule 2: Eval</h1><div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273"><strong>Rule 2</strong>: <code>this</code> remains unchanged when evaluated using <code>eval</code> directly, and is equal to <code>window</code> when evaluated using <code>eval</code> indirectly.</div><p>Using <code>eval</code> directly means something like: <code>eval(&#39;this&#39;)</code>.<br>Using <code>eval</code> indirectly means something like <code>(1, eval)(&#39;this&#39;)</code>.</p><p>Let’s look at the code first.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'this'</span>)); <span class="comment">// this?</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.foo();</div></pre></td></tr></table></figure><p>To solve the problem, let’s first insert another line in the above code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">// &lt;-- insert this line</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'this'</span>)); <span class="comment">// this?</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.foo();</div></pre></td></tr></table></figure><p>Do you know what <code>this</code> in the inserted line refers to? Of course it’s <code>obj</code>, we have talked about it a while before. So what’s the value of <code>eval(&#39;this&#39;)</code>? It’s exactly the same, <code>obj</code>! It doesn’t change.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>obj</strong></div><p>What if we use <code>eval</code> indirectly?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log((<span class="number">1</span>, <span class="built_in">eval</span>)(<span class="string">'this'</span>)); <span class="comment">// this?</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.foo();</div></pre></td></tr></table></figure><p>When <code>eval</code> is used indirectly, <code>this</code> in it refers to <code>window</code>, simple rule.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>window</strong></div><h1 id="Rule-3-Arrow-Functions"><a href="#Rule-3-Arrow-Functions" class="headerlink" title="Rule 3: Arrow Functions"></a>Rule 3: Arrow Functions</h1><div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273"><strong>Rule 3</strong>: <code>this</code> in arrow functions is the same as <code>this</code> in the outer context.</div><p>Still, code first.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this?</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    obj.foo();</div><div class="line">&#125;</div><div class="line">bar();</div></pre></td></tr></table></figure><p>OK, this time, <code>this</code> is used in an arrow function. According to <strong>Rule 3</strong>, we have to find out what <code>this</code> is in the outer context with respect to the arrow function <code>obj.foo</code>. Some people don’t know what <em>outer context</em> is. Actually, the outer context can be seen as the context where <code>obj.foo</code> gets executed.</p><p>Let’s insert another line in the above code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123;</div><div class="line">        <span class="attr">foo</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this?</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// &lt;-- insert this line</span></div><div class="line">    obj.foo();</div><div class="line">&#125;</div><div class="line">bar();</div></pre></td></tr></table></figure><p>Do you know what <code>this</code> refers to in the inserted line? Of course, it refers to <code>window</code>, because it’s <code>window</code> that calls <code>bar</code>. So what <code>this</code> refers to in the original code(the 4th line)? It’s the same! Because the outer context of <code>obj.foo</code> is exactly the context where the inserted line is in.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>window</strong></div><h1 id="Rule-4-Event-handler"><a href="#Rule-4-Event-handler" class="headerlink" title="Rule 4: Event handler"></a>Rule 4: Event handler</h1><div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273"><strong>Rule 4</strong>: <code>this</code> refers to <code>window</code> when used an inline event handler, and refers to the attached DOM element when used in a separate event hanlder.</div><h4 id="inline-event-handler"><a href="#inline-event-handler" class="headerlink" title="inline event handler"></a>inline event handler</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"foo()"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><code>this</code> is used in an inline event handler <code>foo</code> here, so <code>this</code> refers to <code>window</code>.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>window</strong></div><h4 id="separate-event-handler"><a href="#separate-event-handler" class="headerlink" title="separate event handler"></a>separate event handler</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        <span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">"button"</span>);</div><div class="line">        button.onclick = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p><code>this</code> is used in a separate event handler <code>foo</code> here. So it refers to the DOM element <code>button</code> according to <strong>Rule 4</strong>. In fact, we can also use <strong>Rule 1</strong> to get the same answer. Because each time the button is clicked, <code>button.onclicked</code> is executed. Who calls the <code>onclick</code> function? <code>button</code>. So the answer is <code>button</code>.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>button(DOM element)</strong></div><h1 id="Rule-5-JQuery"><a href="#Rule-5-JQuery" class="headerlink" title="Rule 5: JQuery"></a>Rule 5: JQuery</h1><div style="background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273"><strong>Rule 5</strong>: <code>this</code> in most JQuery callbacks refers to the attached JQuery element</div><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/jquery-2.2.4.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>);</div><div class="line">        &#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>According to <strong>Rule 5</strong>, <code>this</code> refers to <code>$(&quot;button&quot;)</code> here. You may wonder why it is the case. In fact, JQuery calls the callback using something like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">callback.call($(<span class="string">"button"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>callback.call($(&quot;button&quot;))</code> is the same as <code>callback()</code>, except that it sets the <code>this</code> in <code>callback</code> as <code>$(&quot;button&quot;)</code>, so you can happily use <code>this</code> as the JQuery element inside the callback function.</p><div style="border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;">answer: <strong>button(JQuery object)</strong></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;code&gt;this&lt;/code&gt; in javascrip
      
    
    </summary>
    
      <category term="Coding" scheme="http://searene.me/categories/Coding/"/>
    
    
      <category term="javascript" scheme="http://searene.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>re-embrace hexo and hueman</title>
    <link href="http://searene.me/2017/05/15/re-embrace-hexo-and-hueman/"/>
    <id>http://searene.me/2017/05/15/re-embrace-hexo-and-hueman/</id>
    <published>2017-05-15T13:24:18.000Z</published>
    <updated>2017-05-15T13:54:21.867Z</updated>
    
    <content type="html"><![CDATA[<p>About a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use English instead. The reason is unbelievably simple: typing English characters is a lot easier than typing Chinese characters.</p><p>Now today, which is about a month later, I decided to abandon WordPress altogether. WordPress is an excellent blogging platform, I have to admit it. But I cannot find a reliable way to use markdown in WordPress, and I also noticed some odd behaviors of the visual editor used in WordPress. Nothing is more convenient and portable than writing my blogs in vim using markdown. So finally I decided to abandon it and embrace hexo and hueman again.</p><p>I will consider moving some of the blogs written in WordPress back in here.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;About a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use Eng
      
    
    </summary>
    
      <category term="Journal" scheme="http://searene.me/categories/Journal/"/>
    
    
      <category term="hexo" scheme="http://searene.me/tags/hexo/"/>
    
      <category term="hueman" scheme="http://searene.me/tags/hueman/"/>
    
  </entry>
  
</feed>
