{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/128910133_14610369084721n.jpg","path":"images/128910133_14610369084721n.jpg","modified":0,"renderable":0},{"_id":"source/images/2017-11-26-163206_448x610_scrot.png","path":"images/2017-11-26-163206_448x610_scrot.png","modified":0,"renderable":0},{"_id":"source/images/Blog_Trash-1.jpg","path":"images/Blog_Trash-1.jpg","modified":0,"renderable":0},{"_id":"source/images/Empower_Life_Change_World-compressed.jpg","path":"images/Empower_Life_Change_World-compressed.jpg","modified":0,"renderable":0},{"_id":"source/images/Inheritance in Javascript.svg","path":"images/Inheritance in Javascript.svg","modified":0,"renderable":0},{"_id":"source/images/Inheritance-in-Javascript-1.png","path":"images/Inheritance-in-Javascript-1.png","modified":0,"renderable":0},{"_id":"source/images/Inheritance-in-Javascript.svg","path":"images/Inheritance-in-Javascript.svg","modified":0,"renderable":0},{"_id":"source/images/Math_Business_sm.jpg","path":"images/Math_Business_sm.jpg","modified":0,"renderable":0},{"_id":"source/images/Serialization and Deserialization in Java (1).svg","path":"images/Serialization and Deserialization in Java (1).svg","modified":0,"renderable":0},{"_id":"source/images/Serialization and Deserialization in Java.svg","path":"images/Serialization and Deserialization in Java.svg","modified":0,"renderable":0},{"_id":"source/images/Serialization-and-Deserialization-in-Java-1.svg","path":"images/Serialization-and-Deserialization-in-Java-1.svg","modified":0,"renderable":0},{"_id":"source/images/Serialization-and-Deserialization-in-Java.svg","path":"images/Serialization-and-Deserialization-in-Java.svg","modified":0,"renderable":0},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png","path":"images/The-Machanism-of-Garbage-Collectors-in-Java-1.png","modified":0,"renderable":0},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png","path":"images/The-Machanism-of-Garbage-Collectors-in-Java-3.png","modified":0,"renderable":0},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png","path":"images/The-Machanism-of-Garbage-Collectors-in-Java-4.png","modified":0,"renderable":0},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java.png","path":"images/The-Machanism-of-Garbage-Collectors-in-Java.png","modified":0,"renderable":0},{"_id":"source/images/brightness.jpg","path":"images/brightness.jpg","modified":0,"renderable":0},{"_id":"source/images/cast-away-on-the-moon.jpg","path":"images/cast-away-on-the-moon.jpg","modified":0,"renderable":0},{"_id":"source/images/capslock.jpg","path":"images/capslock.jpg","modified":0,"renderable":0},{"_id":"source/images/commit-log.svg","path":"images/commit-log.svg","modified":0,"renderable":0},{"_id":"source/images/comparison-between-disk-and-memory.jpg","path":"images/comparison-between-disk-and-memory.jpg","modified":0,"renderable":0},{"_id":"source/images/i3.png","path":"images/i3.png","modified":0,"renderable":0},{"_id":"source/images/fast.png","path":"images/fast.png","modified":0,"renderable":0},{"_id":"source/images/inheritance.png","path":"images/inheritance.png","modified":0,"renderable":0},{"_id":"source/images/inherit.jpg","path":"images/inherit.jpg","modified":0,"renderable":0},{"_id":"source/images/kafka-logo-wide.png","path":"images/kafka-logo-wide.png","modified":0,"renderable":0},{"_id":"source/images/leader and follower.svg","path":"images/leader and follower.svg","modified":0,"renderable":0},{"_id":"source/images/main-class-output.png","path":"images/main-class-output.png","modified":0,"renderable":0},{"_id":"source/images/new-bingo-sites.png","path":"images/new-bingo-sites.png","modified":0,"renderable":0},{"_id":"source/images/nick.jpg","path":"images/nick.jpg","modified":0,"renderable":0},{"_id":"source/images/no-zero-copy.png","path":"images/no-zero-copy.png","modified":0,"renderable":0},{"_id":"source/images/openwrt.png","path":"images/openwrt.png","modified":0,"renderable":0},{"_id":"source/images/library_logos_alibabaev_large.png","path":"images/library_logos_alibabaev_large.png","modified":0,"renderable":0},{"_id":"source/images/producer-consumer.svg","path":"images/producer-consumer.svg","modified":0,"renderable":0},{"_id":"source/images/receive-at-least-once-exception.svg","path":"images/receive-at-least-once-exception.svg","modified":0,"renderable":0},{"_id":"source/images/receive-at-least-once.svg","path":"images/receive-at-least-once.svg","modified":0,"renderable":0},{"_id":"source/images/receive-at-most-once-exception.svg","path":"images/receive-at-most-once-exception.svg","modified":0,"renderable":0},{"_id":"source/images/passenger-law.jpg","path":"images/passenger-law.jpg","modified":0,"renderable":0},{"_id":"source/images/receive-at-most-once.svg","path":"images/receive-at-most-once.svg","modified":0,"renderable":0},{"_id":"source/images/replicate.svg","path":"images/replicate.svg","modified":0,"renderable":0},{"_id":"source/images/return-immediately.svg","path":"images/return-immediately.svg","modified":0,"renderable":0},{"_id":"source/images/scala-logo.png","path":"images/scala-logo.png","modified":0,"renderable":0},{"_id":"source/images/serialization.jpg","path":"images/serialization.jpg","modified":0,"renderable":0},{"_id":"source/images/smart.jpg","path":"images/smart.jpg","modified":0,"renderable":0},{"_id":"source/images/systemd.jpg","path":"images/systemd.jpg","modified":0,"renderable":0},{"_id":"source/images/topic-partition-offset.svg","path":"images/topic-partition-offset.svg","modified":0,"renderable":0},{"_id":"source/images/sleep.jpg","path":"images/sleep.jpg","modified":0,"renderable":0},{"_id":"source/images/wait-for-leader.svg","path":"images/wait-for-leader.svg","modified":0,"renderable":0},{"_id":"source/images/wait-for-all.svg","path":"images/wait-for-all.svg","modified":0,"renderable":0},{"_id":"source/images/y=1_over_x.png","path":"images/y=1_over_x.png","modified":0,"renderable":0},{"_id":"source/images/zero-copy.png","path":"images/zero-copy.png","modified":0,"renderable":0},{"_id":"source/images/980x.png","path":"images/980x.png","modified":0,"renderable":0},{"_id":"source/images/This-Guy-Rocks1.jpg","path":"images/This-Guy-Rocks1.jpg","modified":0,"renderable":0},{"_id":"source/images/call.jpg","path":"images/call.jpg","modified":0,"renderable":0},{"_id":"source/images/deep-learning.jpg","path":"images/deep-learning.jpg","modified":0,"renderable":0},{"_id":"source/images/combination.jpg","path":"images/combination.jpg","modified":0,"renderable":0},{"_id":"source/images/do-the-right-thing.jpg","path":"images/do-the-right-thing.jpg","modified":0,"renderable":0},{"_id":"source/images/empty.jpg","path":"images/empty.jpg","modified":0,"renderable":0},{"_id":"source/images/hadoop.png","path":"images/hadoop.png","modified":0,"renderable":0},{"_id":"source/images/green-lit-numbers.jpg","path":"images/green-lit-numbers.jpg","modified":0,"renderable":0},{"_id":"source/images/where.jpg","path":"images/where.jpg","modified":0,"renderable":0},{"_id":"source/images/xl-2017-linux-1.jpg","path":"images/xl-2017-linux-1.jpg","modified":0,"renderable":0},{"_id":"source/images/8608094661_f6fdcc0c83_b.jpg","path":"images/8608094661_f6fdcc0c83_b.jpg","modified":0,"renderable":0},{"_id":"source/images/input.png","path":"images/input.png","modified":0,"renderable":0},{"_id":"source/images/refund.png","path":"images/refund.png","modified":0,"renderable":0},{"_id":"themes/hueman/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/images/1_1354265864.jpg","path":"images/1_1354265864.jpg","modified":0,"renderable":0},{"_id":"source/images/cisco_systems_hq2.0.jpg","path":"images/cisco_systems_hq2.0.jpg","modified":0,"renderable":0},{"_id":"source/images/plane.png","path":"images/plane.png","modified":0,"renderable":0},{"_id":"source/images/mathjax.png","path":"images/mathjax.png","modified":0,"renderable":0},{"_id":"source/images/time.jpg","path":"images/time.jpg","modified":0,"renderable":0},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","path":"vendor/fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","path":"vendor/fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","path":"vendor/fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","path":"vendor/fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","path":"vendor/fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","path":"vendor/fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","path":"vendor/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","path":"vendor/fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","path":"vendor/fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","path":"vendor/scrollLoading/jquery.scrollLoading.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","path":"vendor/scrollLoading/main.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","path":"vendor/scrollLoading/style.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","path":"vendor/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","path":"vendor/titillium-web/styles.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","path":"vendor/fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","path":"vendor/fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","path":"vendor/fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","path":"vendor/fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","path":"vendor/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","path":"vendor/scrollLoading/images/preloader@2x.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","path":"vendor/scrollLoading/images/preloader.gif","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","path":"vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","path":"vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","path":"vendor/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","path":"vendor/jquery/2.0.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","path":"vendor/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","path":"vendor/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendor/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","path":"vendor/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/images/school.jpg","path":"images/school.jpg","modified":0,"renderable":0},{"_id":"source/images/i3wm_screenshot.png","path":"images/i3wm_screenshot.png","modified":0,"renderable":0},{"_id":"source/images/IMG_20180406_094127.jpg","path":"images/IMG_20180406_094127.jpg","modified":0,"renderable":0},{"_id":"source/images/IMG_20180406_123639.jpg","path":"images/IMG_20180406_123639.jpg","modified":0,"renderable":0},{"_id":"source/images/IMG_20180406_084153.jpg","path":"images/IMG_20180406_084153.jpg","modified":0,"renderable":0},{"_id":"source/images/IMG_20180406_090110.jpg","path":"images/IMG_20180406_090110.jpg","modified":0,"renderable":0},{"_id":"source/images/IMG_20180406_095808.jpg","path":"images/IMG_20180406_095808.jpg","modified":0,"renderable":0},{"_id":"source/images/forest.jpg","path":"images/forest.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hueman/README.md","hash":"50b7c5ee93b0896da7f8d6278f28c4a46420a9f1","modified":1481033329885},{"_id":"themes/hueman/LICENSE","hash":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1481033329885},{"_id":"themes/hueman/_config.yml","hash":"443756fbec7b0f330a2b94242d65a1ce6eb59730","modified":1512271990213},{"_id":"themes/hueman/package.json","hash":"82cca4496c3129d57ad10fb0dae960e593f0a1f1","modified":1481033329885},{"_id":"source/_drafts/Spark-Source-Code-Walkthrough.md","hash":"cc59b324746450b4f34ebee883b7f5588eb83022","modified":1507255025260},{"_id":"source/about/index.md","hash":"631c610d3d301f3e179ed0fd23f23da183b56e65","modified":1503319261120},{"_id":"source/_drafts/kafka-in-a-nutshell.md","hash":"6994c982c9c802143d5addae5171477a0f916168","modified":1495542309837},{"_id":"source/_posts/An-Illustration-of-Various-Encoding-Schemes.md","hash":"d0a6669436d2e0ad13a35d6ca59b4f561756fe78","modified":1495807928310},{"_id":"source/_posts/Auto-Adjust-Brightness-On-Ubuntu-16-10-Using-Systemd.md","hash":"0846509d5faea42e2423c33f1f861516a9141f51","modified":1481033329749},{"_id":"source/_posts/Batch-Insert-Into-MySQL-With-Python.md","hash":"1056cb8e4d7c9162127941a787514c82224eb6af","modified":1530715742883},{"_id":"source/_posts/Calculate-1-lambda-n-n.md","hash":"caea74936536fd1e5fbc0c3963cac4b40626e2d7","modified":1495125886983},{"_id":"source/_posts/Configure-Win7-Support-For-UTC.md","hash":"b783d5f13eef4191134dcd68afb49e7add1499f0","modified":1481033329749},{"_id":"source/_posts/Fix-The-Font-Rendering-Problem-In-Pycharm.md","hash":"86d5e6d2b4bd8a66fa89cda68ed556c0050143a0","modified":1481033329749},{"_id":"source/_posts/Go-to-KTV-alone.md","hash":"68c9d09f1364f6cf121009a58e390581da72e366","modified":1522712132163},{"_id":"source/_posts/Cast-away-on-the-moon.md","hash":"79245417e038be24adf50673bca0e4919960ab24","modified":1507260327836},{"_id":"source/_posts/GoldenDictMedia.md","hash":"a1aded98c90e8be137135b91412e2710d6fd6802","modified":1495024879423},{"_id":"source/_posts/I-arrived-in-Hangzhou-yesterday.md","hash":"1bd77d3586582d415abd6691a9c155fb6c3dc240","modified":1507191012327},{"_id":"source/_posts/Hadoop-Internals-Configuration.md","hash":"ca735bc5538283ea25a5fb29e3164b4fda90d7b7","modified":1494861056737},{"_id":"source/_posts/I-finished-reading-The-catcher-in-the-rhy.md","hash":"fde11410592efd6e0eb4216732743ba6109cd402","modified":1481033329749},{"_id":"source/_posts/I-still-didn-t-go-jogging-today.md","hash":"a82b6cbf717309da7caadf26c8061ee0b98a034b","modified":1481033329749},{"_id":"source/_posts/I-struggled-to-finish-my-tasks-today.md","hash":"36258bdfabb775c7e372055073169169e4e89b18","modified":1481033329749},{"_id":"source/_posts/I-started-programming-and-running-today.md","hash":"eb01a166c2f0bf0c58a1fd071f533712fb5e00c9","modified":1481033329749},{"_id":"source/_posts/ImageResizer-an-anki-addon-to-resize-images.md","hash":"f7481188da9349caaf6a403bffcd8da57ae31c5a","modified":1495361198153},{"_id":"source/_posts/Install-fcitx-on-ubuntu-16-10.md","hash":"09c0e1f752943c7f13ea014336b01a62280dfddf","modified":1481034623054},{"_id":"source/_posts/Hexo-Source-Code-Demystified.md","hash":"72def882ba17a82192e633e579304957fbc0a4f9","modified":1481033329749},{"_id":"source/_posts/It-s-pretty-hard-to-concentrate-these-days.md","hash":"5a164d5e5ed48d04deb31b581ab91824a24e1ab7","modified":1481033329749},{"_id":"source/_posts/Inheritance-in-Javascript.md","hash":"5ce6b510e9567c9188e38b7853a67472bb3e304f","modified":1495296638400},{"_id":"source/_posts/Leetcode-Combination-Sum-II.md","hash":"c37f3107eac6e52a005e261b24536fe2b79c374a","modified":1500079499809},{"_id":"source/_posts/Midnight.md","hash":"51e0b0d45d6a6fb09b387f27024f9ab236aa7ee3","modified":1481033329749},{"_id":"source/_posts/Let-hexo-support-mathjax.md","hash":"3cf038f3c94a7d0e86274bb5f51551706d59fab6","modified":1495244894613},{"_id":"source/_posts/My-Last-Weekend-At-Cisco.md","hash":"7089a14c2f2829880a2c01fca0d5213c7b6a16ea","modified":1513504640373},{"_id":"source/_posts/Proof-of-limit-f-x-g-x-c-d.md","hash":"180dbfb34a5bc9a8d7b92306b81fd253b1474d5a","modified":1481033329749},{"_id":"source/_posts/Right-associativity-in-Scala.md","hash":"222cf40d0d5aeb3f6e9152f4bd95cf1d35c585da","modified":1507355804634},{"_id":"source/_posts/Proof-of-the-limit-s-composition-law-when-x-approaches-infinity.md","hash":"24996eab27845efe3e7b204147177ff93a44d4ec","modified":1481033329749},{"_id":"source/_posts/PurgeAttributes-an-Anki-addon-to-purge-unnecessary-attributes.md","hash":"a0d413fb7ea870b60e9e24568bb8b17aa13c04b4","modified":1481033329749},{"_id":"source/_posts/Some-Linux_Commands.md","hash":"72abdb9767bc2ea19ff9937c443d7ffa5ac729ca","modified":1507175844113},{"_id":"source/_posts/Something-About-Dnsmasq-On-Ubuntu-15-10.md","hash":"201e98f48b8f8a71bcdcdbbc3b92c185a4c82bfd","modified":1481033329749},{"_id":"source/_posts/Specify-Port-For-Hexo-Git-Deployment.md","hash":"77b06f5d308095a018d93f2b28e8f4ec0886632d","modified":1481033329749},{"_id":"source/_posts/Super-CapsLock-On-Ubuntu-16-10.md","hash":"c72ce3e837f8a80c9123274721682f0df19094a3","modified":1481345981797},{"_id":"source/_posts/Serialization-and-Deserialization-in-Java.md","hash":"5aad8a7b9f53e6645b50f97af06d7cac100f34fe","modified":1495937966413},{"_id":"source/_posts/Switch-CapsLock-And-Esc-And-Take-CapsLock-As-Control-When-It-Is-Pressed.md","hash":"21711aa4293089e6378f736f7b3bae7884ca304f","modified":1481033329749},{"_id":"source/_posts/The-difference-between-wait-and-sleep.md","hash":"ff040f77949aba02a59e2e8999d064a05c66d91c","modified":1504947664210},{"_id":"source/_posts/The-empty-set-is-the-subset-of-any-set.md","hash":"2f2ed87f53e3a90e3ebff05791cf5fbe78bbfffe","modified":1481033329749},{"_id":"source/_posts/The-fee-paid-to-freelancer-is-not-refundable.md","hash":"26ce57062f0abca277c401b004ccc634c01313e6","modified":1494860815321},{"_id":"source/_posts/The-difference-between-a-case-class-and-a-normal-class-in-Scala.md","hash":"1d8a9f67f36b9a1e48f0414617f32dec0ca63ec6","modified":1507280746789},{"_id":"source/_posts/Ubuntu-crashes-when-entering-or-exiting-fullscreen-while-watching-youtube-videos.md","hash":"256eed153fc269b34d43c28924fe0d4fd64d4412","modified":1481033329749},{"_id":"source/_posts/The-meaning-of-life.md","hash":"68b419c4e2842dc88e5eec601504f5c2b73f16d1","modified":1520294448819},{"_id":"source/_posts/Went-to-Qiandao-Lake.md","hash":"8d8928d56278ff505bf6e61ec0fc5cd7b4d0a0c0","modified":1523070688155},{"_id":"source/_posts/Understanding-poisson-distribution.md","hash":"5bdb4ce4526ed94b72e55aa493e47047545c0aec","modified":1495125748526},{"_id":"source/_posts/We-are-either-young-or-old-never-something-in-between.md","hash":"56e8911970b813bb20ede2a7c81951f494a49f13","modified":1516437721727},{"_id":"source/_posts/WriteToDisk.md","hash":"af5b0183ea924ed9ef18519db1716d357e6b84c9","modified":1481033329749},{"_id":"source/_posts/Where-to-go.md","hash":"34fac3f9021330e9627efbb0fc5ffb0fec3522e1","modified":1494860350631},{"_id":"source/_posts/When-and-how-to-use-InheritableThreadLocal.md","hash":"5a3e1fd9cf120f61cd9c47fa98ce43c7bce33558","modified":1506954570000},{"_id":"source/_posts/Why-is-Kafka-so-fast.md","hash":"18c4bf47b6350edf6fa7b694058ce484f66746ea","modified":1533440306070},{"_id":"source/_posts/backup-script.md","hash":"1fd77e9111c6d3d30613866d07c4725dac65e665","modified":1481033329749},{"_id":"source/_posts/beautify-i3wm.md","hash":"9f6e19151d3db9fcd8d9565b4e1c045d219136b2","modified":1525508567523},{"_id":"source/_posts/auto-save-in-vim.md","hash":"db123e0644be7b05c1bbeee2617c0a33fbdb59d2","modified":1481033329749},{"_id":"source/_posts/bittorrent-sync.md","hash":"214fda62238801dbcbd882acb2325a72bc2d48ff","modified":1481033329749},{"_id":"source/_posts/change-openwrt-source-to-UTSC.md","hash":"fc00b374cda764897dcc3e9cee077321a979d4fa","modified":1486776264637},{"_id":"source/_posts/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest.md","hash":"c427cefe252db3da7dd60589c87158b4acbe778b","modified":1515511457817},{"_id":"source/_posts/connect-to-wifi-via-commandline-on-arch.md","hash":"0f9b2de8f49bbdc7374a161f35876b82b7960d4f","modified":1481033329749},{"_id":"source/_posts/enlarge-the-size-of-a-vdi-of-virtualbox.md","hash":"5170b7013496bc2d403bd48f0c63354af0e39655","modified":1481033329749},{"_id":"source/_posts/django-db-utils-IntegrityError-duplicate-key-value-violates-unique-constraint.md","hash":"2055a0ecad549e096ba48330512cf43d2860e797","modified":1481033329749},{"_id":"source/_posts/install-flash-plugin-in-firefox-on-arch-linux.md","hash":"91a37670d901d6baa4312aece77569179e0517ae","modified":1481033329749},{"_id":"source/_posts/get-selected-text-in-chrome.md","hash":"84ffd00376bc92adb02966546e56a649393a0e65","modified":1481033329749},{"_id":"source/_posts/learn-redirection-the-hard-way.md","hash":"cfc1a25c2398cc26c816314858d2d8056b211c9e","modified":1481033329749},{"_id":"source/_posts/kafka-in-a-nutshell.md","hash":"2abe7ceadb2c488312ec8d6dbd62f85569efd501","modified":1495360695327},{"_id":"source/_posts/live-a-quite-life.md","hash":"e44206a0a86cd384d93dbb6cf3492320093a3e7c","modified":1522549506967},{"_id":"source/_posts/map-Ctrl-V-as-Ctrl-Q-in-vim.md","hash":"53d49285397ed479bb0ed5e84b1d18d1c3d3c670","modified":1481033329749},{"_id":"source/_posts/make-fcitx-work-in-sublime-text-3.md","hash":"fa577b8f8f73980a003231c79294a6df096a68eb","modified":1481033329749},{"_id":"source/_posts/my-new-goals-and-my-new-life.md","hash":"bb24e943ce77c28fc15f70cde5f6affdb3a40416","modified":1481033329749},{"_id":"source/_posts/new-task.md","hash":"fb94885053067896a096f4ceb70fa9fd256ed8bd","modified":1481033329749},{"_id":"source/_posts/newInstance-in-Java.md","hash":"77248a6de73fb08494aa2b8b0859fc03130c5ee1","modified":1507021546292},{"_id":"source/_posts/rc-local-stopped-running-when-an-error-occurred.md","hash":"63dc362da88afc4f1cd95e80695c5ead65ac3659","modified":1481033329749},{"_id":"source/_posts/re-embrace-hexo-and-hueman.md","hash":"95c74e87e5648fc56826e6bc44c8495d3319e3f1","modified":1494856461867},{"_id":"source/_posts/shorten-a-string-without-cutting-words.md","hash":"fcfdb8e509d0bf2ac1d0cbaa71adc3e446e4455e","modified":1481033329749},{"_id":"source/_posts/set-up-a-git-server-to-deploy-with-hexo.md","hash":"70cd2d417fca1d351de4db089ad40b3c7dbdd260","modified":1512228896129},{"_id":"source/_posts/the-machanism-of-garbage-collectors-in-Java.md","hash":"c5d785943001ea9288a3c680c011cdbed30e3258","modified":1495299778303},{"_id":"source/_posts/use-neural-networks-to-detect-programming-languages.md","hash":"9446f9a99bc76344bde95444d0cd0e439079b4f5","modified":1512814251110},{"_id":"source/_posts/watched-alien-2-today.md","hash":"862a24919434e0b3c3b0dab063dab81872653818","modified":1481033329749},{"_id":"source/_posts/what-does-this-refer-to-in-javascript.md","hash":"6b57fc9d0435f5e8dae99d52c96ccc311325298d","modified":1495024372670},{"_id":"source/images/128910133_14610369084721n.jpg","hash":"a5c19bc3d553a4b88969036102a4c6c48490215a","modified":1516436997097},{"_id":"source/images/2017-11-26-163206_448x610_scrot.png","hash":"9319e7115249b3289fc66bd225dea59625d9afd8","modified":1512795649000},{"_id":"source/images/Blog_Trash-1.jpg","hash":"23acb85a516102467c38fc491a8d7955fac7a09b","modified":1476845591000},{"_id":"source/images/Empower_Life_Change_World-compressed.jpg","hash":"4db0cbe7ff9f86d17751b31794b3f54d5a804940","modified":1521127005476},{"_id":"source/images/Inheritance in Javascript.svg","hash":"687baaa977f59af36b2202730fd7ff1112cf2c6b","modified":1494729374014},{"_id":"source/images/Inheritance-in-Javascript-1.png","hash":"1b92bf30310cbbe838c9b61b0d722cbeff7d9159","modified":1492939051000},{"_id":"source/images/Inheritance-in-Javascript.svg","hash":"687baaa977f59af36b2202730fd7ff1112cf2c6b","modified":1494729429000},{"_id":"source/images/Math_Business_sm.jpg","hash":"565bc28d90f40ad65590440b7387bf37ba547574","modified":1481033329753},{"_id":"source/images/Serialization and Deserialization in Java (1).svg","hash":"7418ac48016b98a8b525ecca358add5ccb4208ff","modified":1494596873004},{"_id":"source/images/Serialization and Deserialization in Java.svg","hash":"30dc005264bd2bc152f8a121d463935832223825","modified":1494596863517},{"_id":"source/images/Serialization-and-Deserialization-in-Java-1.svg","hash":"7418ac48016b98a8b525ecca358add5ccb4208ff","modified":1494596960000},{"_id":"source/images/Serialization-and-Deserialization-in-Java.svg","hash":"30dc005264bd2bc152f8a121d463935832223825","modified":1494596950000},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png","hash":"6ddebc24c937ea49ea13b16114cb32db76b99318","modified":1493913267000},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png","hash":"c1cc23f35c15fcee32c06a45334613dc77ef6167","modified":1493914184000},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png","hash":"3c5ef7f3e7006a25ce1bc0e8c98ad56f252d01cd","modified":1494149017000},{"_id":"source/images/The-Machanism-of-Garbage-Collectors-in-Java.png","hash":"1db27dda708459ad439ac70081f0cbede5a4ccd8","modified":1493910968000},{"_id":"source/images/brightness.jpg","hash":"83923347823394ce95df87fe605a56405a90234d","modified":1481033329753},{"_id":"source/images/cast-away-on-the-moon.jpg","hash":"3e6a4dabcc85eab2c14dbb71709c7b8319abf099","modified":1507257472556},{"_id":"source/images/capslock.jpg","hash":"62fe405f36812e5da52def19528ccd45d0151575","modified":1481033329753},{"_id":"source/images/commit-log.svg","hash":"e283329a70c1fce439f97b1e73f33baf3c2c327d","modified":1495124131116},{"_id":"source/images/comparison-between-disk-and-memory.jpg","hash":"5cb40c0bfc3b8ccad0e87b3a21c6a5c7ef58cde3","modified":1499562378550},{"_id":"source/images/i3.png","hash":"641dd2fccacc0f875b1720d96d4a21f49120e88e","modified":1481033329753},{"_id":"source/images/fast.png","hash":"9c2093fddac15b4d475a21bcf480c62c70697f6e","modified":1499561271727},{"_id":"source/images/inheritance.png","hash":"fbd3785b57ca59b1e9c98540f54fbe9c4c392cc3","modified":1495288729413},{"_id":"source/images/inherit.jpg","hash":"1ecae574d696713021ed480cdc4424942ba0077f","modified":1506953900340},{"_id":"source/images/kafka-logo-wide.png","hash":"0c579c31681dfe30c1820ebecb73dcda8494b071","modified":1492941618000},{"_id":"source/images/leader and follower.svg","hash":"d7c921c77c34379a18ab46c71bfcf77a5c7307fe","modified":1495122770686},{"_id":"source/images/main-class-output.png","hash":"b84e043adc9945724435b9402a169dec31bd634e","modified":1507188303807},{"_id":"source/images/new-bingo-sites.png","hash":"2ff155ef7a52b192693974b734c6e5996eec6983","modified":1507021534249},{"_id":"source/images/nick.jpg","hash":"d735e2a2fd195bea2876fa7e3c24d5f436357c2b","modified":1520251120724},{"_id":"source/images/no-zero-copy.png","hash":"59d560b89fe4c52b92cbf6b2448eabc6d5b2d5d5","modified":1499563726117},{"_id":"source/images/openwrt.png","hash":"5dd4116dd49aaf566d8e33f9fc372e15a63c8d0f","modified":1417091765000},{"_id":"source/images/library_logos_alibabaev_large.png","hash":"901782056f90bf2e0030f197f48a6200f54e7ad3","modified":1520605628367},{"_id":"source/images/producer-consumer.svg","hash":"2ae43fec2b5700ee29e4442fdb36802c1db6f053","modified":1495118154950},{"_id":"source/images/receive-at-least-once-exception.svg","hash":"9fcb332080b8a50a39eea01bfe391118088bdf26","modified":1495358626920},{"_id":"source/images/receive-at-least-once.svg","hash":"a2d1a9589e8d8d6ff6d2d4461ca748da6fb60029","modified":1495358541377},{"_id":"source/images/receive-at-most-once-exception.svg","hash":"557ef80e5008a638975cb53eea745c862426a875","modified":1495357893603},{"_id":"source/images/passenger-law.jpg","hash":"1c5c29fe996cd0c87bb01c64e5ab666f5c81895f","modified":1474630680000},{"_id":"source/images/receive-at-most-once.svg","hash":"9f059c2854ad6adc0efc5188503c691f8afb0817","modified":1495357596397},{"_id":"source/images/replicate.svg","hash":"b582fa3f146e705fbfea64b1c926dff69d62f474","modified":1495123183463},{"_id":"source/images/return-immediately.svg","hash":"fb9e24dec30e5281605d7726148ee06201a414d9","modified":1495124477780},{"_id":"source/images/scala-logo.png","hash":"067f5d2f5048dde84cf90e66e2a1e64ec5aadc4c","modified":1507259702540},{"_id":"source/images/serialization.jpg","hash":"6453730a1484b35f86d5f471968a428c80309588","modified":1495937945523},{"_id":"source/images/smart.jpg","hash":"68ec061887105a4930cee21eb28c15f68e23d137","modified":1490103278190},{"_id":"source/images/systemd.jpg","hash":"1ff73e5ac5394e9bb3b858713d3bfa24142cd28f","modified":1481033329753},{"_id":"source/images/topic-partition-offset.svg","hash":"681714ecb9ceba6e7fed60b2388a89d9a66e9b84","modified":1495121036550},{"_id":"source/images/sleep.jpg","hash":"f5b410d0fb5efbeb3b43cbfe97357e9fcb26e606","modified":1504947395880},{"_id":"source/images/wait-for-leader.svg","hash":"4709899fa042f9c05342117b7ef954eeafd95f0c","modified":1495124560316},{"_id":"source/images/wait-for-all.svg","hash":"6a5aef519891b9042040120743ea56d6fb526cc4","modified":1495124578113},{"_id":"source/images/y=1_over_x.png","hash":"f26832b815540611210e5396aec5b07dafebd31d","modified":1481033329753},{"_id":"source/images/zero-copy.png","hash":"f1ae14fafb1c14a2c306b3a8ea807dfccf89cbbd","modified":1499563833817},{"_id":"themes/hueman/.github/ISSUE_TEMPLATE.md","hash":"db4ec5d979e663d7fa239be332ef634b6bbd1a2b","modified":1481033329885},{"_id":"themes/hueman/languages/ca.yml","hash":"d082e6f9e7615556b8f6c5f1286f0db8a0db195e","modified":1481033329885},{"_id":"themes/hueman/languages/es.yml","hash":"97191c8ab7ce5334369d96f6e53a6d365a2057b1","modified":1481033329885},{"_id":"themes/hueman/languages/en.yml","hash":"17b80d0bc852ee86e89a421ab6bd6f6584d5e7be","modified":1481033329885},{"_id":"themes/hueman/languages/id.yml","hash":"03e45cf88b69e657a340362e18668e443ddaae47","modified":1481033329885},{"_id":"themes/hueman/languages/fr.yml","hash":"0624f8f7532f1312caaf4f8d498aab69c80a92f2","modified":1481033329885},{"_id":"themes/hueman/languages/pt-BR.yml","hash":"6f9539673e08d66866bb210b78863ef68023f991","modified":1481033329885},{"_id":"themes/hueman/languages/ru.yml","hash":"99f111b39f867d421ff4cb859dd1deb26caa382e","modified":1481033329885},{"_id":"themes/hueman/languages/zh-CN.yml","hash":"05737aa022a007b97034a9d9fc80e606d5a25598","modified":1481033329885},{"_id":"themes/hueman/layout/archive.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1481033329885},{"_id":"themes/hueman/layout/category.ejs","hash":"5096d3f019098d9940429152295f6d6161d887ba","modified":1481033329885},{"_id":"themes/hueman/layout/index.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1481033329885},{"_id":"themes/hueman/layout/layout.ejs","hash":"a6f22f8af8dffe7948b049be0b81b4114fcf3d39","modified":1481033329885},{"_id":"themes/hueman/layout/page.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1481033329885},{"_id":"themes/hueman/layout/post.ejs","hash":"5afddd6a45fa72beacec8d760487dfe8a667e622","modified":1481033329885},{"_id":"themes/hueman/layout/tag.ejs","hash":"8785477232088e09a75da88a0cdcb32fedf4f81f","modified":1481033329885},{"_id":"themes/hueman/scripts/excerpt.js","hash":"630f17f2647b2ba5b207dba36fb3c6587a3aa04f","modified":1481033329885},{"_id":"themes/hueman/scripts/fancybox.js","hash":"c1b01a9c2d96474cdd7e09657e522e4a03579413","modified":1481033329885},{"_id":"themes/hueman/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1481033329885},{"_id":"themes/hueman/scripts/thumbnail.js","hash":"8bd30b7e9294c11f0364dd1e840684aa961b736f","modified":1481033329885},{"_id":"source/images/980x.png","hash":"33ed228363219be4bbb4a4a2df92efadf9454cee","modified":1520251982196},{"_id":"source/images/This-Guy-Rocks1.jpg","hash":"2a53a7a5b4fc42aa42e0fcb00b6c29bca4b5c8a5","modified":1494862276114},{"_id":"source/images/call.jpg","hash":"18d71b84848a67a7919713bac4ec5e015a3a7648","modified":1481033329753},{"_id":"source/images/deep-learning.jpg","hash":"edfc9939ea0baf6466d218214d11660f63b5dd24","modified":1512813628280},{"_id":"source/images/combination.jpg","hash":"0cae4f932a7702859b6a81c3f7d41f17f039e6e6","modified":1500078893275},{"_id":"source/images/do-the-right-thing.jpg","hash":"cb7d7346bae644a3ffc3e2d76daa048f870c72ab","modified":1507353299324},{"_id":"source/images/empty.jpg","hash":"5c25f9f6d35b2c1fbf164f88c39cb8a24707a5a5","modified":1481033329753},{"_id":"source/images/hadoop.png","hash":"1269b70efa2a92463706834a9e0a30dd7804ef7f","modified":1489069503220},{"_id":"source/images/green-lit-numbers.jpg","hash":"003efa8c9d018f15d98251801d449701f853195d","modified":1495807660023},{"_id":"source/images/where.jpg","hash":"6509220b60e8f295ee5e5362a80c5fc9c9a92e4e","modified":1490800667783},{"_id":"source/images/xl-2017-linux-1.jpg","hash":"8fba9c79726876b502d7a2544bd75d77bdab4b66","modified":1507166947054},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1494854728237},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1494854728237},{"_id":"source/_posts/.git/config","hash":"26a1226361adeb5aafa1eb45c058f1c2943a875e","modified":1494854728240},{"_id":"source/images/8608094661_f6fdcc0c83_b.jpg","hash":"866f7a50fb67264f44b8ea0277b8f8b5c54caa6f","modified":1522549283048},{"_id":"source/images/input.png","hash":"c541bffd35b221bc2b342ff40638afd29af7c69c","modified":1481346198026},{"_id":"source/images/refund.png","hash":"1e06da7adfdc0c40618b28e0543066d9003c94c3","modified":1481033329753},{"_id":"themes/hueman/layout/ad/google_adsense.ejs","hash":"30dbb21f270a30503f72f1ce028b2b59dfb41efb","modified":1531323274707},{"_id":"themes/hueman/layout/common/archive.ejs","hash":"bf909e4d6798374daf114cf41540f2bd300408d9","modified":1481033329885},{"_id":"themes/hueman/layout/common/article.ejs","hash":"c30804f0b167053f731ad2a3429ddac603b1ac48","modified":1481033329885},{"_id":"themes/hueman/layout/common/content-title.ejs","hash":"43288ebc0ea30d80e6d7df56f2e7ed5d7935ed1a","modified":1481033329885},{"_id":"themes/hueman/layout/common/footer.ejs","hash":"75b5ea03a45a75e27f652dc0f3b748e7acc1fd1b","modified":1481033329885},{"_id":"themes/hueman/layout/common/head.ejs","hash":"41158c3eb413cd07ef7b712b90fe46e7f06d17ef","modified":1531323139047},{"_id":"themes/hueman/layout/common/header.ejs","hash":"4dbb53393c3ebef01088592babf135d2f6559f47","modified":1481033329885},{"_id":"themes/hueman/layout/common/scripts.ejs","hash":"fb3e7f4ca0427c54aaa4881f5490061d9cadf1af","modified":1481033329885},{"_id":"themes/hueman/layout/common/sidebar.ejs","hash":"c820cd8a88e7fc5ffa500ea56696f8db5cf7c218","modified":1481033329885},{"_id":"themes/hueman/layout/common/summary.ejs","hash":"3ee280d4847f2cde7d450e298f917b10b9c5d507","modified":1481033329885},{"_id":"themes/hueman/layout/common/thumbnail.ejs","hash":"8699ca36aea26bf5c629a2e0acac7fc31341cd8e","modified":1481033329885},{"_id":"themes/hueman/layout/comment/counter.ejs","hash":"13d2b93435398dc29a968f93326fbd18d4b28d8c","modified":1481033329885},{"_id":"themes/hueman/layout/comment/disqus.ejs","hash":"83158f5b00f95acf847524fd7ffeb5aab25add78","modified":1481033329885},{"_id":"themes/hueman/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1481033329885},{"_id":"themes/hueman/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1481033329885},{"_id":"themes/hueman/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1481033329885},{"_id":"themes/hueman/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1481033329885},{"_id":"themes/hueman/layout/plugin/baidu-analytics.ejs","hash":"d99089976258050666208f29000f84496fe1029c","modified":1481033329889},{"_id":"themes/hueman/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1481033329889},{"_id":"themes/hueman/layout/plugin/mathjax.ejs","hash":"f9b208b587ad515fe575a6519daf109b3029da6a","modified":1481033329889},{"_id":"themes/hueman/layout/plugin/scripts.ejs","hash":"45f11b8bc3c1ddbe907cf5b8b36488e6c0ee15b3","modified":1481033329889},{"_id":"themes/hueman/layout/search/baidu.ejs","hash":"bcffa60f2d1750ac7499e928f538176e3804393b","modified":1481033329889},{"_id":"themes/hueman/layout/search/index.ejs","hash":"1a6a742727018567f60f8815be0bff5a45294ce5","modified":1481033329889},{"_id":"themes/hueman/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1481033329889},{"_id":"themes/hueman/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1481033329889},{"_id":"themes/hueman/layout/widget/archive.ejs","hash":"c4d303eaaa23768e52ead324c422a8900b1fe448","modified":1481033329889},{"_id":"themes/hueman/layout/widget/category.ejs","hash":"2d705df76f2eef7d695a971266fc104e89ca6bcd","modified":1481033329889},{"_id":"themes/hueman/layout/widget/links.ejs","hash":"97dab84d6336a4c926ddc288d5a6c264f54c50c3","modified":1481033329889},{"_id":"themes/hueman/layout/widget/recent_posts.ejs","hash":"16a2bd28bdf520616202670a18c6cc93d1dd3f54","modified":1481033329889},{"_id":"themes/hueman/layout/widget/tag.ejs","hash":"bfbc63e675439dcdc35e07dce6948e41500b649c","modified":1481033329889},{"_id":"themes/hueman/layout/widget/tagcloud.ejs","hash":"3ecb048d6098bc3953043a4c25f1f7c4b23397cf","modified":1481033329889},{"_id":"themes/hueman/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1481033329889},{"_id":"themes/hueman/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1481033329889},{"_id":"themes/hueman/layout/share/default.ejs","hash":"7492f5b375a56c67a1a1a4f6b893e37f49dc86dc","modified":1481033329889},{"_id":"themes/hueman/layout/share/index.ejs","hash":"029e91aace5a4c0d8387fc7744c477ccc6865c30","modified":1481033329889},{"_id":"themes/hueman/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1481033329889},{"_id":"themes/hueman/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1481033329889},{"_id":"themes/hueman/source/js/main.js","hash":"572148ac9838f4461139eb3c0c1760ef8209de49","modified":1481033329889},{"_id":"themes/hueman/source/css/_extend.styl","hash":"2860d503b68ae81ea7675c82c6e63873e0c9e761","modified":1495937614967},{"_id":"themes/hueman/source/css/_responsive.styl","hash":"4addaf2f203563accf0479850eda1ab4f4a4c34b","modified":1495354261227},{"_id":"themes/hueman/source/css/_retina.styl","hash":"6849940ab43a9bdd83db1fde8e1e7ba6897f9016","modified":1481033329889},{"_id":"themes/hueman/source/css/_variables.styl","hash":"f9bd6322b19c393957140acb03962d5de8bbcdd5","modified":1494865124471},{"_id":"themes/hueman/source/css/style.styl","hash":"b6a75ecfcb96a3d65017309ae9f14ca18ec89c45","modified":1511684707860},{"_id":"source/images/1_1354265864.jpg","hash":"95628e13b960499b3f1a8a0bde4968e46c5181a8","modified":1522711958213},{"_id":"source/images/cisco_systems_hq2.0.jpg","hash":"db6de98cb583d5718cfc60f583626d4f518d1709","modified":1513501711467},{"_id":"source/images/plane.png","hash":"ddba8dd74eb8128d95b7916e1cc3f84f998ff840","modified":1432767908000},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1494854728237},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1494854728237},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1494854728237},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1494854728237},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1494854728237},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1494854728237},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1494854728237},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1494854728237},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1494854728237},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1494854728237},{"_id":"source/_posts/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1494854728237},{"_id":"source/images/mathjax.png","hash":"4d67baf6a26aee2a3a3cee56a2186f4737e4bfbe","modified":1481033329753},{"_id":"source/images/time.jpg","hash":"304772f8876d1ed4f9d2b3e8dfe1243650bf01f9","modified":1404280837000},{"_id":"themes/hueman/layout/common/post/nav.ejs","hash":"c5f41ebf451cff39eaf116096604ce706a175767","modified":1481033329885},{"_id":"themes/hueman/layout/common/post/date.ejs","hash":"2d090d33cbd23129d63a0ba768a03d717399d9c5","modified":1481033329885},{"_id":"themes/hueman/layout/common/post/category.ejs","hash":"f47522c059d3b4d721ce501203c05f94a285c0b5","modified":1481033329885},{"_id":"themes/hueman/layout/common/post/tag.ejs","hash":"a364204d7152adf6c7522b6568990437e8308d1f","modified":1481033329889},{"_id":"themes/hueman/layout/common/post/title.ejs","hash":"6d19c61afb1f5f71c483be2ce37c6820ac2cd8b5","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1481033329889},{"_id":"themes/hueman/source/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1481033329889},{"_id":"themes/hueman/source/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1481033329889},{"_id":"themes/hueman/source/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1481033329889},{"_id":"themes/hueman/source/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/archive.styl","hash":"5e5fb791ab54f0acf33850f586f7aa8cb2782f3a","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/comment.styl","hash":"d2de8f2c1cf6236ead0800c2a1566e01e7ae0b44","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/assets.styl","hash":"3d95417663c5a737f064a31ab4ef52bac7fda8df","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/footer.styl","hash":"8dffae4ac6a57e506e378a9ce44b85a15a912cad","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/article.styl","hash":"86f1c3126b42d7a5586a66601f7ebcebe249d1c6","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/header.styl","hash":"f94fcb4e2cbda45c8dc910ddb8ff4f19ff0644bf","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/insight.styl","hash":"3d66323e7b75ad197e80d7189a8d9216e1e1ef2f","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/nav.styl","hash":"587a9c9d304ed83eb0331a1d16693461805311c3","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1481033329889},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","hash":"1e6255f1bfa1a820f70d5cfdadf2caa726bf853d","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/index.styl","hash":"d0d8ae6e45a8f7889aaeb1f6ff84d2a3b82b94b2","modified":1494940470587},{"_id":"themes/hueman/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1481033329889},{"_id":"themes/hueman/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1481033329889},{"_id":"themes/hueman/source/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1481033329889},{"_id":"themes/hueman/source/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1481033329889},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1481033329889},{"_id":"themes/hueman/source/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1481033329889},{"_id":"themes/hueman/source/css/images/logo-header.png","hash":"f27d6936c9e1e2891ca520f7f86b3610b78c2c5e","modified":1494859220077},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1481033329889},{"_id":"themes/hueman/source/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1481033329889},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481033329889},{"_id":"themes/hueman/source/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481033329889},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1481033329889},{"_id":"themes/hueman/source/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1481033329889},{"_id":"themes/hueman/source/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1481033329889},{"_id":"themes/hueman/source/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1481033329889},{"_id":"themes/hueman/source/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1481033329889},{"_id":"source/images/school.jpg","hash":"fc62c1fa9a9bde0abe2fea81bf9dd0376433b848","modified":1514073290520},{"_id":"source/images/i3wm_screenshot.png","hash":"3f041910eb69be0e1f6b5a718381b777fe1dc078","modified":1481033329753},{"_id":"source/images/IMG_20180406_094127.jpg","hash":"437d1a290d591d98cf92184224d58e8b17797f4f","modified":1522978892000},{"_id":"source/images/IMG_20180406_123639.jpg","hash":"e635e5662e2c5942a54173184c5ed8d55684c8b5","modified":1522989407000},{"_id":"source/images/IMG_20180406_084153.jpg","hash":"9d783bea3d83effb246ef6adfc111f32e9bb3da2","modified":1522975317000},{"_id":"source/images/IMG_20180406_090110.jpg","hash":"44516a897b4197b48ec74f8c14d4c716b54e322a","modified":1522976475000},{"_id":"source/images/IMG_20180406_095808.jpg","hash":"ad41ca4a83f98e28b23e644b87003048aed3c3a8","modified":1522979892000},{"_id":"public/CNAME","hash":"16536e6ca4758e9dabc3af024cdc329df2f6715c","modified":1531323299419},{"_id":"public/atom.xml","hash":"a732b7bada3d6749068a13d4ae298352e87bcf19","modified":1533440314273},{"_id":"public/content.json","hash":"e7d80039a4ae774a2cc6a46150b9b593bf957964","modified":1533440317956},{"_id":"public/about/index.html","hash":"8bda1b5a632d7aafd3e46327c07939eb747106b3","modified":1531323304389},{"_id":"public/2018/04/07/Went-to-Qiandao-Lake/index.html","hash":"620ead363697eda4fa09ac8e24bcfa112d059c9e","modified":1531323304389},{"_id":"public/2018/04/03/Go-to-KTV-alone/index.html","hash":"52726a95784882d3e14dfe6a58609bfd98fb439d","modified":1531323304389},{"_id":"public/2018/04/01/live-a-quite-life/index.html","hash":"6b97170c2e59c94a7a65069d9766db2f9c724480","modified":1531323304389},{"_id":"public/2018/03/05/The-meaning-of-life/index.html","hash":"287f1b9ff48487255cd5affffd44ae887e7ebba4","modified":1531323304389},{"_id":"public/2018/01/20/We-are-either-young-or-old-never-something-in-between/index.html","hash":"253146e07f25d83ef53ee7172d8d8bdba00fd08c","modified":1531323304389},{"_id":"public/2017/12/23/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest/index.html","hash":"2bbc75ef6dde655bd92a8392dbeadfeb1ef39f29","modified":1531323304389},{"_id":"public/2017/12/17/My-Last-Weekend-At-Cisco/index.html","hash":"63f78aa9bb3c9b57de292b0cdb4d33a03ffcf07b","modified":1531323304389},{"_id":"public/2017/11/26/use-neural-networks-to-detect-programming-languages/index.html","hash":"2061921d52e951528e57e7118200e682f4ef2e1f","modified":1531323304389},{"_id":"public/2017/10/07/Right-associativity-in-Scala/index.html","hash":"46b5e29334e7be31b27e20ed145f296c5695a4cf","modified":1531323304389},{"_id":"public/2017/10/06/Cast-away-on-the-moon/index.html","hash":"f66532e198f79a2f147c9e66deadfc018c7c637a","modified":1531323304389},{"_id":"public/2017/10/06/The-difference-between-a-case-class-and-a-normal-class-in-Scala/index.html","hash":"c3aa9514d8fe905be1c964d4affa2cee44b4ab46","modified":1531323304389},{"_id":"public/2017/10/05/Some-Linux_Commands/index.html","hash":"018f26c7ec9674836320bb691a84cff75f04509f","modified":1531323304389},{"_id":"public/2017/10/03/newInstance-in-Java/index.html","hash":"5abcee3358217a0d650a831518ddff3888c28506","modified":1531323304389},{"_id":"public/2017/10/02/When-and-how-to-use-InheritableThreadLocal/index.html","hash":"392491e8cb6d985af29acb284bdcf839abcacba1","modified":1531323304389},{"_id":"public/2017/09/09/The-difference-between-wait-and-sleep/index.html","hash":"517c402277e32d36d1c337e4881e9409c3104004","modified":1531323304390},{"_id":"public/2017/07/15/Leetcode-Combination-Sum-II/index.html","hash":"ea7b6ee8949d9ed80a16eba32bbc7dc563e32544","modified":1531323304390},{"_id":"public/2017/07/09/Why-is-Kafka-so-fast/index.html","hash":"3a4f41b1a906101a1ec13c09ae135e8d3a22b681","modified":1533440317997},{"_id":"public/2017/05/18/kafka-in-a-nutshell/index.html","hash":"08b65174a900c111da95eba2ce30617afd16fc13","modified":1531323304390},{"_id":"public/2017/05/15/what-does-this-refer-to-in-javascript/index.html","hash":"347909548a45047a3a6729cf8f65949b9985480d","modified":1531323304390},{"_id":"public/2017/05/15/re-embrace-hexo-and-hueman/index.html","hash":"986f7dccbb49efe9e5602e9b47c42d16b0287e0e","modified":1531323304390},{"_id":"public/2017/05/13/An-Illustration-of-Various-Encoding-Schemes/index.html","hash":"73be2b63bb8dd2b3e1a6385853c13f3759bb2041","modified":1531323304390},{"_id":"public/2017/05/10/Serialization-and-Deserialization-in-Java/index.html","hash":"20fa1bc7201536db0037f9258267c14f6ae59a1d","modified":1531323304390},{"_id":"public/2017/05/07/the-machanism-of-garbage-collectors-in-Java/index.html","hash":"c46ca04394d13cc7fdda3d6f42d959ccf2bff245","modified":1531323304390},{"_id":"public/2017/04/23/Inheritance-in-Javascript/index.html","hash":"abbb1dd3bf1fb8df10d6154a9936f0e37eaf8bc3","modified":1531323304390},{"_id":"public/2017/03/29/Where-to-go/index.html","hash":"a3fb03f526df94f308574c5da5388b7584014f28","modified":1531323304390},{"_id":"public/2017/03/09/Hadoop-Internals-Configuration/index.html","hash":"4e28f212e217643aa4388f4417e562a7a9eb8faa","modified":1531323304390},{"_id":"public/2017/02/13/I-arrived-in-Hangzhou-yesterday/index.html","hash":"3ac9721b58213813aa46ae00805cffb486216abe","modified":1531323304390},{"_id":"public/2016/12/18/change-openwrt-source-to-UTSC/index.html","hash":"65a6d0558ba59d8a3ca00ceca80c6116d2fea5d9","modified":1531323304391},{"_id":"public/2016/12/06/Install-fcitx-on-ubuntu-16-10/index.html","hash":"049a26a202f13c971ae9f6260074fb352fbad945","modified":1531323304391},{"_id":"public/2016/12/06/Auto-Adjust-Brightness-On-Ubuntu-16-10-Using-Systemd/index.html","hash":"5c6996146f94b23fe91782067262d0f1565affe3","modified":1531323304391},{"_id":"public/2016/12/06/Super-CapsLock-On-Ubuntu-16-10/index.html","hash":"92d63a689d2aaf8eec2bd3c0dc783170e0266037","modified":1531323304391},{"_id":"public/2016/10/07/beautify-i3wm/index.html","hash":"b9be805f24f480c493cba3798869f86d36935c29","modified":1531323304391},{"_id":"public/2016/10/06/The-empty-set-is-the-subset-of-any-set/index.html","hash":"0f228ce7a0a2464e64c2aaf377585bbfd6d290c0","modified":1531323304391},{"_id":"public/2016/10/01/Understanding-poisson-distribution/index.html","hash":"38510d3f52159d6ae3dbe9802dd57db479f13b60","modified":1531323304391},{"_id":"public/2016/10/01/Proof-of-limit-f-x-g-x-c-d/index.html","hash":"784c0bfc2f10284df5f890c5432ffc1b4556ac06","modified":1531323304391},{"_id":"public/2016/10/01/Let-hexo-support-mathjax/index.html","hash":"90b8974a1738e1db927a2dd249e0682b3fa7a9e0","modified":1531323304391},{"_id":"public/2016/10/01/Proof-of-the-limit-s-composition-law-when-x-approaches-infinity/index.html","hash":"2e1f36e042209e91656870c0996d7448589c0916","modified":1531323304391},{"_id":"public/2016/09/30/Calculate-1-lambda-n-n/index.html","hash":"652d040e03f26cda55d7ab6a63a6f9cad5dcb4a0","modified":1531323304391},{"_id":"public/2016/07/17/Hexo-Source-Code-Demystified/index.html","hash":"72faf434cc9b8f0995cfe5088ffae685f7aded40","modified":1531323304391},{"_id":"public/2016/07/04/The-fee-paid-to-freelancer-is-not-refundable/index.html","hash":"fc3896b2c7a9fb04d6dac9314cd49119a76142bc","modified":1531323304391},{"_id":"public/2016/06/15/I-finished-reading-The-catcher-in-the-rhy/index.html","hash":"c843e18a6a5f9f6c3742471d45085b67ba4a3241","modified":1531323304392},{"_id":"public/2016/06/15/install-flash-plugin-in-firefox-on-arch-linux/index.html","hash":"f9170aa1f09849ebf35e809bb0c93dd61a12cff1","modified":1531323304392},{"_id":"public/2016/06/08/connect-to-wifi-via-commandline-on-arch/index.html","hash":"46526e3798b158541e7aa71e09817f45c19e752c","modified":1531323304392},{"_id":"public/2016/05/28/It-s-pretty-hard-to-concentrate-these-days/index.html","hash":"545255655cd7c0208a118923596c29d6de1dfb74","modified":1531323304392},{"_id":"public/2016/05/26/shorten-a-string-without-cutting-words/index.html","hash":"f939c48d08aab633cdb6efd440249ce07c84b06c","modified":1531323304392},{"_id":"public/2016/05/25/my-new-goals-and-my-new-life/index.html","hash":"c46a73c72e55069c53c645ae4c62cc0c55db7a52","modified":1531323304392},{"_id":"public/2016/05/24/I-struggled-to-finish-my-tasks-today/index.html","hash":"897966bcb758db3c81386e49f42498225f797ef3","modified":1531323304392},{"_id":"public/2016/05/24/I-still-didn-t-go-jogging-today/index.html","hash":"1a28ef8813acfa6233643f0884f144272d5c6f61","modified":1531323304392},{"_id":"public/2016/05/22/I-started-programming-and-running-today/index.html","hash":"27a4cddb57b3d0534b1003eec05d08883ab07bf5","modified":1531323304392},{"_id":"public/2016/05/21/bittorrent-sync/index.html","hash":"6c1fdc91650dd22a1ebc890a83adf860f25bb775","modified":1531323304392},{"_id":"public/2016/05/21/watched-alien-2-today/index.html","hash":"cf597a22dbe71a78f98d259be04285602e5f098c","modified":1531323304392},{"_id":"public/2016/05/21/Midnight/index.html","hash":"ed6654a6b2f83c5833d5d51d55284c16db6f6fe9","modified":1531323304392},{"_id":"public/2016/05/20/new-task/index.html","hash":"21dabd2b81f66b0d9b2058d5113f9d220516ea93","modified":1531323304392},{"_id":"public/2016/04/13/WriteToDisk/index.html","hash":"f50d2a0ce672122b28dc04740e71ca485d4c66a6","modified":1531323304393},{"_id":"public/2016/03/26/learn-redirection-the-hard-way/index.html","hash":"30966747d5bfe5ff2c65c5e397e9c6979291ff62","modified":1531323304393},{"_id":"public/2016/02/16/make-fcitx-work-in-sublime-text-3/index.html","hash":"67d7a1aad51fcf4bf12718f4ae7476e0443c48dc","modified":1531323304393},{"_id":"public/2016/02/14/GoldenDictMedia/index.html","hash":"d3755244e5820369dd422f3ae2be2755f7ffb3de","modified":1531323304393},{"_id":"public/2016/02/14/PurgeAttributes-an-Anki-addon-to-purge-unnecessary-attributes/index.html","hash":"019e8094c78389ff35e30daca6229a28de46eb6d","modified":1531323304393},{"_id":"public/2016/02/14/ImageResizer-an-anki-addon-to-resize-images/index.html","hash":"2691e363c5104802cadb17f6ddbda6728fb9e8a5","modified":1531323304393},{"_id":"public/2016/01/10/django-db-utils-IntegrityError-duplicate-key-value-violates-unique-constraint/index.html","hash":"b24179088386418653831dc197ab92fce52ae808","modified":1531323304393},{"_id":"public/2015/12/27/backup-script/index.html","hash":"990bc4d7097c0cdadb0e673eb0b623c56016e910","modified":1531323304393},{"_id":"public/2015/12/26/auto-save-in-vim/index.html","hash":"e2afd5af3dba39e28cdc0d21e0bc2b4b3c0d026d","modified":1531323304393},{"_id":"public/2015/12/25/map-Ctrl-V-as-Ctrl-Q-in-vim/index.html","hash":"a1142f6dce76682c484121d49e386fde6c704649","modified":1531323304393},{"_id":"public/2015/12/21/Fix-The-Font-Rendering-Problem-In-Pycharm/index.html","hash":"11645362c3522a3a50449ffbabe818004393b89f","modified":1531323304393},{"_id":"public/2015/12/17/Specify-Port-For-Hexo-Git-Deployment/index.html","hash":"26603b3a8e6541ee4f14f5c760670237c24380f3","modified":1531323304393},{"_id":"public/2015/12/17/Something-About-Dnsmasq-On-Ubuntu-15-10/index.html","hash":"699d0c9a147bddfbf94d7e337e00d41fc3d7afe8","modified":1531323304393},{"_id":"public/2015/12/16/Switch-CapsLock-And-Esc-And-Take-CapsLock-As-Control-When-It-Is-Pressed/index.html","hash":"d5a77071fe249475755edd520ccb23489ce8d603","modified":1531323304393},{"_id":"public/2015/12/09/get-selected-text-in-chrome/index.html","hash":"536b79ec896b7a672fb076df292cfe448708c969","modified":1531323304394},{"_id":"public/2015/12/07/Batch-Insert-Into-MySQL-With-Python/index.html","hash":"f72936f4ce8ae61433e3aa4513c6b05f1b554a26","modified":1531323304394},{"_id":"public/2015/12/06/Configure-Win7-Support-For-UTC/index.html","hash":"6adc0bf0223ba4b4fc2e8036a765d7cd7d3436bb","modified":1531323304394},{"_id":"public/2015/12/05/set-up-a-git-server-to-deploy-with-hexo/index.html","hash":"957c7673979fbd8260725905316c0b8ee94b6e0a","modified":1531323304394},{"_id":"public/2015/12/04/Ubuntu-crashes-when-entering-or-exiting-fullscreen-while-watching-youtube-videos/index.html","hash":"0628d80973d0c688535b5928daf27c3688c8304b","modified":1531323304394},{"_id":"public/2015/12/03/enlarge-the-size-of-a-vdi-of-virtualbox/index.html","hash":"8256497e36acbe37fb38b2f6a6205798ec5cbcae","modified":1531323304394},{"_id":"public/2015/12/03/rc-local-stopped-running-when-an-error-occurred/index.html","hash":"7ebbe1b26fa65fe50221b63e27a3501a6c89ec86","modified":1531323304394},{"_id":"public/archives/index.html","hash":"2c6cf237cedae80977b3b4094cce74fb1afced7d","modified":1531323304394},{"_id":"public/archives/page/2/index.html","hash":"0c4e3243e82f2c7213c749d5f4be464bb3f9f145","modified":1533440317997},{"_id":"public/archives/page/3/index.html","hash":"b22f593fc0494d158fc8135dc83e1e0809d69c33","modified":1531323304394},{"_id":"public/archives/page/4/index.html","hash":"815840078d34b04baf07b741e8a4bc191a104327","modified":1531323304394},{"_id":"public/archives/page/5/index.html","hash":"8fed0d5d34c19c5f57a45069d53b342f17a25ee7","modified":1531323304394},{"_id":"public/archives/page/6/index.html","hash":"413cacb4c9ae81d6ef7d91bde152bcb5db94067d","modified":1531323304394},{"_id":"public/archives/page/7/index.html","hash":"4a5e2f91d68ab6bffadede2b110e0ee2a18576f2","modified":1531323304395},{"_id":"public/archives/page/8/index.html","hash":"446889e195c7399053fa70c7b4e441cc1c87a9c5","modified":1531323304395},{"_id":"public/archives/2015/index.html","hash":"07bb0d2f0d23d749b0b4e9c7f97a546649216453","modified":1531323304395},{"_id":"public/archives/2015/page/2/index.html","hash":"fcf3ca384a58e2094206b778b574e82fd26b0593","modified":1531323304395},{"_id":"public/archives/2015/12/index.html","hash":"9a1bec56d0d9a5f482a021cca567a588f54ee049","modified":1531323304395},{"_id":"public/archives/2015/12/page/2/index.html","hash":"e848335253c3224e2dfb04263217fcba9cbb2192","modified":1531323304395},{"_id":"public/archives/2016/index.html","hash":"fb74196aca52c38e735b3451f1a0924480c6ce80","modified":1531323304395},{"_id":"public/archives/2016/page/2/index.html","hash":"32314c24d6f908e9688fb164302963496d4bd3c4","modified":1531323304395},{"_id":"public/archives/2016/page/3/index.html","hash":"2aae40e1dc1ec23cdc339f706b94296de4e825c5","modified":1531323304395},{"_id":"public/archives/2016/page/4/index.html","hash":"b2f4c15c65a069b20d1b0e5361465595c94ec157","modified":1531323304395},{"_id":"public/archives/2016/01/index.html","hash":"f634fce83e82d0c77004ae2d996c43033996e2ae","modified":1531323304395},{"_id":"public/archives/2016/02/index.html","hash":"3838da68f5c4a82ef9a505ddc4b8c0f0742a7f8f","modified":1531323304395},{"_id":"public/archives/2016/03/index.html","hash":"62cfdcfc41445fb22e802131718037a37a441180","modified":1531323304395},{"_id":"public/archives/2016/04/index.html","hash":"e180748336ceffa7cf5dfa990d30ddc164274065","modified":1531323304395},{"_id":"public/archives/2016/05/index.html","hash":"da96b535406ead22e9fd6c5bcdde83efacfd45cb","modified":1531323304395},{"_id":"public/archives/2016/06/index.html","hash":"3ba79372b38b86ded4d40cc67d725a7c963fdba7","modified":1531323304395},{"_id":"public/archives/2016/07/index.html","hash":"8a8ababada42841dfc95d0aa30117377ce9e0092","modified":1531323304396},{"_id":"public/archives/2016/09/index.html","hash":"91a1cfdb0744361a5cc810fd83d5fb2629319c6c","modified":1531323304396},{"_id":"public/archives/2016/10/index.html","hash":"efe1204d092bad3df180407e249704a01e9d734d","modified":1531323304396},{"_id":"public/archives/2016/12/index.html","hash":"03692d20ef5dd0be68d5512b766afb9ce7d29bbd","modified":1531323304396},{"_id":"public/archives/2017/index.html","hash":"dbb4de2afe99f8a13bcfec6e093b48adad428e6e","modified":1531323304396},{"_id":"public/archives/2017/page/2/index.html","hash":"04d4fe9dee27b364e676a92923c96104606a6c04","modified":1533440317997},{"_id":"public/archives/2017/page/3/index.html","hash":"f7a9f883103760fe868b925c612c9980fc4db227","modified":1531323304397},{"_id":"public/archives/2017/02/index.html","hash":"eb83639d10388ecce16cc5e577f371778284b274","modified":1531323304397},{"_id":"public/archives/2017/03/index.html","hash":"0295590ab390f587f4f0b634c97765a6ba954c4c","modified":1531323304397},{"_id":"public/archives/2017/04/index.html","hash":"bf64a155dbebbe7fa9839c48861b0f803402e963","modified":1531323304397},{"_id":"public/archives/2017/05/index.html","hash":"171a47a3b275e4c564a2b0609597e179c9b070a9","modified":1531323304397},{"_id":"public/archives/2017/07/index.html","hash":"308ca49838d3cea2d3a94ec497312c850dde7e03","modified":1533440317997},{"_id":"public/archives/2017/09/index.html","hash":"1efba798d742e883a0de9fd80df41c08fe932423","modified":1531323304397},{"_id":"public/archives/2017/10/index.html","hash":"27bc8819e7be18192f02252e3b8e5ceb1a05cb1f","modified":1531323304397},{"_id":"public/archives/2017/11/index.html","hash":"d8bf04c35444cf4d7a77f879971be12b567b64c3","modified":1531323304398},{"_id":"public/archives/2017/12/index.html","hash":"8418eb0d1bbf7454b04bd836fee2cb5b4b9abe1d","modified":1531323304398},{"_id":"public/archives/2018/index.html","hash":"a6f4b1868d4d92ce2fed1e41b00e51c09223f942","modified":1531323304398},{"_id":"public/archives/2018/01/index.html","hash":"b43bc0bd907b8f5f9129428cdbf8f7b8402c4227","modified":1531323304398},{"_id":"public/archives/2018/03/index.html","hash":"edc8f09bee709f26a23293a3a30d51a527fbf25b","modified":1531323304398},{"_id":"public/archives/2018/04/index.html","hash":"a2c7d6cd88854af050bdda3e90d7ca386a459fce","modified":1531323304398},{"_id":"public/categories/Coding/index.html","hash":"ac6134bdfda28d9c26cdc18f9e90b535572b5ec3","modified":1533440317997},{"_id":"public/categories/Coding/page/2/index.html","hash":"025dcf16772964270f1515f3312f6dacbdd24690","modified":1531323304398},{"_id":"public/categories/Coding/page/3/index.html","hash":"8a39d456d0de1f3b150c5d65b726f8c86da7e9e9","modified":1531323304398},{"_id":"public/categories/Coding/page/4/index.html","hash":"df006747c725656fd980873aa41ecec639a23644","modified":1531323304399},{"_id":"public/categories/Coding/page/5/index.html","hash":"5e6f83fc19caf7335d7ee1a47c22884bfaf81bc1","modified":1531323304399},{"_id":"public/categories/Math/index.html","hash":"c180151e80f7a9f2f76d49bcb6cffe2012d0b71c","modified":1531323304399},{"_id":"public/categories/Journal/index.html","hash":"3e5c37999b3eff1539969a4bac191e967a488345","modified":1531323304399},{"_id":"public/categories/Journal/page/2/index.html","hash":"221720334a3e5e02b7647921a9f8693887b169d7","modified":1531323304399},{"_id":"public/categories/Journey/index.html","hash":"0e1d4c961b95e139ea27d79bd984f5ae450bce91","modified":1531323304399},{"_id":"public/index.html","hash":"f28f9d5e746a9d9e2f67a381933317bba77ecb51","modified":1531323304399},{"_id":"public/page/2/index.html","hash":"ce39fe72f37da606a3e46206e6133882a118483d","modified":1533440317997},{"_id":"public/page/3/index.html","hash":"a082ed1c0b6311753c76dc7ab1fc8d6f868bb39a","modified":1531323304400},{"_id":"public/page/4/index.html","hash":"9e17c1fe7a6afcda7a73da2f8fcd7074d687e580","modified":1531323304400},{"_id":"public/page/5/index.html","hash":"4c5ba0c885a522b3f4a4af524bec45f9c403433d","modified":1531323304400},{"_id":"public/page/6/index.html","hash":"2408fc124210cd87d94411bedf38b440086480f9","modified":1531323304400},{"_id":"public/page/7/index.html","hash":"869d05effc9d805f028e0272aff72b0cd10ccb7f","modified":1531323304400},{"_id":"public/page/8/index.html","hash":"0a69683dd2da01599daa91095190b68c2bda1da6","modified":1531323304400},{"_id":"public/tags/ubuntu/index.html","hash":"aec2a3d428508a935bb7e1e4f7ea4028f8cb28b9","modified":1531323304400},{"_id":"public/tags/linux/index.html","hash":"1a870891d195461a7bceaeac0f0341bb6179994c","modified":1531323304400},{"_id":"public/tags/linux/page/2/index.html","hash":"693f60899938a28b978b86c7c31bf1942fb76a70","modified":1531323304400},{"_id":"public/tags/encoding/index.html","hash":"95dad4fb564b275edd9e3d6f6e1ebb9850f93da1","modified":1531323304401},{"_id":"public/tags/mysql/index.html","hash":"d5a248da10c9bd37fb88e7381324631469c62a28","modified":1531323304401},{"_id":"public/tags/python/index.html","hash":"c52406c18ce55366859d03a4f5e2e94e63fd31b6","modified":1531323304401},{"_id":"public/tags/mysqldb/index.html","hash":"673d312061ab8f7b5fc166c0c1e5e5f12d29226d","modified":1531323304401},{"_id":"public/tags/kafka/index.html","hash":"2bd8c9ae5b5c1658fe66c994009b530eb833ce7a","modified":1531323304401},{"_id":"public/tags/math/index.html","hash":"05b686ea8a66c8a6ab407038bdd73766cf5e17b9","modified":1531323304401},{"_id":"public/tags/win7/index.html","hash":"96609f5091a65c21dc1ab2ab17d9809204b8cc01","modified":1531323304401},{"_id":"public/tags/pycharm/index.html","hash":"89ccbc28f43eb5ecdd122ece242543dd1b954405","modified":1531323304401},{"_id":"public/tags/java/index.html","hash":"88082bc162bbd9f5d190859c7e638cf78a2bb904","modified":1531323304401},{"_id":"public/tags/anki/index.html","hash":"32b8da9783f86528b9648ad1eaa41153e1529b4d","modified":1531323304401},{"_id":"public/tags/book/index.html","hash":"1e2d88d4122ec38a3bdaa3fc1ff41a66d99c39a6","modified":1531323304401},{"_id":"public/tags/hadoop/index.html","hash":"897387ca03a19b170fbcdc112d75d317521d74c3","modified":1531323304401},{"_id":"public/tags/fcitx/index.html","hash":"29258f8d942344ec1e5df38d74dc82283b3984cd","modified":1531323304401},{"_id":"public/tags/leetcode/index.html","hash":"a93d040891c021e7a46f0eac58ed3f673311ba7e","modified":1531323304401},{"_id":"public/tags/algorithm/index.html","hash":"310b3b2b579a274c44ebd70247faa9c4a005c100","modified":1531323304401},{"_id":"public/tags/javascript/index.html","hash":"3ce705742cddb9403417460c82900d42b565ce20","modified":1531323304401},{"_id":"public/tags/hexo/index.html","hash":"bd134dd6189fe34fedbceff1a8bb1a63040f17e2","modified":1531323304402},{"_id":"public/tags/mathjax/index.html","hash":"ffbfd443164ab15ad8a11ce06f1352d0a382ab1b","modified":1531323304402},{"_id":"public/tags/limit/index.html","hash":"82dbc8f1c5e7f1018daf1bd65709a18119517d4b","modified":1531323304402},{"_id":"public/tags/Scala/index.html","hash":"334c4ee6f4d08287bab4c3ad0d221260971288a1","modified":1531323304402},{"_id":"public/tags/composition/index.html","hash":"7fc5b3fa9f61c7394a9dcada2a659273199c719e","modified":1531323304402},{"_id":"public/tags/proof/index.html","hash":"1f6a5131199ea2d836bf3791f8aea619b281c320","modified":1531323304402},{"_id":"public/tags/git/index.html","hash":"b4e7faa8ed6804926d72c7312d559123f8dacf14","modified":1531323304402},{"_id":"public/tags/dnsmasq/index.html","hash":"cbd10db2ce59a1be3ee1a9acc19c0a101f8db720","modified":1531323304402},{"_id":"public/tags/vim/index.html","hash":"184621734a47e13142dab029d0e7e994d0e29604","modified":1531323304402},{"_id":"public/tags/Java/index.html","hash":"0f557dff22e68edf4b4051213dbbdf2e57eca4b2","modified":1531323304402},{"_id":"public/tags/set-thoery/index.html","hash":"e1343d70f4fff30c6a51b55b641f2932214411ff","modified":1531323304402},{"_id":"public/tags/life/index.html","hash":"be76c5ecd18e2eceb007e97cb03de2399fa0ebe0","modified":1531323304402},{"_id":"public/tags/poisson/index.html","hash":"569c13ed2e81211643700c3448e63687bd523cc2","modified":1531323304402},{"_id":"public/tags/probability/index.html","hash":"5488f9b7fe42ee959bc331ea4723edc0e83eabdf","modified":1531323304402},{"_id":"public/tags/multi-thread-java-scala/index.html","hash":"0e86a50ec7fd4a30207765b22243b20d9918b6e6","modified":1531323304402},{"_id":"public/tags/Big-Data/index.html","hash":"eb20847db82e5d1ce0f289709a25c9c1a30ff0f1","modified":1533440317997},{"_id":"public/tags/Kafka/index.html","hash":"b96f0525d5d4f0efac825e71161af4198fff92c6","modified":1533440317997},{"_id":"public/tags/i3/index.html","hash":"31a53d7fcf4d9f96a4dd362d992d860f98411081","modified":1531323304402},{"_id":"public/tags/virtualbox/index.html","hash":"fbf3beb98bbfffb72dd7e80e37f8bec6c4df9169","modified":1531323304402},{"_id":"public/tags/network/index.html","hash":"8d82556aa1b1118ec1d8a89a359d4297dbe9fcfd","modified":1531323304403},{"_id":"public/tags/django/index.html","hash":"2af65abad057f0cd96d927406e87d19e4b4ff1a5","modified":1531323304403},{"_id":"public/tags/firefox/index.html","hash":"6f7bb80597c73be0b9bbf1b6b794cf4b7f925f97","modified":1531323304403},{"_id":"public/tags/machine-learning/index.html","hash":"e305cc25a6f88ea6ab256c0fb9e2613243bbc3c9","modified":1531323304403},{"_id":"public/tags/zsh/index.html","hash":"c44e2f9fab446316b406bcc4fd35563f559b8495","modified":1531323304403},{"_id":"public/tags/shell/index.html","hash":"fda8231a4eff408bce586c57f881de716224b225","modified":1531323304403},{"_id":"public/tags/chrome/index.html","hash":"30f6f4c6093fe6769a2c3c8d643f984a0d647c54","modified":1531323304403},{"_id":"public/tags/Java-Scala/index.html","hash":"d9e0310ce7e12455f8fbb1fb1b59358543fb574a","modified":1531323304403},{"_id":"public/tags/hueman/index.html","hash":"210757007b7c02b99d882460b229e87ed6fcc437","modified":1531323304403},{"_id":"public/tags/sublime/index.html","hash":"3b4a1151ac805069ae15ed3401132e97ca31be0c","modified":1531323304403},{"_id":"public/tags/jvm/index.html","hash":"7f6376c85512eca67432da292da1022a4215491c","modified":1531323304403},{"_id":"public/tags/Neural-Network/index.html","hash":"d7463cbb85de16e1c8489e78c8a28da570579fb8","modified":1531323304404},{"_id":"public/images/128910133_14610369084721n.jpg","hash":"a5c19bc3d553a4b88969036102a4c6c48490215a","modified":1531323304418},{"_id":"public/images/2017-11-26-163206_448x610_scrot.png","hash":"9319e7115249b3289fc66bd225dea59625d9afd8","modified":1531323304418},{"_id":"public/images/Inheritance in Javascript.svg","hash":"687baaa977f59af36b2202730fd7ff1112cf2c6b","modified":1531323304418},{"_id":"public/images/Blog_Trash-1.jpg","hash":"23acb85a516102467c38fc491a8d7955fac7a09b","modified":1531323304418},{"_id":"public/images/Empower_Life_Change_World-compressed.jpg","hash":"4db0cbe7ff9f86d17751b31794b3f54d5a804940","modified":1531323304418},{"_id":"public/images/Inheritance-in-Javascript-1.png","hash":"1b92bf30310cbbe838c9b61b0d722cbeff7d9159","modified":1531323304418},{"_id":"public/images/Inheritance-in-Javascript.svg","hash":"687baaa977f59af36b2202730fd7ff1112cf2c6b","modified":1531323304418},{"_id":"public/images/Math_Business_sm.jpg","hash":"565bc28d90f40ad65590440b7387bf37ba547574","modified":1531323304418},{"_id":"public/images/Serialization and Deserialization in Java (1).svg","hash":"7418ac48016b98a8b525ecca358add5ccb4208ff","modified":1531323304418},{"_id":"public/images/Serialization and Deserialization in Java.svg","hash":"30dc005264bd2bc152f8a121d463935832223825","modified":1531323304419},{"_id":"public/images/Serialization-and-Deserialization-in-Java-1.svg","hash":"7418ac48016b98a8b525ecca358add5ccb4208ff","modified":1531323304419},{"_id":"public/images/Serialization-and-Deserialization-in-Java.svg","hash":"30dc005264bd2bc152f8a121d463935832223825","modified":1531323304419},{"_id":"public/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png","hash":"6ddebc24c937ea49ea13b16114cb32db76b99318","modified":1531323304419},{"_id":"public/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png","hash":"c1cc23f35c15fcee32c06a45334613dc77ef6167","modified":1531323304419},{"_id":"public/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png","hash":"3c5ef7f3e7006a25ce1bc0e8c98ad56f252d01cd","modified":1531323304419},{"_id":"public/images/The-Machanism-of-Garbage-Collectors-in-Java.png","hash":"1db27dda708459ad439ac70081f0cbede5a4ccd8","modified":1531323304419},{"_id":"public/images/brightness.jpg","hash":"83923347823394ce95df87fe605a56405a90234d","modified":1531323304419},{"_id":"public/images/cast-away-on-the-moon.jpg","hash":"3e6a4dabcc85eab2c14dbb71709c7b8319abf099","modified":1531323304419},{"_id":"public/images/capslock.jpg","hash":"62fe405f36812e5da52def19528ccd45d0151575","modified":1531323304419},{"_id":"public/images/commit-log.svg","hash":"e283329a70c1fce439f97b1e73f33baf3c2c327d","modified":1531323304419},{"_id":"public/images/comparison-between-disk-and-memory.jpg","hash":"5cb40c0bfc3b8ccad0e87b3a21c6a5c7ef58cde3","modified":1531323304419},{"_id":"public/images/fast.png","hash":"9c2093fddac15b4d475a21bcf480c62c70697f6e","modified":1531323304419},{"_id":"public/images/inheritance.png","hash":"fbd3785b57ca59b1e9c98540f54fbe9c4c392cc3","modified":1531323304419},{"_id":"public/images/i3.png","hash":"641dd2fccacc0f875b1720d96d4a21f49120e88e","modified":1531323304419},{"_id":"public/images/inherit.jpg","hash":"1ecae574d696713021ed480cdc4424942ba0077f","modified":1531323304419},{"_id":"public/images/kafka-logo-wide.png","hash":"0c579c31681dfe30c1820ebecb73dcda8494b071","modified":1531323304419},{"_id":"public/images/leader and follower.svg","hash":"d7c921c77c34379a18ab46c71bfcf77a5c7307fe","modified":1531323304419},{"_id":"public/images/main-class-output.png","hash":"b84e043adc9945724435b9402a169dec31bd634e","modified":1531323304419},{"_id":"public/images/new-bingo-sites.png","hash":"2ff155ef7a52b192693974b734c6e5996eec6983","modified":1531323304419},{"_id":"public/images/nick.jpg","hash":"d735e2a2fd195bea2876fa7e3c24d5f436357c2b","modified":1531323304419},{"_id":"public/images/no-zero-copy.png","hash":"59d560b89fe4c52b92cbf6b2448eabc6d5b2d5d5","modified":1531323304419},{"_id":"public/images/openwrt.png","hash":"5dd4116dd49aaf566d8e33f9fc372e15a63c8d0f","modified":1531323304420},{"_id":"public/images/producer-consumer.svg","hash":"2ae43fec2b5700ee29e4442fdb36802c1db6f053","modified":1531323304420},{"_id":"public/images/receive-at-least-once-exception.svg","hash":"9fcb332080b8a50a39eea01bfe391118088bdf26","modified":1531323304420},{"_id":"public/images/library_logos_alibabaev_large.png","hash":"901782056f90bf2e0030f197f48a6200f54e7ad3","modified":1531323304420},{"_id":"public/images/receive-at-least-once.svg","hash":"a2d1a9589e8d8d6ff6d2d4461ca748da6fb60029","modified":1531323304420},{"_id":"public/images/receive-at-most-once-exception.svg","hash":"557ef80e5008a638975cb53eea745c862426a875","modified":1531323304420},{"_id":"public/images/receive-at-most-once.svg","hash":"9f059c2854ad6adc0efc5188503c691f8afb0817","modified":1531323304420},{"_id":"public/images/passenger-law.jpg","hash":"1c5c29fe996cd0c87bb01c64e5ab666f5c81895f","modified":1531323304420},{"_id":"public/images/replicate.svg","hash":"b582fa3f146e705fbfea64b1c926dff69d62f474","modified":1531323304420},{"_id":"public/images/return-immediately.svg","hash":"fb9e24dec30e5281605d7726148ee06201a414d9","modified":1531323304420},{"_id":"public/images/scala-logo.png","hash":"067f5d2f5048dde84cf90e66e2a1e64ec5aadc4c","modified":1531323304420},{"_id":"public/images/serialization.jpg","hash":"6453730a1484b35f86d5f471968a428c80309588","modified":1531323304420},{"_id":"public/images/smart.jpg","hash":"68ec061887105a4930cee21eb28c15f68e23d137","modified":1531323304420},{"_id":"public/images/systemd.jpg","hash":"1ff73e5ac5394e9bb3b858713d3bfa24142cd28f","modified":1531323304420},{"_id":"public/images/topic-partition-offset.svg","hash":"681714ecb9ceba6e7fed60b2388a89d9a66e9b84","modified":1531323304420},{"_id":"public/images/sleep.jpg","hash":"f5b410d0fb5efbeb3b43cbfe97357e9fcb26e606","modified":1531323304420},{"_id":"public/images/wait-for-leader.svg","hash":"4709899fa042f9c05342117b7ef954eeafd95f0c","modified":1531323304420},{"_id":"public/images/wait-for-all.svg","hash":"6a5aef519891b9042040120743ea56d6fb526cc4","modified":1531323304420},{"_id":"public/images/y=1_over_x.png","hash":"f26832b815540611210e5396aec5b07dafebd31d","modified":1531323304420},{"_id":"public/images/zero-copy.png","hash":"f1ae14fafb1c14a2c306b3a8ea807dfccf89cbbd","modified":1531323304420},{"_id":"public/images/where.jpg","hash":"6509220b60e8f295ee5e5362a80c5fc9c9a92e4e","modified":1531323304420},{"_id":"public/images/xl-2017-linux-1.jpg","hash":"8fba9c79726876b502d7a2544bd75d77bdab4b66","modified":1531323304421},{"_id":"public/vendor/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531323304421},{"_id":"public/vendor/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531323304421},{"_id":"public/vendor/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531323304421},{"_id":"public/vendor/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531323304421},{"_id":"public/vendor/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531323304421},{"_id":"public/vendor/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531323304421},{"_id":"public/css/images/s-left.png","hash":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1531323304421},{"_id":"public/css/images/opacity-10.png","hash":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1531323304421},{"_id":"public/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1531323304421},{"_id":"public/css/images/thumb-default.png","hash":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1531323304421},{"_id":"public/css/images/logo-header.png","hash":"f27d6936c9e1e2891ca520f7f86b3610b78c2c5e","modified":1531323304421},{"_id":"public/vendor/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531323304421},{"_id":"public/vendor/scrollLoading/images/preloader@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531323304421},{"_id":"public/vendor/scrollLoading/images/preloader.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531323304421},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcSo_WB_cotcEMUw1LsIE8mM.woff2","hash":"6d17eac7fcc2866f10d1f2725a08ab749a6e978d","modified":1531323304421},{"_id":"public/vendor/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/7XUFZ5tgS-tD6QamInJTcZSnX671uNZIV63UdXh3Mg0.woff2","hash":"78029561e4c2ec565ea11c3f5bbd052b018af8a6","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr4-67659ICLY8bMrYhtePPA.woff2","hash":"4e5557954ec161edc03b6f971ddefee6179c1305","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr9INifKjd1RJ3NxxEi9Cy2w.woff2","hash":"1758c64c8acec4497735ccb5336b1a518d24024c","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr46gJz9aNFrmnwBdd69aqzY.woff2","hash":"1454a4753468b607c23deac9f5438cd0ed5cb35d","modified":1531323304421},{"_id":"public/vendor/titillium-web/fonts/anMUvcNT0H1YN4FII8wpr_SNRT0fZ5CX-AqRkMYgJJo.woff2","hash":"e2e2993940fc54ed41f26e39257fdbd824c05e81","modified":1531323304421},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1531323304422},{"_id":"public/images/980x.png","hash":"33ed228363219be4bbb4a4a2df92efadf9454cee","modified":1531323304932},{"_id":"public/images/This-Guy-Rocks1.jpg","hash":"2a53a7a5b4fc42aa42e0fcb00b6c29bca4b5c8a5","modified":1531323304933},{"_id":"public/images/call.jpg","hash":"18d71b84848a67a7919713bac4ec5e015a3a7648","modified":1531323304934},{"_id":"public/images/deep-learning.jpg","hash":"edfc9939ea0baf6466d218214d11660f63b5dd24","modified":1531323304934},{"_id":"public/images/combination.jpg","hash":"0cae4f932a7702859b6a81c3f7d41f17f039e6e6","modified":1531323304934},{"_id":"public/images/do-the-right-thing.jpg","hash":"cb7d7346bae644a3ffc3e2d76daa048f870c72ab","modified":1531323304934},{"_id":"public/images/empty.jpg","hash":"5c25f9f6d35b2c1fbf164f88c39cb8a24707a5a5","modified":1531323304934},{"_id":"public/images/hadoop.png","hash":"1269b70efa2a92463706834a9e0a30dd7804ef7f","modified":1531323304934},{"_id":"public/images/green-lit-numbers.jpg","hash":"003efa8c9d018f15d98251801d449701f853195d","modified":1531323304934},{"_id":"public/vendor/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1531323304934},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1531323304935},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1531323304935},{"_id":"public/js/main.js","hash":"572148ac9838f4461139eb3c0c1760ef8209de49","modified":1531323305005},{"_id":"public/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1531323305005},{"_id":"public/vendor/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1531323305005},{"_id":"public/vendor/scrollLoading/jquery.scrollLoading.js","hash":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1531323305005},{"_id":"public/vendor/scrollLoading/main.js","hash":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1531323305005},{"_id":"public/vendor/scrollLoading/style.css","hash":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1531323305005},{"_id":"public/vendor/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1531323305005},{"_id":"public/vendor/titillium-web/styles.css","hash":"d98f0c50aae4c922cd0b663fa820fd7dff2dd9b1","modified":1531323305005},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1531323305005},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1531323305005},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1531323305005},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1531323305006},{"_id":"public/vendor/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1531323305006},{"_id":"public/css/style.css","hash":"2127c4cfaf3f1043bf900c0c832669a6c8ac107f","modified":1531323305006},{"_id":"public/vendor/fancybox/jquery.fancybox.js","hash":"c36aa96c08e0f0bc10a91e71f5f5aa1dbe4435c6","modified":1531323305006},{"_id":"public/vendor/fancybox/jquery.fancybox.pack.js","hash":"4bdce95d7ed1e6e3f0cdbb21972f6ed730db6ec9","modified":1531323305006},{"_id":"public/vendor/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1531323305006},{"_id":"public/vendor/jquery/2.0.3/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1531323305006},{"_id":"public/images/8608094661_f6fdcc0c83_b.jpg","hash":"866f7a50fb67264f44b8ea0277b8f8b5c54caa6f","modified":1531323305006},{"_id":"public/images/input.png","hash":"c541bffd35b221bc2b342ff40638afd29af7c69c","modified":1531323305006},{"_id":"public/images/refund.png","hash":"1e06da7adfdc0c40618b28e0543066d9003c94c3","modified":1531323305006},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1531323305006},{"_id":"public/images/1_1354265864.jpg","hash":"95628e13b960499b3f1a8a0bde4968e46c5181a8","modified":1531323305016},{"_id":"public/images/cisco_systems_hq2.0.jpg","hash":"db6de98cb583d5718cfc60f583626d4f518d1709","modified":1531323305016},{"_id":"public/images/plane.png","hash":"ddba8dd74eb8128d95b7916e1cc3f84f998ff840","modified":1531323305016},{"_id":"public/images/time.jpg","hash":"304772f8876d1ed4f9d2b3e8dfe1243650bf01f9","modified":1531323305016},{"_id":"public/images/mathjax.png","hash":"4d67baf6a26aee2a3a3cee56a2186f4737e4bfbe","modified":1531323305021},{"_id":"public/vendor/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1531323305026},{"_id":"public/images/school.jpg","hash":"fc62c1fa9a9bde0abe2fea81bf9dd0376433b848","modified":1531323305060},{"_id":"public/images/i3wm_screenshot.png","hash":"3f041910eb69be0e1f6b5a718381b777fe1dc078","modified":1531323305079},{"_id":"public/images/IMG_20180406_094127.jpg","hash":"437d1a290d591d98cf92184224d58e8b17797f4f","modified":1531323305085},{"_id":"public/images/IMG_20180406_123639.jpg","hash":"e635e5662e2c5942a54173184c5ed8d55684c8b5","modified":1531323305087},{"_id":"public/images/IMG_20180406_084153.jpg","hash":"9d783bea3d83effb246ef6adfc111f32e9bb3da2","modified":1531323305090},{"_id":"public/images/IMG_20180406_090110.jpg","hash":"44516a897b4197b48ec74f8c14d4c716b54e322a","modified":1531323305093},{"_id":"public/images/IMG_20180406_095808.jpg","hash":"ad41ca4a83f98e28b23e644b87003048aed3c3a8","modified":1531323305101},{"_id":"source/images/forest.jpg","hash":"7b3fed5b0c82474370085aeb05c93ed2a76e7852","modified":1531323441237},{"_id":"public/images/forest.jpg","hash":"7b3fed5b0c82474370085aeb05c93ed2a76e7852","modified":1531323472479}],"Category":[{"name":"Coding","_id":"cjjhacqc900038arfppub3409"},{"name":"Math","_id":"cjjhacqcm000k8arf2o1ireo5"},{"name":"Journal","_id":"cjjhacqcp000r8arfbvcu14i4"},{"name":"Journey","_id":"cjjhacqdx003r8arf5u2e9q53"}],"Data":[],"Page":[{"title":"about me","date":"2016-05-23T18:11:42.000Z","_content":"\nI'm a software engineer. I like coding, music and hiking in my spare time.\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2016-05-24 02:11:42\n---\n\nI'm a software engineer. I like coding, music and hiking in my spare time.\n","updated":"2017-08-21T12:41:01.120Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjjhacqc700018arf3gibvkjv","content":"<p>I’m a software engineer. I like coding, music and hiking in my spare time.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m a software engineer. I like coding, music and hiking in my spare time.</p>\n"}],"Post":[{"title":"Spark Source Code Walkthrough","draft":true,"date":"2017-10-05T01:27:34.000Z","thumbnail":null,"_content":"\n# load-spark-env.sh\n\nIt loads all the variables in `spark-env.sh` and set `SPARK_SCALA_VERSION` based on which scala library exists in the spark directory. To avoid mistake, we create a new file `spark-env.sh` in `${SPARK_HOME}/conf` and set this variable.\n\n```bash\nSPARK_SCALA_VERSION=2.11\n```\n\nIf we don't set it, it will probably use `2.10` as the Scala version.\n\n# spark-class\n\nRun `org.apache.spark.launcher.Main`, which outputs a command to be execute later.\n\n```bash\nbuild_command() {\n  \"$RUNNER\" -Xmx128m -cp \"$LAUNCH_CLASSPATH\" org.apache.spark.launcher.Main \"$@\"\n  printf \"%d\\0\" $?\n}\n\n...\n\nexec \"${CMD[@]}\"\n```\n\nFor example, if we submit the jar like this.\n\n```bash\nspark-submit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nIt run this run command in `build_command()`\n\n```bash\njava -Xmx128m -cp '/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*' org.apache.spark.launcher.Main org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nThis command will probably end up giving the following outputs, each separated by `\\0`\n\n1. /usr/lib/jvm/java-8-openjdk/jre/bin/java\n2. -cp\n3. /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/\n4. org.apache.spark.deploy.SparkSubmit\n5. --master\n6. yarn\n7. --deploy-mode\n8. cluster\n\nThen `spark-load` will concatenate those outputs into a complete command and execute it.\n\n```bash\nexec /usr/lib/jvm/java-8-openjdk/jre/bin/java -cp '/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/' org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\n# org.apache.spark.launcher.Main\n\n**Run**\n\nBefore running the `Main` class, we need to setup some environment variables first.\n\n```bash\nexport SPARK_HOME=~/apps/spark-2.2.0-bin-hadoop2.7\nexport SPARK_SCALA_VERSION=2.11\n```\n\nThen go to ${spark_project}/launcher, run the `Main` class.\n\n```bash\nmvn exec:java -Dexec.mainClass=org.apache.spark.launcher.Main -Dexec.args=\"org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\"\n```\n\nOutput:\n\n```bash\n/usr/lib/jvm/java-8-jdk/jre/bin/java -cp /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/* org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nNotice that the output is a combination of multiple strings, separated by the null(`\\0`) character. But some shells may omit these null characters. It would be better if you run it in Intellij, the null character is very obvious in the output window.\n\n![main-class-output](/images/main-class-output.png)\n\n**What it does**\n\nBasically the class checks if the options provided by the user are valid, and add some other parameters to the output argument list(e.g. classpath)","source":"_drafts/Spark-Source-Code-Walkthrough.md","raw":"title: Spark Source Code Walkthrough\ndraft: true\ndate: 2017-10-05 09:27:34\ntags: Spark\ncategories: Coding\nthumbnail:\n---\n\n# load-spark-env.sh\n\nIt loads all the variables in `spark-env.sh` and set `SPARK_SCALA_VERSION` based on which scala library exists in the spark directory. To avoid mistake, we create a new file `spark-env.sh` in `${SPARK_HOME}/conf` and set this variable.\n\n```bash\nSPARK_SCALA_VERSION=2.11\n```\n\nIf we don't set it, it will probably use `2.10` as the Scala version.\n\n# spark-class\n\nRun `org.apache.spark.launcher.Main`, which outputs a command to be execute later.\n\n```bash\nbuild_command() {\n  \"$RUNNER\" -Xmx128m -cp \"$LAUNCH_CLASSPATH\" org.apache.spark.launcher.Main \"$@\"\n  printf \"%d\\0\" $?\n}\n\n...\n\nexec \"${CMD[@]}\"\n```\n\nFor example, if we submit the jar like this.\n\n```bash\nspark-submit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nIt run this run command in `build_command()`\n\n```bash\njava -Xmx128m -cp '/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*' org.apache.spark.launcher.Main org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nThis command will probably end up giving the following outputs, each separated by `\\0`\n\n1. /usr/lib/jvm/java-8-openjdk/jre/bin/java\n2. -cp\n3. /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/\n4. org.apache.spark.deploy.SparkSubmit\n5. --master\n6. yarn\n7. --deploy-mode\n8. cluster\n\nThen `spark-load` will concatenate those outputs into a complete command and execute it.\n\n```bash\nexec /usr/lib/jvm/java-8-openjdk/jre/bin/java -cp '/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/' org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\n# org.apache.spark.launcher.Main\n\n**Run**\n\nBefore running the `Main` class, we need to setup some environment variables first.\n\n```bash\nexport SPARK_HOME=~/apps/spark-2.2.0-bin-hadoop2.7\nexport SPARK_SCALA_VERSION=2.11\n```\n\nThen go to ${spark_project}/launcher, run the `Main` class.\n\n```bash\nmvn exec:java -Dexec.mainClass=org.apache.spark.launcher.Main -Dexec.args=\"org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\"\n```\n\nOutput:\n\n```bash\n/usr/lib/jvm/java-8-jdk/jre/bin/java -cp /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/* org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\n```\n\nNotice that the output is a combination of multiple strings, separated by the null(`\\0`) character. But some shells may omit these null characters. It would be better if you run it in Intellij, the null character is very obvious in the output window.\n\n![main-class-output](/images/main-class-output.png)\n\n**What it does**\n\nBasically the class checks if the options provided by the user are valid, and add some other parameters to the output argument list(e.g. classpath)","slug":"Spark-Source-Code-Walkthrough","published":0,"updated":"2017-10-06T01:57:05.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqc300008arfnri2us31","content":"<h1 id=\"load-spark-env-sh\"><a href=\"#load-spark-env-sh\" class=\"headerlink\" title=\"load-spark-env.sh\"></a>load-spark-env.sh</h1><p>It loads all the variables in <code>spark-env.sh</code> and set <code>SPARK_SCALA_VERSION</code> based on which scala library exists in the spark directory. To avoid mistake, we create a new file <code>spark-env.sh</code> in <code>${SPARK_HOME}/conf</code> and set this variable.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SPARK_SCALA_VERSION=2.11</div></pre></td></tr></table></figure>\n<p>If we don’t set it, it will probably use <code>2.10</code> as the Scala version.</p>\n<h1 id=\"spark-class\"><a href=\"#spark-class\" class=\"headerlink\" title=\"spark-class\"></a>spark-class</h1><p>Run <code>org.apache.spark.launcher.Main</code>, which outputs a command to be execute later.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">build_command</span></span>() &#123;</div><div class=\"line\">  <span class=\"string\">\"<span class=\"variable\">$RUNNER</span>\"</span> -Xmx128m -cp <span class=\"string\">\"<span class=\"variable\">$LAUNCH_CLASSPATH</span>\"</span> org.apache.spark.launcher.Main <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></div><div class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"%d\\0\"</span> $?</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$&#123;CMD[@]&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p>For example, if we submit the jar like this.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spark-submit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>It run this run command in <code>build_command()</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -Xmx128m -cp <span class=\"string\">'/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*'</span> org.apache.spark.launcher.Main org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>This command will probably end up giving the following outputs, each separated by <code>\\0</code></p>\n<ol>\n<li>/usr/lib/jvm/java-8-openjdk/jre/bin/java</li>\n<li>-cp</li>\n<li>/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/</li>\n<li>org.apache.spark.deploy.SparkSubmit</li>\n<li>–master</li>\n<li>yarn</li>\n<li>–deploy-mode</li>\n<li>cluster</li>\n</ol>\n<p>Then <code>spark-load</code> will concatenate those outputs into a complete command and execute it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">exec</span> /usr/lib/jvm/java-8-openjdk/jre/bin/java -cp <span class=\"string\">'/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/'</span> org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<h1 id=\"org-apache-spark-launcher-Main\"><a href=\"#org-apache-spark-launcher-Main\" class=\"headerlink\" title=\"org.apache.spark.launcher.Main\"></a>org.apache.spark.launcher.Main</h1><p><strong>Run</strong></p>\n<p>Before running the <code>Main</code> class, we need to setup some environment variables first.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HOME=~/apps/spark-2.2.0-bin-hadoop2.7</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_SCALA_VERSION=2.11</div></pre></td></tr></table></figure>\n<p>Then go to ${spark_project}/launcher, run the <code>Main</code> class.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn <span class=\"built_in\">exec</span>:java -Dexec.mainClass=org.apache.spark.launcher.Main -Dexec.args=<span class=\"string\">\"org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\"</span></div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/lib/jvm/java-8-jdk/jre/bin/java -cp /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/* org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>Notice that the output is a combination of multiple strings, separated by the null(<code>\\0</code>) character. But some shells may omit these null characters. It would be better if you run it in Intellij, the null character is very obvious in the output window.</p>\n<p><img src=\"/images/main-class-output.png\" alt=\"main-class-output\"></p>\n<p><strong>What it does</strong></p>\n<p>Basically the class checks if the options provided by the user are valid, and add some other parameters to the output argument list(e.g. classpath)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"load-spark-env-sh\"><a href=\"#load-spark-env-sh\" class=\"headerlink\" title=\"load-spark-env.sh\"></a>load-spark-env.sh</h1><p>It loads all the variables in <code>spark-env.sh</code> and set <code>SPARK_SCALA_VERSION</code> based on which scala library exists in the spark directory. To avoid mistake, we create a new file <code>spark-env.sh</code> in <code>${SPARK_HOME}/conf</code> and set this variable.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SPARK_SCALA_VERSION=2.11</div></pre></td></tr></table></figure>\n<p>If we don’t set it, it will probably use <code>2.10</code> as the Scala version.</p>\n<h1 id=\"spark-class\"><a href=\"#spark-class\" class=\"headerlink\" title=\"spark-class\"></a>spark-class</h1><p>Run <code>org.apache.spark.launcher.Main</code>, which outputs a command to be execute later.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"title\">build_command</span></span>() &#123;</div><div class=\"line\">  <span class=\"string\">\"<span class=\"variable\">$RUNNER</span>\"</span> -Xmx128m -cp <span class=\"string\">\"<span class=\"variable\">$LAUNCH_CLASSPATH</span>\"</span> org.apache.spark.launcher.Main <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></div><div class=\"line\">  <span class=\"built_in\">printf</span> <span class=\"string\">\"%d\\0\"</span> $?</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exec</span> <span class=\"string\">\"<span class=\"variable\">$&#123;CMD[@]&#125;</span>\"</span></div></pre></td></tr></table></figure>\n<p>For example, if we submit the jar like this.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">spark-submit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>It run this run command in <code>build_command()</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -Xmx128m -cp <span class=\"string\">'/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*'</span> org.apache.spark.launcher.Main org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>This command will probably end up giving the following outputs, each separated by <code>\\0</code></p>\n<ol>\n<li>/usr/lib/jvm/java-8-openjdk/jre/bin/java</li>\n<li>-cp</li>\n<li>/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/</li>\n<li>org.apache.spark.deploy.SparkSubmit</li>\n<li>–master</li>\n<li>yarn</li>\n<li>–deploy-mode</li>\n<li>cluster</li>\n</ol>\n<p>Then <code>spark-load</code> will concatenate those outputs into a complete command and execute it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">exec</span> /usr/lib/jvm/java-8-openjdk/jre/bin/java -cp <span class=\"string\">'/home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/*:/home/searene/config/hadoop/conf/'</span> org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<h1 id=\"org-apache-spark-launcher-Main\"><a href=\"#org-apache-spark-launcher-Main\" class=\"headerlink\" title=\"org.apache.spark.launcher.Main\"></a>org.apache.spark.launcher.Main</h1><p><strong>Run</strong></p>\n<p>Before running the <code>Main</code> class, we need to setup some environment variables first.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> SPARK_HOME=~/apps/spark-2.2.0-bin-hadoop2.7</div><div class=\"line\"><span class=\"built_in\">export</span> SPARK_SCALA_VERSION=2.11</div></pre></td></tr></table></figure>\n<p>Then go to ${spark_project}/launcher, run the <code>Main</code> class.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn <span class=\"built_in\">exec</span>:java -Dexec.mainClass=org.apache.spark.launcher.Main -Dexec.args=<span class=\"string\">\"org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar\"</span></div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/usr/lib/jvm/java-8-jdk/jre/bin/java -cp /home/searene/apps/spark-2.2.0-bin-hadoop2.7/conf/:/home/searene/apps/spark-2.2.0-bin-hadoop2.7/jars/* org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode cluster target/scala-2.11/spark-test_2.11-0.1.jar</div></pre></td></tr></table></figure>\n<p>Notice that the output is a combination of multiple strings, separated by the null(<code>\\0</code>) character. But some shells may omit these null characters. It would be better if you run it in Intellij, the null character is very obvious in the output window.</p>\n<p><img src=\"/images/main-class-output.png\" alt=\"main-class-output\"></p>\n<p><strong>What it does</strong></p>\n<p>Basically the class checks if the options provided by the user are valid, and add some other parameters to the output argument list(e.g. classpath)</p>\n"},{"title":"Auto Adjust Brightness On Ubuntu 16.10 Using Systemd","date":"2016-12-06T14:05:27.000Z","thumbnail":"/images/brightness.jpg","_content":"\nThis works on ubuntu 16.10\n\nCreate a file `brightness.service` in `/lib/systemd/system` with the following contents(Change 100 to whatever brightness you want, roughly it’s between 0 ~ 1000).\n\n```\n[Unit]\nDescription=Lower default brightness\n\n[Service]\nExecStart=/usr/bin/zsh -c \"echo 100 > /sys/class/backlight/intel_backlight/brightness\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEnable it.\n\n```\nsudo systemctl enable brightness.\n```\n\nRestart. It will work.\n","source":"_posts/Auto-Adjust-Brightness-On-Ubuntu-16-10-Using-Systemd.md","raw":"title: Auto Adjust Brightness On Ubuntu 16.10 Using Systemd\ndate: 2016-12-06 22:05:27\ntags: [ubuntu, linux]\ncategories: Coding\nthumbnail: /images/brightness.jpg\n---\n\nThis works on ubuntu 16.10\n\nCreate a file `brightness.service` in `/lib/systemd/system` with the following contents(Change 100 to whatever brightness you want, roughly it’s between 0 ~ 1000).\n\n```\n[Unit]\nDescription=Lower default brightness\n\n[Service]\nExecStart=/usr/bin/zsh -c \"echo 100 > /sys/class/backlight/intel_backlight/brightness\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\nEnable it.\n\n```\nsudo systemctl enable brightness.\n```\n\nRestart. It will work.\n","slug":"Auto-Adjust-Brightness-On-Ubuntu-16-10-Using-Systemd","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqc700028arf1fb1zfno","content":"<p>This works on ubuntu 16.10</p>\n<p>Create a file <code>brightness.service</code> in <code>/lib/systemd/system</code> with the following contents(Change 100 to whatever brightness you want, roughly it’s between 0 ~ 1000).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Lower default brightness</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">ExecStart=/usr/bin/zsh -c &quot;echo 100 &gt; /sys/class/backlight/intel_backlight/brightness&quot;</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p>Enable it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl enable brightness.</div></pre></td></tr></table></figure>\n<p>Restart. It will work.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This works on ubuntu 16.10</p>\n<p>Create a file <code>brightness.service</code> in <code>/lib/systemd/system</code> with the following contents(Change 100 to whatever brightness you want, roughly it’s between 0 ~ 1000).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Unit]</div><div class=\"line\">Description=Lower default brightness</div><div class=\"line\"></div><div class=\"line\">[Service]</div><div class=\"line\">ExecStart=/usr/bin/zsh -c &quot;echo 100 &gt; /sys/class/backlight/intel_backlight/brightness&quot;</div><div class=\"line\"></div><div class=\"line\">[Install]</div><div class=\"line\">WantedBy=multi-user.target</div></pre></td></tr></table></figure>\n<p>Enable it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo systemctl enable brightness.</div></pre></td></tr></table></figure>\n<p>Restart. It will work.</p>\n"},{"title":"An Illustration of Various Encoding Schemes","date":"2017-05-13T14:04:58.000Z","thumbnail":"/images/green-lit-numbers.jpg","_content":"\n## What are encoding schemes?\n\nEncoding schemes are ways to store and retrieve characters in computers. For example, in `ISO-8859-1`(which is one of various encoding schemes), we use `01100001` to denote `a`, and `00111111` to denote `?`. Because computers only know how to store and fetch `0` and `1`, we must have a way to store other characters like alphabets, or even Chinese characters.\n\n## Some of the frequently used encoding schemes\n\n**ISO-8859-1**\n\nISO-8859-1 is also called LATIN-1, which is a deprecated encoding scheme. It can only store the 256 characters in the ASCII table.\n\nFor example, let’s write a text file with the following contents:\n\n```\n&1231208ABCabc中文\n```\n\nLet’s see how the computer stores it. Type the command `xxd -b resources/test/ASCII.txt` to display the real contents the computer stores.\n\n```\n00000000: 00100110 00110001 00110010 00110011 00110001 00110010 &12312\n00000006: 00110000 00111000 01000001 01000010 01000011 01100001 08ABCa\n0000000c: 01100010 01100011 00111111 00111111 bc??\n```\n\nWe can see that `&` was stored as `00100110`, and `1` was stored as `00110001`. This is exactly how ISO-8859-1 processes characters. It maps each character to a unique byte. Refer to the code page displayed in [Wikipedia](https://en.wikipedia.org/wiki/ISO/IEC*8859-1) to see the map. Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to\n\nBecause ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to `00111111 00111111`, which are just two question marks in ISO-8859-1.\n\n**Unicode**\n\nYou may notice that ISO-8859-1 can only store 256 characters, this is not enough. How can we store Chinese characters, which include way more characters than 256? Here comes *Unicode*.  \nUnicode is a computing industry standard that is able to store millions of characters in computers. Basically it’s just a huge map, which maps every character in this world to a number, which takes 1 ~ 4 bytes depending on what the character is.\n\nFor example, `A` is mapped to `0x41`, `w` is mapped to `ox77`, `中` is mapped to `0x4E2D`. Each character in this world has its number mapped. You can find the whole mapping table in [here](https://unicode-table.com/en/#control-character).\n\n**UTF-8**\n\n*Unicode* may have solved the problem, right? Why would we need *UTF-8*, and what is *UTF-8*? To find out the reason, first we need to find out if *Unicode* could solve our problem directly.\n\nSay I want to store `AA` on my disk. In Unicode, `A` is mapped to `0x41`, so what I need to do is just store `0x4141` in my computer, right? No, it’s not going to work. How can we know what `0x4141` is if we try to decode it? Is it `AA`, or just a character whose mapping number is exactly `0x4141`? Because a Unicode character takes 1 ~ 4 bytes, you will never know the boundary of each character if you store it directly on the disk.\n\nHow can we solve the problem? The simplest method is to store each character in 4 bytes, if a character’s mapping number is less than 4 bytes, left padding it with zeros, so `A` would become `0x00000041` instead of just `0x41`, that’s a way, it would work, but since most characters take less than 4 bytes in Unicode, it would waste a lot of space if we use this method. So here comes UTF-8.\n\nIn UTF-8, the first 128 characters in the ASCII table take only 1 byte each.  \nFor those characters, the first bit in each byte is 0\\. When we need to denote a character that is not one of those characters, like `中`, which takes 2 bytes in Unicode, we set the first bit of its first byte to 1, and set the rest bits according to the Unicode Standard. More detailed can be seen from [here](https://en.wikipedia.org/wiki/UTF-8#Description).\n\n**So we can say that Unicode is just a standard, UTF-8 is a way to implement the standard, which specifies in detail how to store the Unicode number onto disk.**\n","source":"_posts/An-Illustration-of-Various-Encoding-Schemes.md","raw":"title: An Illustration of Various Encoding Schemes\ndate: 2017-05-13 22:04:58\ntags: encoding\ncategories: Coding\nthumbnail: /images/green-lit-numbers.jpg\n---\n\n## What are encoding schemes?\n\nEncoding schemes are ways to store and retrieve characters in computers. For example, in `ISO-8859-1`(which is one of various encoding schemes), we use `01100001` to denote `a`, and `00111111` to denote `?`. Because computers only know how to store and fetch `0` and `1`, we must have a way to store other characters like alphabets, or even Chinese characters.\n\n## Some of the frequently used encoding schemes\n\n**ISO-8859-1**\n\nISO-8859-1 is also called LATIN-1, which is a deprecated encoding scheme. It can only store the 256 characters in the ASCII table.\n\nFor example, let’s write a text file with the following contents:\n\n```\n&1231208ABCabc中文\n```\n\nLet’s see how the computer stores it. Type the command `xxd -b resources/test/ASCII.txt` to display the real contents the computer stores.\n\n```\n00000000: 00100110 00110001 00110010 00110011 00110001 00110010 &12312\n00000006: 00110000 00111000 01000001 01000010 01000011 01100001 08ABCa\n0000000c: 01100010 01100011 00111111 00111111 bc??\n```\n\nWe can see that `&` was stored as `00100110`, and `1` was stored as `00110001`. This is exactly how ISO-8859-1 processes characters. It maps each character to a unique byte. Refer to the code page displayed in [Wikipedia](https://en.wikipedia.org/wiki/ISO/IEC*8859-1) to see the map. Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to\n\nBecause ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to `00111111 00111111`, which are just two question marks in ISO-8859-1.\n\n**Unicode**\n\nYou may notice that ISO-8859-1 can only store 256 characters, this is not enough. How can we store Chinese characters, which include way more characters than 256? Here comes *Unicode*.  \nUnicode is a computing industry standard that is able to store millions of characters in computers. Basically it’s just a huge map, which maps every character in this world to a number, which takes 1 ~ 4 bytes depending on what the character is.\n\nFor example, `A` is mapped to `0x41`, `w` is mapped to `ox77`, `中` is mapped to `0x4E2D`. Each character in this world has its number mapped. You can find the whole mapping table in [here](https://unicode-table.com/en/#control-character).\n\n**UTF-8**\n\n*Unicode* may have solved the problem, right? Why would we need *UTF-8*, and what is *UTF-8*? To find out the reason, first we need to find out if *Unicode* could solve our problem directly.\n\nSay I want to store `AA` on my disk. In Unicode, `A` is mapped to `0x41`, so what I need to do is just store `0x4141` in my computer, right? No, it’s not going to work. How can we know what `0x4141` is if we try to decode it? Is it `AA`, or just a character whose mapping number is exactly `0x4141`? Because a Unicode character takes 1 ~ 4 bytes, you will never know the boundary of each character if you store it directly on the disk.\n\nHow can we solve the problem? The simplest method is to store each character in 4 bytes, if a character’s mapping number is less than 4 bytes, left padding it with zeros, so `A` would become `0x00000041` instead of just `0x41`, that’s a way, it would work, but since most characters take less than 4 bytes in Unicode, it would waste a lot of space if we use this method. So here comes UTF-8.\n\nIn UTF-8, the first 128 characters in the ASCII table take only 1 byte each.  \nFor those characters, the first bit in each byte is 0\\. When we need to denote a character that is not one of those characters, like `中`, which takes 2 bytes in Unicode, we set the first bit of its first byte to 1, and set the rest bits according to the Unicode Standard. More detailed can be seen from [here](https://en.wikipedia.org/wiki/UTF-8#Description).\n\n**So we can say that Unicode is just a standard, UTF-8 is a way to implement the standard, which specifies in detail how to store the Unicode number onto disk.**\n","slug":"An-Illustration-of-Various-Encoding-Schemes","published":1,"updated":"2017-05-26T14:12:08.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcc00058arfsdzv1nso","content":"<h2 id=\"What-are-encoding-schemes\"><a href=\"#What-are-encoding-schemes\" class=\"headerlink\" title=\"What are encoding schemes?\"></a>What are encoding schemes?</h2><p>Encoding schemes are ways to store and retrieve characters in computers. For example, in <code>ISO-8859-1</code>(which is one of various encoding schemes), we use <code>01100001</code> to denote <code>a</code>, and <code>00111111</code> to denote <code>?</code>. Because computers only know how to store and fetch <code>0</code> and <code>1</code>, we must have a way to store other characters like alphabets, or even Chinese characters.</p>\n<h2 id=\"Some-of-the-frequently-used-encoding-schemes\"><a href=\"#Some-of-the-frequently-used-encoding-schemes\" class=\"headerlink\" title=\"Some of the frequently used encoding schemes\"></a>Some of the frequently used encoding schemes</h2><p><strong>ISO-8859-1</strong></p>\n<p>ISO-8859-1 is also called LATIN-1, which is a deprecated encoding scheme. It can only store the 256 characters in the ASCII table.</p>\n<p>For example, let’s write a text file with the following contents:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&amp;1231208ABCabc中文</div></pre></td></tr></table></figure>\n<p>Let’s see how the computer stores it. Type the command <code>xxd -b resources/test/ASCII.txt</code> to display the real contents the computer stores.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">00000000: 00100110 00110001 00110010 00110011 00110001 00110010 &amp;12312</div><div class=\"line\">00000006: 00110000 00111000 01000001 01000010 01000011 01100001 08ABCa</div><div class=\"line\">0000000c: 01100010 01100011 00111111 00111111 bc??</div></pre></td></tr></table></figure>\n<p>We can see that <code>&amp;</code> was stored as <code>00100110</code>, and <code>1</code> was stored as <code>00110001</code>. This is exactly how ISO-8859-1 processes characters. It maps each character to a unique byte. Refer to the code page displayed in <a href=\"https://en.wikipedia.org/wiki/ISO/IEC*8859-1\" target=\"_blank\" rel=\"external\">Wikipedia</a> to see the map. Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to</p>\n<p>Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to <code>00111111 00111111</code>, which are just two question marks in ISO-8859-1.</p>\n<p><strong>Unicode</strong></p>\n<p>You may notice that ISO-8859-1 can only store 256 characters, this is not enough. How can we store Chinese characters, which include way more characters than 256? Here comes <em>Unicode</em>.<br>Unicode is a computing industry standard that is able to store millions of characters in computers. Basically it’s just a huge map, which maps every character in this world to a number, which takes 1 ~ 4 bytes depending on what the character is.</p>\n<p>For example, <code>A</code> is mapped to <code>0x41</code>, <code>w</code> is mapped to <code>ox77</code>, <code>中</code> is mapped to <code>0x4E2D</code>. Each character in this world has its number mapped. You can find the whole mapping table in <a href=\"https://unicode-table.com/en/#control-character\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p><strong>UTF-8</strong></p>\n<p><em>Unicode</em> may have solved the problem, right? Why would we need <em>UTF-8</em>, and what is <em>UTF-8</em>? To find out the reason, first we need to find out if <em>Unicode</em> could solve our problem directly.</p>\n<p>Say I want to store <code>AA</code> on my disk. In Unicode, <code>A</code> is mapped to <code>0x41</code>, so what I need to do is just store <code>0x4141</code> in my computer, right? No, it’s not going to work. How can we know what <code>0x4141</code> is if we try to decode it? Is it <code>AA</code>, or just a character whose mapping number is exactly <code>0x4141</code>? Because a Unicode character takes 1 ~ 4 bytes, you will never know the boundary of each character if you store it directly on the disk.</p>\n<p>How can we solve the problem? The simplest method is to store each character in 4 bytes, if a character’s mapping number is less than 4 bytes, left padding it with zeros, so <code>A</code> would become <code>0x00000041</code> instead of just <code>0x41</code>, that’s a way, it would work, but since most characters take less than 4 bytes in Unicode, it would waste a lot of space if we use this method. So here comes UTF-8.</p>\n<p>In UTF-8, the first 128 characters in the ASCII table take only 1 byte each.<br>For those characters, the first bit in each byte is 0. When we need to denote a character that is not one of those characters, like <code>中</code>, which takes 2 bytes in Unicode, we set the first bit of its first byte to 1, and set the rest bits according to the Unicode Standard. More detailed can be seen from <a href=\"https://en.wikipedia.org/wiki/UTF-8#Description\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p><strong>So we can say that Unicode is just a standard, UTF-8 is a way to implement the standard, which specifies in detail how to store the Unicode number onto disk.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-are-encoding-schemes\"><a href=\"#What-are-encoding-schemes\" class=\"headerlink\" title=\"What are encoding schemes?\"></a>What are encoding schemes?</h2><p>Encoding schemes are ways to store and retrieve characters in computers. For example, in <code>ISO-8859-1</code>(which is one of various encoding schemes), we use <code>01100001</code> to denote <code>a</code>, and <code>00111111</code> to denote <code>?</code>. Because computers only know how to store and fetch <code>0</code> and <code>1</code>, we must have a way to store other characters like alphabets, or even Chinese characters.</p>\n<h2 id=\"Some-of-the-frequently-used-encoding-schemes\"><a href=\"#Some-of-the-frequently-used-encoding-schemes\" class=\"headerlink\" title=\"Some of the frequently used encoding schemes\"></a>Some of the frequently used encoding schemes</h2><p><strong>ISO-8859-1</strong></p>\n<p>ISO-8859-1 is also called LATIN-1, which is a deprecated encoding scheme. It can only store the 256 characters in the ASCII table.</p>\n<p>For example, let’s write a text file with the following contents:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&amp;1231208ABCabc中文</div></pre></td></tr></table></figure>\n<p>Let’s see how the computer stores it. Type the command <code>xxd -b resources/test/ASCII.txt</code> to display the real contents the computer stores.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">00000000: 00100110 00110001 00110010 00110011 00110001 00110010 &amp;12312</div><div class=\"line\">00000006: 00110000 00111000 01000001 01000010 01000011 01100001 08ABCa</div><div class=\"line\">0000000c: 01100010 01100011 00111111 00111111 bc??</div></pre></td></tr></table></figure>\n<p>We can see that <code>&amp;</code> was stored as <code>00100110</code>, and <code>1</code> was stored as <code>00110001</code>. This is exactly how ISO-8859-1 processes characters. It maps each character to a unique byte. Refer to the code page displayed in <a href=\"https://en.wikipedia.org/wiki/ISO/IEC*8859-1\" target=\"_blank\" rel=\"external\">Wikipedia</a> to see the map. Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to</p>\n<p>Because ISO-8859-1 doesn’t have a way to store Chinese characters, we can see that 中文 are mapped to <code>00111111 00111111</code>, which are just two question marks in ISO-8859-1.</p>\n<p><strong>Unicode</strong></p>\n<p>You may notice that ISO-8859-1 can only store 256 characters, this is not enough. How can we store Chinese characters, which include way more characters than 256? Here comes <em>Unicode</em>.<br>Unicode is a computing industry standard that is able to store millions of characters in computers. Basically it’s just a huge map, which maps every character in this world to a number, which takes 1 ~ 4 bytes depending on what the character is.</p>\n<p>For example, <code>A</code> is mapped to <code>0x41</code>, <code>w</code> is mapped to <code>ox77</code>, <code>中</code> is mapped to <code>0x4E2D</code>. Each character in this world has its number mapped. You can find the whole mapping table in <a href=\"https://unicode-table.com/en/#control-character\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p><strong>UTF-8</strong></p>\n<p><em>Unicode</em> may have solved the problem, right? Why would we need <em>UTF-8</em>, and what is <em>UTF-8</em>? To find out the reason, first we need to find out if <em>Unicode</em> could solve our problem directly.</p>\n<p>Say I want to store <code>AA</code> on my disk. In Unicode, <code>A</code> is mapped to <code>0x41</code>, so what I need to do is just store <code>0x4141</code> in my computer, right? No, it’s not going to work. How can we know what <code>0x4141</code> is if we try to decode it? Is it <code>AA</code>, or just a character whose mapping number is exactly <code>0x4141</code>? Because a Unicode character takes 1 ~ 4 bytes, you will never know the boundary of each character if you store it directly on the disk.</p>\n<p>How can we solve the problem? The simplest method is to store each character in 4 bytes, if a character’s mapping number is less than 4 bytes, left padding it with zeros, so <code>A</code> would become <code>0x00000041</code> instead of just <code>0x41</code>, that’s a way, it would work, but since most characters take less than 4 bytes in Unicode, it would waste a lot of space if we use this method. So here comes UTF-8.</p>\n<p>In UTF-8, the first 128 characters in the ASCII table take only 1 byte each.<br>For those characters, the first bit in each byte is 0. When we need to denote a character that is not one of those characters, like <code>中</code>, which takes 2 bytes in Unicode, we set the first bit of its first byte to 1, and set the rest bits according to the Unicode Standard. More detailed can be seen from <a href=\"https://en.wikipedia.org/wiki/UTF-8#Description\" target=\"_blank\" rel=\"external\">here</a>.</p>\n<p><strong>So we can say that Unicode is just a standard, UTF-8 is a way to implement the standard, which specifies in detail how to store the Unicode number onto disk.</strong></p>\n"},{"title":"Batch Insert Into MySQL With Python","date":"2015-12-07T11:50:29.000Z","thumbnail":"https://upload.wikimedia.org/wikipedia/en/thumb/6/62/MySQL.svg/1280px-MySQL.svg.png","_content":"\nIn Python, you can use `MySQLdb`'s `executemany` to insert multiple records into MySQL at once. First, let's install `MySQLdb`. The command used to install it depends on your OS:\n\n1. **easy_install mysql-python** (mix os)\n2. **pip install mysql-python** (mix os/ python 2)\n3. **pip install mysqlclient** (mix os/ python 3)\n4. **apt-get install python-mysqldb** (Linux Ubuntu, ...)\n5. **cd /usr/ports/databases/py-MySQLdb && make install clean** (FreeBSD)\n6. **yum install MySQL-python** (Linux Fedora, CentOS ...)\n\n(Source: [Stackoverflow](https://stackoverflow.com/a/5873259/1031769))\n\nThen use `executemany` to insert multiple records at once.\n\n```python\nimport MySQLdb\ndb=MySQLdb.connect(user=\"searene\",passwd=\"123\",db=\"test\")\nc=db.cursor()\nc.executemany(\n      \"\"\"INSERT INTO breakfast (name, spam, eggs, sausage, price)\n      VALUES (%s, %s, %s, %s, %s)\"\"\",\n      [\n      (\"Spam and Sausage Lover's Plate\", 5, 1, 8, 7.95 ),\n      (\"Not So Much Spam Plate\", 3, 2, 0, 3.95 ),\n      (\"Don't Wany ANY SPAM! Plate\", 0, 4, 3, 5.95 )\n      ] )\ndb.commit()\n\n# close db if you don't need to execute other SQLs.\ndb.close()\n```\n\n(Source: [MySQLdb documentation](http://mysql-python.sourceforge.net/MySQLdb.html))","source":"_posts/Batch-Insert-Into-MySQL-With-Python.md","raw":"title: Batch Insert Into MySQL With Python\ndate: 2015-12-07 19:50:29\ncategories: Coding\ntags: [mysql, python, mysqldb]\nthumbnail: https://upload.wikimedia.org/wikipedia/en/thumb/6/62/MySQL.svg/1280px-MySQL.svg.png\n---\n\nIn Python, you can use `MySQLdb`'s `executemany` to insert multiple records into MySQL at once. First, let's install `MySQLdb`. The command used to install it depends on your OS:\n\n1. **easy_install mysql-python** (mix os)\n2. **pip install mysql-python** (mix os/ python 2)\n3. **pip install mysqlclient** (mix os/ python 3)\n4. **apt-get install python-mysqldb** (Linux Ubuntu, ...)\n5. **cd /usr/ports/databases/py-MySQLdb && make install clean** (FreeBSD)\n6. **yum install MySQL-python** (Linux Fedora, CentOS ...)\n\n(Source: [Stackoverflow](https://stackoverflow.com/a/5873259/1031769))\n\nThen use `executemany` to insert multiple records at once.\n\n```python\nimport MySQLdb\ndb=MySQLdb.connect(user=\"searene\",passwd=\"123\",db=\"test\")\nc=db.cursor()\nc.executemany(\n      \"\"\"INSERT INTO breakfast (name, spam, eggs, sausage, price)\n      VALUES (%s, %s, %s, %s, %s)\"\"\",\n      [\n      (\"Spam and Sausage Lover's Plate\", 5, 1, 8, 7.95 ),\n      (\"Not So Much Spam Plate\", 3, 2, 0, 3.95 ),\n      (\"Don't Wany ANY SPAM! Plate\", 0, 4, 3, 5.95 )\n      ] )\ndb.commit()\n\n# close db if you don't need to execute other SQLs.\ndb.close()\n```\n\n(Source: [MySQLdb documentation](http://mysql-python.sourceforge.net/MySQLdb.html))","slug":"Batch-Insert-Into-MySQL-With-Python","published":1,"updated":"2018-07-04T14:49:02.883Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcd00068arflm9vc8un","content":"<p>In Python, you can use <code>MySQLdb</code>‘s <code>executemany</code> to insert multiple records into MySQL at once. First, let’s install <code>MySQLdb</code>. The command used to install it depends on your OS:</p>\n<ol>\n<li><strong>easy_install mysql-python</strong> (mix os)</li>\n<li><strong>pip install mysql-python</strong> (mix os/ python 2)</li>\n<li><strong>pip install mysqlclient</strong> (mix os/ python 3)</li>\n<li><strong>apt-get install python-mysqldb</strong> (Linux Ubuntu, …)</li>\n<li><strong>cd /usr/ports/databases/py-MySQLdb &amp;&amp; make install clean</strong> (FreeBSD)</li>\n<li><strong>yum install MySQL-python</strong> (Linux Fedora, CentOS …)</li>\n</ol>\n<p>(Source: <a href=\"https://stackoverflow.com/a/5873259/1031769\" target=\"_blank\" rel=\"external\">Stackoverflow</a>)</p>\n<p>Then use <code>executemany</code> to insert multiple records at once.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">db=MySQLdb.connect(user=<span class=\"string\">\"searene\"</span>,passwd=<span class=\"string\">\"123\"</span>,db=<span class=\"string\">\"test\"</span>)</div><div class=\"line\">c=db.cursor()</div><div class=\"line\">c.executemany(</div><div class=\"line\">      <span class=\"string\">\"\"\"INSERT INTO breakfast (name, spam, eggs, sausage, price)</span></div><div class=\"line\">      VALUES (%s, %s, %s, %s, %s)\"\"\",</div><div class=\"line\">      [</div><div class=\"line\">      (<span class=\"string\">\"Spam and Sausage Lover's Plate\"</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7.95</span> ),</div><div class=\"line\">      (<span class=\"string\">\"Not So Much Spam Plate\"</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3.95</span> ),</div><div class=\"line\">      (<span class=\"string\">\"Don't Wany ANY SPAM! Plate\"</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5.95</span> )</div><div class=\"line\">      ] )</div><div class=\"line\">db.commit()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># close db if you don't need to execute other SQLs.</span></div><div class=\"line\">db.close()</div></pre></td></tr></table></figure>\n<p>(Source: <a href=\"http://mysql-python.sourceforge.net/MySQLdb.html\" target=\"_blank\" rel=\"external\">MySQLdb documentation</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In Python, you can use <code>MySQLdb</code>‘s <code>executemany</code> to insert multiple records into MySQL at once. First, let’s install <code>MySQLdb</code>. The command used to install it depends on your OS:</p>\n<ol>\n<li><strong>easy_install mysql-python</strong> (mix os)</li>\n<li><strong>pip install mysql-python</strong> (mix os/ python 2)</li>\n<li><strong>pip install mysqlclient</strong> (mix os/ python 3)</li>\n<li><strong>apt-get install python-mysqldb</strong> (Linux Ubuntu, …)</li>\n<li><strong>cd /usr/ports/databases/py-MySQLdb &amp;&amp; make install clean</strong> (FreeBSD)</li>\n<li><strong>yum install MySQL-python</strong> (Linux Fedora, CentOS …)</li>\n</ol>\n<p>(Source: <a href=\"https://stackoverflow.com/a/5873259/1031769\" target=\"_blank\" rel=\"external\">Stackoverflow</a>)</p>\n<p>Then use <code>executemany</code> to insert multiple records at once.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\">db=MySQLdb.connect(user=<span class=\"string\">\"searene\"</span>,passwd=<span class=\"string\">\"123\"</span>,db=<span class=\"string\">\"test\"</span>)</div><div class=\"line\">c=db.cursor()</div><div class=\"line\">c.executemany(</div><div class=\"line\">      <span class=\"string\">\"\"\"INSERT INTO breakfast (name, spam, eggs, sausage, price)</span></div><div class=\"line\">      VALUES (%s, %s, %s, %s, %s)\"\"\",</div><div class=\"line\">      [</div><div class=\"line\">      (<span class=\"string\">\"Spam and Sausage Lover's Plate\"</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">7.95</span> ),</div><div class=\"line\">      (<span class=\"string\">\"Not So Much Spam Plate\"</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">3.95</span> ),</div><div class=\"line\">      (<span class=\"string\">\"Don't Wany ANY SPAM! Plate\"</span>, <span class=\"number\">0</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5.95</span> )</div><div class=\"line\">      ] )</div><div class=\"line\">db.commit()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># close db if you don't need to execute other SQLs.</span></div><div class=\"line\">db.close()</div></pre></td></tr></table></figure>\n<p>(Source: <a href=\"http://mysql-python.sourceforge.net/MySQLdb.html\" target=\"_blank\" rel=\"external\">MySQLdb documentation</a>)</p>\n"},{"title":"kafka in a nutshell","date":"2017-05-18T13:51:28.000Z","thumbnail":"/images/kafka-logo-wide.png","_content":"\n# Introduction\nKafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.\n\n# Basic Model\nBasically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.\n\n![producer-consumer model](/images/producer-consumer.svg)\n\nNotice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.\n\nThere are some keywords you need to about first before getting into some details of Kafka.\n\n**Topic**: When you are sending data to Kafka using producers, you have to tell producers, \"Hey, could you please send these data to *that place* in the Kafka server?\" Here *that place* should be replaced with *topic*. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, *game*, *website* and *log*, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.\n\n**Partition**: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.\n\n**Offset**: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, *offset* starts from 0 and increases by one each time a message is received from producers.\n\n![topic-partition-offset](/images/topic-partition-offset.svg)\n\n**Broker**: Each server in Kafka is called a *broker*.\n\n**Leader & Follower**: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it's safe to say that the same partition is replicated across multiple servers. One of those partitions is called *leader*, and others are called *follower*.\n\nSuppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:\n\n![leader and follower](/images/leader and follower.svg)\n\n# Producer\n\nWhen producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower...until all followers have the same data as the leader.\n\n![replicate](/images/replicate.svg)\n\nEach broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker's commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.\n\n![commit log](/images/commit-log.svg)\n\nSo when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.\n\n1. Producer returns immediately right after the message is written into the leader, don't wait for commit.\n\n  ![no confirm](/images/return-immediately.svg)\n\n2. Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.\n\n  ![wait for leader](/images/wait-for-leader.svg)\n\n3. Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.\n\n  ![wait for all](/images/wait-for-all.svg)\n\n# Consumer\nConsumers in Kafka use the `poll()` function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.\n\n1. Commit At Most Once\n\n  You have to set the following properties to use this mode:\n  \n  ```\n  enable.auto.commit = true\n  auto.commit.interval.ms = 15\n  ```\n\n  The value of `auto.commit.interval.ms` could be any number. Now let's talk about what these properties mean and how the mode works.\n  \n  The following steps will be proceeded if this mode is turned on:\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer checks whether `auto.commit.interval.ms` is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what `enable.auto.commit` means.\n  3. Consumer processes the fetched data.\n  4. Repeat above steps.\n\n  Let's use a picture to illustrate the process.\n\n  ![commit at most once](/images/commit-at-most-once.svg)\n\n  Regarding the above diagram, what will happen if error occurs while processing data?\n\n  ![commit at most once exception](/images/commit-at-most-once-exception.svg)\n\n  Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.\n\n2. Commit At Least Once\n\n  You have to set the following properties to turn on this mode.\n\n  ```\n  enable.auto.commit = false\n  ```\n\n  As you can see, `enable.auto.commit` is set `false`, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer processes those data.\n  3. Consumer commit offsets regarding those data manually.\n  4. Repeat above steps.\n\n  Here is a picture to illustrate the process.\n\n  ![commit at least once](/images/commit-at-least-once.svg)\n\n  What if an exception occurs while we are processing data, just like the last mode mentioned before?\n\n  ![commit at least once exception](/images/commit-at-least-once-exception.svg)\n\n  Well, as you can see, nothing is lost here because we haven't committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That's totally fine as long as we have a proper filter system to filter out those duplicated data.\n\n  Since this mode is safer than the last one, we often choose to use `commit at least once` in Kafka to fetch data.\n\n  There's also another mode called `commit exactly once`, where the committed messages and offsets will get through a transaction system. It's even safer than `commit at least once` but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.\n","source":"_drafts/kafka-in-a-nutshell.md","raw":"title: kafka in a nutshell\ndate: 2017-05-18 21:51:28\ntags: [kafka]\ncategories: Coding\nthumbnail: /images/kafka-logo-wide.png\n---\n\n# Introduction\nKafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.\n\n# Basic Model\nBasically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.\n\n![producer-consumer model](/images/producer-consumer.svg)\n\nNotice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.\n\nThere are some keywords you need to about first before getting into some details of Kafka.\n\n**Topic**: When you are sending data to Kafka using producers, you have to tell producers, \"Hey, could you please send these data to *that place* in the Kafka server?\" Here *that place* should be replaced with *topic*. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, *game*, *website* and *log*, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.\n\n**Partition**: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.\n\n**Offset**: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, *offset* starts from 0 and increases by one each time a message is received from producers.\n\n![topic-partition-offset](/images/topic-partition-offset.svg)\n\n**Broker**: Each server in Kafka is called a *broker*.\n\n**Leader & Follower**: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it's safe to say that the same partition is replicated across multiple servers. One of those partitions is called *leader*, and others are called *follower*.\n\nSuppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:\n\n![leader and follower](/images/leader and follower.svg)\n\n# Producer\n\nWhen producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower...until all followers have the same data as the leader.\n\n![replicate](/images/replicate.svg)\n\nEach broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker's commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.\n\n![commit log](/images/commit-log.svg)\n\nSo when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.\n\n1. Producer returns immediately right after the message is written into the leader, don't wait for commit.\n\n  ![no confirm](/images/return-immediately.svg)\n\n2. Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.\n\n  ![wait for leader](/images/wait-for-leader.svg)\n\n3. Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.\n\n  ![wait for all](/images/wait-for-all.svg)\n\n# Consumer\nConsumers in Kafka use the `poll()` function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.\n\n1. Commit At Most Once\n\n  You have to set the following properties to use this mode:\n  \n  ```\n  enable.auto.commit = true\n  auto.commit.interval.ms = 15\n  ```\n\n  The value of `auto.commit.interval.ms` could be any number. Now let's talk about what these properties mean and how the mode works.\n  \n  The following steps will be proceeded if this mode is turned on:\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer checks whether `auto.commit.interval.ms` is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what `enable.auto.commit` means.\n  3. Consumer processes the fetched data.\n  4. Repeat above steps.\n\n  Let's use a picture to illustrate the process.\n\n  ![commit at most once](/images/commit-at-most-once.svg)\n\n  Regarding the above diagram, what will happen if error occurs while processing data?\n\n  ![commit at most once exception](/images/commit-at-most-once-exception.svg)\n\n  Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.\n\n2. Commit At Least Once\n\n  You have to set the following properties to turn on this mode.\n\n  ```\n  enable.auto.commit = false\n  ```\n\n  As you can see, `enable.auto.commit` is set `false`, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer processes those data.\n  3. Consumer commit offsets regarding those data manually.\n  4. Repeat above steps.\n\n  Here is a picture to illustrate the process.\n\n  ![commit at least once](/images/commit-at-least-once.svg)\n\n  What if an exception occurs while we are processing data, just like the last mode mentioned before?\n\n  ![commit at least once exception](/images/commit-at-least-once-exception.svg)\n\n  Well, as you can see, nothing is lost here because we haven't committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That's totally fine as long as we have a proper filter system to filter out those duplicated data.\n\n  Since this mode is safer than the last one, we often choose to use `commit at least once` in Kafka to fetch data.\n\n  There's also another mode called `commit exactly once`, where the committed messages and offsets will get through a transaction system. It's even safer than `commit at least once` but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.\n","slug":"kafka-in-a-nutshell","published":0,"updated":"2017-05-23T12:25:09.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqce00078arfjajspane","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Kafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.</p>\n<h1 id=\"Basic-Model\"><a href=\"#Basic-Model\" class=\"headerlink\" title=\"Basic Model\"></a>Basic Model</h1><p>Basically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.</p>\n<p><img src=\"/images/producer-consumer.svg\" alt=\"producer-consumer model\"></p>\n<p>Notice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.</p>\n<p>There are some keywords you need to about first before getting into some details of Kafka.</p>\n<p><strong>Topic</strong>: When you are sending data to Kafka using producers, you have to tell producers, “Hey, could you please send these data to <em>that place</em> in the Kafka server?” Here <em>that place</em> should be replaced with <em>topic</em>. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, <em>game</em>, <em>website</em> and <em>log</em>, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.</p>\n<p><strong>Partition</strong>: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.</p>\n<p><strong>Offset</strong>: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, <em>offset</em> starts from 0 and increases by one each time a message is received from producers.</p>\n<p><img src=\"/images/topic-partition-offset.svg\" alt=\"topic-partition-offset\"></p>\n<p><strong>Broker</strong>: Each server in Kafka is called a <em>broker</em>.</p>\n<p><strong>Leader &amp; Follower</strong>: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it’s safe to say that the same partition is replicated across multiple servers. One of those partitions is called <em>leader</em>, and others are called <em>follower</em>.</p>\n<p>Suppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:</p>\n<p><img src=\"/images/leader and follower.svg\" alt=\"leader and follower\"></p>\n<h1 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h1><p>When producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower…until all followers have the same data as the leader.</p>\n<p><img src=\"/images/replicate.svg\" alt=\"replicate\"></p>\n<p>Each broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker’s commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.</p>\n<p><img src=\"/images/commit-log.svg\" alt=\"commit log\"></p>\n<p>So when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.</p>\n<ol>\n<li><p>Producer returns immediately right after the message is written into the leader, don’t wait for commit.</p>\n<p><img src=\"/images/return-immediately.svg\" alt=\"no confirm\"></p>\n</li>\n<li><p>Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.</p>\n<p><img src=\"/images/wait-for-leader.svg\" alt=\"wait for leader\"></p>\n</li>\n<li><p>Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.</p>\n<p><img src=\"/images/wait-for-all.svg\" alt=\"wait for all\"></p>\n</li>\n</ol>\n<h1 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h1><p>Consumers in Kafka use the <code>poll()</code> function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.</p>\n<ol>\n<li><p>Commit At Most Once</p>\n<p>You have to set the following properties to use this mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = true</div><div class=\"line\">auto.commit.interval.ms = 15</div></pre></td></tr></table></figure>\n<p>The value of <code>auto.commit.interval.ms</code> could be any number. Now let’s talk about what these properties mean and how the mode works.</p>\n<p>The following steps will be proceeded if this mode is turned on:</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer checks whether <code>auto.commit.interval.ms</code> is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what <code>enable.auto.commit</code> means.</li>\n<li>Consumer processes the fetched data.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Let’s use a picture to illustrate the process.</p>\n<p><img src=\"/images/commit-at-most-once.svg\" alt=\"commit at most once\"></p>\n<p>Regarding the above diagram, what will happen if error occurs while processing data?</p>\n<p><img src=\"/images/commit-at-most-once-exception.svg\" alt=\"commit at most once exception\"></p>\n<p>Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.</p>\n</li>\n<li><p>Commit At Least Once</p>\n<p>You have to set the following properties to turn on this mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = false</div></pre></td></tr></table></figure>\n<p>As you can see, <code>enable.auto.commit</code> is set <code>false</code>, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer processes those data.</li>\n<li>Consumer commit offsets regarding those data manually.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Here is a picture to illustrate the process.</p>\n<p><img src=\"/images/commit-at-least-once.svg\" alt=\"commit at least once\"></p>\n<p>What if an exception occurs while we are processing data, just like the last mode mentioned before?</p>\n<p><img src=\"/images/commit-at-least-once-exception.svg\" alt=\"commit at least once exception\"></p>\n<p>Well, as you can see, nothing is lost here because we haven’t committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That’s totally fine as long as we have a proper filter system to filter out those duplicated data.</p>\n<p>Since this mode is safer than the last one, we often choose to use <code>commit at least once</code> in Kafka to fetch data.</p>\n<p>There’s also another mode called <code>commit exactly once</code>, where the committed messages and offsets will get through a transaction system. It’s even safer than <code>commit at least once</code> but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Kafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.</p>\n<h1 id=\"Basic-Model\"><a href=\"#Basic-Model\" class=\"headerlink\" title=\"Basic Model\"></a>Basic Model</h1><p>Basically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.</p>\n<p><img src=\"/images/producer-consumer.svg\" alt=\"producer-consumer model\"></p>\n<p>Notice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.</p>\n<p>There are some keywords you need to about first before getting into some details of Kafka.</p>\n<p><strong>Topic</strong>: When you are sending data to Kafka using producers, you have to tell producers, “Hey, could you please send these data to <em>that place</em> in the Kafka server?” Here <em>that place</em> should be replaced with <em>topic</em>. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, <em>game</em>, <em>website</em> and <em>log</em>, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.</p>\n<p><strong>Partition</strong>: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.</p>\n<p><strong>Offset</strong>: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, <em>offset</em> starts from 0 and increases by one each time a message is received from producers.</p>\n<p><img src=\"/images/topic-partition-offset.svg\" alt=\"topic-partition-offset\"></p>\n<p><strong>Broker</strong>: Each server in Kafka is called a <em>broker</em>.</p>\n<p><strong>Leader &amp; Follower</strong>: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it’s safe to say that the same partition is replicated across multiple servers. One of those partitions is called <em>leader</em>, and others are called <em>follower</em>.</p>\n<p>Suppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:</p>\n<p><img src=\"/images/leader and follower.svg\" alt=\"leader and follower\"></p>\n<h1 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h1><p>When producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower…until all followers have the same data as the leader.</p>\n<p><img src=\"/images/replicate.svg\" alt=\"replicate\"></p>\n<p>Each broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker’s commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.</p>\n<p><img src=\"/images/commit-log.svg\" alt=\"commit log\"></p>\n<p>So when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.</p>\n<ol>\n<li><p>Producer returns immediately right after the message is written into the leader, don’t wait for commit.</p>\n<p><img src=\"/images/return-immediately.svg\" alt=\"no confirm\"></p>\n</li>\n<li><p>Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.</p>\n<p><img src=\"/images/wait-for-leader.svg\" alt=\"wait for leader\"></p>\n</li>\n<li><p>Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.</p>\n<p><img src=\"/images/wait-for-all.svg\" alt=\"wait for all\"></p>\n</li>\n</ol>\n<h1 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h1><p>Consumers in Kafka use the <code>poll()</code> function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.</p>\n<ol>\n<li><p>Commit At Most Once</p>\n<p>You have to set the following properties to use this mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = true</div><div class=\"line\">auto.commit.interval.ms = 15</div></pre></td></tr></table></figure>\n<p>The value of <code>auto.commit.interval.ms</code> could be any number. Now let’s talk about what these properties mean and how the mode works.</p>\n<p>The following steps will be proceeded if this mode is turned on:</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer checks whether <code>auto.commit.interval.ms</code> is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what <code>enable.auto.commit</code> means.</li>\n<li>Consumer processes the fetched data.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Let’s use a picture to illustrate the process.</p>\n<p><img src=\"/images/commit-at-most-once.svg\" alt=\"commit at most once\"></p>\n<p>Regarding the above diagram, what will happen if error occurs while processing data?</p>\n<p><img src=\"/images/commit-at-most-once-exception.svg\" alt=\"commit at most once exception\"></p>\n<p>Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.</p>\n</li>\n<li><p>Commit At Least Once</p>\n<p>You have to set the following properties to turn on this mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = false</div></pre></td></tr></table></figure>\n<p>As you can see, <code>enable.auto.commit</code> is set <code>false</code>, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer processes those data.</li>\n<li>Consumer commit offsets regarding those data manually.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Here is a picture to illustrate the process.</p>\n<p><img src=\"/images/commit-at-least-once.svg\" alt=\"commit at least once\"></p>\n<p>What if an exception occurs while we are processing data, just like the last mode mentioned before?</p>\n<p><img src=\"/images/commit-at-least-once-exception.svg\" alt=\"commit at least once exception\"></p>\n<p>Well, as you can see, nothing is lost here because we haven’t committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That’s totally fine as long as we have a proper filter system to filter out those duplicated data.</p>\n<p>Since this mode is safer than the last one, we often choose to use <code>commit at least once</code> in Kafka to fetch data.</p>\n<p>There’s also another mode called <code>commit exactly once</code>, where the committed messages and offsets will get through a transaction system. It’s even safer than <code>commit at least once</code> but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.</p>\n</li>\n</ol>\n"},{"title":"Calculate $$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$$","date":"2016-09-30T13:49:00.000Z","thumbnail":"http://www.codeforest.net/wp-content/uploads/2010/11/lambda.jpg","_content":"\nI came upon the calculation of $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$ when I was reviewing Poisson distribution. Notice that $\\lambda_n = np_n(n\\in\\mathbb{Z}_{\\geq 0}, 0\\leq p \\leq 1)$ and $\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda(\\lambda\\in\\mathbb{R})$.\n\nSo how to calculate it? The first thought that came to my mind was that\n\n$$\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n = e \\tag 1$$\n\nSo replace $n$ with $-n$, I got\n\n$$\\lim\\limits_{n\\to\\infty}(1 - \\frac1 n)^n = \\frac1 e \\tag 2$$\n\nThen I have no clue about what to do next, I'm not even sure whether (2) is right or not. So I started digging from the calculation of $\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n$.\n\nHere is how I solve the problem.\n\nLet $t$ be any number in the interval $[1-\\frac{\\lambda_n}n, 1]$, then we get\n\n$$1-\\frac{\\lambda_n} n\\leq t\\leq1$$\n\nTherefore\n\n$$\\frac 1{1-\\frac{\\lambda_n} n} \\leq \\frac 1 t \\leq 1$$\n\nTherefore\n\n$$\\int_{1-\\frac{\\lambda_n}n}^1\\frac 1{1-\\frac{\\lambda_n} n}dt \\leq \\int_{1-\\frac{\\lambda_n}n}^1\\frac 1 t dt\\leq \\int_{1-\\frac{\\lambda_n}n}^1 1dt$$\n\nThe first integral equals $\\frac{\\lambda_n}n$, the second integral equals $ln(1-\\frac{\\lambda_n} n)^{-1}$, the third integral equals $\\frac{\\lambda_n}{n-\\lambda_n}$, so we get\n\n$$\\frac{\\lambda_n}n\\leq ln(1-\\frac{\\lambda_n} n)^{-1} \\leq \\frac{\\lambda_n}{n-\\lambda_n}$$\n\nExponentiating, we find that\n\n$$e^{\\frac{\\lambda_n} n}\\leq(1-\\frac{\\lambda_n}n)^{-1}\\leq e^{\\frac{\\lambda_n}{n-\\lambda_n}}$$\n\nTaking the $(-n)^{st}$ power of the left inequality gives us\n\n$$e^{-{\\lambda_n}}\\geq (1-\\frac{\\lambda_n} n)^n\\tag{3}$$\n\nTaking the $(\\lambda_n - n)^{th}$ power of the right inequality gives us\n\n$$(1-\\frac{\\lambda_n} n)^{(n-\\lambda_n)}\\geq e^{-\\lambda_n}$$\n\nWhy was $\\geq$ replaced with $\\leq$?  Because $\\lambda_n = np_n, n\\geq 0, 0\\leq p_n\\leq 1$($p_n$ denotes the probability), so $\\lambda_n-n = np_n - n = n(p_n - 1)\\leq 0$, the power is less or equal to 0, so we need change the direction of the sign.\n\nMultiply each side of the inequality by $(1-\\frac{\\lambda_n} n)^{\\lambda_n}$, we get\n\n$$(1-\\frac{\\lambda_n} n)^n\\geq {e^{-\\lambda_n}} {(1-\\frac{\\lambda_n} n)^{\\lambda_n}}\\tag 4$$\n\nCombine (3) and (4), we get\n\n$$e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n}\\leq (1-\\frac{\\lambda_n} n)^n \\leq e^{-\\lambda_n}$$\n\nAccording to [this theorem](https://searene.me/2016/10/01/Proof-of-limit-f-x-g-x-c-d/), because $1 - \\frac{\\lambda_n} n > 0, \\lambda_n > 0, \\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$, we have\n\n$\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = [\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)]^{\\lim\\limits_{n\\to\\infty}\\lambda_n}$\n\n$ = \\lim\\limits_{n\\to\\infty}(1-\\lambda_n\\cdot\\frac 1 n)^\\lambda$\n\n$ = (\\lim\\limits_{n\\to\\infty}1 - \\lim\\limits_{n\\to\\infty}\\lambda_n\\cdot\\lim\\limits_{n\\to\\infty}\\frac 1 n)^\\lambda$\n\n$ = (1 -\\lambda\\cdot0)^\\lambda = 1$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = e^{-\\lambda}$$\n\n$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n} = e^{-\\lambda}$$\n\nAccording to squeeze theorem, we get\n\n$$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$$\n\nWhich is the answer.\n\n# Reference\n\n1. [$e$ as the limit of $(1+\\frac 1 n)^n$](http://aleph0.clarku.edu/~djoyce/ma122/elimit.pdf)\n","source":"_posts/Calculate-1-lambda-n-n.md","raw":"title: Calculate $$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$$\ndate: 2016-09-30 21:49:00\ntags: math\ncategories: Math\nthumbnail: http://www.codeforest.net/wp-content/uploads/2010/11/lambda.jpg\n---\n\nI came upon the calculation of $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$ when I was reviewing Poisson distribution. Notice that $\\lambda_n = np_n(n\\in\\mathbb{Z}_{\\geq 0}, 0\\leq p \\leq 1)$ and $\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda(\\lambda\\in\\mathbb{R})$.\n\nSo how to calculate it? The first thought that came to my mind was that\n\n$$\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n = e \\tag 1$$\n\nSo replace $n$ with $-n$, I got\n\n$$\\lim\\limits_{n\\to\\infty}(1 - \\frac1 n)^n = \\frac1 e \\tag 2$$\n\nThen I have no clue about what to do next, I'm not even sure whether (2) is right or not. So I started digging from the calculation of $\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n$.\n\nHere is how I solve the problem.\n\nLet $t$ be any number in the interval $[1-\\frac{\\lambda_n}n, 1]$, then we get\n\n$$1-\\frac{\\lambda_n} n\\leq t\\leq1$$\n\nTherefore\n\n$$\\frac 1{1-\\frac{\\lambda_n} n} \\leq \\frac 1 t \\leq 1$$\n\nTherefore\n\n$$\\int_{1-\\frac{\\lambda_n}n}^1\\frac 1{1-\\frac{\\lambda_n} n}dt \\leq \\int_{1-\\frac{\\lambda_n}n}^1\\frac 1 t dt\\leq \\int_{1-\\frac{\\lambda_n}n}^1 1dt$$\n\nThe first integral equals $\\frac{\\lambda_n}n$, the second integral equals $ln(1-\\frac{\\lambda_n} n)^{-1}$, the third integral equals $\\frac{\\lambda_n}{n-\\lambda_n}$, so we get\n\n$$\\frac{\\lambda_n}n\\leq ln(1-\\frac{\\lambda_n} n)^{-1} \\leq \\frac{\\lambda_n}{n-\\lambda_n}$$\n\nExponentiating, we find that\n\n$$e^{\\frac{\\lambda_n} n}\\leq(1-\\frac{\\lambda_n}n)^{-1}\\leq e^{\\frac{\\lambda_n}{n-\\lambda_n}}$$\n\nTaking the $(-n)^{st}$ power of the left inequality gives us\n\n$$e^{-{\\lambda_n}}\\geq (1-\\frac{\\lambda_n} n)^n\\tag{3}$$\n\nTaking the $(\\lambda_n - n)^{th}$ power of the right inequality gives us\n\n$$(1-\\frac{\\lambda_n} n)^{(n-\\lambda_n)}\\geq e^{-\\lambda_n}$$\n\nWhy was $\\geq$ replaced with $\\leq$?  Because $\\lambda_n = np_n, n\\geq 0, 0\\leq p_n\\leq 1$($p_n$ denotes the probability), so $\\lambda_n-n = np_n - n = n(p_n - 1)\\leq 0$, the power is less or equal to 0, so we need change the direction of the sign.\n\nMultiply each side of the inequality by $(1-\\frac{\\lambda_n} n)^{\\lambda_n}$, we get\n\n$$(1-\\frac{\\lambda_n} n)^n\\geq {e^{-\\lambda_n}} {(1-\\frac{\\lambda_n} n)^{\\lambda_n}}\\tag 4$$\n\nCombine (3) and (4), we get\n\n$$e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n}\\leq (1-\\frac{\\lambda_n} n)^n \\leq e^{-\\lambda_n}$$\n\nAccording to [this theorem](https://searene.me/2016/10/01/Proof-of-limit-f-x-g-x-c-d/), because $1 - \\frac{\\lambda_n} n > 0, \\lambda_n > 0, \\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$, we have\n\n$\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = [\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)]^{\\lim\\limits_{n\\to\\infty}\\lambda_n}$\n\n$ = \\lim\\limits_{n\\to\\infty}(1-\\lambda_n\\cdot\\frac 1 n)^\\lambda$\n\n$ = (\\lim\\limits_{n\\to\\infty}1 - \\lim\\limits_{n\\to\\infty}\\lambda_n\\cdot\\lim\\limits_{n\\to\\infty}\\frac 1 n)^\\lambda$\n\n$ = (1 -\\lambda\\cdot0)^\\lambda = 1$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = e^{-\\lambda}$$\n\n$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n} = e^{-\\lambda}$$\n\nAccording to squeeze theorem, we get\n\n$$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$$\n\nWhich is the answer.\n\n# Reference\n\n1. [$e$ as the limit of $(1+\\frac 1 n)^n$](http://aleph0.clarku.edu/~djoyce/ma122/elimit.pdf)\n","slug":"Calculate-1-lambda-n-n","published":1,"updated":"2017-05-18T16:44:46.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqch000b8arf3ud1cicc","content":"<p>I came upon the calculation of $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$ when I was reviewing Poisson distribution. Notice that $\\lambda_n = np_n(n\\in\\mathbb{Z}_{\\geq 0}, 0\\leq p \\leq 1)$ and $\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda(\\lambda\\in\\mathbb{R})$.</p>\n<p>So how to calculate it? The first thought that came to my mind was that</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n = e \\tag 1$$</p>\n<p>So replace $n$ with $-n$, I got</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1 - \\frac1 n)^n = \\frac1 e \\tag 2$$</p>\n<p>Then I have no clue about what to do next, I’m not even sure whether (2) is right or not. So I started digging from the calculation of $\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n$.</p>\n<p>Here is how I solve the problem.</p>\n<p>Let $t$ be any number in the interval $[1-\\frac{\\lambda_n}n, 1]$, then we get</p>\n<p>$$1-\\frac{\\lambda_n} n\\leq t\\leq1$$</p>\n<p>Therefore</p>\n<p>$$\\frac 1{1-\\frac{\\lambda_n} n} \\leq \\frac 1 t \\leq 1$$</p>\n<p>Therefore</p>\n<p>$$\\int_{1-\\frac{\\lambda_n}n}^1\\frac 1{1-\\frac{\\lambda_n} n}dt \\leq \\int_{1-\\frac{\\lambda_n}n}^1\\frac 1 t dt\\leq \\int_{1-\\frac{\\lambda_n}n}^1 1dt$$</p>\n<p>The first integral equals $\\frac{\\lambda_n}n$, the second integral equals $ln(1-\\frac{\\lambda_n} n)^{-1}$, the third integral equals $\\frac{\\lambda_n}{n-\\lambda_n}$, so we get</p>\n<p>$$\\frac{\\lambda_n}n\\leq ln(1-\\frac{\\lambda_n} n)^{-1} \\leq \\frac{\\lambda_n}{n-\\lambda_n}$$</p>\n<p>Exponentiating, we find that</p>\n<p>$$e^{\\frac{\\lambda_n} n}\\leq(1-\\frac{\\lambda_n}n)^{-1}\\leq e^{\\frac{\\lambda_n}{n-\\lambda_n}}$$</p>\n<p>Taking the $(-n)^{st}$ power of the left inequality gives us</p>\n<p>$$e^{-{\\lambda_n}}\\geq (1-\\frac{\\lambda_n} n)^n\\tag{3}$$</p>\n<p>Taking the $(\\lambda_n - n)^{th}$ power of the right inequality gives us</p>\n<p>$$(1-\\frac{\\lambda_n} n)^{(n-\\lambda_n)}\\geq e^{-\\lambda_n}$$</p>\n<p>Why was $\\geq$ replaced with $\\leq$?  Because $\\lambda_n = np_n, n\\geq 0, 0\\leq p_n\\leq 1$($p_n$ denotes the probability), so $\\lambda_n-n = np_n - n = n(p_n - 1)\\leq 0$, the power is less or equal to 0, so we need change the direction of the sign.</p>\n<p>Multiply each side of the inequality by $(1-\\frac{\\lambda_n} n)^{\\lambda_n}$, we get</p>\n<p>$$(1-\\frac{\\lambda_n} n)^n\\geq {e^{-\\lambda_n}} {(1-\\frac{\\lambda_n} n)^{\\lambda_n}}\\tag 4$$</p>\n<p>Combine (3) and (4), we get</p>\n<p>$$e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n}\\leq (1-\\frac{\\lambda_n} n)^n \\leq e^{-\\lambda_n}$$</p>\n<p>According to <a href=\"https://searene.me/2016/10/01/Proof-of-limit-f-x-g-x-c-d/\">this theorem</a>, because $1 - \\frac{\\lambda_n} n &gt; 0, \\lambda_n &gt; 0, \\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$, we have</p>\n<p>$\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = [\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)]^{\\lim\\limits_{n\\to\\infty}\\lambda_n}$</p>\n<p>$ = \\lim\\limits_{n\\to\\infty}(1-\\lambda_n\\cdot\\frac 1 n)^\\lambda$</p>\n<p>$ = (\\lim\\limits_{n\\to\\infty}1 - \\lim\\limits_{n\\to\\infty}\\lambda_n\\cdot\\lim\\limits_{n\\to\\infty}\\frac 1 n)^\\lambda$</p>\n<p>$ = (1 -\\lambda\\cdot0)^\\lambda = 1$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = e^{-\\lambda}$$</p>\n<p>$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n} = e^{-\\lambda}$$</p>\n<p>According to squeeze theorem, we get</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$$</p>\n<p>Which is the answer.</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"http://aleph0.clarku.edu/~djoyce/ma122/elimit.pdf\" target=\"_blank\" rel=\"external\">$e$ as the limit of $(1+\\frac 1 n)^n$</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>I came upon the calculation of $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n}n)^n$ when I was reviewing Poisson distribution. Notice that $\\lambda_n = np_n(n\\in\\mathbb{Z}_{\\geq 0}, 0\\leq p \\leq 1)$ and $\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda(\\lambda\\in\\mathbb{R})$.</p>\n<p>So how to calculate it? The first thought that came to my mind was that</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n = e \\tag 1$$</p>\n<p>So replace $n$ with $-n$, I got</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1 - \\frac1 n)^n = \\frac1 e \\tag 2$$</p>\n<p>Then I have no clue about what to do next, I’m not even sure whether (2) is right or not. So I started digging from the calculation of $\\lim\\limits_{n\\to\\infty}(1 + \\frac1 n)^n$.</p>\n<p>Here is how I solve the problem.</p>\n<p>Let $t$ be any number in the interval $[1-\\frac{\\lambda_n}n, 1]$, then we get</p>\n<p>$$1-\\frac{\\lambda_n} n\\leq t\\leq1$$</p>\n<p>Therefore</p>\n<p>$$\\frac 1{1-\\frac{\\lambda_n} n} \\leq \\frac 1 t \\leq 1$$</p>\n<p>Therefore</p>\n<p>$$\\int_{1-\\frac{\\lambda_n}n}^1\\frac 1{1-\\frac{\\lambda_n} n}dt \\leq \\int_{1-\\frac{\\lambda_n}n}^1\\frac 1 t dt\\leq \\int_{1-\\frac{\\lambda_n}n}^1 1dt$$</p>\n<p>The first integral equals $\\frac{\\lambda_n}n$, the second integral equals $ln(1-\\frac{\\lambda_n} n)^{-1}$, the third integral equals $\\frac{\\lambda_n}{n-\\lambda_n}$, so we get</p>\n<p>$$\\frac{\\lambda_n}n\\leq ln(1-\\frac{\\lambda_n} n)^{-1} \\leq \\frac{\\lambda_n}{n-\\lambda_n}$$</p>\n<p>Exponentiating, we find that</p>\n<p>$$e^{\\frac{\\lambda_n} n}\\leq(1-\\frac{\\lambda_n}n)^{-1}\\leq e^{\\frac{\\lambda_n}{n-\\lambda_n}}$$</p>\n<p>Taking the $(-n)^{st}$ power of the left inequality gives us</p>\n<p>$$e^{-{\\lambda_n}}\\geq (1-\\frac{\\lambda_n} n)^n\\tag{3}$$</p>\n<p>Taking the $(\\lambda_n - n)^{th}$ power of the right inequality gives us</p>\n<p>$$(1-\\frac{\\lambda_n} n)^{(n-\\lambda_n)}\\geq e^{-\\lambda_n}$$</p>\n<p>Why was $\\geq$ replaced with $\\leq$?  Because $\\lambda_n = np_n, n\\geq 0, 0\\leq p_n\\leq 1$($p_n$ denotes the probability), so $\\lambda_n-n = np_n - n = n(p_n - 1)\\leq 0$, the power is less or equal to 0, so we need change the direction of the sign.</p>\n<p>Multiply each side of the inequality by $(1-\\frac{\\lambda_n} n)^{\\lambda_n}$, we get</p>\n<p>$$(1-\\frac{\\lambda_n} n)^n\\geq {e^{-\\lambda_n}} {(1-\\frac{\\lambda_n} n)^{\\lambda_n}}\\tag 4$$</p>\n<p>Combine (3) and (4), we get</p>\n<p>$$e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n}\\leq (1-\\frac{\\lambda_n} n)^n \\leq e^{-\\lambda_n}$$</p>\n<p>According to <a href=\"https://searene.me/2016/10/01/Proof-of-limit-f-x-g-x-c-d/\">this theorem</a>, because $1 - \\frac{\\lambda_n} n &gt; 0, \\lambda_n &gt; 0, \\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$, we have</p>\n<p>$\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = [\\lim\\limits_{n \\to \\infty}(1-\\frac{\\lambda_n} n)]^{\\lim\\limits_{n\\to\\infty}\\lambda_n}$</p>\n<p>$ = \\lim\\limits_{n\\to\\infty}(1-\\lambda_n\\cdot\\frac 1 n)^\\lambda$</p>\n<p>$ = (\\lim\\limits_{n\\to\\infty}1 - \\lim\\limits_{n\\to\\infty}\\lambda_n\\cdot\\lim\\limits_{n\\to\\infty}\\frac 1 n)^\\lambda$</p>\n<p>$ = (1 -\\lambda\\cdot0)^\\lambda = 1$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n}(1-\\frac{\\lambda_n} n)^{\\lambda_n} = e^{-\\lambda}$$</p>\n<p>$$\\lim\\limits_{n\\to\\infty}e^{-\\lambda_n} = e^{-\\lambda}$$</p>\n<p>According to squeeze theorem, we get</p>\n<p>$$\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$$</p>\n<p>Which is the answer.</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"http://aleph0.clarku.edu/~djoyce/ma122/elimit.pdf\" target=\"_blank\" rel=\"external\">$e$ as the limit of $(1+\\frac 1 n)^n$</a></li>\n</ol>\n"},{"title":"Configure Win7 Support For UTC","date":"2015-12-06T09:46:08.000Z","thumbnail":"http://alien-homepage.de/weather_start/current_site_template_%20expl_english/weathersite%20general%20template/images/timezones/gif/large_images/utc-5/webfiles/utc-5.png","_content":"\nI have a virtual machine installed on ubuntu, the virtual machine contains an operation system of Win7. Win7 uses localtime, but ubuntu uses UTC, so the time they display is different. To fix this, I decided to set Win7 to use UTC. Here is the solution.\n\n1. `Win` + `S`, register, `enter`\n2. Navigate to the key `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation`\n3. Create new DWORD (32-bit) Value, name it `RealTimeIsUniversal`.\n4. Set its value to `1`.\n5. Reboot to BIOS settings, set the hardware clock to the correct time in UTC.\n","source":"_posts/Configure-Win7-Support-For-UTC.md","raw":"title: Configure Win7 Support For UTC\ndate: 2015-12-06 17:46:08\ncategories: Coding\ntags: [linux, win7]\nthumbnail: http://alien-homepage.de/weather_start/current_site_template_%20expl_english/weathersite%20general%20template/images/timezones/gif/large_images/utc-5/webfiles/utc-5.png\n---\n\nI have a virtual machine installed on ubuntu, the virtual machine contains an operation system of Win7. Win7 uses localtime, but ubuntu uses UTC, so the time they display is different. To fix this, I decided to set Win7 to use UTC. Here is the solution.\n\n1. `Win` + `S`, register, `enter`\n2. Navigate to the key `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation`\n3. Create new DWORD (32-bit) Value, name it `RealTimeIsUniversal`.\n4. Set its value to `1`.\n5. Reboot to BIOS settings, set the hardware clock to the correct time in UTC.\n","slug":"Configure-Win7-Support-For-UTC","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcj000d8arf9vn8uxwe","content":"<p>I have a virtual machine installed on ubuntu, the virtual machine contains an operation system of Win7. Win7 uses localtime, but ubuntu uses UTC, so the time they display is different. To fix this, I decided to set Win7 to use UTC. Here is the solution.</p>\n<ol>\n<li><code>Win</code> + <code>S</code>, register, <code>enter</code></li>\n<li>Navigate to the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation</code></li>\n<li>Create new DWORD (32-bit) Value, name it <code>RealTimeIsUniversal</code>.</li>\n<li>Set its value to <code>1</code>.</li>\n<li>Reboot to BIOS settings, set the hardware clock to the correct time in UTC.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>I have a virtual machine installed on ubuntu, the virtual machine contains an operation system of Win7. Win7 uses localtime, but ubuntu uses UTC, so the time they display is different. To fix this, I decided to set Win7 to use UTC. Here is the solution.</p>\n<ol>\n<li><code>Win</code> + <code>S</code>, register, <code>enter</code></li>\n<li>Navigate to the key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation</code></li>\n<li>Create new DWORD (32-bit) Value, name it <code>RealTimeIsUniversal</code>.</li>\n<li>Set its value to <code>1</code>.</li>\n<li>Reboot to BIOS settings, set the hardware clock to the correct time in UTC.</li>\n</ol>\n"},{"title":"Fix The Font Rendering Problem On Pycharm","date":"2015-12-21T13:39:27.000Z","thumbnail":"https://fontbundles.net/images/products/bWcQX41Hgr_Ddw.jpg","_content":"\nAlmost all the java desktop apps running on PC/Mac have a common problem: font rendering. The font rendering in pycharm was so crappy that I couldn't live with it any more. So I began to search for a way to fix it. Luckily I found a solution [here](https://www.reddit.com/r/Python/comments/1ez6ro/fixing_pycharms_font_rendering_in_linux_64bit/)\n\nI added these lines to my ../pycharm/bin/pycharm64.vmoptions file:\n\n> -Dawt.useSystemAAFontSettings=on\n> -Dswing.aatext=true\n> -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel \n\nTo make it even more clear, this is my complete `pycharm64.vmoptions` file:\n\n> -Xms128m\n> -Xmx750m\n> -XX:MaxPermSize=350m\n> -XX:ReservedCodeCacheSize=225m\n> -XX:+UseConcMarkSweepGC\n> -XX:SoftRefLRUPolicyMSPerMB=50\n> -ea\n> -Dsun.io.useCanonCaches=false\n> -Djava.net.preferIPv4Stack=true\n> -Dawt.useSystemAAFontSettings=on\n> -Dswing.aatext=true\n> -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n\nNow the font rendering is much better now. Great! By the way, I love the default font-rendering method on ubuntu, it is much better than that on Windows.\n","source":"_posts/Fix-The-Font-Rendering-Problem-In-Pycharm.md","raw":"title: Fix The Font Rendering Problem On Pycharm\ndate: 2015-12-21 21:39:27\ncategories: Coding\nthumbnail: https://fontbundles.net/images/products/bWcQX41Hgr_Ddw.jpg\ntags: [pycharm, java]\n---\n\nAlmost all the java desktop apps running on PC/Mac have a common problem: font rendering. The font rendering in pycharm was so crappy that I couldn't live with it any more. So I began to search for a way to fix it. Luckily I found a solution [here](https://www.reddit.com/r/Python/comments/1ez6ro/fixing_pycharms_font_rendering_in_linux_64bit/)\n\nI added these lines to my ../pycharm/bin/pycharm64.vmoptions file:\n\n> -Dawt.useSystemAAFontSettings=on\n> -Dswing.aatext=true\n> -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel \n\nTo make it even more clear, this is my complete `pycharm64.vmoptions` file:\n\n> -Xms128m\n> -Xmx750m\n> -XX:MaxPermSize=350m\n> -XX:ReservedCodeCacheSize=225m\n> -XX:+UseConcMarkSweepGC\n> -XX:SoftRefLRUPolicyMSPerMB=50\n> -ea\n> -Dsun.io.useCanonCaches=false\n> -Djava.net.preferIPv4Stack=true\n> -Dawt.useSystemAAFontSettings=on\n> -Dswing.aatext=true\n> -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel\n\nNow the font rendering is much better now. Great! By the way, I love the default font-rendering method on ubuntu, it is much better than that on Windows.\n","slug":"Fix-The-Font-Rendering-Problem-In-Pycharm","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqck000h8arf76wpwtcp","content":"<p>Almost all the java desktop apps running on PC/Mac have a common problem: font rendering. The font rendering in pycharm was so crappy that I couldn’t live with it any more. So I began to search for a way to fix it. Luckily I found a solution <a href=\"https://www.reddit.com/r/Python/comments/1ez6ro/fixing_pycharms_font_rendering_in_linux_64bit/\" target=\"_blank\" rel=\"external\">here</a></p>\n<p>I added these lines to my ../pycharm/bin/pycharm64.vmoptions file:</p>\n<blockquote>\n<p>-Dawt.useSystemAAFontSettings=on<br>-Dswing.aatext=true<br>-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel </p>\n</blockquote>\n<p>To make it even more clear, this is my complete <code>pycharm64.vmoptions</code> file:</p>\n<blockquote>\n<p>-Xms128m<br>-Xmx750m<br>-XX:MaxPermSize=350m<br>-XX:ReservedCodeCacheSize=225m<br>-XX:+UseConcMarkSweepGC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-ea<br>-Dsun.io.useCanonCaches=false<br>-Djava.net.preferIPv4Stack=true<br>-Dawt.useSystemAAFontSettings=on<br>-Dswing.aatext=true<br>-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel</p>\n</blockquote>\n<p>Now the font rendering is much better now. Great! By the way, I love the default font-rendering method on ubuntu, it is much better than that on Windows.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Almost all the java desktop apps running on PC/Mac have a common problem: font rendering. The font rendering in pycharm was so crappy that I couldn’t live with it any more. So I began to search for a way to fix it. Luckily I found a solution <a href=\"https://www.reddit.com/r/Python/comments/1ez6ro/fixing_pycharms_font_rendering_in_linux_64bit/\" target=\"_blank\" rel=\"external\">here</a></p>\n<p>I added these lines to my ../pycharm/bin/pycharm64.vmoptions file:</p>\n<blockquote>\n<p>-Dawt.useSystemAAFontSettings=on<br>-Dswing.aatext=true<br>-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel </p>\n</blockquote>\n<p>To make it even more clear, this is my complete <code>pycharm64.vmoptions</code> file:</p>\n<blockquote>\n<p>-Xms128m<br>-Xmx750m<br>-XX:MaxPermSize=350m<br>-XX:ReservedCodeCacheSize=225m<br>-XX:+UseConcMarkSweepGC<br>-XX:SoftRefLRUPolicyMSPerMB=50<br>-ea<br>-Dsun.io.useCanonCaches=false<br>-Djava.net.preferIPv4Stack=true<br>-Dawt.useSystemAAFontSettings=on<br>-Dswing.aatext=true<br>-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel</p>\n</blockquote>\n<p>Now the font rendering is much better now. Great! By the way, I love the default font-rendering method on ubuntu, it is much better than that on Windows.</p>\n"},{"title":"Cast away on the moon","date":"2017-10-06T02:36:40.000Z","thumbnail":null,"_content":"\nI watched a movie these days, it's called *Cast Away on the Moon*(or *金氏漂流记* , *김씨 표류기*).\n\nA man was saddled with debts of more than $20,000, and he couldn't afford to pay it off. One day he jumped off a bridge to kill himself, but he didn't die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.\n\nTo the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.\n\nIn the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said \"Hello\". The man found this bottle and the piece of paper, then he replied to the girl \"How are you?\" on the beach. They kept communicating with each other in this way.\n\nFinally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.\n\nI vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn't want to ruin it by accepting the girl's takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it's achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.\n\nThat's all, it's a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don't know how long it will take, or whether I can meet her at all.\n\n![Ryeo-won Jeong](/images/cast-away-on-the-moon.jpg)","source":"_posts/Cast-away-on-the-moon.md","raw":"title: Cast away on the moon\ndate: 2017-10-06 10:36:40\ntags:\ncategories: Journal\nthumbnail:\n---\n\nI watched a movie these days, it's called *Cast Away on the Moon*(or *金氏漂流记* , *김씨 표류기*).\n\nA man was saddled with debts of more than $20,000, and he couldn't afford to pay it off. One day he jumped off a bridge to kill himself, but he didn't die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.\n\nTo the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.\n\nIn the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said \"Hello\". The man found this bottle and the piece of paper, then he replied to the girl \"How are you?\" on the beach. They kept communicating with each other in this way.\n\nFinally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.\n\nI vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn't want to ruin it by accepting the girl's takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it's achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.\n\nThat's all, it's a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don't know how long it will take, or whether I can meet her at all.\n\n![Ryeo-won Jeong](/images/cast-away-on-the-moon.jpg)","slug":"Cast-away-on-the-moon","published":1,"updated":"2017-10-06T03:25:27.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcm000j8arflt6cv71w","content":"<p>I watched a movie these days, it’s called <em>Cast Away on the Moon</em>(or <em>金氏漂流记</em> , <em>김씨 표류기</em>).</p>\n<p>A man was saddled with debts of more than $20,000, and he couldn’t afford to pay it off. One day he jumped off a bridge to kill himself, but he didn’t die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.</p>\n<p>To the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.</p>\n<p>In the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said “Hello”. The man found this bottle and the piece of paper, then he replied to the girl “How are you?” on the beach. They kept communicating with each other in this way.</p>\n<p>Finally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.</p>\n<p>I vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn’t want to ruin it by accepting the girl’s takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it’s achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.</p>\n<p>That’s all, it’s a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don’t know how long it will take, or whether I can meet her at all.</p>\n<p><img src=\"/images/cast-away-on-the-moon.jpg\" alt=\"Ryeo-won Jeong\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I watched a movie these days, it’s called <em>Cast Away on the Moon</em>(or <em>金氏漂流记</em> , <em>김씨 표류기</em>).</p>\n<p>A man was saddled with debts of more than $20,000, and he couldn’t afford to pay it off. One day he jumped off a bridge to kill himself, but he didn’t die. He was cast away on an island across the city, although he could see the city from the island, there was no way for him to get out of it.</p>\n<p>To the end of his rope, he decided to live on this island. He pulled a discarded sightseeing boat and took it as his home. While day dreaming in the free time, he recalled one of his favorite food, noodles, and decided to grow corn and make a bowl of noodles as his goal.</p>\n<p>In the mean time, a girl, who seemed to be a social phobia patient, was watching him closely using her telescope. After a long time of thinking and struggling, she threw a bottle in the river, which also drifted on the island. Of course it was not only a bottle, there was a piece of paper in it, which said “Hello”. The man found this bottle and the piece of paper, then he replied to the girl “How are you?” on the beach. They kept communicating with each other in this way.</p>\n<p>Finally the man was taken away from the island by force. The girl noticed that and struggled for a long time, then she broke out of her house and ran as fast as she can to meet this man, because it might be the last chance for her to meet him. The end of the story is a lovely one, because they met in the end.</p>\n<p>I vividly remember a scene in the movie. The girl called a takeaway, which was three bowls of noodles to the man, but the man refused. He said making a bowl of noodles was his dream and he didn’t want to ruin it by accepting the girl’s takeaway. This was so true. While living in this world, we can be broken, we can be poor, but we cannot lose hope. Because with hope, we may still have a chance to get what we want, at least we can enjoy the process, no matter it’s achieved or not. But without hope, nothing is important any more, even if you seem to have everything in the eyes of others.</p>\n<p>That’s all, it’s a beautiful movie and has a beautiful girl. I hope I can meet my girl someday, but I don’t know how long it will take, or whether I can meet her at all.</p>\n<p><img src=\"/images/cast-away-on-the-moon.jpg\" alt=\"Ryeo-won Jeong\"></p>\n"},{"title":"Go to KTV alone","date":"2018-04-02T23:10:10.000Z","thumbnail":"/images/1_1354265864.jpg","_content":"\nI went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.\n\nWell, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn't care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it's obviously for lovers, yet I'm all alone, whatever.\n\nThen I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn't give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don't care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don't have a good throat, you won't be able to be a good singer, period.\n\nAnyway, it's just an experience. Although I'm not able to be a singer, it may not be a bad thing. I just need to know it.","source":"_posts/Go-to-KTV-alone.md","raw":"title: Go to KTV alone\ndate: 2018-04-03 07:10:10\ntags:\ncategories: Journal\nthumbnail: /images/1_1354265864.jpg\n---\n\nI went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.\n\nWell, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn't care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it's obviously for lovers, yet I'm all alone, whatever.\n\nThen I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn't give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don't care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don't have a good throat, you won't be able to be a good singer, period.\n\nAnyway, it's just an experience. Although I'm not able to be a singer, it may not be a bad thing. I just need to know it.","slug":"Go-to-KTV-alone","published":1,"updated":"2018-04-02T23:35:32.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcn000n8arfhyobz1bx","content":"<p>I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.</p>\n<p>Well, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn’t care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it’s obviously for lovers, yet I’m all alone, whatever.</p>\n<p>Then I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn’t give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don’t care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don’t have a good throat, you won’t be able to be a good singer, period.</p>\n<p>Anyway, it’s just an experience. Although I’m not able to be a singer, it may not be a bad thing. I just need to know it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I went to KTV alone last weekend. On the one hand, going to KTV alone is somewhat embarrassing and uncomfortable, I want to train myself to be comfortable with the uncomfortable. On the other hand, I want to check if I have a talent for singing, without being affected by others.</p>\n<p>Well, I successfully paid in front of a waiter and a waitress. Although the price is slightly higher than what I found in Meituan, I didn’t care too much about it. I was also given two bottles of water and a bowl of popcorns for free. You can see that it’s obviously for lovers, yet I’m all alone, whatever.</p>\n<p>Then I started singing. After about 5 minutes, I became hoarse, and singing high notes became very difficult for me. Then I realized that I was not suitable to be a singer, God doesn’t give me a good throat. The physical conditions are extremely important. I once heard that when colleges enroll music students, they usually check their physical conditions, like your voice, how high you can reach, etc. They don’t care about your skills, whether you are able to make trills, whether your breath is correct, etc. All of them can be trained, except your physical conditions. If you don’t have a good throat, you won’t be able to be a good singer, period.</p>\n<p>Anyway, it’s just an experience. Although I’m not able to be a singer, it may not be a bad thing. I just need to know it.</p>\n"},{"title":"I arrived in Hangzhou yesterday","date":"2017-02-12T23:35:34.000Z","thumbnail":"/images/plane.png","_content":"\nI arrived in Hangzhou yesterday, and I could feel that the amounts of dopamine released in my brain fluctuated from time to time. At first I felt really happy, I was not sure why. Then I felt sort of upset when I got off the plane and headed towards my company. Maybe it was because I had to work again in my company, which was so boring and annoying. I think some people tend to release dopamine a lot, and they may never know what depression is like.\n\nI downloaded the movie `Passenger` from the Internet and watched it last night. To my suprise, although there were lots of negative comments on `douban`, I found the movie pretty interesting and compelling. Maybe it was due to the unbeatable charm of `Jennifer Lawrence`, she was so beautiful. That being said, the plot was not bad, and the film's special effects were amazing! I really loved it. I even loved it to the extent that I couldn't decide whether `Arrival` or `Passenger` was better, even though the former got a much higher mark on `douban` and `IMDB`.\n\n![Jennifer Lawrence on Passenger](/images/passenger-law.jpg)\n\nAnother thing. I decided to use `Wechat` as few as possible. I watched a Ted talk yesterday and the speaker said that falling into social media was really a bad thing for us. It might cause more anxiety and depression and made us even more lonely, no matter how many friends we had ONLINE. I think that is absolutely correct. I felt more lonely when I talked in social media, our brain wasn't designed to talk like this. We have to communicate face to face, use our gestures and expressions to create a better conversation and relax ourselves. Really, few people care about what I post on moments, what is the purpose of that!\n","source":"_posts/I-arrived-in-Hangzhou-yesterday.md","raw":"title: I arrived in Hangzhou yesterday\ndate: 2017-02-13 07:35:34\ntags: \ncategories: Journal\nthumbnail: /images/plane.png\n---\n\nI arrived in Hangzhou yesterday, and I could feel that the amounts of dopamine released in my brain fluctuated from time to time. At first I felt really happy, I was not sure why. Then I felt sort of upset when I got off the plane and headed towards my company. Maybe it was because I had to work again in my company, which was so boring and annoying. I think some people tend to release dopamine a lot, and they may never know what depression is like.\n\nI downloaded the movie `Passenger` from the Internet and watched it last night. To my suprise, although there were lots of negative comments on `douban`, I found the movie pretty interesting and compelling. Maybe it was due to the unbeatable charm of `Jennifer Lawrence`, she was so beautiful. That being said, the plot was not bad, and the film's special effects were amazing! I really loved it. I even loved it to the extent that I couldn't decide whether `Arrival` or `Passenger` was better, even though the former got a much higher mark on `douban` and `IMDB`.\n\n![Jennifer Lawrence on Passenger](/images/passenger-law.jpg)\n\nAnother thing. I decided to use `Wechat` as few as possible. I watched a Ted talk yesterday and the speaker said that falling into social media was really a bad thing for us. It might cause more anxiety and depression and made us even more lonely, no matter how many friends we had ONLINE. I think that is absolutely correct. I felt more lonely when I talked in social media, our brain wasn't designed to talk like this. We have to communicate face to face, use our gestures and expressions to create a better conversation and relax ourselves. Really, few people care about what I post on moments, what is the purpose of that!\n","slug":"I-arrived-in-Hangzhou-yesterday","published":1,"updated":"2017-10-05T08:10:12.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqco000q8arf5r6eb9t6","content":"<p>I arrived in Hangzhou yesterday, and I could feel that the amounts of dopamine released in my brain fluctuated from time to time. At first I felt really happy, I was not sure why. Then I felt sort of upset when I got off the plane and headed towards my company. Maybe it was because I had to work again in my company, which was so boring and annoying. I think some people tend to release dopamine a lot, and they may never know what depression is like.</p>\n<p>I downloaded the movie <code>Passenger</code> from the Internet and watched it last night. To my suprise, although there were lots of negative comments on <code>douban</code>, I found the movie pretty interesting and compelling. Maybe it was due to the unbeatable charm of <code>Jennifer Lawrence</code>, she was so beautiful. That being said, the plot was not bad, and the film’s special effects were amazing! I really loved it. I even loved it to the extent that I couldn’t decide whether <code>Arrival</code> or <code>Passenger</code> was better, even though the former got a much higher mark on <code>douban</code> and <code>IMDB</code>.</p>\n<p><img src=\"/images/passenger-law.jpg\" alt=\"Jennifer Lawrence on Passenger\"></p>\n<p>Another thing. I decided to use <code>Wechat</code> as few as possible. I watched a Ted talk yesterday and the speaker said that falling into social media was really a bad thing for us. It might cause more anxiety and depression and made us even more lonely, no matter how many friends we had ONLINE. I think that is absolutely correct. I felt more lonely when I talked in social media, our brain wasn’t designed to talk like this. We have to communicate face to face, use our gestures and expressions to create a better conversation and relax ourselves. Really, few people care about what I post on moments, what is the purpose of that!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I arrived in Hangzhou yesterday, and I could feel that the amounts of dopamine released in my brain fluctuated from time to time. At first I felt really happy, I was not sure why. Then I felt sort of upset when I got off the plane and headed towards my company. Maybe it was because I had to work again in my company, which was so boring and annoying. I think some people tend to release dopamine a lot, and they may never know what depression is like.</p>\n<p>I downloaded the movie <code>Passenger</code> from the Internet and watched it last night. To my suprise, although there were lots of negative comments on <code>douban</code>, I found the movie pretty interesting and compelling. Maybe it was due to the unbeatable charm of <code>Jennifer Lawrence</code>, she was so beautiful. That being said, the plot was not bad, and the film’s special effects were amazing! I really loved it. I even loved it to the extent that I couldn’t decide whether <code>Arrival</code> or <code>Passenger</code> was better, even though the former got a much higher mark on <code>douban</code> and <code>IMDB</code>.</p>\n<p><img src=\"/images/passenger-law.jpg\" alt=\"Jennifer Lawrence on Passenger\"></p>\n<p>Another thing. I decided to use <code>Wechat</code> as few as possible. I watched a Ted talk yesterday and the speaker said that falling into social media was really a bad thing for us. It might cause more anxiety and depression and made us even more lonely, no matter how many friends we had ONLINE. I think that is absolutely correct. I felt more lonely when I talked in social media, our brain wasn’t designed to talk like this. We have to communicate face to face, use our gestures and expressions to create a better conversation and relax ourselves. Really, few people care about what I post on moments, what is the purpose of that!</p>\n"},{"title":"GoldenDictMedia","date":"2016-02-14T03:19:57.000Z","_content":"\n# Introduction\n\n[GoldenDict](http://goldendict.org/) is an excellent dictionary management software. It can handle most dictionary formats, some of these dictionaries contain audios and/or images. This addon can import the images and audios pasted from Goldendict when adding new cards in Anki\n\n# Usage\n\n## 1. Unzip the media file\n\nEvery dictionary containing audios or images in goldendict comes with a media folder, the filename of the media file often ends with `.files.zip`. The size of the file is usually huge, 100MB+ or even 1GB+. Unzip the file, and you will get a directory containing all the audios and images a dictionary need. You have to do this for every dictionary you need.\n\n## 2. Turn off Strip-HTML\n\nThe addon cannot paste images from goldendict if you turn on Strip-HTML. If you only want to import audios from goldendict, then you can skip this step.\n\nOpen Anki, go to `Tools --> Preferences` and uncheck `Strip HTML when pasting text` to turn it off.\n\n## 3. Copy and paste\n\nGo to goldendict, copy something containing audios / images in **a** dictionary. Go to Anki, adding new cards, then paste it. GoldenDictMedia will notice that the text is pasted from a GoldenDict dictionary, and it will ask you for the media path of it, like this:\n\n![Specify media location](http://i.imgur.com/F10sOiV.png)\n\n## 4. Specify the location of the media directory\n\nClick on the `...` button, find the media directory you unzipped earlier from the `zip` file, and select it. Notice that selecting the directory is fine, you don't need go in the directory. Click on `OK`, and GoldenDictMedia will import the dictionary media for you. You only need to do this once for each dictionary. Copy another audios / images from this dictionary, GoldenDictMedia will import the media automatically.\n\n# Configurations\n\n## Ignore the dictionary\n\nIf there are any of the dictionaries you don't want the addon to process, check `ignore the dictionary and never prompt for it again`, GoldenDictMedia will not process it. If you only want to ignore it once, just click on `Cancel` will do the trick.\n\n## Check GoldenDict Media\n\nBy default GoldenDictMedia will check if there's any new dictionary added when pasting, if you have added enough dictionaries and you don't want GoldenDictMedia to detect it again, you can turn it off by uncheck `Check goldendict media everytime it pastes` in `Tools --> GoldenDictMedia`. Usually you don't have to turn it off unless there's something wrong with it.\n\n## Reset\n\nReset will delete all the dictionary data and configurations in GoldenDictMedia, it will make the addon just as the when you install it the first time. You can do a reset by clicking on `Reset` in `Tools --> GoldenDictMedia`.\n\n# Known Issues\n\n1. Images cannot imported when Strip-HTML is on.\n2. I didn't look through the source code of GoldenDict. But I think that this process should be totally automatic. The file path used in GoldenDict should be reversible, the addon should be able to reverse GoldenDict file path to the real file path in system and get the media from the `zip` file. So anyone with a good knowledge of how GoldenDict media works is welcomed to improve the addon to make it automatic.\n\n# Bug Report\n\nThere are two ways to report a bug or offering a suggestion.\n\n1. Open an issue on [my github repository](https://github.com/searene/Anki-Addons)\n2. Leave a comment below [my blog](http://searene.me/2016/02/14/GoldenDictMedia/)\n","source":"_posts/GoldenDictMedia.md","raw":"title: GoldenDictMedia\ndate: 2016-02-14 11:19:57\ncategories: Coding\ntags: [python, anki]\n---\n\n# Introduction\n\n[GoldenDict](http://goldendict.org/) is an excellent dictionary management software. It can handle most dictionary formats, some of these dictionaries contain audios and/or images. This addon can import the images and audios pasted from Goldendict when adding new cards in Anki\n\n# Usage\n\n## 1. Unzip the media file\n\nEvery dictionary containing audios or images in goldendict comes with a media folder, the filename of the media file often ends with `.files.zip`. The size of the file is usually huge, 100MB+ or even 1GB+. Unzip the file, and you will get a directory containing all the audios and images a dictionary need. You have to do this for every dictionary you need.\n\n## 2. Turn off Strip-HTML\n\nThe addon cannot paste images from goldendict if you turn on Strip-HTML. If you only want to import audios from goldendict, then you can skip this step.\n\nOpen Anki, go to `Tools --> Preferences` and uncheck `Strip HTML when pasting text` to turn it off.\n\n## 3. Copy and paste\n\nGo to goldendict, copy something containing audios / images in **a** dictionary. Go to Anki, adding new cards, then paste it. GoldenDictMedia will notice that the text is pasted from a GoldenDict dictionary, and it will ask you for the media path of it, like this:\n\n![Specify media location](http://i.imgur.com/F10sOiV.png)\n\n## 4. Specify the location of the media directory\n\nClick on the `...` button, find the media directory you unzipped earlier from the `zip` file, and select it. Notice that selecting the directory is fine, you don't need go in the directory. Click on `OK`, and GoldenDictMedia will import the dictionary media for you. You only need to do this once for each dictionary. Copy another audios / images from this dictionary, GoldenDictMedia will import the media automatically.\n\n# Configurations\n\n## Ignore the dictionary\n\nIf there are any of the dictionaries you don't want the addon to process, check `ignore the dictionary and never prompt for it again`, GoldenDictMedia will not process it. If you only want to ignore it once, just click on `Cancel` will do the trick.\n\n## Check GoldenDict Media\n\nBy default GoldenDictMedia will check if there's any new dictionary added when pasting, if you have added enough dictionaries and you don't want GoldenDictMedia to detect it again, you can turn it off by uncheck `Check goldendict media everytime it pastes` in `Tools --> GoldenDictMedia`. Usually you don't have to turn it off unless there's something wrong with it.\n\n## Reset\n\nReset will delete all the dictionary data and configurations in GoldenDictMedia, it will make the addon just as the when you install it the first time. You can do a reset by clicking on `Reset` in `Tools --> GoldenDictMedia`.\n\n# Known Issues\n\n1. Images cannot imported when Strip-HTML is on.\n2. I didn't look through the source code of GoldenDict. But I think that this process should be totally automatic. The file path used in GoldenDict should be reversible, the addon should be able to reverse GoldenDict file path to the real file path in system and get the media from the `zip` file. So anyone with a good knowledge of how GoldenDict media works is welcomed to improve the addon to make it automatic.\n\n# Bug Report\n\nThere are two ways to report a bug or offering a suggestion.\n\n1. Open an issue on [my github repository](https://github.com/searene/Anki-Addons)\n2. Leave a comment below [my blog](http://searene.me/2016/02/14/GoldenDictMedia/)\n","slug":"GoldenDictMedia","published":1,"updated":"2017-05-17T12:41:19.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcp000v8arfiwrvaas9","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><a href=\"http://goldendict.org/\" target=\"_blank\" rel=\"external\">GoldenDict</a> is an excellent dictionary management software. It can handle most dictionary formats, some of these dictionaries contain audios and/or images. This addon can import the images and audios pasted from Goldendict when adding new cards in Anki</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"1-Unzip-the-media-file\"><a href=\"#1-Unzip-the-media-file\" class=\"headerlink\" title=\"1. Unzip the media file\"></a>1. Unzip the media file</h2><p>Every dictionary containing audios or images in goldendict comes with a media folder, the filename of the media file often ends with <code>.files.zip</code>. The size of the file is usually huge, 100MB+ or even 1GB+. Unzip the file, and you will get a directory containing all the audios and images a dictionary need. You have to do this for every dictionary you need.</p>\n<h2 id=\"2-Turn-off-Strip-HTML\"><a href=\"#2-Turn-off-Strip-HTML\" class=\"headerlink\" title=\"2. Turn off Strip-HTML\"></a>2. Turn off Strip-HTML</h2><p>The addon cannot paste images from goldendict if you turn on Strip-HTML. If you only want to import audios from goldendict, then you can skip this step.</p>\n<p>Open Anki, go to <code>Tools --&gt; Preferences</code> and uncheck <code>Strip HTML when pasting text</code> to turn it off.</p>\n<h2 id=\"3-Copy-and-paste\"><a href=\"#3-Copy-and-paste\" class=\"headerlink\" title=\"3. Copy and paste\"></a>3. Copy and paste</h2><p>Go to goldendict, copy something containing audios / images in <strong>a</strong> dictionary. Go to Anki, adding new cards, then paste it. GoldenDictMedia will notice that the text is pasted from a GoldenDict dictionary, and it will ask you for the media path of it, like this:</p>\n<p><img src=\"http://i.imgur.com/F10sOiV.png\" alt=\"Specify media location\"></p>\n<h2 id=\"4-Specify-the-location-of-the-media-directory\"><a href=\"#4-Specify-the-location-of-the-media-directory\" class=\"headerlink\" title=\"4. Specify the location of the media directory\"></a>4. Specify the location of the media directory</h2><p>Click on the <code>...</code> button, find the media directory you unzipped earlier from the <code>zip</code> file, and select it. Notice that selecting the directory is fine, you don’t need go in the directory. Click on <code>OK</code>, and GoldenDictMedia will import the dictionary media for you. You only need to do this once for each dictionary. Copy another audios / images from this dictionary, GoldenDictMedia will import the media automatically.</p>\n<h1 id=\"Configurations\"><a href=\"#Configurations\" class=\"headerlink\" title=\"Configurations\"></a>Configurations</h1><h2 id=\"Ignore-the-dictionary\"><a href=\"#Ignore-the-dictionary\" class=\"headerlink\" title=\"Ignore the dictionary\"></a>Ignore the dictionary</h2><p>If there are any of the dictionaries you don’t want the addon to process, check <code>ignore the dictionary and never prompt for it again</code>, GoldenDictMedia will not process it. If you only want to ignore it once, just click on <code>Cancel</code> will do the trick.</p>\n<h2 id=\"Check-GoldenDict-Media\"><a href=\"#Check-GoldenDict-Media\" class=\"headerlink\" title=\"Check GoldenDict Media\"></a>Check GoldenDict Media</h2><p>By default GoldenDictMedia will check if there’s any new dictionary added when pasting, if you have added enough dictionaries and you don’t want GoldenDictMedia to detect it again, you can turn it off by uncheck <code>Check goldendict media everytime it pastes</code> in <code>Tools --&gt; GoldenDictMedia</code>. Usually you don’t have to turn it off unless there’s something wrong with it.</p>\n<h2 id=\"Reset\"><a href=\"#Reset\" class=\"headerlink\" title=\"Reset\"></a>Reset</h2><p>Reset will delete all the dictionary data and configurations in GoldenDictMedia, it will make the addon just as the when you install it the first time. You can do a reset by clicking on <code>Reset</code> in <code>Tools --&gt; GoldenDictMedia</code>.</p>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><ol>\n<li>Images cannot imported when Strip-HTML is on.</li>\n<li>I didn’t look through the source code of GoldenDict. But I think that this process should be totally automatic. The file path used in GoldenDict should be reversible, the addon should be able to reverse GoldenDict file path to the real file path in system and get the media from the <code>zip</code> file. So anyone with a good knowledge of how GoldenDict media works is welcomed to improve the addon to make it automatic.</li>\n</ol>\n<h1 id=\"Bug-Report\"><a href=\"#Bug-Report\" class=\"headerlink\" title=\"Bug Report\"></a>Bug Report</h1><p>There are two ways to report a bug or offering a suggestion.</p>\n<ol>\n<li>Open an issue on <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">my github repository</a></li>\n<li>Leave a comment below <a href=\"http://searene.me/2016/02/14/GoldenDictMedia/\">my blog</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><a href=\"http://goldendict.org/\" target=\"_blank\" rel=\"external\">GoldenDict</a> is an excellent dictionary management software. It can handle most dictionary formats, some of these dictionaries contain audios and/or images. This addon can import the images and audios pasted from Goldendict when adding new cards in Anki</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><h2 id=\"1-Unzip-the-media-file\"><a href=\"#1-Unzip-the-media-file\" class=\"headerlink\" title=\"1. Unzip the media file\"></a>1. Unzip the media file</h2><p>Every dictionary containing audios or images in goldendict comes with a media folder, the filename of the media file often ends with <code>.files.zip</code>. The size of the file is usually huge, 100MB+ or even 1GB+. Unzip the file, and you will get a directory containing all the audios and images a dictionary need. You have to do this for every dictionary you need.</p>\n<h2 id=\"2-Turn-off-Strip-HTML\"><a href=\"#2-Turn-off-Strip-HTML\" class=\"headerlink\" title=\"2. Turn off Strip-HTML\"></a>2. Turn off Strip-HTML</h2><p>The addon cannot paste images from goldendict if you turn on Strip-HTML. If you only want to import audios from goldendict, then you can skip this step.</p>\n<p>Open Anki, go to <code>Tools --&gt; Preferences</code> and uncheck <code>Strip HTML when pasting text</code> to turn it off.</p>\n<h2 id=\"3-Copy-and-paste\"><a href=\"#3-Copy-and-paste\" class=\"headerlink\" title=\"3. Copy and paste\"></a>3. Copy and paste</h2><p>Go to goldendict, copy something containing audios / images in <strong>a</strong> dictionary. Go to Anki, adding new cards, then paste it. GoldenDictMedia will notice that the text is pasted from a GoldenDict dictionary, and it will ask you for the media path of it, like this:</p>\n<p><img src=\"http://i.imgur.com/F10sOiV.png\" alt=\"Specify media location\"></p>\n<h2 id=\"4-Specify-the-location-of-the-media-directory\"><a href=\"#4-Specify-the-location-of-the-media-directory\" class=\"headerlink\" title=\"4. Specify the location of the media directory\"></a>4. Specify the location of the media directory</h2><p>Click on the <code>...</code> button, find the media directory you unzipped earlier from the <code>zip</code> file, and select it. Notice that selecting the directory is fine, you don’t need go in the directory. Click on <code>OK</code>, and GoldenDictMedia will import the dictionary media for you. You only need to do this once for each dictionary. Copy another audios / images from this dictionary, GoldenDictMedia will import the media automatically.</p>\n<h1 id=\"Configurations\"><a href=\"#Configurations\" class=\"headerlink\" title=\"Configurations\"></a>Configurations</h1><h2 id=\"Ignore-the-dictionary\"><a href=\"#Ignore-the-dictionary\" class=\"headerlink\" title=\"Ignore the dictionary\"></a>Ignore the dictionary</h2><p>If there are any of the dictionaries you don’t want the addon to process, check <code>ignore the dictionary and never prompt for it again</code>, GoldenDictMedia will not process it. If you only want to ignore it once, just click on <code>Cancel</code> will do the trick.</p>\n<h2 id=\"Check-GoldenDict-Media\"><a href=\"#Check-GoldenDict-Media\" class=\"headerlink\" title=\"Check GoldenDict Media\"></a>Check GoldenDict Media</h2><p>By default GoldenDictMedia will check if there’s any new dictionary added when pasting, if you have added enough dictionaries and you don’t want GoldenDictMedia to detect it again, you can turn it off by uncheck <code>Check goldendict media everytime it pastes</code> in <code>Tools --&gt; GoldenDictMedia</code>. Usually you don’t have to turn it off unless there’s something wrong with it.</p>\n<h2 id=\"Reset\"><a href=\"#Reset\" class=\"headerlink\" title=\"Reset\"></a>Reset</h2><p>Reset will delete all the dictionary data and configurations in GoldenDictMedia, it will make the addon just as the when you install it the first time. You can do a reset by clicking on <code>Reset</code> in <code>Tools --&gt; GoldenDictMedia</code>.</p>\n<h1 id=\"Known-Issues\"><a href=\"#Known-Issues\" class=\"headerlink\" title=\"Known Issues\"></a>Known Issues</h1><ol>\n<li>Images cannot imported when Strip-HTML is on.</li>\n<li>I didn’t look through the source code of GoldenDict. But I think that this process should be totally automatic. The file path used in GoldenDict should be reversible, the addon should be able to reverse GoldenDict file path to the real file path in system and get the media from the <code>zip</code> file. So anyone with a good knowledge of how GoldenDict media works is welcomed to improve the addon to make it automatic.</li>\n</ol>\n<h1 id=\"Bug-Report\"><a href=\"#Bug-Report\" class=\"headerlink\" title=\"Bug Report\"></a>Bug Report</h1><p>There are two ways to report a bug or offering a suggestion.</p>\n<ol>\n<li>Open an issue on <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">my github repository</a></li>\n<li>Leave a comment below <a href=\"http://searene.me/2016/02/14/GoldenDictMedia/\">my blog</a></li>\n</ol>\n"},{"title":"I finished reading \"The catcher in the rhy\"","date":"2016-06-14T23:16:44.000Z","thumbnail":"https://upload.wikimedia.org/wikipedia/en/3/32/Rye_catcher.jpg","_content":"\nI finished reading \"The catcher in the rhy\" yesterday. I don't think this is an excellent book. The main character in this book just hates everything. I have no idea why he thinks in this way, though he is only 12 years old. Anyway, he is more mature than me when I was 12 years old, absolutely.\n\nI used to read English books in order to improve my English and enlarge my vocabulary. But I think that's not important now. I mean, learning English is not that important. So why am I still reading these books? Maybe reading books in Chinese will be faster. Honestly I don't know. I still hope reading in English constantly will help me in the future sometime.\n","source":"_posts/I-finished-reading-The-catcher-in-the-rhy.md","raw":"title: I finished reading \"The catcher in the rhy\"\ndate: 2016-06-15 07:16:44\ntags: [book]\ncategories: Journal\nthumbnail: https://upload.wikimedia.org/wikipedia/en/3/32/Rye_catcher.jpg\n---\n\nI finished reading \"The catcher in the rhy\" yesterday. I don't think this is an excellent book. The main character in this book just hates everything. I have no idea why he thinks in this way, though he is only 12 years old. Anyway, he is more mature than me when I was 12 years old, absolutely.\n\nI used to read English books in order to improve my English and enlarge my vocabulary. But I think that's not important now. I mean, learning English is not that important. So why am I still reading these books? Maybe reading books in Chinese will be faster. Honestly I don't know. I still hope reading in English constantly will help me in the future sometime.\n","slug":"I-finished-reading-The-catcher-in-the-rhy","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcq000y8arfve8b5103","content":"<p>I finished reading “The catcher in the rhy” yesterday. I don’t think this is an excellent book. The main character in this book just hates everything. I have no idea why he thinks in this way, though he is only 12 years old. Anyway, he is more mature than me when I was 12 years old, absolutely.</p>\n<p>I used to read English books in order to improve my English and enlarge my vocabulary. But I think that’s not important now. I mean, learning English is not that important. So why am I still reading these books? Maybe reading books in Chinese will be faster. Honestly I don’t know. I still hope reading in English constantly will help me in the future sometime.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I finished reading “The catcher in the rhy” yesterday. I don’t think this is an excellent book. The main character in this book just hates everything. I have no idea why he thinks in this way, though he is only 12 years old. Anyway, he is more mature than me when I was 12 years old, absolutely.</p>\n<p>I used to read English books in order to improve my English and enlarge my vocabulary. But I think that’s not important now. I mean, learning English is not that important. So why am I still reading these books? Maybe reading books in Chinese will be faster. Honestly I don’t know. I still hope reading in English constantly will help me in the future sometime.</p>\n"},{"title":"I struggled to finish my tasks today","thumbnail":"https://i.ytimg.com/vi/IZ-hGkrer60/hqdefault.jpg","date":"2016-05-24T14:55:00.000Z","_content":"Today I was in a pretty bad mood, but I still finished my tasks. Because I know, whether I'm in a good or bad mood, I have to live any way. And if I do nothing, things would become worse. In fact, if I immersed myself in doing anything at all, I would probably focuse in that stuff, and forget about other things, including my trouble. So concentrating is pretty good for me. I need to learn to concentrate in any circumstances.\n","source":"_posts/I-struggled-to-finish-my-tasks-today.md","raw":"title: I struggled to finish my tasks today\ntags:\ncategories:\n  - Journal\nthumbnail: 'https://i.ytimg.com/vi/IZ-hGkrer60/hqdefault.jpg'\ndate: 2016-05-24 22:55:00\n---\nToday I was in a pretty bad mood, but I still finished my tasks. Because I know, whether I'm in a good or bad mood, I have to live any way. And if I do nothing, things would become worse. In fact, if I immersed myself in doing anything at all, I would probably focuse in that stuff, and forget about other things, including my trouble. So concentrating is pretty good for me. I need to learn to concentrate in any circumstances.\n","slug":"I-struggled-to-finish-my-tasks-today","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcr00118arfpepukpkw","content":"<p>Today I was in a pretty bad mood, but I still finished my tasks. Because I know, whether I’m in a good or bad mood, I have to live any way. And if I do nothing, things would become worse. In fact, if I immersed myself in doing anything at all, I would probably focuse in that stuff, and forget about other things, including my trouble. So concentrating is pretty good for me. I need to learn to concentrate in any circumstances.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I was in a pretty bad mood, but I still finished my tasks. Because I know, whether I’m in a good or bad mood, I have to live any way. And if I do nothing, things would become worse. In fact, if I immersed myself in doing anything at all, I would probably focuse in that stuff, and forget about other things, including my trouble. So concentrating is pretty good for me. I need to learn to concentrate in any circumstances.</p>\n"},{"title":"I still didn't go jogging today","date":"2016-05-23T16:31:32.000Z","thumbnail":"https://storage.remag.me/system/assets/images/000/001/511/original/lazy_on_a_couch.jpg","_content":"\nOK, I still didn't go jogging today, I just don't feel like it, but I finished other tasks, reading the book, adding new words etc. Though I know jogging is good for my health, both mentally and physically, but I'm just lazy.\n\nToday I changed the basic framework of *Lantastic*, I took away the `database` part from `dsl`, and create a new class `Dict` to include different kinds of formats, so it wouldn't be a pain to add a new format in the future in this way.\n\nI also played the game for a while, well, a little bit long technically, I guess it's just much easier than programming. But playing games are totally useless to me, I need to be focused on the programming, on my app.\n\nNow it's 00:40, but I still want to finish the app. Though I changed the framework, it wasn't working completely. I'm afraid it would take a lot of time to fix it tomorrow, I hope I can finish it tonight. I know the chances are not good.\n\n### Update\nNow it's 2:16, I think I have made the new framework work. It's time to get on bed.\n","source":"_posts/I-still-didn-t-go-jogging-today.md","raw":"title: \"I still didn't go jogging today\"\ndate: 2016-05-24 00:31:32\ntags:\ncategories: Journal\nthumbnail: https://storage.remag.me/system/assets/images/000/001/511/original/lazy_on_a_couch.jpg\n---\n\nOK, I still didn't go jogging today, I just don't feel like it, but I finished other tasks, reading the book, adding new words etc. Though I know jogging is good for my health, both mentally and physically, but I'm just lazy.\n\nToday I changed the basic framework of *Lantastic*, I took away the `database` part from `dsl`, and create a new class `Dict` to include different kinds of formats, so it wouldn't be a pain to add a new format in the future in this way.\n\nI also played the game for a while, well, a little bit long technically, I guess it's just much easier than programming. But playing games are totally useless to me, I need to be focused on the programming, on my app.\n\nNow it's 00:40, but I still want to finish the app. Though I changed the framework, it wasn't working completely. I'm afraid it would take a lot of time to fix it tomorrow, I hope I can finish it tonight. I know the chances are not good.\n\n### Update\nNow it's 2:16, I think I have made the new framework work. It's time to get on bed.\n","slug":"I-still-didn-t-go-jogging-today","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqct00148arfjtvl4gm3","content":"<p>OK, I still didn’t go jogging today, I just don’t feel like it, but I finished other tasks, reading the book, adding new words etc. Though I know jogging is good for my health, both mentally and physically, but I’m just lazy.</p>\n<p>Today I changed the basic framework of <em>Lantastic</em>, I took away the <code>database</code> part from <code>dsl</code>, and create a new class <code>Dict</code> to include different kinds of formats, so it wouldn’t be a pain to add a new format in the future in this way.</p>\n<p>I also played the game for a while, well, a little bit long technically, I guess it’s just much easier than programming. But playing games are totally useless to me, I need to be focused on the programming, on my app.</p>\n<p>Now it’s 00:40, but I still want to finish the app. Though I changed the framework, it wasn’t working completely. I’m afraid it would take a lot of time to fix it tomorrow, I hope I can finish it tonight. I know the chances are not good.</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><p>Now it’s 2:16, I think I have made the new framework work. It’s time to get on bed.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>OK, I still didn’t go jogging today, I just don’t feel like it, but I finished other tasks, reading the book, adding new words etc. Though I know jogging is good for my health, both mentally and physically, but I’m just lazy.</p>\n<p>Today I changed the basic framework of <em>Lantastic</em>, I took away the <code>database</code> part from <code>dsl</code>, and create a new class <code>Dict</code> to include different kinds of formats, so it wouldn’t be a pain to add a new format in the future in this way.</p>\n<p>I also played the game for a while, well, a little bit long technically, I guess it’s just much easier than programming. But playing games are totally useless to me, I need to be focused on the programming, on my app.</p>\n<p>Now it’s 00:40, but I still want to finish the app. Though I changed the framework, it wasn’t working completely. I’m afraid it would take a lot of time to fix it tomorrow, I hope I can finish it tonight. I know the chances are not good.</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><p>Now it’s 2:16, I think I have made the new framework work. It’s time to get on bed.</p>\n"},{"title":"Hadoop Internals -- Configuration","date":"2017-03-09T13:49:00.000Z","thumbnail":"/images/hadoop.png","_content":"\n# Introduction\nAs what is called, `Configuration` is used to store all kinds of configurations in the hadoop platform, either they are from files(like `core-default.xml`) or from users(set via `conf.setInt(\"dfs.replication\", 1)`). It would also warn you if you use a deprecated key. So how does it work? I will try to explain it in the source code level.\n\n# Serialization and Deserialization\nConfiguration can be serialized in the file system and deserialized again into an instance. It implements the `Writable` interface to achieve this. There are only two methods in the `Writable` interface, `write` and `readFields`, just as follows.\n\n```java\npublic interface Writable {\n  /** \n   * Serialize the fields of this object to <code>out</code>.\n   * \n   * @param out <code>DataOuput</code> to serialize this object into.\n   * @throws IOException\n   */\n  void write(DataOutput out) throws IOException;\n\n  /** \n   * Deserialize the fields of this object from <code>in</code>.  \n   * \n   * <p>For efficiency, implementations should attempt to re-use storage in the \n   * existing object where possible.</p>\n   * \n   * @param in <code>DataInput</code> to deseriablize this object from.\n   * @throws IOException\n   */\n  void readFields(DataInput in) throws IOException;\n}\n```\n\nAs you can see, we call `write` when we need to serialize a `Configuration` instance into file, and we call `readFields` when we need to deserialize it from file. In fact, I wrote several lines to show how to serialize and deserialize a `Configuration` instance.\n\n```java\npackage com.example;\n\nimport org.apache.hadoop.conf.Configuration;\n\nimport java.io.*;\n\n/**\n * Created by searene on 3/7/17.\n */\npublic class ConfigurationInternal {\n    public static void main(String[] args) throws IOException {\n\n        String serializationFileName = \"conf.ser\";\n        String key = \"dfs.replication\";\n\n        Configuration conf = new Configuration();\n        conf.setInt(key, 1);\n\n        // serialize the configuration instance into file\n        DataOutput dataOutput = new DataOutputStream(new FileOutputStream(serializationFileName));\n        conf.write(dataOutput);\n\n        // read from the serialized file into a new configuration instance\n        DataInput dataInput = new DataInputStream(new FileInputStream(serializationFileName));\n        Configuration confObtained = new Configuration();\n        confObtained.readFields(dataInput);\n\n        System.out.println(confObtained.getInt(key, 0));\n    }\n}\n```\n\nTo run it, you have to create a maven project and add `hadoop-common` as a dependency.\n\n```xml\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-common</artifactId>\n    <version>2.7.3</version>\n</dependency>\n```\n\nRun it, and you will notice that a file `confi.ser` is created out of it, it stores the instance of `Configuration`, then we load it(aka deserialize it) from the file and get the instance. We can look through the source code of `write` and `readFields` implemented in `Configuration` to know more about it.\n\n```java\npublic class Configuration implements Iterable<Map.Entry<String,String>>,\n                                      Writable {\n    ....\n      @Override\n  public void write(DataOutput out) throws IOException {\n    Properties props = getProps();\n    WritableUtils.writeVInt(out, props.size());\n    for(Map.Entry<Object, Object> item: props.entrySet()) {\n      org.apache.hadoop.io.Text.writeString(out, (String) item.getKey());\n      org.apache.hadoop.io.Text.writeString(out, (String) item.getValue());\n      WritableUtils.writeCompressedStringArray(out, \n          updatingResource.get(item.getKey()));\n    }\n  }\n    ....\n      @Override\n  public void readFields(DataInput in) throws IOException {\n    clear();\n    int size = WritableUtils.readVInt(in);\n    for(int i=0; i < size; ++i) {\n      String key = org.apache.hadoop.io.Text.readString(in);\n      String value = org.apache.hadoop.io.Text.readString(in);\n      set(key, value); \n      String sources[] = WritableUtils.readCompressedStringArray(in);\n      if(sources != null) {\n        updatingResource.put(key, sources);\n      }\n    }\n  }\n    ...\n}\n```\n\nAs you can see, the fields that serialization and deserialization apply to are `this.properties` and `this.updateResource`, the former stores all the configurations, which is the most important field in `Configuration`, and the latter stores the mapping of key to the resource which modifies or loads the key most recently. For example, if `Configuration` loads a file `configuration.xml`, which modifies the configuration `dfs.replication`, a new item will be added to `this.updateResource`:\n\n```java\nthis.updateResource.put(\"dfs.replication\", new String[]{\"configuartion.xml\"});\n```\n\n# Detect Deprecated Keys\nWhen `Configuartion` is loaded, a default list of deprecated keys will be loaded into `defaultDeprecations` too.\n\n```java\n  private static DeprecationDelta[] defaultDeprecations = \n    new DeprecationDelta[] {\n      new DeprecationDelta(\"topology.script.file.name\", \n        CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY),\n      new DeprecationDelta(\"topology.script.number.args\", \n        CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY),\n      new DeprecationDelta(\"hadoop.configured.node.mapping\", \n        CommonConfigurationKeys.NET_TOPOLOGY_CONFIGURED_NODE_MAPPING_KEY),\n      new DeprecationDelta(\"topology.node.switch.mapping.impl\", \n        CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY),\n      new DeprecationDelta(\"dfs.df.interval\", \n        CommonConfigurationKeys.FS_DF_INTERVAL_KEY),\n      new DeprecationDelta(\"hadoop.native.lib\", \n        CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY),\n      new DeprecationDelta(\"fs.default.name\", \n        CommonConfigurationKeys.FS_DEFAULT_NAME_KEY),\n      new DeprecationDelta(\"dfs.umaskmode\",\n        CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY),\n      new DeprecationDelta(\"dfs.nfs.exports.allowed.hosts\",\n          CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY)\n    };\n```\n\nWhen you try to set a configuration via something like `configuration.set(\"name\", \"value\")`, it will first check if the key provided is deprecated, and if it is, it will store both deprecated and new keys in itself with the given value, and warn once to the user that the key should not be used.\n\n```java\n  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name != null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value != null,\n        \"The value of property \" + name + \" must not be null\");\n    name = name.trim();\n    DeprecationContext deprecations = deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource = (source == null ? \"programatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames = getAlternativeNames(name);\n      if(altNames != null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names = handleDeprecation(deprecationContext.get(), name);\n      String altSource = \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }\n```\n\n# Load Default Configuration files\nWhen `Configuration` is loaded, it will try to find two files in the classpath: `core-default.xml` and `core-site.xml`, then load them if they are found.\n\n```java\n  static{\n    //print deprecation warning if hadoop-site.xml is found in classpath\n    ClassLoader cL = Thread.currentThread().getContextClassLoader();\n    if (cL == null) {\n      cL = Configuration.class.getClassLoader();\n    }\n    if(cL.getResource(\"hadoop-site.xml\")!=null) {\n      LOG.warn(\"DEPRECATED: hadoop-site.xml found in the classpath. \" +\n          \"Usage of hadoop-site.xml is deprecated. Instead use core-site.xml, \"\n          + \"mapred-site.xml and hdfs-site.xml to override properties of \" +\n          \"core-default.xml, mapred-default.xml and hdfs-default.xml \" +\n          \"respectively\");\n    }\n    addDefaultResource(\"core-default.xml\");\n    addDefaultResource(\"core-site.xml\");\n  }\n  \n    ...\n    \n    public static synchronized void addDefaultResource(String name) {\n    if(!defaultResources.contains(name)) {\n      defaultResources.add(name);\n      for(Configuration conf : REGISTRY.keySet()) {\n        if(conf.loadDefaults) {\n          conf.reloadConfiguration();\n        }\n      }\n    }\n  }\n```\n","source":"_posts/Hadoop-Internals-Configuration.md","raw":"title: Hadoop Internals -- Configuration\ndate: 2017-03-09 21:49:00\ntags: [hadoop, java]\ncategories: Coding\nthumbnail: /images/hadoop.png\n---\n\n# Introduction\nAs what is called, `Configuration` is used to store all kinds of configurations in the hadoop platform, either they are from files(like `core-default.xml`) or from users(set via `conf.setInt(\"dfs.replication\", 1)`). It would also warn you if you use a deprecated key. So how does it work? I will try to explain it in the source code level.\n\n# Serialization and Deserialization\nConfiguration can be serialized in the file system and deserialized again into an instance. It implements the `Writable` interface to achieve this. There are only two methods in the `Writable` interface, `write` and `readFields`, just as follows.\n\n```java\npublic interface Writable {\n  /** \n   * Serialize the fields of this object to <code>out</code>.\n   * \n   * @param out <code>DataOuput</code> to serialize this object into.\n   * @throws IOException\n   */\n  void write(DataOutput out) throws IOException;\n\n  /** \n   * Deserialize the fields of this object from <code>in</code>.  \n   * \n   * <p>For efficiency, implementations should attempt to re-use storage in the \n   * existing object where possible.</p>\n   * \n   * @param in <code>DataInput</code> to deseriablize this object from.\n   * @throws IOException\n   */\n  void readFields(DataInput in) throws IOException;\n}\n```\n\nAs you can see, we call `write` when we need to serialize a `Configuration` instance into file, and we call `readFields` when we need to deserialize it from file. In fact, I wrote several lines to show how to serialize and deserialize a `Configuration` instance.\n\n```java\npackage com.example;\n\nimport org.apache.hadoop.conf.Configuration;\n\nimport java.io.*;\n\n/**\n * Created by searene on 3/7/17.\n */\npublic class ConfigurationInternal {\n    public static void main(String[] args) throws IOException {\n\n        String serializationFileName = \"conf.ser\";\n        String key = \"dfs.replication\";\n\n        Configuration conf = new Configuration();\n        conf.setInt(key, 1);\n\n        // serialize the configuration instance into file\n        DataOutput dataOutput = new DataOutputStream(new FileOutputStream(serializationFileName));\n        conf.write(dataOutput);\n\n        // read from the serialized file into a new configuration instance\n        DataInput dataInput = new DataInputStream(new FileInputStream(serializationFileName));\n        Configuration confObtained = new Configuration();\n        confObtained.readFields(dataInput);\n\n        System.out.println(confObtained.getInt(key, 0));\n    }\n}\n```\n\nTo run it, you have to create a maven project and add `hadoop-common` as a dependency.\n\n```xml\n<dependency>\n    <groupId>org.apache.hadoop</groupId>\n    <artifactId>hadoop-common</artifactId>\n    <version>2.7.3</version>\n</dependency>\n```\n\nRun it, and you will notice that a file `confi.ser` is created out of it, it stores the instance of `Configuration`, then we load it(aka deserialize it) from the file and get the instance. We can look through the source code of `write` and `readFields` implemented in `Configuration` to know more about it.\n\n```java\npublic class Configuration implements Iterable<Map.Entry<String,String>>,\n                                      Writable {\n    ....\n      @Override\n  public void write(DataOutput out) throws IOException {\n    Properties props = getProps();\n    WritableUtils.writeVInt(out, props.size());\n    for(Map.Entry<Object, Object> item: props.entrySet()) {\n      org.apache.hadoop.io.Text.writeString(out, (String) item.getKey());\n      org.apache.hadoop.io.Text.writeString(out, (String) item.getValue());\n      WritableUtils.writeCompressedStringArray(out, \n          updatingResource.get(item.getKey()));\n    }\n  }\n    ....\n      @Override\n  public void readFields(DataInput in) throws IOException {\n    clear();\n    int size = WritableUtils.readVInt(in);\n    for(int i=0; i < size; ++i) {\n      String key = org.apache.hadoop.io.Text.readString(in);\n      String value = org.apache.hadoop.io.Text.readString(in);\n      set(key, value); \n      String sources[] = WritableUtils.readCompressedStringArray(in);\n      if(sources != null) {\n        updatingResource.put(key, sources);\n      }\n    }\n  }\n    ...\n}\n```\n\nAs you can see, the fields that serialization and deserialization apply to are `this.properties` and `this.updateResource`, the former stores all the configurations, which is the most important field in `Configuration`, and the latter stores the mapping of key to the resource which modifies or loads the key most recently. For example, if `Configuration` loads a file `configuration.xml`, which modifies the configuration `dfs.replication`, a new item will be added to `this.updateResource`:\n\n```java\nthis.updateResource.put(\"dfs.replication\", new String[]{\"configuartion.xml\"});\n```\n\n# Detect Deprecated Keys\nWhen `Configuartion` is loaded, a default list of deprecated keys will be loaded into `defaultDeprecations` too.\n\n```java\n  private static DeprecationDelta[] defaultDeprecations = \n    new DeprecationDelta[] {\n      new DeprecationDelta(\"topology.script.file.name\", \n        CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY),\n      new DeprecationDelta(\"topology.script.number.args\", \n        CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY),\n      new DeprecationDelta(\"hadoop.configured.node.mapping\", \n        CommonConfigurationKeys.NET_TOPOLOGY_CONFIGURED_NODE_MAPPING_KEY),\n      new DeprecationDelta(\"topology.node.switch.mapping.impl\", \n        CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY),\n      new DeprecationDelta(\"dfs.df.interval\", \n        CommonConfigurationKeys.FS_DF_INTERVAL_KEY),\n      new DeprecationDelta(\"hadoop.native.lib\", \n        CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY),\n      new DeprecationDelta(\"fs.default.name\", \n        CommonConfigurationKeys.FS_DEFAULT_NAME_KEY),\n      new DeprecationDelta(\"dfs.umaskmode\",\n        CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY),\n      new DeprecationDelta(\"dfs.nfs.exports.allowed.hosts\",\n          CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY)\n    };\n```\n\nWhen you try to set a configuration via something like `configuration.set(\"name\", \"value\")`, it will first check if the key provided is deprecated, and if it is, it will store both deprecated and new keys in itself with the given value, and warn once to the user that the key should not be used.\n\n```java\n  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name != null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value != null,\n        \"The value of property \" + name + \" must not be null\");\n    name = name.trim();\n    DeprecationContext deprecations = deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource = (source == null ? \"programatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames = getAlternativeNames(name);\n      if(altNames != null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names = handleDeprecation(deprecationContext.get(), name);\n      String altSource = \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }\n```\n\n# Load Default Configuration files\nWhen `Configuration` is loaded, it will try to find two files in the classpath: `core-default.xml` and `core-site.xml`, then load them if they are found.\n\n```java\n  static{\n    //print deprecation warning if hadoop-site.xml is found in classpath\n    ClassLoader cL = Thread.currentThread().getContextClassLoader();\n    if (cL == null) {\n      cL = Configuration.class.getClassLoader();\n    }\n    if(cL.getResource(\"hadoop-site.xml\")!=null) {\n      LOG.warn(\"DEPRECATED: hadoop-site.xml found in the classpath. \" +\n          \"Usage of hadoop-site.xml is deprecated. Instead use core-site.xml, \"\n          + \"mapred-site.xml and hdfs-site.xml to override properties of \" +\n          \"core-default.xml, mapred-default.xml and hdfs-default.xml \" +\n          \"respectively\");\n    }\n    addDefaultResource(\"core-default.xml\");\n    addDefaultResource(\"core-site.xml\");\n  }\n  \n    ...\n    \n    public static synchronized void addDefaultResource(String name) {\n    if(!defaultResources.contains(name)) {\n      defaultResources.add(name);\n      for(Configuration conf : REGISTRY.keySet()) {\n        if(conf.loadDefaults) {\n          conf.reloadConfiguration();\n        }\n      }\n    }\n  }\n```\n","slug":"Hadoop-Internals-Configuration","published":1,"updated":"2017-05-15T15:10:56.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcu00178arf4ka9jnkb","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>As what is called, <code>Configuration</code> is used to store all kinds of configurations in the hadoop platform, either they are from files(like <code>core-default.xml</code>) or from users(set via <code>conf.setInt(&quot;dfs.replication&quot;, 1)</code>). It would also warn you if you use a deprecated key. So how does it work? I will try to explain it in the source code level.</p>\n<h1 id=\"Serialization-and-Deserialization\"><a href=\"#Serialization-and-Deserialization\" class=\"headerlink\" title=\"Serialization and Deserialization\"></a>Serialization and Deserialization</h1><p>Configuration can be serialized in the file system and deserialized again into an instance. It implements the <code>Writable</code> interface to achieve this. There are only two methods in the <code>Writable</code> interface, <code>write</code> and <code>readFields</code>, just as follows.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Writable</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Serialize the fields of this object to &lt;code&gt;out&lt;/code&gt;.</div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> out &lt;code&gt;DataOuput&lt;/code&gt; to serialize this object into.</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Deserialize the fields of this object from &lt;code&gt;in&lt;/code&gt;.  </div><div class=\"line\">   * </div><div class=\"line\">   * &lt;p&gt;For efficiency, implementations should attempt to re-use storage in the </div><div class=\"line\">   * existing object where possible.&lt;/p&gt;</div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> in &lt;code&gt;DataInput&lt;/code&gt; to deseriablize this object from.</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As you can see, we call <code>write</code> when we need to serialize a <code>Configuration</code> instance into file, and we call <code>readFields</code> when we need to deserialize it from file. In fact, I wrote several lines to show how to serialize and deserialize a <code>Configuration</code> instance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by searene on 3/7/17.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigurationInternal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String serializationFileName = <span class=\"string\">\"conf.ser\"</span>;</div><div class=\"line\">        String key = <span class=\"string\">\"dfs.replication\"</span>;</div><div class=\"line\"></div><div class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">        conf.setInt(key, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// serialize the configuration instance into file</span></div><div class=\"line\">        DataOutput dataOutput = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(serializationFileName));</div><div class=\"line\">        conf.write(dataOutput);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// read from the serialized file into a new configuration instance</span></div><div class=\"line\">        DataInput dataInput = <span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> FileInputStream(serializationFileName));</div><div class=\"line\">        Configuration confObtained = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">        confObtained.readFields(dataInput);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(confObtained.getInt(key, <span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To run it, you have to create a maven project and add <code>hadoop-common</code> as a dependency.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run it, and you will notice that a file <code>confi.ser</code> is created out of it, it stores the instance of <code>Configuration</code>, then we load it(aka deserialize it) from the file and get the instance. We can look through the source code of <code>write</code> and <code>readFields</code> implemented in <code>Configuration</code> to know more about it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Configuration</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">String</span>&gt;&gt;,</span></div><div class=\"line\">                                      <span class=\"title\">Writable</span> &#123;</div><div class=\"line\">    ....</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    Properties props = getProps();</div><div class=\"line\">    WritableUtils.writeVInt(out, props.size());</div><div class=\"line\">    <span class=\"keyword\">for</span>(Map.Entry&lt;Object, Object&gt; item: props.entrySet()) &#123;</div><div class=\"line\">      org.apache.hadoop.io.Text.writeString(out, (String) item.getKey());</div><div class=\"line\">      org.apache.hadoop.io.Text.writeString(out, (String) item.getValue());</div><div class=\"line\">      WritableUtils.writeCompressedStringArray(out, </div><div class=\"line\">          updatingResource.get(item.getKey()));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    ....</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    clear();</div><div class=\"line\">    <span class=\"keyword\">int</span> size = WritableUtils.readVInt(in);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">      String key = org.apache.hadoop.io.Text.readString(in);</div><div class=\"line\">      String value = org.apache.hadoop.io.Text.readString(in);</div><div class=\"line\">      set(key, value); </div><div class=\"line\">      String sources[] = WritableUtils.readCompressedStringArray(in);</div><div class=\"line\">      <span class=\"keyword\">if</span>(sources != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        updatingResource.put(key, sources);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As you can see, the fields that serialization and deserialization apply to are <code>this.properties</code> and <code>this.updateResource</code>, the former stores all the configurations, which is the most important field in <code>Configuration</code>, and the latter stores the mapping of key to the resource which modifies or loads the key most recently. For example, if <code>Configuration</code> loads a file <code>configuration.xml</code>, which modifies the configuration <code>dfs.replication</code>, a new item will be added to <code>this.updateResource</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.updateResource.put(<span class=\"string\">\"dfs.replication\"</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"configuartion.xml\"</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Detect-Deprecated-Keys\"><a href=\"#Detect-Deprecated-Keys\" class=\"headerlink\" title=\"Detect Deprecated Keys\"></a>Detect Deprecated Keys</h1><p>When <code>Configuartion</code> is loaded, a default list of deprecated keys will be loaded into <code>defaultDeprecations</code> too.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DeprecationDelta[] defaultDeprecations = </div><div class=\"line\">  <span class=\"keyword\">new</span> DeprecationDelta[] &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.script.file.name\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.script.number.args\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"hadoop.configured.node.mapping\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_CONFIGURED_NODE_MAPPING_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.node.switch.mapping.impl\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.df.interval\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.FS_DF_INTERVAL_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"hadoop.native.lib\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"fs.default.name\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.FS_DEFAULT_NAME_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.umaskmode\"</span>,</div><div class=\"line\">      CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.nfs.exports.allowed.hosts\"</span>,</div><div class=\"line\">        CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY)</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>When you try to set a configuration via something like <code>configuration.set(&quot;name&quot;, &quot;value&quot;)</code>, it will first check if the key provided is deprecated, and if it is, it will store both deprecated and new keys in itself with the given value, and warn once to the user that the key should not be used.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name, String value, String source)</span> </span>&#123;</div><div class=\"line\">  Preconditions.checkArgument(</div><div class=\"line\">      name != <span class=\"keyword\">null</span>,</div><div class=\"line\">      <span class=\"string\">\"Property name must not be null\"</span>);</div><div class=\"line\">  Preconditions.checkArgument(</div><div class=\"line\">      value != <span class=\"keyword\">null</span>,</div><div class=\"line\">      <span class=\"string\">\"The value of property \"</span> + name + <span class=\"string\">\" must not be null\"</span>);</div><div class=\"line\">  name = name.trim();</div><div class=\"line\">  DeprecationContext deprecations = deprecationContext.get();</div><div class=\"line\">  <span class=\"keyword\">if</span> (deprecations.getDeprecatedKeyMap().isEmpty()) &#123;</div><div class=\"line\">    getProps();</div><div class=\"line\">  &#125;</div><div class=\"line\">  getOverlay().setProperty(name, value);</div><div class=\"line\">  getProps().setProperty(name, value);</div><div class=\"line\">  String newSource = (source == <span class=\"keyword\">null</span> ? <span class=\"string\">\"programatically\"</span> : source);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isDeprecated(name)) &#123;</div><div class=\"line\">    updatingResource.put(name, <span class=\"keyword\">new</span> String[] &#123;newSource&#125;);</div><div class=\"line\">    String[] altNames = getAlternativeNames(name);</div><div class=\"line\">    <span class=\"keyword\">if</span>(altNames != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span>(String n: altNames) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!n.equals(name)) &#123;</div><div class=\"line\">          getOverlay().setProperty(n, value);</div><div class=\"line\">          getProps().setProperty(n, value);</div><div class=\"line\">          updatingResource.put(n, <span class=\"keyword\">new</span> String[] &#123;newSource&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    String[] names = handleDeprecation(deprecationContext.get(), name);</div><div class=\"line\">    String altSource = <span class=\"string\">\"because \"</span> + name + <span class=\"string\">\" is deprecated\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(String n : names) &#123;</div><div class=\"line\">      getOverlay().setProperty(n, value);</div><div class=\"line\">      getProps().setProperty(n, value);</div><div class=\"line\">      updatingResource.put(n, <span class=\"keyword\">new</span> String[] &#123;altSource&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Load-Default-Configuration-files\"><a href=\"#Load-Default-Configuration-files\" class=\"headerlink\" title=\"Load Default Configuration files\"></a>Load Default Configuration files</h1><p>When <code>Configuration</code> is loaded, it will try to find two files in the classpath: <code>core-default.xml</code> and <code>core-site.xml</code>, then load them if they are found.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//print deprecation warning if hadoop-site.xml is found in classpath</span></div><div class=\"line\">  ClassLoader cL = Thread.currentThread().getContextClassLoader();</div><div class=\"line\">  <span class=\"keyword\">if</span> (cL == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cL = Configuration.class.getClassLoader();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cL.getResource(<span class=\"string\">\"hadoop-site.xml\"</span>)!=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    LOG.warn(<span class=\"string\">\"DEPRECATED: hadoop-site.xml found in the classpath. \"</span> +</div><div class=\"line\">        <span class=\"string\">\"Usage of hadoop-site.xml is deprecated. Instead use core-site.xml, \"</span></div><div class=\"line\">        + <span class=\"string\">\"mapred-site.xml and hdfs-site.xml to override properties of \"</span> +</div><div class=\"line\">        <span class=\"string\">\"core-default.xml, mapred-default.xml and hdfs-default.xml \"</span> +</div><div class=\"line\">        <span class=\"string\">\"respectively\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  addDefaultResource(<span class=\"string\">\"core-default.xml\"</span>);</div><div class=\"line\">  addDefaultResource(<span class=\"string\">\"core-site.xml\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addDefaultResource</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!defaultResources.contains(name)) &#123;</div><div class=\"line\">    defaultResources.add(name);</div><div class=\"line\">    <span class=\"keyword\">for</span>(Configuration conf : REGISTRY.keySet()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(conf.loadDefaults) &#123;</div><div class=\"line\">        conf.reloadConfiguration();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>As what is called, <code>Configuration</code> is used to store all kinds of configurations in the hadoop platform, either they are from files(like <code>core-default.xml</code>) or from users(set via <code>conf.setInt(&quot;dfs.replication&quot;, 1)</code>). It would also warn you if you use a deprecated key. So how does it work? I will try to explain it in the source code level.</p>\n<h1 id=\"Serialization-and-Deserialization\"><a href=\"#Serialization-and-Deserialization\" class=\"headerlink\" title=\"Serialization and Deserialization\"></a>Serialization and Deserialization</h1><p>Configuration can be serialized in the file system and deserialized again into an instance. It implements the <code>Writable</code> interface to achieve this. There are only two methods in the <code>Writable</code> interface, <code>write</code> and <code>readFields</code>, just as follows.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Writable</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Serialize the fields of this object to &lt;code&gt;out&lt;/code&gt;.</div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> out &lt;code&gt;DataOuput&lt;/code&gt; to serialize this object into.</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Deserialize the fields of this object from &lt;code&gt;in&lt;/code&gt;.  </div><div class=\"line\">   * </div><div class=\"line\">   * &lt;p&gt;For efficiency, implementations should attempt to re-use storage in the </div><div class=\"line\">   * existing object where possible.&lt;/p&gt;</div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> in &lt;code&gt;DataInput&lt;/code&gt; to deseriablize this object from.</div><div class=\"line\">   * <span class=\"doctag\">@throws</span> IOException</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As you can see, we call <code>write</code> when we need to serialize a <code>Configuration</code> instance into file, and we call <code>readFields</code> when we need to deserialize it from file. In fact, I wrote several lines to show how to serialize and deserialize a <code>Configuration</code> instance.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.apache.hadoop.conf.Configuration;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.*;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Created by searene on 3/7/17.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConfigurationInternal</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        String serializationFileName = <span class=\"string\">\"conf.ser\"</span>;</div><div class=\"line\">        String key = <span class=\"string\">\"dfs.replication\"</span>;</div><div class=\"line\"></div><div class=\"line\">        Configuration conf = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">        conf.setInt(key, <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// serialize the configuration instance into file</span></div><div class=\"line\">        DataOutput dataOutput = <span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> FileOutputStream(serializationFileName));</div><div class=\"line\">        conf.write(dataOutput);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// read from the serialized file into a new configuration instance</span></div><div class=\"line\">        DataInput dataInput = <span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> FileInputStream(serializationFileName));</div><div class=\"line\">        Configuration confObtained = <span class=\"keyword\">new</span> Configuration();</div><div class=\"line\">        confObtained.readFields(dataInput);</div><div class=\"line\"></div><div class=\"line\">        System.out.println(confObtained.getInt(key, <span class=\"number\">0</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>To run it, you have to create a maven project and add <code>hadoop-common</code> as a dependency.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.hadoop<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hadoop-common<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Run it, and you will notice that a file <code>confi.ser</code> is created out of it, it stores the instance of <code>Configuration</code>, then we load it(aka deserialize it) from the file and get the instance. We can look through the source code of <code>write</code> and <code>readFields</code> implemented in <code>Configuration</code> to know more about it.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Configuration</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">String</span>&gt;&gt;,</span></div><div class=\"line\">                                      <span class=\"title\">Writable</span> &#123;</div><div class=\"line\">    ....</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    Properties props = getProps();</div><div class=\"line\">    WritableUtils.writeVInt(out, props.size());</div><div class=\"line\">    <span class=\"keyword\">for</span>(Map.Entry&lt;Object, Object&gt; item: props.entrySet()) &#123;</div><div class=\"line\">      org.apache.hadoop.io.Text.writeString(out, (String) item.getKey());</div><div class=\"line\">      org.apache.hadoop.io.Text.writeString(out, (String) item.getValue());</div><div class=\"line\">      WritableUtils.writeCompressedStringArray(out, </div><div class=\"line\">          updatingResource.get(item.getKey()));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    ....</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">    clear();</div><div class=\"line\">    <span class=\"keyword\">int</span> size = WritableUtils.readVInt(in);</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; size; ++i) &#123;</div><div class=\"line\">      String key = org.apache.hadoop.io.Text.readString(in);</div><div class=\"line\">      String value = org.apache.hadoop.io.Text.readString(in);</div><div class=\"line\">      set(key, value); </div><div class=\"line\">      String sources[] = WritableUtils.readCompressedStringArray(in);</div><div class=\"line\">      <span class=\"keyword\">if</span>(sources != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        updatingResource.put(key, sources);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>As you can see, the fields that serialization and deserialization apply to are <code>this.properties</code> and <code>this.updateResource</code>, the former stores all the configurations, which is the most important field in <code>Configuration</code>, and the latter stores the mapping of key to the resource which modifies or loads the key most recently. For example, if <code>Configuration</code> loads a file <code>configuration.xml</code>, which modifies the configuration <code>dfs.replication</code>, a new item will be added to <code>this.updateResource</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.updateResource.put(<span class=\"string\">\"dfs.replication\"</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"configuartion.xml\"</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"Detect-Deprecated-Keys\"><a href=\"#Detect-Deprecated-Keys\" class=\"headerlink\" title=\"Detect Deprecated Keys\"></a>Detect Deprecated Keys</h1><p>When <code>Configuartion</code> is loaded, a default list of deprecated keys will be loaded into <code>defaultDeprecations</code> too.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> DeprecationDelta[] defaultDeprecations = </div><div class=\"line\">  <span class=\"keyword\">new</span> DeprecationDelta[] &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.script.file.name\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.script.number.args\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_SCRIPT_NUMBER_ARGS_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"hadoop.configured.node.mapping\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_CONFIGURED_NODE_MAPPING_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"topology.node.switch.mapping.impl\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.df.interval\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.FS_DF_INTERVAL_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"hadoop.native.lib\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"fs.default.name\"</span>, </div><div class=\"line\">      CommonConfigurationKeys.FS_DEFAULT_NAME_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.umaskmode\"</span>,</div><div class=\"line\">      CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY),</div><div class=\"line\">    <span class=\"keyword\">new</span> DeprecationDelta(<span class=\"string\">\"dfs.nfs.exports.allowed.hosts\"</span>,</div><div class=\"line\">        CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY)</div><div class=\"line\">  &#125;;</div></pre></td></tr></table></figure>\n<p>When you try to set a configuration via something like <code>configuration.set(&quot;name&quot;, &quot;value&quot;)</code>, it will first check if the key provided is deprecated, and if it is, it will store both deprecated and new keys in itself with the given value, and warn once to the user that the key should not be used.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(String name, String value, String source)</span> </span>&#123;</div><div class=\"line\">  Preconditions.checkArgument(</div><div class=\"line\">      name != <span class=\"keyword\">null</span>,</div><div class=\"line\">      <span class=\"string\">\"Property name must not be null\"</span>);</div><div class=\"line\">  Preconditions.checkArgument(</div><div class=\"line\">      value != <span class=\"keyword\">null</span>,</div><div class=\"line\">      <span class=\"string\">\"The value of property \"</span> + name + <span class=\"string\">\" must not be null\"</span>);</div><div class=\"line\">  name = name.trim();</div><div class=\"line\">  DeprecationContext deprecations = deprecationContext.get();</div><div class=\"line\">  <span class=\"keyword\">if</span> (deprecations.getDeprecatedKeyMap().isEmpty()) &#123;</div><div class=\"line\">    getProps();</div><div class=\"line\">  &#125;</div><div class=\"line\">  getOverlay().setProperty(name, value);</div><div class=\"line\">  getProps().setProperty(name, value);</div><div class=\"line\">  String newSource = (source == <span class=\"keyword\">null</span> ? <span class=\"string\">\"programatically\"</span> : source);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!isDeprecated(name)) &#123;</div><div class=\"line\">    updatingResource.put(name, <span class=\"keyword\">new</span> String[] &#123;newSource&#125;);</div><div class=\"line\">    String[] altNames = getAlternativeNames(name);</div><div class=\"line\">    <span class=\"keyword\">if</span>(altNames != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span>(String n: altNames) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!n.equals(name)) &#123;</div><div class=\"line\">          getOverlay().setProperty(n, value);</div><div class=\"line\">          getProps().setProperty(n, value);</div><div class=\"line\">          updatingResource.put(n, <span class=\"keyword\">new</span> String[] &#123;newSource&#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    String[] names = handleDeprecation(deprecationContext.get(), name);</div><div class=\"line\">    String altSource = <span class=\"string\">\"because \"</span> + name + <span class=\"string\">\" is deprecated\"</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>(String n : names) &#123;</div><div class=\"line\">      getOverlay().setProperty(n, value);</div><div class=\"line\">      getProps().setProperty(n, value);</div><div class=\"line\">      updatingResource.put(n, <span class=\"keyword\">new</span> String[] &#123;altSource&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Load-Default-Configuration-files\"><a href=\"#Load-Default-Configuration-files\" class=\"headerlink\" title=\"Load Default Configuration files\"></a>Load Default Configuration files</h1><p>When <code>Configuration</code> is loaded, it will try to find two files in the classpath: <code>core-default.xml</code> and <code>core-site.xml</code>, then load them if they are found.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//print deprecation warning if hadoop-site.xml is found in classpath</span></div><div class=\"line\">  ClassLoader cL = Thread.currentThread().getContextClassLoader();</div><div class=\"line\">  <span class=\"keyword\">if</span> (cL == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    cL = Configuration.class.getClassLoader();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span>(cL.getResource(<span class=\"string\">\"hadoop-site.xml\"</span>)!=<span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">    LOG.warn(<span class=\"string\">\"DEPRECATED: hadoop-site.xml found in the classpath. \"</span> +</div><div class=\"line\">        <span class=\"string\">\"Usage of hadoop-site.xml is deprecated. Instead use core-site.xml, \"</span></div><div class=\"line\">        + <span class=\"string\">\"mapred-site.xml and hdfs-site.xml to override properties of \"</span> +</div><div class=\"line\">        <span class=\"string\">\"core-default.xml, mapred-default.xml and hdfs-default.xml \"</span> +</div><div class=\"line\">        <span class=\"string\">\"respectively\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  addDefaultResource(<span class=\"string\">\"core-default.xml\"</span>);</div><div class=\"line\">  addDefaultResource(<span class=\"string\">\"core-site.xml\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">  ...</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">addDefaultResource</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!defaultResources.contains(name)) &#123;</div><div class=\"line\">    defaultResources.add(name);</div><div class=\"line\">    <span class=\"keyword\">for</span>(Configuration conf : REGISTRY.keySet()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(conf.loadDefaults) &#123;</div><div class=\"line\">        conf.reloadConfiguration();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"I started programming and running today","date":"2016-05-22T13:59:59.000Z","thumbnail":"http://www.ichanical.com/wp-content/uploads/2015/04/html-programming.jpg","_content":"\nI watched *alien 3* today, It was not as bad as I thought. Though it cannot beat *alien 2*, I still consider it a good film. Somehow I got bored with adding new words to anki, which prevented me from enjoying the film in a way. But I consider it a task to add new words to anki, and I'm still finished with it, although some of them were omitted.\n\nIt was also worth mentioning that I started programming again. I mean, the *lantastic* project. There are still a lot to be done. To develop a great app, you have to consider a lot of things, and you can never fix all the bugs, I mean it. All I can do is to make a better app, instead of the best, because the latter never happens.\n\nTo keep me energetic, I started running tonight. It was a little late when I went out, which is almost 22:00. And I saw a car running towards me slowly, it scared me a little bit. Because it occurred to me that a girl was nearly caught by some strangers, the car in that story was also running slowly. I saw that story on zhihu, so I was a little nervous. I gradually sped up my pace and finished the jogging with only about 300 meters. I think I need to go jogging earlier in the future. Though I'm a man, I'm still nervous when I'm all alone in the middle of the night.\n","source":"_posts/I-started-programming-and-running-today.md","raw":"title: I started programming and running today\ndate: 2016-05-22 21:59:59\ntags:\ncategories: Journal\nthumbnail: http://www.ichanical.com/wp-content/uploads/2015/04/html-programming.jpg\n---\n\nI watched *alien 3* today, It was not as bad as I thought. Though it cannot beat *alien 2*, I still consider it a good film. Somehow I got bored with adding new words to anki, which prevented me from enjoying the film in a way. But I consider it a task to add new words to anki, and I'm still finished with it, although some of them were omitted.\n\nIt was also worth mentioning that I started programming again. I mean, the *lantastic* project. There are still a lot to be done. To develop a great app, you have to consider a lot of things, and you can never fix all the bugs, I mean it. All I can do is to make a better app, instead of the best, because the latter never happens.\n\nTo keep me energetic, I started running tonight. It was a little late when I went out, which is almost 22:00. And I saw a car running towards me slowly, it scared me a little bit. Because it occurred to me that a girl was nearly caught by some strangers, the car in that story was also running slowly. I saw that story on zhihu, so I was a little nervous. I gradually sped up my pace and finished the jogging with only about 300 meters. I think I need to go jogging earlier in the future. Though I'm a man, I'm still nervous when I'm all alone in the middle of the night.\n","slug":"I-started-programming-and-running-today","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcv001a8arf6745b3pr","content":"<p>I watched <em>alien 3</em> today, It was not as bad as I thought. Though it cannot beat <em>alien 2</em>, I still consider it a good film. Somehow I got bored with adding new words to anki, which prevented me from enjoying the film in a way. But I consider it a task to add new words to anki, and I’m still finished with it, although some of them were omitted.</p>\n<p>It was also worth mentioning that I started programming again. I mean, the <em>lantastic</em> project. There are still a lot to be done. To develop a great app, you have to consider a lot of things, and you can never fix all the bugs, I mean it. All I can do is to make a better app, instead of the best, because the latter never happens.</p>\n<p>To keep me energetic, I started running tonight. It was a little late when I went out, which is almost 22:00. And I saw a car running towards me slowly, it scared me a little bit. Because it occurred to me that a girl was nearly caught by some strangers, the car in that story was also running slowly. I saw that story on zhihu, so I was a little nervous. I gradually sped up my pace and finished the jogging with only about 300 meters. I think I need to go jogging earlier in the future. Though I’m a man, I’m still nervous when I’m all alone in the middle of the night.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I watched <em>alien 3</em> today, It was not as bad as I thought. Though it cannot beat <em>alien 2</em>, I still consider it a good film. Somehow I got bored with adding new words to anki, which prevented me from enjoying the film in a way. But I consider it a task to add new words to anki, and I’m still finished with it, although some of them were omitted.</p>\n<p>It was also worth mentioning that I started programming again. I mean, the <em>lantastic</em> project. There are still a lot to be done. To develop a great app, you have to consider a lot of things, and you can never fix all the bugs, I mean it. All I can do is to make a better app, instead of the best, because the latter never happens.</p>\n<p>To keep me energetic, I started running tonight. It was a little late when I went out, which is almost 22:00. And I saw a car running towards me slowly, it scared me a little bit. Because it occurred to me that a girl was nearly caught by some strangers, the car in that story was also running slowly. I saw that story on zhihu, so I was a little nervous. I gradually sped up my pace and finished the jogging with only about 300 meters. I think I need to go jogging earlier in the future. Though I’m a man, I’m still nervous when I’m all alone in the middle of the night.</p>\n"},{"title":"ImageResizer, an anki addon to resize images","date":"2016-02-14T03:09:32.000Z","_content":"\n# Introduction\n\nImageResizer is a simple anki addon used to resize the image stored in the clipboard. So images that are too big or too small to be used in reviewing are not a problem any more.\n\n## Before resizing\n\n![Before resizing](http://i.imgur.com/54kbvhl.jpg)\n\n## After resizing\n\n![After resizing](http://i.imgur.com/hQ1zeMU.png)\n\n# Install\n\nThere's two ways of installing the addon, both require to restart anki after installation\n\n1. Install it from [ankiweb](https://ankiweb.net/shared/info/1214357311).\n2. Put [ImageResizer.py](https://raw.githubusercontent.com/searene/Anki-Addons/master/ImageResizer/ImageResizer.py) in your anki addon directory\n\n# Usage\n\nNormally after you install this addon, Images will be automatically resized if you paste images when adding new cards, either by hitting `Ctrl + V` or `Ctrl + Shift + V` or click on the button on the toolbar.\n\n![To make it work](https://i.imgur.com/kupbkcU.png)\n\n# Settings\nYou can change the shortcut and the size of the image etc. from `Tools --> Image Resizer`\n\n![Start settings from menu](http://i.imgur.com/ylv6iQK.png)\n\nThe `Settings` window will pop up.\n\n![Settings](http://i.imgur.com/1tkPzPG.png)\n\nCheck `Automatically resize the image when pasting` if you want to paste the resized image when using `Ctrl+V`. Anki will paste the original-sized image if you uncheck it.\n\nThe `Key Combination` is the shortcut to paste the resized image. It's just like `Ctrl+V`, the only difference is that you will always get the resized the image if you use the shortcut to paste. You can modify the shortcut by hitting the button `Grab the Key combination` on the right. **Notice that the shortcut you specified may not work, try and find a workable one.**\n\nYou can also set the width or height of the resized image. Select `scale to width and keep ratio`, it will resize the image according to the width you specified, and the height value here will be ignored. The same goes to `scale to height and keep ratio`. Notice that it will always keep the original image's ratio, either by width or height.\n\n# Bug Report\n\nThere are two ways to report a bug or offering a suggestion.\n\n1. Open an issue on [my github repository](https://github.com/searene/Anki-Addons)\n2. Leave a comment below [my blog](https://searene.me/2016/02/14/ImageResizer-an-anki-addon-to-resize-images/)\n","source":"_posts/ImageResizer-an-anki-addon-to-resize-images.md","raw":"title: 'ImageResizer, an anki addon to resize images'\ndate: 2016-02-14 11:09:32\ncategories: Coding\ntags: [python, anki]\n---\n\n# Introduction\n\nImageResizer is a simple anki addon used to resize the image stored in the clipboard. So images that are too big or too small to be used in reviewing are not a problem any more.\n\n## Before resizing\n\n![Before resizing](http://i.imgur.com/54kbvhl.jpg)\n\n## After resizing\n\n![After resizing](http://i.imgur.com/hQ1zeMU.png)\n\n# Install\n\nThere's two ways of installing the addon, both require to restart anki after installation\n\n1. Install it from [ankiweb](https://ankiweb.net/shared/info/1214357311).\n2. Put [ImageResizer.py](https://raw.githubusercontent.com/searene/Anki-Addons/master/ImageResizer/ImageResizer.py) in your anki addon directory\n\n# Usage\n\nNormally after you install this addon, Images will be automatically resized if you paste images when adding new cards, either by hitting `Ctrl + V` or `Ctrl + Shift + V` or click on the button on the toolbar.\n\n![To make it work](https://i.imgur.com/kupbkcU.png)\n\n# Settings\nYou can change the shortcut and the size of the image etc. from `Tools --> Image Resizer`\n\n![Start settings from menu](http://i.imgur.com/ylv6iQK.png)\n\nThe `Settings` window will pop up.\n\n![Settings](http://i.imgur.com/1tkPzPG.png)\n\nCheck `Automatically resize the image when pasting` if you want to paste the resized image when using `Ctrl+V`. Anki will paste the original-sized image if you uncheck it.\n\nThe `Key Combination` is the shortcut to paste the resized image. It's just like `Ctrl+V`, the only difference is that you will always get the resized the image if you use the shortcut to paste. You can modify the shortcut by hitting the button `Grab the Key combination` on the right. **Notice that the shortcut you specified may not work, try and find a workable one.**\n\nYou can also set the width or height of the resized image. Select `scale to width and keep ratio`, it will resize the image according to the width you specified, and the height value here will be ignored. The same goes to `scale to height and keep ratio`. Notice that it will always keep the original image's ratio, either by width or height.\n\n# Bug Report\n\nThere are two ways to report a bug or offering a suggestion.\n\n1. Open an issue on [my github repository](https://github.com/searene/Anki-Addons)\n2. Leave a comment below [my blog](https://searene.me/2016/02/14/ImageResizer-an-anki-addon-to-resize-images/)\n","slug":"ImageResizer-an-anki-addon-to-resize-images","published":1,"updated":"2017-05-21T10:06:38.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcx001c8arfi5kcrm2b","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>ImageResizer is a simple anki addon used to resize the image stored in the clipboard. So images that are too big or too small to be used in reviewing are not a problem any more.</p>\n<h2 id=\"Before-resizing\"><a href=\"#Before-resizing\" class=\"headerlink\" title=\"Before resizing\"></a>Before resizing</h2><p><img src=\"http://i.imgur.com/54kbvhl.jpg\" alt=\"Before resizing\"></p>\n<h2 id=\"After-resizing\"><a href=\"#After-resizing\" class=\"headerlink\" title=\"After resizing\"></a>After resizing</h2><p><img src=\"http://i.imgur.com/hQ1zeMU.png\" alt=\"After resizing\"></p>\n<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><p>There’s two ways of installing the addon, both require to restart anki after installation</p>\n<ol>\n<li>Install it from <a href=\"https://ankiweb.net/shared/info/1214357311\" target=\"_blank\" rel=\"external\">ankiweb</a>.</li>\n<li>Put <a href=\"https://raw.githubusercontent.com/searene/Anki-Addons/master/ImageResizer/ImageResizer.py\" target=\"_blank\" rel=\"external\">ImageResizer.py</a> in your anki addon directory</li>\n</ol>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Normally after you install this addon, Images will be automatically resized if you paste images when adding new cards, either by hitting <code>Ctrl + V</code> or <code>Ctrl + Shift + V</code> or click on the button on the toolbar.</p>\n<p><img src=\"https://i.imgur.com/kupbkcU.png\" alt=\"To make it work\"></p>\n<h1 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h1><p>You can change the shortcut and the size of the image etc. from <code>Tools --&gt; Image Resizer</code></p>\n<p><img src=\"http://i.imgur.com/ylv6iQK.png\" alt=\"Start settings from menu\"></p>\n<p>The <code>Settings</code> window will pop up.</p>\n<p><img src=\"http://i.imgur.com/1tkPzPG.png\" alt=\"Settings\"></p>\n<p>Check <code>Automatically resize the image when pasting</code> if you want to paste the resized image when using <code>Ctrl+V</code>. Anki will paste the original-sized image if you uncheck it.</p>\n<p>The <code>Key Combination</code> is the shortcut to paste the resized image. It’s just like <code>Ctrl+V</code>, the only difference is that you will always get the resized the image if you use the shortcut to paste. You can modify the shortcut by hitting the button <code>Grab the Key combination</code> on the right. <strong>Notice that the shortcut you specified may not work, try and find a workable one.</strong></p>\n<p>You can also set the width or height of the resized image. Select <code>scale to width and keep ratio</code>, it will resize the image according to the width you specified, and the height value here will be ignored. The same goes to <code>scale to height and keep ratio</code>. Notice that it will always keep the original image’s ratio, either by width or height.</p>\n<h1 id=\"Bug-Report\"><a href=\"#Bug-Report\" class=\"headerlink\" title=\"Bug Report\"></a>Bug Report</h1><p>There are two ways to report a bug or offering a suggestion.</p>\n<ol>\n<li>Open an issue on <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">my github repository</a></li>\n<li>Leave a comment below <a href=\"https://searene.me/2016/02/14/ImageResizer-an-anki-addon-to-resize-images/\">my blog</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>ImageResizer is a simple anki addon used to resize the image stored in the clipboard. So images that are too big or too small to be used in reviewing are not a problem any more.</p>\n<h2 id=\"Before-resizing\"><a href=\"#Before-resizing\" class=\"headerlink\" title=\"Before resizing\"></a>Before resizing</h2><p><img src=\"http://i.imgur.com/54kbvhl.jpg\" alt=\"Before resizing\"></p>\n<h2 id=\"After-resizing\"><a href=\"#After-resizing\" class=\"headerlink\" title=\"After resizing\"></a>After resizing</h2><p><img src=\"http://i.imgur.com/hQ1zeMU.png\" alt=\"After resizing\"></p>\n<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><p>There’s two ways of installing the addon, both require to restart anki after installation</p>\n<ol>\n<li>Install it from <a href=\"https://ankiweb.net/shared/info/1214357311\" target=\"_blank\" rel=\"external\">ankiweb</a>.</li>\n<li>Put <a href=\"https://raw.githubusercontent.com/searene/Anki-Addons/master/ImageResizer/ImageResizer.py\" target=\"_blank\" rel=\"external\">ImageResizer.py</a> in your anki addon directory</li>\n</ol>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Normally after you install this addon, Images will be automatically resized if you paste images when adding new cards, either by hitting <code>Ctrl + V</code> or <code>Ctrl + Shift + V</code> or click on the button on the toolbar.</p>\n<p><img src=\"https://i.imgur.com/kupbkcU.png\" alt=\"To make it work\"></p>\n<h1 id=\"Settings\"><a href=\"#Settings\" class=\"headerlink\" title=\"Settings\"></a>Settings</h1><p>You can change the shortcut and the size of the image etc. from <code>Tools --&gt; Image Resizer</code></p>\n<p><img src=\"http://i.imgur.com/ylv6iQK.png\" alt=\"Start settings from menu\"></p>\n<p>The <code>Settings</code> window will pop up.</p>\n<p><img src=\"http://i.imgur.com/1tkPzPG.png\" alt=\"Settings\"></p>\n<p>Check <code>Automatically resize the image when pasting</code> if you want to paste the resized image when using <code>Ctrl+V</code>. Anki will paste the original-sized image if you uncheck it.</p>\n<p>The <code>Key Combination</code> is the shortcut to paste the resized image. It’s just like <code>Ctrl+V</code>, the only difference is that you will always get the resized the image if you use the shortcut to paste. You can modify the shortcut by hitting the button <code>Grab the Key combination</code> on the right. <strong>Notice that the shortcut you specified may not work, try and find a workable one.</strong></p>\n<p>You can also set the width or height of the resized image. Select <code>scale to width and keep ratio</code>, it will resize the image according to the width you specified, and the height value here will be ignored. The same goes to <code>scale to height and keep ratio</code>. Notice that it will always keep the original image’s ratio, either by width or height.</p>\n<h1 id=\"Bug-Report\"><a href=\"#Bug-Report\" class=\"headerlink\" title=\"Bug Report\"></a>Bug Report</h1><p>There are two ways to report a bug or offering a suggestion.</p>\n<ol>\n<li>Open an issue on <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">my github repository</a></li>\n<li>Leave a comment below <a href=\"https://searene.me/2016/02/14/ImageResizer-an-anki-addon-to-resize-images/\">my blog</a></li>\n</ol>\n"},{"title":"It's pretty hard to concentrate these days","date":"2016-05-28T00:55:25.000Z","thumbnail":"http://danglingmouse.com/wp-content/uploads/2014/10/signs-that-you-are-a-hopeless-romantic-05.jpg","_content":"\nHonestly I feel awful these days, it goes the same for yesterday. I created a task that I needed to code for at least three hours for my project every day, but while I was anxious, it was really hard to concentrate. I have no clue about my future, which makes me nervous and kind of hopeless.\n\nI heard that you couldn't test whether a man was strong enough or not when everything went well for him, the qualify was always shown when he was going through some tough time. I agree with it. But I've got to say, if everything could be fine, nobody wants to go through any tough time. Though somebody claims he/she wants it, I strongly doubt it. You said that because your life was still fine. You can never expect yourself to be depressed, hopeless and broken. If you have no hope in your life, life means nothing to you.\n\nI hope I could go through it. I already learned a lot from the tough time, I wish I could go back to the right track.\n\nI still finished my tasks yesterday, I have to go on and work harder. There are a lot to be done for my project, I do hope somebody could help me or work with me. It's really hard to finish it all by myself.\n","source":"_posts/It-s-pretty-hard-to-concentrate-these-days.md","raw":"title: It's pretty hard to concentrate these days\ndate: 2016-05-28 08:55:25\ntags:\ncategories: Journal\nthumbnail: http://danglingmouse.com/wp-content/uploads/2014/10/signs-that-you-are-a-hopeless-romantic-05.jpg\n---\n\nHonestly I feel awful these days, it goes the same for yesterday. I created a task that I needed to code for at least three hours for my project every day, but while I was anxious, it was really hard to concentrate. I have no clue about my future, which makes me nervous and kind of hopeless.\n\nI heard that you couldn't test whether a man was strong enough or not when everything went well for him, the qualify was always shown when he was going through some tough time. I agree with it. But I've got to say, if everything could be fine, nobody wants to go through any tough time. Though somebody claims he/she wants it, I strongly doubt it. You said that because your life was still fine. You can never expect yourself to be depressed, hopeless and broken. If you have no hope in your life, life means nothing to you.\n\nI hope I could go through it. I already learned a lot from the tough time, I wish I could go back to the right track.\n\nI still finished my tasks yesterday, I have to go on and work harder. There are a lot to be done for my project, I do hope somebody could help me or work with me. It's really hard to finish it all by myself.\n","slug":"It-s-pretty-hard-to-concentrate-these-days","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcy001f8arfibixnxov","content":"<p>Honestly I feel awful these days, it goes the same for yesterday. I created a task that I needed to code for at least three hours for my project every day, but while I was anxious, it was really hard to concentrate. I have no clue about my future, which makes me nervous and kind of hopeless.</p>\n<p>I heard that you couldn’t test whether a man was strong enough or not when everything went well for him, the qualify was always shown when he was going through some tough time. I agree with it. But I’ve got to say, if everything could be fine, nobody wants to go through any tough time. Though somebody claims he/she wants it, I strongly doubt it. You said that because your life was still fine. You can never expect yourself to be depressed, hopeless and broken. If you have no hope in your life, life means nothing to you.</p>\n<p>I hope I could go through it. I already learned a lot from the tough time, I wish I could go back to the right track.</p>\n<p>I still finished my tasks yesterday, I have to go on and work harder. There are a lot to be done for my project, I do hope somebody could help me or work with me. It’s really hard to finish it all by myself.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Honestly I feel awful these days, it goes the same for yesterday. I created a task that I needed to code for at least three hours for my project every day, but while I was anxious, it was really hard to concentrate. I have no clue about my future, which makes me nervous and kind of hopeless.</p>\n<p>I heard that you couldn’t test whether a man was strong enough or not when everything went well for him, the qualify was always shown when he was going through some tough time. I agree with it. But I’ve got to say, if everything could be fine, nobody wants to go through any tough time. Though somebody claims he/she wants it, I strongly doubt it. You said that because your life was still fine. You can never expect yourself to be depressed, hopeless and broken. If you have no hope in your life, life means nothing to you.</p>\n<p>I hope I could go through it. I already learned a lot from the tough time, I wish I could go back to the right track.</p>\n<p>I still finished my tasks yesterday, I have to go on and work harder. There are a lot to be done for my project, I do hope somebody could help me or work with me. It’s really hard to finish it all by myself.</p>\n"},{"title":"Install fcitx on ubuntu 16.10","date":"2016-12-06T14:13:57.000Z","thumbnail":"/images/input.png","_content":"\nRun the following command.\n\n```\nsudo apt-get install fcitx fcitx-table fcitx-googlepinyin fcitx-module-cloudpinyin\n```\n\nSearch for `language support`, and check `Keyboard input method system` is `fcitx`\n\nReboot.\n\nGo to the configuration of fcitx --> Addon --> Cloud Pinyin --> Configure --> Cloud Pinyin Source --> Change from google to baidu.\n","source":"_posts/Install-fcitx-on-ubuntu-16-10.md","raw":"title: Install fcitx on ubuntu 16.10\ndate: 2016-12-06 22:13:57\ntags: [fcitx, ubuntu, linux]\ncategories: Coding\nthumbnail: /images/input.png\n---\n\nRun the following command.\n\n```\nsudo apt-get install fcitx fcitx-table fcitx-googlepinyin fcitx-module-cloudpinyin\n```\n\nSearch for `language support`, and check `Keyboard input method system` is `fcitx`\n\nReboot.\n\nGo to the configuration of fcitx --> Addon --> Cloud Pinyin --> Configure --> Cloud Pinyin Source --> Change from google to baidu.\n","slug":"Install-fcitx-on-ubuntu-16-10","published":1,"updated":"2016-12-06T14:30:23.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqcz001i8arf10cn6nk5","content":"<p>Run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install fcitx fcitx-table fcitx-googlepinyin fcitx-module-cloudpinyin</div></pre></td></tr></table></figure>\n<p>Search for <code>language support</code>, and check <code>Keyboard input method system</code> is <code>fcitx</code></p>\n<p>Reboot.</p>\n<p>Go to the configuration of fcitx –&gt; Addon –&gt; Cloud Pinyin –&gt; Configure –&gt; Cloud Pinyin Source –&gt; Change from google to baidu.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Run the following command.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install fcitx fcitx-table fcitx-googlepinyin fcitx-module-cloudpinyin</div></pre></td></tr></table></figure>\n<p>Search for <code>language support</code>, and check <code>Keyboard input method system</code> is <code>fcitx</code></p>\n<p>Reboot.</p>\n<p>Go to the configuration of fcitx –&gt; Addon –&gt; Cloud Pinyin –&gt; Configure –&gt; Cloud Pinyin Source –&gt; Change from google to baidu.</p>\n"},{"title":"Midnight","date":"2016-05-20T18:08:53.000Z","_content":"\nIt's already late, more than 2:00, and I haven't gotten on bed. I changed my blog theme to hueman, which was more friendly to English text. I also installed wordpress, which seemed useless. Before that, I purchased a VPS and a domain, which was not that useful, either.\n\nI think I shouldn't blabber any more, it's time to get on bed and have a good night.\n\n![night](http://www.goodnight-images-quotes.com/wp-content/uploads/2015/12/Night-Love-images-pics-wallpapers.jpg)\n","source":"_posts/Midnight.md","raw":"title: Midnight\ndate: 2016-05-21 02:08:53\ntags:\ncategories: Journal\n---\n\nIt's already late, more than 2:00, and I haven't gotten on bed. I changed my blog theme to hueman, which was more friendly to English text. I also installed wordpress, which seemed useless. Before that, I purchased a VPS and a domain, which was not that useful, either.\n\nI think I shouldn't blabber any more, it's time to get on bed and have a good night.\n\n![night](http://www.goodnight-images-quotes.com/wp-content/uploads/2015/12/Night-Love-images-pics-wallpapers.jpg)\n","slug":"Midnight","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd0001m8arfgbo1fmx9","content":"<p>It’s already late, more than 2:00, and I haven’t gotten on bed. I changed my blog theme to hueman, which was more friendly to English text. I also installed wordpress, which seemed useless. Before that, I purchased a VPS and a domain, which was not that useful, either.</p>\n<p>I think I shouldn’t blabber any more, it’s time to get on bed and have a good night.</p>\n<p><img src=\"http://www.goodnight-images-quotes.com/wp-content/uploads/2015/12/Night-Love-images-pics-wallpapers.jpg\" alt=\"night\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s already late, more than 2:00, and I haven’t gotten on bed. I changed my blog theme to hueman, which was more friendly to English text. I also installed wordpress, which seemed useless. Before that, I purchased a VPS and a domain, which was not that useful, either.</p>\n<p>I think I shouldn’t blabber any more, it’s time to get on bed and have a good night.</p>\n<p><img src=\"http://www.goodnight-images-quotes.com/wp-content/uploads/2015/12/Night-Love-images-pics-wallpapers.jpg\" alt=\"night\"></p>\n"},{"title":"Leetcode: Combination Sum II","date":"2017-07-15T00:33:03.000Z","thumbnail":"/images/combination.jpg","_content":"\n# Problem\n\nGiven a collection of candidate numbers (**C**) and a target number (**T**), find all unique combinations in **C** where the candidate numbers sums to **T**.\n\nEach number in **C** may only be used **once** in the combination.\n\n**Note:**\n\n- All numbers (including target) will be positive integers.\n- The solution set must not contain duplicate combinations.\n\nFor example, given candidate set `[10, 1, 2, 7, 6, 1, 5]` and target `8`, \nA solution set is: \n\n```\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n------\n\n# Leetcode Link\n\nhttps://leetcode.com/problems/combination-sum-ii/#/description\n\n# Solution\n\nThis problem can be solved using DFS:\n\n* Get the result starting with the **first** number\n* Get the result starting with the **second** number\n* ...\n* Get the result starting with the **last** number\n\nBut we need to sort the array first in order to remove duplicate records.\n\n```java\npublic class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        if(candidates == null || candidates.length == 0) {\n            return new ArrayList<>();\n        }\n        Arrays.sort(candidates);\n        return combinationSum2(candidates, target, new ArrayList<>(), 0);\n    }\n\n    private List<List<Integer>> combinationSum2(int[] candidates, int target, List<Integer> prefix, int startPos) {\n        List<List<Integer>> result = new ArrayList<>();\n        if(target == 0) {\n            result.add(new ArrayList<>(prefix));\n        } else if(target > 0){\n            for (int i = startPos; i < candidates.length; i++) {\n                if(i > startPos && candidates[i] == candidates[i - 1]) {\n                    continue;\n                }\n                prefix.add(candidates[i]);\n                List<List<Integer>> subResult = combinationSum2(candidates, target - candidates[i], prefix, i + 1);\n                prefix.remove(prefix.size() - 1);\n\n                result.addAll(subResult);\n            }\n        }\n        return result;\n    }\n}\n```\n\n\n\n","source":"_posts/Leetcode-Combination-Sum-II.md","raw":"title: 'Leetcode: Combination Sum II'\ndate: 2017-07-15 08:33:03\ntags: [leetcode, algorithm]\ncategories: Coding\nthumbnail: /images/combination.jpg\n---\n\n# Problem\n\nGiven a collection of candidate numbers (**C**) and a target number (**T**), find all unique combinations in **C** where the candidate numbers sums to **T**.\n\nEach number in **C** may only be used **once** in the combination.\n\n**Note:**\n\n- All numbers (including target) will be positive integers.\n- The solution set must not contain duplicate combinations.\n\nFor example, given candidate set `[10, 1, 2, 7, 6, 1, 5]` and target `8`, \nA solution set is: \n\n```\n[\n  [1, 7],\n  [1, 2, 5],\n  [2, 6],\n  [1, 1, 6]\n]\n```\n\n------\n\n# Leetcode Link\n\nhttps://leetcode.com/problems/combination-sum-ii/#/description\n\n# Solution\n\nThis problem can be solved using DFS:\n\n* Get the result starting with the **first** number\n* Get the result starting with the **second** number\n* ...\n* Get the result starting with the **last** number\n\nBut we need to sort the array first in order to remove duplicate records.\n\n```java\npublic class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        if(candidates == null || candidates.length == 0) {\n            return new ArrayList<>();\n        }\n        Arrays.sort(candidates);\n        return combinationSum2(candidates, target, new ArrayList<>(), 0);\n    }\n\n    private List<List<Integer>> combinationSum2(int[] candidates, int target, List<Integer> prefix, int startPos) {\n        List<List<Integer>> result = new ArrayList<>();\n        if(target == 0) {\n            result.add(new ArrayList<>(prefix));\n        } else if(target > 0){\n            for (int i = startPos; i < candidates.length; i++) {\n                if(i > startPos && candidates[i] == candidates[i - 1]) {\n                    continue;\n                }\n                prefix.add(candidates[i]);\n                List<List<Integer>> subResult = combinationSum2(candidates, target - candidates[i], prefix, i + 1);\n                prefix.remove(prefix.size() - 1);\n\n                result.addAll(subResult);\n            }\n        }\n        return result;\n    }\n}\n```\n\n\n\n","slug":"Leetcode-Combination-Sum-II","published":1,"updated":"2017-07-15T00:44:59.809Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd1001p8arfa6ikccn9","content":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Given a collection of candidate numbers (<strong>C</strong>) and a target number (<strong>T</strong>), find all unique combinations in <strong>C</strong> where the candidate numbers sums to <strong>T</strong>.</p>\n<p>Each number in <strong>C</strong> may only be used <strong>once</strong> in the combination.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<p>For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>,<br>A solution set is: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [1, 7],</div><div class=\"line\">  [1, 2, 5],</div><div class=\"line\">  [2, 6],</div><div class=\"line\">  [1, 1, 6]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Leetcode-Link\"><a href=\"#Leetcode-Link\" class=\"headerlink\" title=\"Leetcode Link\"></a>Leetcode Link</h1><p><a href=\"https://leetcode.com/problems/combination-sum-ii/#/description\" target=\"_blank\" rel=\"external\">https://leetcode.com/problems/combination-sum-ii/#/description</a></p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>This problem can be solved using DFS:</p>\n<ul>\n<li>Get the result starting with the <strong>first</strong> number</li>\n<li>Get the result starting with the <strong>second</strong> number</li>\n<li>…</li>\n<li>Get the result starting with the <strong>last</strong> number</li>\n</ul>\n<p>But we need to sort the array first in order to remove duplicate records.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(candidates == <span class=\"keyword\">null</span> || candidates.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">        Arrays.sort(candidates);</div><div class=\"line\">        <span class=\"keyword\">return</span> combinationSum2(candidates, target, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, List&lt;Integer&gt; prefix, <span class=\"keyword\">int</span> startPos) &#123;</div><div class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(prefix));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startPos; i &lt; candidates.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i &gt; startPos &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                prefix.add(candidates[i]);</div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; subResult = combinationSum2(candidates, target - candidates[i], prefix, i + <span class=\"number\">1</span>);</div><div class=\"line\">                prefix.remove(prefix.size() - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">                result.addAll(subResult);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem\"></a>Problem</h1><p>Given a collection of candidate numbers (<strong>C</strong>) and a target number (<strong>T</strong>), find all unique combinations in <strong>C</strong> where the candidate numbers sums to <strong>T</strong>.</p>\n<p>Each number in <strong>C</strong> may only be used <strong>once</strong> in the combination.</p>\n<p><strong>Note:</strong></p>\n<ul>\n<li>All numbers (including target) will be positive integers.</li>\n<li>The solution set must not contain duplicate combinations.</li>\n</ul>\n<p>For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>,<br>A solution set is: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">  [1, 7],</div><div class=\"line\">  [1, 2, 5],</div><div class=\"line\">  [2, 6],</div><div class=\"line\">  [1, 1, 6]</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"Leetcode-Link\"><a href=\"#Leetcode-Link\" class=\"headerlink\" title=\"Leetcode Link\"></a>Leetcode Link</h1><p><a href=\"https://leetcode.com/problems/combination-sum-ii/#/description\" target=\"_blank\" rel=\"external\">https://leetcode.com/problems/combination-sum-ii/#/description</a></p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>This problem can be solved using DFS:</p>\n<ul>\n<li>Get the result starting with the <strong>first</strong> number</li>\n<li>Get the result starting with the <strong>second</strong> number</li>\n<li>…</li>\n<li>Get the result starting with the <strong>last</strong> number</li>\n</ul>\n<p>But we need to sort the array first in order to remove duplicate records.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(candidates == <span class=\"keyword\">null</span> || candidates.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">        Arrays.sort(candidates);</div><div class=\"line\">        <span class=\"keyword\">return</span> combinationSum2(candidates, target, <span class=\"keyword\">new</span> ArrayList&lt;&gt;(), <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class=\"keyword\">int</span>[] candidates, <span class=\"keyword\">int</span> target, List&lt;Integer&gt; prefix, <span class=\"keyword\">int</span> startPos) &#123;</div><div class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">if</span>(target == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            result.add(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(prefix));</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(target &gt; <span class=\"number\">0</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = startPos; i &lt; candidates.length; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(i &gt; startPos &amp;&amp; candidates[i] == candidates[i - <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                    <span class=\"keyword\">continue</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                prefix.add(candidates[i]);</div><div class=\"line\">                List&lt;List&lt;Integer&gt;&gt; subResult = combinationSum2(candidates, target - candidates[i], prefix, i + <span class=\"number\">1</span>);</div><div class=\"line\">                prefix.remove(prefix.size() - <span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">                result.addAll(subResult);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Inheritance in Javascript","date":"2017-04-23T13:54:39.000Z","thumbnail":"/images/inheritance.png","_content":"\nJavascript uses prototype chains to make inheritance work, that’s a little odd given that other OOP languages usually use `class` and `extend`. So to fully understand inheritance in javascript, we first have to understand what prototype chain is.\n\nLet’s say we have a function.\n\n```javascript\nfunction Animal() {\n      this.category = 'organism';\n      this.food = 'generic food';\n}\nconsole.log(Animal.prototype.constructor); // [Function: Animal]\n```\n\nAs shown in the above code, when we define a function, javascript also adds a special property called `prototype` on that function at the same time. And you can see that another special property `constructor` is automatically created on `function.prototype`, which is `Animal.prototype.constructor` in the above code. You can take the property as the function itself, when we create an instance using something like `var animal = new Animal()`, javascript will create the instance using the constructor specified by `Animal.prototype.constructor`.\n\n```javascript\nlet animal = new Animal();\n```\n\nWhat happens under the hood when the above line gets executed is that:\n\n1.  A new object is created, which is called `animal`.\n2.  A property called `animal.__proto__` is created, and `animal.__proto__ === Animal.prototype`.\n3.  It calls `Animal()` in the context of `animal,` which means following lines get executed.\n\n```javascript\nanimal.category = 'organism';\nanimal.food = 'generic food';\n```\n\nSo let’s sum up what happens here with a diagram.\n\n![what happens when we new an instance](/images/Inheritance-in-Javascript-1.png)\n\n1.  `animal.__proto__` is the same as `Animal.prototype.`\n2.  `animal.category` is `organism`.\n3.  `animal.food` is `generic food`.\n\nNothing is wrong here, we get all of animal’s custom properties(`category` and `food`) with or without `__proto__`, so what is it used for? Let’s add a line here.\n\n```javascript\nAnimal.prototype.walk = 'animals can walk';\nconsole.log(animal.walk); // animals can walk.\n```\n\nThis is where the interesting part comes in. We know that `animal` doesn’t have a property called `walk`. So to find it, javascript resort to `animal.__proto__`, aka `Animal.prototype` to see if `Animal.prototype` has a property called `walk`. You know what? We just defined it! So javascript fetches the value of walk and returns it. So it looks like animal has a `walk` property itself!\n\n![the process of looking for a property](/images/Inheritance-in-Javascript.svg)\n\nIn this way, we can define another object called `Cat`, which inherits from `Animal`.\n\n```javascript\nfunction Cat() {\n      this.food = 'fish';\n}\n\nCat.prototype = animal; // all instances created by Cat inherit from Animal\nlet cat = new Cat();\n\nconsole.log(cat.category); // organism\nconsole.log(cat.food); // fish\nconsole.log(cat.walk); // animals can walk\nconsole.log(cat.constructor); // [Function: Animal]\n```\n\n![prototype chain](http://searene.party/wp-content/uploads/2017/04/Inheritance-in-Javascript-3.png)\n\nYou see, `cat` has all properties that we defined in `Animal`, including `category`, `walk`, and our `cat` even overrides `Animal`‘s `food`, because we all know, cat likes to eat `fish`. Something familiar? Yes, this is called inheritance! We just implemented inheritance in javascript!\n\nBut do you know how `cat.walk === 'aniamls can walk'` works? It follows several steps.\n\n1.  Check if `cat` has a property called `walk`, obviously it doesn’t have that.\n2.  Check if `cat.__proto__`, which is `Cat.prototype`, which is also `animal` has that property, obviously `animal` also doesn’t have it.\n3.  Check if `cat.__proto__.__proto__` has the `walk` property, OK, this time `cat.__proto__.__proto__` aka `Animal.prototype` has that `walk` property, return its value, the job is done here.\n\nSo you can see, `__proto__` is just like a chain, to check if an instance `cat` has a property `walk`, we need to check:\n\n1.  `cat.walk`\n2.  `cat.__proto__.walk`\n3.  `cat.__proto__.__proto__.walk`\n4.  `cat.__proto__.__proto__.__proto__.walk`\n5.  …\n\nAnd because `cat.__proto__` is the same thing as `Cat.prototype`, to inherit `cat` from `Animal`, what we need to do is just point `Cat.prototype` to `animal`, so `cat` could have all properties `animal` has in this way.\n\nOne thing is left here. We find out that `cat.constructor` equals `[Function: Animal]`, this may not be what we want. `cat` is created by `Cat` instead of `Animal`, so we need to add another line here.\n\n```javascript\nCat.prototype.constructor = Cat;\n```\n\nThis is the complete code.\n\n```javascript\n\"use strict\";\n\nfunction Animal() {\n  this.category = 'organism';\n  this.food = 'generic food';\n}\n\nAnimal.prototype.walk = 'animals can walk';\n\nfunction Cat() {\n  this.food = 'fish';\n}\n\nCat.prototype = new Animal(); // all instances created by Cat inherit from Animal\nCat.prototype.constructor = Cat; // change the constructor back\n\nlet cat = new Cat();\n\nconsole.log(cat.category); // organism\nconsole.log(cat.food); // fish\nconsole.log(cat.walk); // animals can walk\nconsole.log(cat.constructor); // [Function: Cat]\n```\n\nLet's make it more concise.\n\n```javascript\n\"use strict\";\nfunction Animal() {\n}\nfunction Cat() {\n}\nCat.prototype = new Animal(); // all instances created by Cat inherit from Animal\nCat.prototype.constructor = Cat; // change the constructor back\n\nvar cat = new Cat();\n```\n\nThis can also be written as\n\n```javascript\n\"use strict\";\nfunction Animal() {\n}\nfunction Cat() {\n  Animal.call(this)\n}\n\nObject.setPrototypeOf(Cat.prototype, Animal.prototype); // set Cat.prototype as Animal.prototype, notice that this line won't change Cat.prototype.constructor, so it will remain as Cat\n\nvar cat = new Cat();\n```\n\nIn fact, we also need to do anther things like changing the super class of `Cat`, so a function called `Object.inheritance` was created to do this sort of work, which would modify the super class of the child class and set the child class' prototype as the parent's.\n\n```javascript\n\"use strict\";\n\nvar util = require(\"util\");\n\nfunction Animal() {\n}\n\nfunction Cat() {\n  Animal.call(this)\n}\n\nutil.inherits(Cat, Animal);\n\n// If you want to add some properties to Cat.prototype, make sure they are added after util.inherits, or these properties will not work because util.inherits will overwrite those properties\nCat.prototype.eat = function() {\n  console.log(\"Cat is eating\");\n}\n\nvar cat = new Cat();\n```\n\nThat's it, the above code is one of the most common ways to achieve inheritance.\n","source":"_posts/Inheritance-in-Javascript.md","raw":"title: Inheritance in Javascript\ndate: 2017-04-23 21:54:39\ntags: [javascript]\ncategories: Coding\nthumbnail: /images/inheritance.png\n---\n\nJavascript uses prototype chains to make inheritance work, that’s a little odd given that other OOP languages usually use `class` and `extend`. So to fully understand inheritance in javascript, we first have to understand what prototype chain is.\n\nLet’s say we have a function.\n\n```javascript\nfunction Animal() {\n      this.category = 'organism';\n      this.food = 'generic food';\n}\nconsole.log(Animal.prototype.constructor); // [Function: Animal]\n```\n\nAs shown in the above code, when we define a function, javascript also adds a special property called `prototype` on that function at the same time. And you can see that another special property `constructor` is automatically created on `function.prototype`, which is `Animal.prototype.constructor` in the above code. You can take the property as the function itself, when we create an instance using something like `var animal = new Animal()`, javascript will create the instance using the constructor specified by `Animal.prototype.constructor`.\n\n```javascript\nlet animal = new Animal();\n```\n\nWhat happens under the hood when the above line gets executed is that:\n\n1.  A new object is created, which is called `animal`.\n2.  A property called `animal.__proto__` is created, and `animal.__proto__ === Animal.prototype`.\n3.  It calls `Animal()` in the context of `animal,` which means following lines get executed.\n\n```javascript\nanimal.category = 'organism';\nanimal.food = 'generic food';\n```\n\nSo let’s sum up what happens here with a diagram.\n\n![what happens when we new an instance](/images/Inheritance-in-Javascript-1.png)\n\n1.  `animal.__proto__` is the same as `Animal.prototype.`\n2.  `animal.category` is `organism`.\n3.  `animal.food` is `generic food`.\n\nNothing is wrong here, we get all of animal’s custom properties(`category` and `food`) with or without `__proto__`, so what is it used for? Let’s add a line here.\n\n```javascript\nAnimal.prototype.walk = 'animals can walk';\nconsole.log(animal.walk); // animals can walk.\n```\n\nThis is where the interesting part comes in. We know that `animal` doesn’t have a property called `walk`. So to find it, javascript resort to `animal.__proto__`, aka `Animal.prototype` to see if `Animal.prototype` has a property called `walk`. You know what? We just defined it! So javascript fetches the value of walk and returns it. So it looks like animal has a `walk` property itself!\n\n![the process of looking for a property](/images/Inheritance-in-Javascript.svg)\n\nIn this way, we can define another object called `Cat`, which inherits from `Animal`.\n\n```javascript\nfunction Cat() {\n      this.food = 'fish';\n}\n\nCat.prototype = animal; // all instances created by Cat inherit from Animal\nlet cat = new Cat();\n\nconsole.log(cat.category); // organism\nconsole.log(cat.food); // fish\nconsole.log(cat.walk); // animals can walk\nconsole.log(cat.constructor); // [Function: Animal]\n```\n\n![prototype chain](http://searene.party/wp-content/uploads/2017/04/Inheritance-in-Javascript-3.png)\n\nYou see, `cat` has all properties that we defined in `Animal`, including `category`, `walk`, and our `cat` even overrides `Animal`‘s `food`, because we all know, cat likes to eat `fish`. Something familiar? Yes, this is called inheritance! We just implemented inheritance in javascript!\n\nBut do you know how `cat.walk === 'aniamls can walk'` works? It follows several steps.\n\n1.  Check if `cat` has a property called `walk`, obviously it doesn’t have that.\n2.  Check if `cat.__proto__`, which is `Cat.prototype`, which is also `animal` has that property, obviously `animal` also doesn’t have it.\n3.  Check if `cat.__proto__.__proto__` has the `walk` property, OK, this time `cat.__proto__.__proto__` aka `Animal.prototype` has that `walk` property, return its value, the job is done here.\n\nSo you can see, `__proto__` is just like a chain, to check if an instance `cat` has a property `walk`, we need to check:\n\n1.  `cat.walk`\n2.  `cat.__proto__.walk`\n3.  `cat.__proto__.__proto__.walk`\n4.  `cat.__proto__.__proto__.__proto__.walk`\n5.  …\n\nAnd because `cat.__proto__` is the same thing as `Cat.prototype`, to inherit `cat` from `Animal`, what we need to do is just point `Cat.prototype` to `animal`, so `cat` could have all properties `animal` has in this way.\n\nOne thing is left here. We find out that `cat.constructor` equals `[Function: Animal]`, this may not be what we want. `cat` is created by `Cat` instead of `Animal`, so we need to add another line here.\n\n```javascript\nCat.prototype.constructor = Cat;\n```\n\nThis is the complete code.\n\n```javascript\n\"use strict\";\n\nfunction Animal() {\n  this.category = 'organism';\n  this.food = 'generic food';\n}\n\nAnimal.prototype.walk = 'animals can walk';\n\nfunction Cat() {\n  this.food = 'fish';\n}\n\nCat.prototype = new Animal(); // all instances created by Cat inherit from Animal\nCat.prototype.constructor = Cat; // change the constructor back\n\nlet cat = new Cat();\n\nconsole.log(cat.category); // organism\nconsole.log(cat.food); // fish\nconsole.log(cat.walk); // animals can walk\nconsole.log(cat.constructor); // [Function: Cat]\n```\n\nLet's make it more concise.\n\n```javascript\n\"use strict\";\nfunction Animal() {\n}\nfunction Cat() {\n}\nCat.prototype = new Animal(); // all instances created by Cat inherit from Animal\nCat.prototype.constructor = Cat; // change the constructor back\n\nvar cat = new Cat();\n```\n\nThis can also be written as\n\n```javascript\n\"use strict\";\nfunction Animal() {\n}\nfunction Cat() {\n  Animal.call(this)\n}\n\nObject.setPrototypeOf(Cat.prototype, Animal.prototype); // set Cat.prototype as Animal.prototype, notice that this line won't change Cat.prototype.constructor, so it will remain as Cat\n\nvar cat = new Cat();\n```\n\nIn fact, we also need to do anther things like changing the super class of `Cat`, so a function called `Object.inheritance` was created to do this sort of work, which would modify the super class of the child class and set the child class' prototype as the parent's.\n\n```javascript\n\"use strict\";\n\nvar util = require(\"util\");\n\nfunction Animal() {\n}\n\nfunction Cat() {\n  Animal.call(this)\n}\n\nutil.inherits(Cat, Animal);\n\n// If you want to add some properties to Cat.prototype, make sure they are added after util.inherits, or these properties will not work because util.inherits will overwrite those properties\nCat.prototype.eat = function() {\n  console.log(\"Cat is eating\");\n}\n\nvar cat = new Cat();\n```\n\nThat's it, the above code is one of the most common ways to achieve inheritance.\n","slug":"Inheritance-in-Javascript","published":1,"updated":"2017-05-20T16:10:38.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd2001s8arfmwga3k3i","content":"<p>Javascript uses prototype chains to make inheritance work, that’s a little odd given that other OOP languages usually use <code>class</code> and <code>extend</code>. So to fully understand inheritance in javascript, we first have to understand what prototype chain is.</p>\n<p>Let’s say we have a function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.food = <span class=\"string\">'generic food'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.constructor); <span class=\"comment\">// [Function: Animal]</span></div></pre></td></tr></table></figure>\n<p>As shown in the above code, when we define a function, javascript also adds a special property called <code>prototype</code> on that function at the same time. And you can see that another special property <code>constructor</code> is automatically created on <code>function.prototype</code>, which is <code>Animal.prototype.constructor</code> in the above code. You can take the property as the function itself, when we create an instance using something like <code>var animal = new Animal()</code>, javascript will create the instance using the constructor specified by <code>Animal.prototype.constructor</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal();</div></pre></td></tr></table></figure>\n<p>What happens under the hood when the above line gets executed is that:</p>\n<ol>\n<li>A new object is created, which is called <code>animal</code>.</li>\n<li>A property called <code>animal.__proto__</code> is created, and <code>animal.__proto__ === Animal.prototype</code>.</li>\n<li>It calls <code>Animal()</code> in the context of <code>animal,</code> which means following lines get executed.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">animal.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">animal.food = <span class=\"string\">'generic food'</span>;</div></pre></td></tr></table></figure>\n<p>So let’s sum up what happens here with a diagram.</p>\n<p><img src=\"/images/Inheritance-in-Javascript-1.png\" alt=\"what happens when we new an instance\"></p>\n<ol>\n<li><code>animal.__proto__</code> is the same as <code>Animal.prototype.</code></li>\n<li><code>animal.category</code> is <code>organism</code>.</li>\n<li><code>animal.food</code> is <code>generic food</code>.</li>\n</ol>\n<p>Nothing is wrong here, we get all of animal’s custom properties(<code>category</code> and <code>food</code>) with or without <code>__proto__</code>, so what is it used for? Let’s add a line here.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animal.prototype.walk = <span class=\"string\">'animals can walk'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(animal.walk); <span class=\"comment\">// animals can walk.</span></div></pre></td></tr></table></figure>\n<p>This is where the interesting part comes in. We know that <code>animal</code> doesn’t have a property called <code>walk</code>. So to find it, javascript resort to <code>animal.__proto__</code>, aka <code>Animal.prototype</code> to see if <code>Animal.prototype</code> has a property called <code>walk</code>. You know what? We just defined it! So javascript fetches the value of walk and returns it. So it looks like animal has a <code>walk</code> property itself!</p>\n<p><img src=\"/images/Inheritance-in-Javascript.svg\" alt=\"the process of looking for a property\"></p>\n<p>In this way, we can define another object called <code>Cat</code>, which inherits from <code>Animal</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.food = <span class=\"string\">'fish'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Cat.prototype = animal; <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Cat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.category); <span class=\"comment\">// organism</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.food); <span class=\"comment\">// fish</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.walk); <span class=\"comment\">// animals can walk</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.constructor); <span class=\"comment\">// [Function: Animal]</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://searene.party/wp-content/uploads/2017/04/Inheritance-in-Javascript-3.png\" alt=\"prototype chain\"></p>\n<p>You see, <code>cat</code> has all properties that we defined in <code>Animal</code>, including <code>category</code>, <code>walk</code>, and our <code>cat</code> even overrides <code>Animal</code>‘s <code>food</code>, because we all know, cat likes to eat <code>fish</code>. Something familiar? Yes, this is called inheritance! We just implemented inheritance in javascript!</p>\n<p>But do you know how <code>cat.walk === &#39;aniamls can walk&#39;</code> works? It follows several steps.</p>\n<ol>\n<li>Check if <code>cat</code> has a property called <code>walk</code>, obviously it doesn’t have that.</li>\n<li>Check if <code>cat.__proto__</code>, which is <code>Cat.prototype</code>, which is also <code>animal</code> has that property, obviously <code>animal</code> also doesn’t have it.</li>\n<li>Check if <code>cat.__proto__.__proto__</code> has the <code>walk</code> property, OK, this time <code>cat.__proto__.__proto__</code> aka <code>Animal.prototype</code> has that <code>walk</code> property, return its value, the job is done here.</li>\n</ol>\n<p>So you can see, <code>__proto__</code> is just like a chain, to check if an instance <code>cat</code> has a property <code>walk</code>, we need to check:</p>\n<ol>\n<li><code>cat.walk</code></li>\n<li><code>cat.__proto__.walk</code></li>\n<li><code>cat.__proto__.__proto__.walk</code></li>\n<li><code>cat.__proto__.__proto__.__proto__.walk</code></li>\n<li>…</li>\n</ol>\n<p>And because <code>cat.__proto__</code> is the same thing as <code>Cat.prototype</code>, to inherit <code>cat</code> from <code>Animal</code>, what we need to do is just point <code>Cat.prototype</code> to <code>animal</code>, so <code>cat</code> could have all properties <code>animal</code> has in this way.</p>\n<p>One thing is left here. We find out that <code>cat.constructor</code> equals <code>[Function: Animal]</code>, this may not be what we want. <code>cat</code> is created by <code>Cat</code> instead of <code>Animal</code>, so we need to add another line here.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cat.prototype.constructor = Cat;</div></pre></td></tr></table></figure>\n<p>This is the complete code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"string\">'generic food'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Animal.prototype.walk = <span class=\"string\">'animals can walk'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"string\">'fish'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal(); <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\">Cat.prototype.constructor = Cat; <span class=\"comment\">// change the constructor back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Cat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.category); <span class=\"comment\">// organism</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.food); <span class=\"comment\">// fish</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.walk); <span class=\"comment\">// animals can walk</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.constructor); <span class=\"comment\">// [Function: Cat]</span></div></pre></td></tr></table></figure>\n<p>Let’s make it more concise.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal(); <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\">Cat.prototype.constructor = Cat; <span class=\"comment\">// change the constructor back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>This can also be written as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Animal.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(Cat.prototype, Animal.prototype); <span class=\"comment\">// set Cat.prototype as Animal.prototype, notice that this line won't change Cat.prototype.constructor, so it will remain as Cat</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>In fact, we also need to do anther things like changing the super class of <code>Cat</code>, so a function called <code>Object.inheritance</code> was created to do this sort of work, which would modify the super class of the child class and set the child class’ prototype as the parent’s.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">\"util\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Animal.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Cat, Animal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you want to add some properties to Cat.prototype, make sure they are added after util.inherits, or these properties will not work because util.inherits will overwrite those properties</span></div><div class=\"line\">Cat.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Cat is eating\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>That’s it, the above code is one of the most common ways to achieve inheritance.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Javascript uses prototype chains to make inheritance work, that’s a little odd given that other OOP languages usually use <code>class</code> and <code>extend</code>. So to fully understand inheritance in javascript, we first have to understand what prototype chain is.</p>\n<p>Let’s say we have a function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">      <span class=\"keyword\">this</span>.food = <span class=\"string\">'generic food'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(Animal.prototype.constructor); <span class=\"comment\">// [Function: Animal]</span></div></pre></td></tr></table></figure>\n<p>As shown in the above code, when we define a function, javascript also adds a special property called <code>prototype</code> on that function at the same time. And you can see that another special property <code>constructor</code> is automatically created on <code>function.prototype</code>, which is <code>Animal.prototype.constructor</code> in the above code. You can take the property as the function itself, when we create an instance using something like <code>var animal = new Animal()</code>, javascript will create the instance using the constructor specified by <code>Animal.prototype.constructor</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> animal = <span class=\"keyword\">new</span> Animal();</div></pre></td></tr></table></figure>\n<p>What happens under the hood when the above line gets executed is that:</p>\n<ol>\n<li>A new object is created, which is called <code>animal</code>.</li>\n<li>A property called <code>animal.__proto__</code> is created, and <code>animal.__proto__ === Animal.prototype</code>.</li>\n<li>It calls <code>Animal()</code> in the context of <code>animal,</code> which means following lines get executed.</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">animal.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">animal.food = <span class=\"string\">'generic food'</span>;</div></pre></td></tr></table></figure>\n<p>So let’s sum up what happens here with a diagram.</p>\n<p><img src=\"/images/Inheritance-in-Javascript-1.png\" alt=\"what happens when we new an instance\"></p>\n<ol>\n<li><code>animal.__proto__</code> is the same as <code>Animal.prototype.</code></li>\n<li><code>animal.category</code> is <code>organism</code>.</li>\n<li><code>animal.food</code> is <code>generic food</code>.</li>\n</ol>\n<p>Nothing is wrong here, we get all of animal’s custom properties(<code>category</code> and <code>food</code>) with or without <code>__proto__</code>, so what is it used for? Let’s add a line here.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Animal.prototype.walk = <span class=\"string\">'animals can walk'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(animal.walk); <span class=\"comment\">// animals can walk.</span></div></pre></td></tr></table></figure>\n<p>This is where the interesting part comes in. We know that <code>animal</code> doesn’t have a property called <code>walk</code>. So to find it, javascript resort to <code>animal.__proto__</code>, aka <code>Animal.prototype</code> to see if <code>Animal.prototype</code> has a property called <code>walk</code>. You know what? We just defined it! So javascript fetches the value of walk and returns it. So it looks like animal has a <code>walk</code> property itself!</p>\n<p><img src=\"/images/Inheritance-in-Javascript.svg\" alt=\"the process of looking for a property\"></p>\n<p>In this way, we can define another object called <code>Cat</code>, which inherits from <code>Animal</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.food = <span class=\"string\">'fish'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Cat.prototype = animal; <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Cat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.category); <span class=\"comment\">// organism</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.food); <span class=\"comment\">// fish</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.walk); <span class=\"comment\">// animals can walk</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.constructor); <span class=\"comment\">// [Function: Animal]</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://searene.party/wp-content/uploads/2017/04/Inheritance-in-Javascript-3.png\" alt=\"prototype chain\"></p>\n<p>You see, <code>cat</code> has all properties that we defined in <code>Animal</code>, including <code>category</code>, <code>walk</code>, and our <code>cat</code> even overrides <code>Animal</code>‘s <code>food</code>, because we all know, cat likes to eat <code>fish</code>. Something familiar? Yes, this is called inheritance! We just implemented inheritance in javascript!</p>\n<p>But do you know how <code>cat.walk === &#39;aniamls can walk&#39;</code> works? It follows several steps.</p>\n<ol>\n<li>Check if <code>cat</code> has a property called <code>walk</code>, obviously it doesn’t have that.</li>\n<li>Check if <code>cat.__proto__</code>, which is <code>Cat.prototype</code>, which is also <code>animal</code> has that property, obviously <code>animal</code> also doesn’t have it.</li>\n<li>Check if <code>cat.__proto__.__proto__</code> has the <code>walk</code> property, OK, this time <code>cat.__proto__.__proto__</code> aka <code>Animal.prototype</code> has that <code>walk</code> property, return its value, the job is done here.</li>\n</ol>\n<p>So you can see, <code>__proto__</code> is just like a chain, to check if an instance <code>cat</code> has a property <code>walk</code>, we need to check:</p>\n<ol>\n<li><code>cat.walk</code></li>\n<li><code>cat.__proto__.walk</code></li>\n<li><code>cat.__proto__.__proto__.walk</code></li>\n<li><code>cat.__proto__.__proto__.__proto__.walk</code></li>\n<li>…</li>\n</ol>\n<p>And because <code>cat.__proto__</code> is the same thing as <code>Cat.prototype</code>, to inherit <code>cat</code> from <code>Animal</code>, what we need to do is just point <code>Cat.prototype</code> to <code>animal</code>, so <code>cat</code> could have all properties <code>animal</code> has in this way.</p>\n<p>One thing is left here. We find out that <code>cat.constructor</code> equals <code>[Function: Animal]</code>, this may not be what we want. <code>cat</code> is created by <code>Cat</code> instead of <code>Animal</code>, so we need to add another line here.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Cat.prototype.constructor = Cat;</div></pre></td></tr></table></figure>\n<p>This is the complete code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.category = <span class=\"string\">'organism'</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"string\">'generic food'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Animal.prototype.walk = <span class=\"string\">'animals can walk'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.food = <span class=\"string\">'fish'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal(); <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\">Cat.prototype.constructor = Cat; <span class=\"comment\">// change the constructor back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Cat();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.category); <span class=\"comment\">// organism</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.food); <span class=\"comment\">// fish</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.walk); <span class=\"comment\">// animals can walk</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(cat.constructor); <span class=\"comment\">// [Function: Cat]</span></div></pre></td></tr></table></figure>\n<p>Let’s make it more concise.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\">Cat.prototype = <span class=\"keyword\">new</span> Animal(); <span class=\"comment\">// all instances created by Cat inherit from Animal</span></div><div class=\"line\">Cat.prototype.constructor = Cat; <span class=\"comment\">// change the constructor back</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>This can also be written as</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Animal.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(Cat.prototype, Animal.prototype); <span class=\"comment\">// set Cat.prototype as Animal.prototype, notice that this line won't change Cat.prototype.constructor, so it will remain as Cat</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>In fact, we also need to do anther things like changing the super class of <code>Cat</code>, so a function called <code>Object.inheritance</code> was created to do this sort of work, which would modify the super class of the child class and set the child class’ prototype as the parent’s.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">\"use strict\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">\"util\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Animal</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  Animal.call(<span class=\"keyword\">this</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Cat, Animal);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// If you want to add some properties to Cat.prototype, make sure they are added after util.inherits, or these properties will not work because util.inherits will overwrite those properties</span></div><div class=\"line\">Cat.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Cat is eating\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();</div></pre></td></tr></table></figure>\n<p>That’s it, the above code is one of the most common ways to achieve inheritance.</p>\n"},{"title":"Let hexo support mathjax","date":"2016-10-01T07:12:19.000Z","thumbnail":"/images/mathjax.png","_content":"\n# Update\n\nThe original answer fails on some mathjax expressions. So don't use it. Currently changing `marked.js` works for me. Just use the method below. It works for me.\n\nFirst introduce `mathjax` into our blog.  Create a new file called `mathjax.ejs` in `themes/hueman/layout/plugin`, and add the following contents in it.\n\n``` html\n<!-- mathjax config similar to math.stackexchange -->\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      processEscapes: true\n    }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n      tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n      }\n    });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Queue(function() {\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i=0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n</script>\n\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n```\n\nThen add the following line before the end of the last `div` tag in `themes/hueman/layout/layout.ejs`\n\n``` html\n<%- partial('plugin/mathjax') %>\n```\n\nThe whole `layout.ejs` file looks like this:\n\n``` html\n<%- partial('common/head') %>\n<body>\n    <div id=\"wrap\">\n        <%- partial('common/header', null, {cache: !config.relative_link}) %>\n        <div class=\"container\">\n            <div class=\"main-body container-inner\">\n                <div class=\"main-body-inner\">\n                    <section id=\"main\">\n                        <%- partial('common/content-title') %>\n                        <div class=\"main-body-content\">\n                            <%- body %>\n                        </div>\n                    </section>\n                    <%- partial('common/sidebar') %>\n                </div>\n            </div>\n        </div>\n        <%- partial('common/footer', null, {cache: !config.relative_link}) %>\n        <%- partial('common/scripts') %>\n        <%- partial('plugin/mathjax') %>\n    </div>\n</body>\n</html>\n```\n\nOpen `./node_modules/marked/lib/marked.js` in your blog's root directory\n\nReplace \n\n``` shell\nescape: /^\\\\([\\\\`*{}\\[\\]()# +\\-.!_>])/,\n```\n\nwith\n\n``` shell\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n```\n\nThe above step is used to avoid the escaping of `\\\\`, `\\{`, `\\}`. Then replace\n\n``` shell\nem: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\nwith\n\n``` shell\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\nto remove the conversion of `_`\n\nThen run the following command to deploy your blog\n\n``` shell\nhexo clean && hexo g -d\n```\n\nIt should work now.\n\nBut today I found a new problem. You cannot write two successive curly braces.\n\nI guess it's because hexo tries to takes curly braces as part of a tag. I don't have enough time to figure out how to let hexo accept it as a math expression rather than a tag. Currently I will just add a space between two curly braces. Just like `{ {`. It works great. If you have better idea how to deal with it, you can leave it in the comment below.\n\n# Original answer\nHexo doesn't support mathjax by default. To make it work, we need to introduce mathjax to our theme. Take my current theme `hueman` as an example.\n\nCreate a new file called `mathjax.ejs` in `themes/hueman/layout/plugin`, and add the following contents in it.\n\n``` html\n<!-- mathjax config similar to math.stackexchange -->\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      processEscapes: true\n    }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n      tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n      }\n    });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Queue(function() {\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i=0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n</script>\n\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n```\n\nThen add the following line before the end of the last `div` tag in `themes/hueman/layout/layout.ejs`\n\n``` html\n<%- partial('plugin/mathjax') %>\n```\n\nThe whole `layout.ejs` file looks like this:\n\n``` html\n<%- partial('common/head') %>\n<body>\n    <div id=\"wrap\">\n        <%- partial('common/header', null, {cache: !config.relative_link}) %>\n        <div class=\"container\">\n            <div class=\"main-body container-inner\">\n                <div class=\"main-body-inner\">\n                    <section id=\"main\">\n                        <%- partial('common/content-title') %>\n                        <div class=\"main-body-content\">\n                            <%- body %>\n                        </div>\n                    </section>\n                    <%- partial('common/sidebar') %>\n                </div>\n            </div>\n        </div>\n        <%- partial('common/footer', null, {cache: !config.relative_link}) %>\n        <%- partial('common/scripts') %>\n        <%- partial('plugin/mathjax') %>\n    </div>\n</body>\n</html>\n```\n\nThen mathjax would be introduced into our blog. Our work should be done. But unfortunately this is not the case, because the default markdown rendering engine would accidently render some of our mathjax code, which would of course disturb the rendering of mathjax later on. To solve this problem, we need to replace hexo's rendering engine as `pandoc`. First install pandoc on your system. I'm using arch, so the command is\n\n``` shell\nsudo pacman -S pandoc\n```\n\nThen install `hexo-render-pandoc`. Run the following command in your blog's root directory.\n\n``` shell\nnpm install hexo-renderer-pandoc --save\n```\n\nOK, everything is done. Write a blog containing any mathjax formula and run the following command to deploy it to your server.\n\n``` shell\nhexo clean && hexo g -d\n```\n\n# Reference\n\n1. [搭建一个支持LaTEX的hexo博客](http://blog.csdn.net/emptyset110/article/details/50123231)\n","source":"_posts/Let-hexo-support-mathjax.md","raw":"title: Let hexo support mathjax\ndate: 2016-10-01 15:12:19\ntags: [hexo, mathjax]\ncategories: Coding\nthumbnail: /images/mathjax.png\n---\n\n# Update\n\nThe original answer fails on some mathjax expressions. So don't use it. Currently changing `marked.js` works for me. Just use the method below. It works for me.\n\nFirst introduce `mathjax` into our blog.  Create a new file called `mathjax.ejs` in `themes/hueman/layout/plugin`, and add the following contents in it.\n\n``` html\n<!-- mathjax config similar to math.stackexchange -->\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      processEscapes: true\n    }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n      tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n      }\n    });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Queue(function() {\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i=0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n</script>\n\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n```\n\nThen add the following line before the end of the last `div` tag in `themes/hueman/layout/layout.ejs`\n\n``` html\n<%- partial('plugin/mathjax') %>\n```\n\nThe whole `layout.ejs` file looks like this:\n\n``` html\n<%- partial('common/head') %>\n<body>\n    <div id=\"wrap\">\n        <%- partial('common/header', null, {cache: !config.relative_link}) %>\n        <div class=\"container\">\n            <div class=\"main-body container-inner\">\n                <div class=\"main-body-inner\">\n                    <section id=\"main\">\n                        <%- partial('common/content-title') %>\n                        <div class=\"main-body-content\">\n                            <%- body %>\n                        </div>\n                    </section>\n                    <%- partial('common/sidebar') %>\n                </div>\n            </div>\n        </div>\n        <%- partial('common/footer', null, {cache: !config.relative_link}) %>\n        <%- partial('common/scripts') %>\n        <%- partial('plugin/mathjax') %>\n    </div>\n</body>\n</html>\n```\n\nOpen `./node_modules/marked/lib/marked.js` in your blog's root directory\n\nReplace \n\n``` shell\nescape: /^\\\\([\\\\`*{}\\[\\]()# +\\-.!_>])/,\n```\n\nwith\n\n``` shell\nescape: /^\\\\([`*\\[\\]()# +\\-.!_>])/,\n```\n\nThe above step is used to avoid the escaping of `\\\\`, `\\{`, `\\}`. Then replace\n\n``` shell\nem: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\nwith\n\n``` shell\nem: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n```\n\nto remove the conversion of `_`\n\nThen run the following command to deploy your blog\n\n``` shell\nhexo clean && hexo g -d\n```\n\nIt should work now.\n\nBut today I found a new problem. You cannot write two successive curly braces.\n\nI guess it's because hexo tries to takes curly braces as part of a tag. I don't have enough time to figure out how to let hexo accept it as a math expression rather than a tag. Currently I will just add a space between two curly braces. Just like `{ {`. It works great. If you have better idea how to deal with it, you can leave it in the comment below.\n\n# Original answer\nHexo doesn't support mathjax by default. To make it work, we need to introduce mathjax to our theme. Take my current theme `hueman` as an example.\n\nCreate a new file called `mathjax.ejs` in `themes/hueman/layout/plugin`, and add the following contents in it.\n\n``` html\n<!-- mathjax config similar to math.stackexchange -->\n\n<script type=\"text/x-mathjax-config\">\n  MathJax.Hub.Config({\n    tex2jax: {\n      inlineMath: [ ['$','$'], [\"\\\\(\",\"\\\\)\"] ],\n      processEscapes: true\n    }\n  });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n      tex2jax: {\n        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']\n      }\n    });\n</script>\n\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Queue(function() {\n        var all = MathJax.Hub.getAllJax(), i;\n        for(i=0; i < all.length; i += 1) {\n            all[i].SourceElement().parentNode.className += ' has-jax';\n        }\n    });\n</script>\n\n<script type=\"text/javascript\" src=\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n</script>\n```\n\nThen add the following line before the end of the last `div` tag in `themes/hueman/layout/layout.ejs`\n\n``` html\n<%- partial('plugin/mathjax') %>\n```\n\nThe whole `layout.ejs` file looks like this:\n\n``` html\n<%- partial('common/head') %>\n<body>\n    <div id=\"wrap\">\n        <%- partial('common/header', null, {cache: !config.relative_link}) %>\n        <div class=\"container\">\n            <div class=\"main-body container-inner\">\n                <div class=\"main-body-inner\">\n                    <section id=\"main\">\n                        <%- partial('common/content-title') %>\n                        <div class=\"main-body-content\">\n                            <%- body %>\n                        </div>\n                    </section>\n                    <%- partial('common/sidebar') %>\n                </div>\n            </div>\n        </div>\n        <%- partial('common/footer', null, {cache: !config.relative_link}) %>\n        <%- partial('common/scripts') %>\n        <%- partial('plugin/mathjax') %>\n    </div>\n</body>\n</html>\n```\n\nThen mathjax would be introduced into our blog. Our work should be done. But unfortunately this is not the case, because the default markdown rendering engine would accidently render some of our mathjax code, which would of course disturb the rendering of mathjax later on. To solve this problem, we need to replace hexo's rendering engine as `pandoc`. First install pandoc on your system. I'm using arch, so the command is\n\n``` shell\nsudo pacman -S pandoc\n```\n\nThen install `hexo-render-pandoc`. Run the following command in your blog's root directory.\n\n``` shell\nnpm install hexo-renderer-pandoc --save\n```\n\nOK, everything is done. Write a blog containing any mathjax formula and run the following command to deploy it to your server.\n\n``` shell\nhexo clean && hexo g -d\n```\n\n# Reference\n\n1. [搭建一个支持LaTEX的hexo博客](http://blog.csdn.net/emptyset110/article/details/50123231)\n","slug":"Let-hexo-support-mathjax","published":1,"updated":"2017-05-20T01:48:14.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd4001w8arfktgcgvcg","content":"<h1 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h1><p>The original answer fails on some mathjax expressions. So don’t use it. Currently changing <code>marked.js</code> works for me. Just use the method below. It works for me.</p>\n<p>First introduce <code>mathjax</code> into our blog.  Create a new file called <code>mathjax.ejs</code> in <code>themes/hueman/layout/plugin</code>, and add the following contents in it.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  MathJax.Hub.Config(&#123;</div><div class=\"line\">    <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">inlineMath</span>: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>], [<span class=\"string\">\"\\\\(\"</span>,<span class=\"string\">\"\\\\)\"</span>] ],</div><div class=\"line\">      <span class=\"attr\">processEscapes</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Config(&#123;</div><div class=\"line\">      <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">skipTags</span>: [<span class=\"string\">'script'</span>, <span class=\"string\">'noscript'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'textarea'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'code'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Queue(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i &lt; all.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            all[i].SourceElement().parentNode.className += <span class=\"string\">' has-jax'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then add the following line before the end of the last <code>div</code> tag in <code>themes/hueman/layout/layout.ejs</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div></pre></td></tr></table></figure>\n<p>The whole <code>layout.ejs</code> file looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">head</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">header</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body container-inner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-inner\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">content-title</span>') %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-content\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">body</span> %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">sidebar</span>') %&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">footer</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">scripts</span>') %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Open <code>./node_modules/marked/lib/marked.js</code> in your blog’s root directory</p>\n<p>Replace </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()# +\\-.!_&gt;])/,</div></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/,</div></pre></td></tr></table></figure>\n<p>The above step is used to avoid the escaping of <code>\\\\</code>, <code>\\{</code>, <code>\\}</code>. Then replace</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</div></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</div></pre></td></tr></table></figure>\n<p>to remove the conversion of <code>_</code></p>\n<p>Then run the following command to deploy your blog</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo g -d</div></pre></td></tr></table></figure>\n<p>It should work now.</p>\n<p>But today I found a new problem. You cannot write two successive curly braces.</p>\n<p>I guess it’s because hexo tries to takes curly braces as part of a tag. I don’t have enough time to figure out how to let hexo accept it as a math expression rather than a tag. Currently I will just add a space between two curly braces. Just like <code>{ {</code>. It works great. If you have better idea how to deal with it, you can leave it in the comment below.</p>\n<h1 id=\"Original-answer\"><a href=\"#Original-answer\" class=\"headerlink\" title=\"Original answer\"></a>Original answer</h1><p>Hexo doesn’t support mathjax by default. To make it work, we need to introduce mathjax to our theme. Take my current theme <code>hueman</code> as an example.</p>\n<p>Create a new file called <code>mathjax.ejs</code> in <code>themes/hueman/layout/plugin</code>, and add the following contents in it.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  MathJax.Hub.Config(&#123;</div><div class=\"line\">    <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">inlineMath</span>: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>], [<span class=\"string\">\"\\\\(\"</span>,<span class=\"string\">\"\\\\)\"</span>] ],</div><div class=\"line\">      <span class=\"attr\">processEscapes</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Config(&#123;</div><div class=\"line\">      <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">skipTags</span>: [<span class=\"string\">'script'</span>, <span class=\"string\">'noscript'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'textarea'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'code'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Queue(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i &lt; all.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            all[i].SourceElement().parentNode.className += <span class=\"string\">' has-jax'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then add the following line before the end of the last <code>div</code> tag in <code>themes/hueman/layout/layout.ejs</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div></pre></td></tr></table></figure>\n<p>The whole <code>layout.ejs</code> file looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">head</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">header</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body container-inner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-inner\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">content-title</span>') %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-content\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">body</span> %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">sidebar</span>') %&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">footer</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">scripts</span>') %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then mathjax would be introduced into our blog. Our work should be done. But unfortunately this is not the case, because the default markdown rendering engine would accidently render some of our mathjax code, which would of course disturb the rendering of mathjax later on. To solve this problem, we need to replace hexo’s rendering engine as <code>pandoc</code>. First install pandoc on your system. I’m using arch, so the command is</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S pandoc</div></pre></td></tr></table></figure>\n<p>Then install <code>hexo-render-pandoc</code>. Run the following command in your blog’s root directory.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-renderer-pandoc --save</div></pre></td></tr></table></figure>\n<p>OK, everything is done. Write a blog containing any mathjax formula and run the following command to deploy it to your server.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo g -d</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"http://blog.csdn.net/emptyset110/article/details/50123231\" target=\"_blank\" rel=\"external\">搭建一个支持LaTEX的hexo博客</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h1><p>The original answer fails on some mathjax expressions. So don’t use it. Currently changing <code>marked.js</code> works for me. Just use the method below. It works for me.</p>\n<p>First introduce <code>mathjax</code> into our blog.  Create a new file called <code>mathjax.ejs</code> in <code>themes/hueman/layout/plugin</code>, and add the following contents in it.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  MathJax.Hub.Config(&#123;</div><div class=\"line\">    <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">inlineMath</span>: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>], [<span class=\"string\">\"\\\\(\"</span>,<span class=\"string\">\"\\\\)\"</span>] ],</div><div class=\"line\">      <span class=\"attr\">processEscapes</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Config(&#123;</div><div class=\"line\">      <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">skipTags</span>: [<span class=\"string\">'script'</span>, <span class=\"string\">'noscript'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'textarea'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'code'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Queue(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i &lt; all.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            all[i].SourceElement().parentNode.className += <span class=\"string\">' has-jax'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then add the following line before the end of the last <code>div</code> tag in <code>themes/hueman/layout/layout.ejs</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div></pre></td></tr></table></figure>\n<p>The whole <code>layout.ejs</code> file looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">head</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">header</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body container-inner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-inner\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">content-title</span>') %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-content\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">body</span> %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">sidebar</span>') %&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">footer</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">scripts</span>') %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Open <code>./node_modules/marked/lib/marked.js</code> in your blog’s root directory</p>\n<p>Replace </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()# +\\-.!_&gt;])/,</div></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/,</div></pre></td></tr></table></figure>\n<p>The above step is used to avoid the escaping of <code>\\\\</code>, <code>\\{</code>, <code>\\}</code>. Then replace</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</div></pre></td></tr></table></figure>\n<p>with</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,</div></pre></td></tr></table></figure>\n<p>to remove the conversion of <code>_</code></p>\n<p>Then run the following command to deploy your blog</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo g -d</div></pre></td></tr></table></figure>\n<p>It should work now.</p>\n<p>But today I found a new problem. You cannot write two successive curly braces.</p>\n<p>I guess it’s because hexo tries to takes curly braces as part of a tag. I don’t have enough time to figure out how to let hexo accept it as a math expression rather than a tag. Currently I will just add a space between two curly braces. Just like <code>{ {</code>. It works great. If you have better idea how to deal with it, you can leave it in the comment below.</p>\n<h1 id=\"Original-answer\"><a href=\"#Original-answer\" class=\"headerlink\" title=\"Original answer\"></a>Original answer</h1><p>Hexo doesn’t support mathjax by default. To make it work, we need to introduce mathjax to our theme. Take my current theme <code>hueman</code> as an example.</p>\n<p>Create a new file called <code>mathjax.ejs</code> in <code>themes/hueman/layout/plugin</code>, and add the following contents in it.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  MathJax.Hub.Config(&#123;</div><div class=\"line\">    <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">inlineMath</span>: [ [<span class=\"string\">'$'</span>,<span class=\"string\">'$'</span>], [<span class=\"string\">\"\\\\(\"</span>,<span class=\"string\">\"\\\\)\"</span>] ],</div><div class=\"line\">      <span class=\"attr\">processEscapes</span>: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Config(&#123;</div><div class=\"line\">      <span class=\"attr\">tex2jax</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">skipTags</span>: [<span class=\"string\">'script'</span>, <span class=\"string\">'noscript'</span>, <span class=\"string\">'style'</span>, <span class=\"string\">'textarea'</span>, <span class=\"string\">'pre'</span>, <span class=\"string\">'code'</span>]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/x-mathjax-config\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    MathJax.Hub.Queue(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i &lt; all.length; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            all[i].SourceElement().parentNode.className += <span class=\"string\">' has-jax'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then add the following line before the end of the last <code>div</code> tag in <code>themes/hueman/layout/layout.ejs</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div></pre></td></tr></table></figure>\n<p>The whole <code>layout.ejs</code> file looks like this:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">head</span>') %&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">header</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body container-inner\"</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-inner\"</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">section</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">content-title</span>') %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main-body-content\"</span>&gt;</span></div><div class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">body</span> %&gt;</span></div><div class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">section</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">sidebar</span>') %&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">footer</span>', <span class=\"attr\">null</span>, &#123;<span class=\"attr\">cache:</span> !<span class=\"attr\">config.relative_link</span>&#125;) %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">common</span>/<span class=\"attr\">scripts</span>') %&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">partial</span>('<span class=\"attr\">plugin</span>/<span class=\"attr\">mathjax</span>') %&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Then mathjax would be introduced into our blog. Our work should be done. But unfortunately this is not the case, because the default markdown rendering engine would accidently render some of our mathjax code, which would of course disturb the rendering of mathjax later on. To solve this problem, we need to replace hexo’s rendering engine as <code>pandoc</code>. First install pandoc on your system. I’m using arch, so the command is</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S pandoc</div></pre></td></tr></table></figure>\n<p>Then install <code>hexo-render-pandoc</code>. Run the following command in your blog’s root directory.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-renderer-pandoc --save</div></pre></td></tr></table></figure>\n<p>OK, everything is done. Write a blog containing any mathjax formula and run the following command to deploy it to your server.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean &amp;&amp; hexo g -d</div></pre></td></tr></table></figure>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"http://blog.csdn.net/emptyset110/article/details/50123231\" target=\"_blank\" rel=\"external\">搭建一个支持LaTEX的hexo博客</a></li>\n</ol>\n"},{"title":"My Last Weekend At Cisco","date":"2017-12-17T09:05:54.000Z","thumbnail":"/images/cisco_systems_hq2.0.jpg","_content":"\nToday is my last weekend at Cisco, and I'm about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I'm not sure if this is the right choice, maybe there is no right choice at all.\n\nI remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn't sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.\n\nIt was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.\n\nWhile I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I'm still living in it.\n\nAll right, besides those nonsense, it's time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It's also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.\n\nI chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn't find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.\n\nI'm about to turn 30 in the next few years, yet I'm still lonely.\n\nMaybe I've said too much, while staying at the office, all alone.\n\n","source":"_posts/My-Last-Weekend-At-Cisco.md","raw":"title: My Last Weekend At Cisco\ndate: 2017-12-17 17:05:54\ntags:\ncategories: Journal\nthumbnail: /images/cisco_systems_hq2.0.jpg\n---\n\nToday is my last weekend at Cisco, and I'm about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I'm not sure if this is the right choice, maybe there is no right choice at all.\n\nI remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn't sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.\n\nIt was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.\n\nWhile I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I'm still living in it.\n\nAll right, besides those nonsense, it's time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It's also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.\n\nI chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn't find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.\n\nI'm about to turn 30 in the next few years, yet I'm still lonely.\n\nMaybe I've said too much, while staying at the office, all alone.\n\n","slug":"My-Last-Weekend-At-Cisco","published":1,"updated":"2017-12-17T09:57:20.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd5001y8arfbl4w0j5h","content":"<p>Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I’m not sure if this is the right choice, maybe there is no right choice at all.</p>\n<p>I remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn’t sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.</p>\n<p>It was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.</p>\n<p>While I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I’m still living in it.</p>\n<p>All right, besides those nonsense, it’s time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It’s also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.</p>\n<p>I chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn’t find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.</p>\n<p>I’m about to turn 30 in the next few years, yet I’m still lonely.</p>\n<p>Maybe I’ve said too much, while staying at the office, all alone.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today is my last weekend at Cisco, and I’m about to leave the company at the next Friday. My next employer is Alibaba, which is more cruel and fierce than Cisco, I’m not sure if this is the right choice, maybe there is no right choice at all.</p>\n<p>I remember that when I arrived at Hangzhou one and a half years ago, my ID card was just expired. And since Hangzhou was holding the G20 event at that time, no hotel dared to accept me. So I wandered around the street for the whole night, and what was worse, since I was carrying my baggage, I couldn’t sleep for a single minute because I was afraid my baggage could be stolen by some random guy on the street.</p>\n<p>It was blazing hot at the time, I walked into an ATM booth and tried to sleep there because it had an air conditioner, but I was asked out after several minutes since sleeping in there was not allowed.</p>\n<p>While I was walking on the street, I thought a lot. I thought about why I would choose Hangzhou, why this world was so terrible, why everything was falling into the wrong place. Finally the sun rose and I called my friends at Hangzhou so I could have a rest at his house for a while. I rent a house that afternoon, which I’m still living in it.</p>\n<p>All right, besides those nonsense, it’s time for me to talk about Cisco. Cisco is a really good company, I mean, really good. I could never imagine a company so kind, it gives the best to the employees. It’s also a good thing for me to join such a company on graduation, so I could know that there are still good companies out there, that care about its employees, even in this more and more competitive society.</p>\n<p>I chose Alibaba so I could learn cooler stuff, and it offered a higher salary package. I couldn’t find a concrete reason to decline the offer, so I joined. No matter whether I would thrive or suffer in the new company, I have to accept.</p>\n<p>I’m about to turn 30 in the next few years, yet I’m still lonely.</p>\n<p>Maybe I’ve said too much, while staying at the office, all alone.</p>\n"},{"title":"Proof of $$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$","date":"2016-10-01T11:29:59.000Z","thumbnail":"/images/Math_Business_sm.jpg","_content":"\n**Theorem**: \n\n$$c,\\ d\\in {\\bf R},\\  \\lim_{x\\rightarrow \\infty} f(x)=c>0,\\ \\lim_{x\\rightarrow \\infty} g(x) =d>0$$\n\nthen\n\n$$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$\n\n**Proof**: Because \n\n1. $y(x)=ln(x)$ is continuous at $x = c > 0$\n\n2. $\\lim\\limits_{x\\to \\infty}f(x) = c$\n\naccording to the [composition law][1], we have\n\n$$\\lim\\limits_{x \\to \\infty}lnf(x) = ln\\lim\\limits_{x \\to \\infty}f(x) = lnc$$\n\nBecause $\\lim\\limits_{x \\to \\infty}g(x) = d$, we have\n\n$$\\lim\\limits_{x\\to \\infty}g(x)lnf(x) = \\lim\\limits_{x\\to \\infty}g(x)\\cdot\\lim\\limits_{x \\to \\infty}lnf(x) = dlnc$$\n\nApply [composition law][1] again, we get\n\n$$\\lim\\limits_{x\\to \\infty}f(x)^{g(x)} = \\lim\\limits_{x\\to \\infty}e^{g(x)lnf(x)} = e^{\\lim\\limits_{x\\to \\infty}g(x)lnf(x)} = e^{dlnc} = c^d$$\n\n\n  [1]: http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\n","source":"_posts/Proof-of-limit-f-x-g-x-c-d.md","raw":"title: Proof of $$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$\ndate: 2016-10-01 19:29:59\ntags: [limit, math]\ncategories: Math\nthumbnail: /images/Math_Business_sm.jpg\n---\n\n**Theorem**: \n\n$$c,\\ d\\in {\\bf R},\\  \\lim_{x\\rightarrow \\infty} f(x)=c>0,\\ \\lim_{x\\rightarrow \\infty} g(x) =d>0$$\n\nthen\n\n$$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$\n\n**Proof**: Because \n\n1. $y(x)=ln(x)$ is continuous at $x = c > 0$\n\n2. $\\lim\\limits_{x\\to \\infty}f(x) = c$\n\naccording to the [composition law][1], we have\n\n$$\\lim\\limits_{x \\to \\infty}lnf(x) = ln\\lim\\limits_{x \\to \\infty}f(x) = lnc$$\n\nBecause $\\lim\\limits_{x \\to \\infty}g(x) = d$, we have\n\n$$\\lim\\limits_{x\\to \\infty}g(x)lnf(x) = \\lim\\limits_{x\\to \\infty}g(x)\\cdot\\lim\\limits_{x \\to \\infty}lnf(x) = dlnc$$\n\nApply [composition law][1] again, we get\n\n$$\\lim\\limits_{x\\to \\infty}f(x)^{g(x)} = \\lim\\limits_{x\\to \\infty}e^{g(x)lnf(x)} = e^{\\lim\\limits_{x\\to \\infty}g(x)lnf(x)} = e^{dlnc} = c^d$$\n\n\n  [1]: http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\n","slug":"Proof-of-limit-f-x-g-x-c-d","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd600218arfi146pmgh","content":"<p><strong>Theorem</strong>: </p>\n<p>$$c, d\\in {\\bf R},  \\lim_{x\\rightarrow \\infty} f(x)=c&gt;0, \\lim_{x\\rightarrow \\infty} g(x) =d&gt;0$$</p>\n<p>then</p>\n<p>$$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$</p>\n<p><strong>Proof</strong>: Because </p>\n<ol>\n<li><p>$y(x)=ln(x)$ is continuous at $x = c &gt; 0$</p>\n</li>\n<li><p>$\\lim\\limits_{x\\to \\infty}f(x) = c$</p>\n</li>\n</ol>\n<p>according to the <a href=\"http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\" target=\"_blank\" rel=\"external\">composition law</a>, we have</p>\n<p>$$\\lim\\limits_{x \\to \\infty}lnf(x) = ln\\lim\\limits_{x \\to \\infty}f(x) = lnc$$</p>\n<p>Because $\\lim\\limits_{x \\to \\infty}g(x) = d$, we have</p>\n<p>$$\\lim\\limits_{x\\to \\infty}g(x)lnf(x) = \\lim\\limits_{x\\to \\infty}g(x)\\cdot\\lim\\limits_{x \\to \\infty}lnf(x) = dlnc$$</p>\n<p>Apply <a href=\"http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\" target=\"_blank\" rel=\"external\">composition law</a> again, we get</p>\n<p>$$\\lim\\limits_{x\\to \\infty}f(x)^{g(x)} = \\lim\\limits_{x\\to \\infty}e^{g(x)lnf(x)} = e^{\\lim\\limits_{x\\to \\infty}g(x)lnf(x)} = e^{dlnc} = c^d$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Theorem</strong>: </p>\n<p>$$c, d\\in {\\bf R},  \\lim_{x\\rightarrow \\infty} f(x)=c&gt;0, \\lim_{x\\rightarrow \\infty} g(x) =d&gt;0$$</p>\n<p>then</p>\n<p>$$\\lim_{x\\rightarrow \\infty} f(x)^{g(x)} = c^d$$</p>\n<p><strong>Proof</strong>: Because </p>\n<ol>\n<li><p>$y(x)=ln(x)$ is continuous at $x = c &gt; 0$</p>\n</li>\n<li><p>$\\lim\\limits_{x\\to \\infty}f(x) = c$</p>\n</li>\n</ol>\n<p>according to the <a href=\"http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\" target=\"_blank\" rel=\"external\">composition law</a>, we have</p>\n<p>$$\\lim\\limits_{x \\to \\infty}lnf(x) = ln\\lim\\limits_{x \\to \\infty}f(x) = lnc$$</p>\n<p>Because $\\lim\\limits_{x \\to \\infty}g(x) = d$, we have</p>\n<p>$$\\lim\\limits_{x\\to \\infty}g(x)lnf(x) = \\lim\\limits_{x\\to \\infty}g(x)\\cdot\\lim\\limits_{x \\to \\infty}lnf(x) = dlnc$$</p>\n<p>Apply <a href=\"http://math.oregonstate.edu/home/programs/undergrad/CalculusQuestStudyGuides/SandS/lHopital/limit_laws.html#composition_law\" target=\"_blank\" rel=\"external\">composition law</a> again, we get</p>\n<p>$$\\lim\\limits_{x\\to \\infty}f(x)^{g(x)} = \\lim\\limits_{x\\to \\infty}e^{g(x)lnf(x)} = e^{\\lim\\limits_{x\\to \\infty}g(x)lnf(x)} = e^{dlnc} = c^d$$</p>\n"},{"title":"Right associativity in Scala","date":"2017-10-07T05:07:50.000Z","thumbnail":"/images/do-the-right-thing.jpg","_content":"\nWe define two methods here, `++` and `++:`\n\n```scala\nclass Foo {\n  def ++(n: Int): Unit = println(n + 1)\n  def ++:(n: Int): Unit = println(n + 1)\n}\nobject ValFunctionTest {\n  def main(args: Array[String]): Unit = {\n    val foo = new Foo\n    foo.++(1)\n    foo.++:(1)\n  }\n}\n```\n\nNothing special, right? Yes, for now, until we try removing the parentheses in it.\n\n```scala\nclass Foo {\n  def ++(n: Int): Unit = println(n + 1)\n  def ++:(n: Int): Unit = println(n + 1)\n}\nobject ValFunctionTest {\n  def main(args: Array[String]): Unit = {\n    val foo = new Foo\n    foo ++ 1\n    1 ++: foo\n    \n    foo ++: 1 // error\n    1 ++ foo // error\n  }\n}\n```\n\nSo the difference is, `foo` can only be placed on the *left* side when using `++`, and it can only be placed on *right* side when using `++:`. The latter is called *right associativity*, and **methods ending with : are used in the right associativity**.","source":"_posts/Right-associativity-in-Scala.md","raw":"title: Right associativity in Scala\ndate: 2017-10-07 13:07:50\ntags: Scala\ncategories: Coding\nthumbnail: /images/do-the-right-thing.jpg\n---\n\nWe define two methods here, `++` and `++:`\n\n```scala\nclass Foo {\n  def ++(n: Int): Unit = println(n + 1)\n  def ++:(n: Int): Unit = println(n + 1)\n}\nobject ValFunctionTest {\n  def main(args: Array[String]): Unit = {\n    val foo = new Foo\n    foo.++(1)\n    foo.++:(1)\n  }\n}\n```\n\nNothing special, right? Yes, for now, until we try removing the parentheses in it.\n\n```scala\nclass Foo {\n  def ++(n: Int): Unit = println(n + 1)\n  def ++:(n: Int): Unit = println(n + 1)\n}\nobject ValFunctionTest {\n  def main(args: Array[String]): Unit = {\n    val foo = new Foo\n    foo ++ 1\n    1 ++: foo\n    \n    foo ++: 1 // error\n    1 ++ foo // error\n  }\n}\n```\n\nSo the difference is, `foo` can only be placed on the *left* side when using `++`, and it can only be placed on *right* side when using `++:`. The latter is called *right associativity*, and **methods ending with : are used in the right associativity**.","slug":"Right-associativity-in-Scala","published":1,"updated":"2017-10-07T05:56:44.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd700238arfv8404mn3","content":"<p>We define two methods here, <code>++</code> and <code>++:</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>:(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ValFunctionTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> foo = <span class=\"keyword\">new</span> <span class=\"type\">Foo</span></div><div class=\"line\">    foo.++(<span class=\"number\">1</span>)</div><div class=\"line\">    foo.++:(<span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Nothing special, right? Yes, for now, until we try removing the parentheses in it.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>:(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ValFunctionTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> foo = <span class=\"keyword\">new</span> <span class=\"type\">Foo</span></div><div class=\"line\">    foo ++ <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"number\">1</span> ++: foo</div><div class=\"line\">    </div><div class=\"line\">    foo ++: <span class=\"number\">1</span> <span class=\"comment\">// error</span></div><div class=\"line\">    <span class=\"number\">1</span> ++ foo <span class=\"comment\">// error</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So the difference is, <code>foo</code> can only be placed on the <em>left</em> side when using <code>++</code>, and it can only be placed on <em>right</em> side when using <code>++:</code>. The latter is called <em>right associativity</em>, and <strong>methods ending with : are used in the right associativity</strong>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>We define two methods here, <code>++</code> and <code>++:</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>:(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ValFunctionTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> foo = <span class=\"keyword\">new</span> <span class=\"type\">Foo</span></div><div class=\"line\">    foo.++(<span class=\"number\">1</span>)</div><div class=\"line\">    foo.++:(<span class=\"number\">1</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Nothing special, right? Yes, for now, until we try removing the parentheses in it.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">++</span></span>:(n: <span class=\"type\">Int</span>): <span class=\"type\">Unit</span> = println(n + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ValFunctionTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> foo = <span class=\"keyword\">new</span> <span class=\"type\">Foo</span></div><div class=\"line\">    foo ++ <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"number\">1</span> ++: foo</div><div class=\"line\">    </div><div class=\"line\">    foo ++: <span class=\"number\">1</span> <span class=\"comment\">// error</span></div><div class=\"line\">    <span class=\"number\">1</span> ++ foo <span class=\"comment\">// error</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So the difference is, <code>foo</code> can only be placed on the <em>left</em> side when using <code>++</code>, and it can only be placed on <em>right</em> side when using <code>++:</code>. The latter is called <em>right associativity</em>, and <strong>methods ending with : are used in the right associativity</strong>.</p>\n"},{"title":"Proof of the limit's composition law when x approaches infinity","date":"2016-10-01T05:20:32.000Z","thumbnail":"https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Limit-at-infinity-graph.png/306px-Limit-at-infinity-graph.png","_content":"\n**Theorem**: If $f(x)$ is continous at $b$ and $\\lim\\limits_{x \\to\\infty}g(x) = b$, then \n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))\\tag1$$\n\n**Proof**:  Because $f(x)$ is continous at $b$, so \n\n$$\\lim\\limits_{x\\to b}f(x) = f(b)\\tag2$$\n\nBecause $$\\lim\\limits_{x\\to\\infty}g(x) = b \\tag3$$\n\nCombine $(1)$ and $(2)$, we get\n\n$$\\lim\\limits_{x\\to\\infty}f(g(x)) = f(b)$$\n\nThus we proved the right side of equation $(1)$\n\nNow we need to prove $$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)\\tag 4$$\n\nBecause \n\n$$\\lim\\limits_{x\\to b}f(x) = f(b)$$\n\naccording to the definition of limit, $\\forall \\varepsilon > 0$, there exists a $\\delta'$ such that for all $|x-b|<\\delta'$, we have\n\n$$|f(x) - f(b)| < \\varepsilon\\tag5$$\n\nReplace $x$ with $g(x)$ in the above conclusion, we get\n\n$\\forall \\varepsilon' > 0$, there exists a $\\delta'$ such that for all $|g(x)-b|<\\delta'$, we have \n\n$$|f(g(x)) - f(b)| < \\varepsilon'\\tag6$$\n\nNote that although $f(x)$ needs to be defined and has a limited value (6) around $b$, $g(x)$ doesn't need to be so. For example, $g(x)$ may never be larger than $b$. But every time we get a $g(x)$ that meets the condition $|g(x) - b| < \\delta'$, $|f(g(x)) - f(b)| < \\varepsilon$ is guaranteed. \n\nBecause\n\n$$\\lim\\limits_{x \\to \\infty}g(x) = b$$\n\naccording to the definition of limit, $\\forall \\varepsilon > 0$, there exists a $\\delta$ such that for all $x > \\delta$ we have $|g(x) -b| < \\varepsilon$\n\nLet $\\varepsilon = \\delta'$, so $\\forall x>\\delta$, we have\n\n$$|g(x) - b| < \\delta'$$\n\nCombine this with $(6)$, $\\forall \\varepsilon' > 0$, there exists $\\delta$, whenever $x > \\delta$, we have\n\n$$|f(g(x)) - f(b)| < \\varepsilon'$$\n\nWhich is exactly the definition of the limit\n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)$$\n\nSo we proved the left side of $(1)$ equation. So equation\n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))$$\n \n holds.\n","source":"_posts/Proof-of-the-limit-s-composition-law-when-x-approaches-infinity.md","raw":"title: Proof of the limit's composition law when x approaches infinity\ndate: 2016-10-01 13:20:32\ntags: [limit, composition, proof]\ncategories: Math\nthumbnail: https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Limit-at-infinity-graph.png/306px-Limit-at-infinity-graph.png\n---\n\n**Theorem**: If $f(x)$ is continous at $b$ and $\\lim\\limits_{x \\to\\infty}g(x) = b$, then \n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))\\tag1$$\n\n**Proof**:  Because $f(x)$ is continous at $b$, so \n\n$$\\lim\\limits_{x\\to b}f(x) = f(b)\\tag2$$\n\nBecause $$\\lim\\limits_{x\\to\\infty}g(x) = b \\tag3$$\n\nCombine $(1)$ and $(2)$, we get\n\n$$\\lim\\limits_{x\\to\\infty}f(g(x)) = f(b)$$\n\nThus we proved the right side of equation $(1)$\n\nNow we need to prove $$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)\\tag 4$$\n\nBecause \n\n$$\\lim\\limits_{x\\to b}f(x) = f(b)$$\n\naccording to the definition of limit, $\\forall \\varepsilon > 0$, there exists a $\\delta'$ such that for all $|x-b|<\\delta'$, we have\n\n$$|f(x) - f(b)| < \\varepsilon\\tag5$$\n\nReplace $x$ with $g(x)$ in the above conclusion, we get\n\n$\\forall \\varepsilon' > 0$, there exists a $\\delta'$ such that for all $|g(x)-b|<\\delta'$, we have \n\n$$|f(g(x)) - f(b)| < \\varepsilon'\\tag6$$\n\nNote that although $f(x)$ needs to be defined and has a limited value (6) around $b$, $g(x)$ doesn't need to be so. For example, $g(x)$ may never be larger than $b$. But every time we get a $g(x)$ that meets the condition $|g(x) - b| < \\delta'$, $|f(g(x)) - f(b)| < \\varepsilon$ is guaranteed. \n\nBecause\n\n$$\\lim\\limits_{x \\to \\infty}g(x) = b$$\n\naccording to the definition of limit, $\\forall \\varepsilon > 0$, there exists a $\\delta$ such that for all $x > \\delta$ we have $|g(x) -b| < \\varepsilon$\n\nLet $\\varepsilon = \\delta'$, so $\\forall x>\\delta$, we have\n\n$$|g(x) - b| < \\delta'$$\n\nCombine this with $(6)$, $\\forall \\varepsilon' > 0$, there exists $\\delta$, whenever $x > \\delta$, we have\n\n$$|f(g(x)) - f(b)| < \\varepsilon'$$\n\nWhich is exactly the definition of the limit\n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)$$\n\nSo we proved the left side of $(1)$ equation. So equation\n\n$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))$$\n \n holds.\n","slug":"Proof-of-the-limit-s-composition-law-when-x-approaches-infinity","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqd900268arfbt5icxnz","content":"<p><strong>Theorem</strong>: If $f(x)$ is continous at $b$ and $\\lim\\limits_{x \\to\\infty}g(x) = b$, then </p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))\\tag1$$</p>\n<p><strong>Proof</strong>:  Because $f(x)$ is continous at $b$, so </p>\n<p>$$\\lim\\limits_{x\\to b}f(x) = f(b)\\tag2$$</p>\n<p>Because $$\\lim\\limits_{x\\to\\infty}g(x) = b \\tag3$$</p>\n<p>Combine $(1)$ and $(2)$, we get</p>\n<p>$$\\lim\\limits_{x\\to\\infty}f(g(x)) = f(b)$$</p>\n<p>Thus we proved the right side of equation $(1)$</p>\n<p>Now we need to prove $$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)\\tag 4$$</p>\n<p>Because </p>\n<p>$$\\lim\\limits_{x\\to b}f(x) = f(b)$$</p>\n<p>according to the definition of limit, $\\forall \\varepsilon &gt; 0$, there exists a $\\delta’$ such that for all $|x-b|&lt;\\delta’$, we have</p>\n<p>$$|f(x) - f(b)| &lt; \\varepsilon\\tag5$$</p>\n<p>Replace $x$ with $g(x)$ in the above conclusion, we get</p>\n<p>$\\forall \\varepsilon’ &gt; 0$, there exists a $\\delta’$ such that for all $|g(x)-b|&lt;\\delta’$, we have </p>\n<p>$$|f(g(x)) - f(b)| &lt; \\varepsilon’\\tag6$$</p>\n<p>Note that although $f(x)$ needs to be defined and has a limited value (6) around $b$, $g(x)$ doesn’t need to be so. For example, $g(x)$ may never be larger than $b$. But every time we get a $g(x)$ that meets the condition $|g(x) - b| &lt; \\delta’$, $|f(g(x)) - f(b)| &lt; \\varepsilon$ is guaranteed. </p>\n<p>Because</p>\n<p>$$\\lim\\limits_{x \\to \\infty}g(x) = b$$</p>\n<p>according to the definition of limit, $\\forall \\varepsilon &gt; 0$, there exists a $\\delta$ such that for all $x &gt; \\delta$ we have $|g(x) -b| &lt; \\varepsilon$</p>\n<p>Let $\\varepsilon = \\delta’$, so $\\forall x&gt;\\delta$, we have</p>\n<p>$$|g(x) - b| &lt; \\delta’$$</p>\n<p>Combine this with $(6)$, $\\forall \\varepsilon’ &gt; 0$, there exists $\\delta$, whenever $x &gt; \\delta$, we have</p>\n<p>$$|f(g(x)) - f(b)| &lt; \\varepsilon’$$</p>\n<p>Which is exactly the definition of the limit</p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)$$</p>\n<p>So we proved the left side of $(1)$ equation. So equation</p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))$$</p>\n<p> holds.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Theorem</strong>: If $f(x)$ is continous at $b$ and $\\lim\\limits_{x \\to\\infty}g(x) = b$, then </p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))\\tag1$$</p>\n<p><strong>Proof</strong>:  Because $f(x)$ is continous at $b$, so </p>\n<p>$$\\lim\\limits_{x\\to b}f(x) = f(b)\\tag2$$</p>\n<p>Because $$\\lim\\limits_{x\\to\\infty}g(x) = b \\tag3$$</p>\n<p>Combine $(1)$ and $(2)$, we get</p>\n<p>$$\\lim\\limits_{x\\to\\infty}f(g(x)) = f(b)$$</p>\n<p>Thus we proved the right side of equation $(1)$</p>\n<p>Now we need to prove $$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)\\tag 4$$</p>\n<p>Because </p>\n<p>$$\\lim\\limits_{x\\to b}f(x) = f(b)$$</p>\n<p>according to the definition of limit, $\\forall \\varepsilon &gt; 0$, there exists a $\\delta’$ such that for all $|x-b|&lt;\\delta’$, we have</p>\n<p>$$|f(x) - f(b)| &lt; \\varepsilon\\tag5$$</p>\n<p>Replace $x$ with $g(x)$ in the above conclusion, we get</p>\n<p>$\\forall \\varepsilon’ &gt; 0$, there exists a $\\delta’$ such that for all $|g(x)-b|&lt;\\delta’$, we have </p>\n<p>$$|f(g(x)) - f(b)| &lt; \\varepsilon’\\tag6$$</p>\n<p>Note that although $f(x)$ needs to be defined and has a limited value (6) around $b$, $g(x)$ doesn’t need to be so. For example, $g(x)$ may never be larger than $b$. But every time we get a $g(x)$ that meets the condition $|g(x) - b| &lt; \\delta’$, $|f(g(x)) - f(b)| &lt; \\varepsilon$ is guaranteed. </p>\n<p>Because</p>\n<p>$$\\lim\\limits_{x \\to \\infty}g(x) = b$$</p>\n<p>according to the definition of limit, $\\forall \\varepsilon &gt; 0$, there exists a $\\delta$ such that for all $x &gt; \\delta$ we have $|g(x) -b| &lt; \\varepsilon$</p>\n<p>Let $\\varepsilon = \\delta’$, so $\\forall x&gt;\\delta$, we have</p>\n<p>$$|g(x) - b| &lt; \\delta’$$</p>\n<p>Combine this with $(6)$, $\\forall \\varepsilon’ &gt; 0$, there exists $\\delta$, whenever $x &gt; \\delta$, we have</p>\n<p>$$|f(g(x)) - f(b)| &lt; \\varepsilon’$$</p>\n<p>Which is exactly the definition of the limit</p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b)$$</p>\n<p>So we proved the left side of $(1)$ equation. So equation</p>\n<p>$$\\lim\\limits_{x \\to \\infty}f(g(x)) = f(b) = f(\\lim\\limits_{x\\to \\infty}g(x))$$</p>\n<p> holds.</p>\n"},{"title":"Hexo Source Code Demystified","date":"2016-07-16T23:52:23.000Z","thumbnail":null,"_content":"\n# Preface\nHexo is an excellent static blog generator, I read its source code recently, and I think it's worth sharing the inner mechanism of its source code.\n\n# Generator\nWhen you run the command `hexo generate`, hexo will generate all the static files for you. This is the part we are going to start with. The directory where `hexo generate` is executed is `/home/searene/Development/hexo-twenty-sixteen` in this tutorial.\n\nFirst, we can find the location of the tool `hexo` with the command `which`.\n\n``` shell\nwhich hexo\n```\n\nMy output is\n\n``` shell\n/home/searene/.nvm/versions/node/v5.0.0/bin/hexo\n```\n\nThis is a soft link, we get the location of the original file with `ll`\n\n``` shell\nll ~/.nvm/versions/node/v5.0.0/bin/hexo \n\nlrwxrwxrwx 1 searene searene 37 May 24 01:15 /home/searene/.nvm/versions/node/v5.0.0/bin/hexo -> ../lib/node_modules/hexo-cli/bin/hexo\n```\n\nThe contents of `hexo` are as follows.\n\n``` javascript\n#!/usr/bin/env node\n'use strict';\nrequire('../lib/hexo')();\n```\n\nIt requires a js file called `hexo`, which is located in `/home/searene/.nvm/versions/node/v5.0.0/lib/node_modules/hexo-cli/lib/hexo.js` in my case. The beginning part of the file is as follows.\n\n``` javascript\n'use strict';\n\nvar chalk = require('chalk');\nvar tildify = require('tildify');\nvar pathFn = require('path');\nvar Promise = require('bluebird');\nvar Context = require('./context');\nvar findPkg = require('./find_pkg');\nvar goodbye = require('./goodbye');\nvar minimist = require('minimist');\nvar camelCaseKeys = require('hexo-util/lib/camel_case_keys');\n```\n\nIt requires several packages.\n\n1. `chalk` is used for colorful outputs,.\n2. `tildify` is used to convert an absolute path to a tilde path:, like `/Users/sindresorhus/dev` → `~/dev`.\n3. `context` is used to //TODO\n4. `find_pkg` is used to find the local hexo directory that contains `node_modules`\n5. `goodbye` is used to generate a random goodbye sentence.\n6. `minimist` is used to parse argument options.\n7. `camelCaseKeys` is used to convert keys in parameters to the camelCased ones\n\nLet's continue to read the file.\n\n``` javascript\nfunction entry(cwd, args) {\n  // cwd is the directory where you invoked the node command\n  cwd = cwd || process.cwd();\n  // the keys in args is camelCased\n  args = camelCaseKeys(args || minimist(process.argv.slice(2)));\n\n  var hexo = new Context(cwd, args);\n  var log = hexo.log;\n\n  // Change the title in console\n  process.title = 'hexo';\n\n  function handleError(err) {\n    log.fatal(err);\n    process.exit(2);\n  }\n  /* findPkg searched upwards from the working directory(cwd) to\n     find a directory containing package.json where the key hexo lies,\n     a promise is returned by the function. */\n  return findPkg(cwd, args).then(function(path) {\n    if (!path) return;\n\n    /* hexo.base_dir is set as the found directory, which is \n       /home/searene/Development/hexo-twenty-sixteen */\n    hexo.base_dir = path;\n\n    /* loadModule loads the hexo package located in the working\n       directory(/home/searene/Development/hexo-twenty-sixteen)\n       and returns a promise, the resolve function will carry a\n       newly-constructed Hexo(return new Hexo(path, args)) object \n       afterwards. From now on, local hexo will be used instead \n       of the global one. */\n    return loadModule(path, args).catch(function() {\n      log.error('Local hexo not found in %s', chalk.magenta(tildify(path)));\n      log.error('Try running: \\'npm install hexo --save\\'');\n      process.exit(2);\n    });\n  }).then(function(mod) {\n    if (mod) hexo = mod;\n    log = hexo.log;\n\n    require('./console')(hexo);\n\n    return hexo.init();\n  }).then(function() {\n    var cmd = '';\n\n    if (!args.h && !args.help) {\n      cmd = args._.shift();\n\n      if (cmd) {\n        var c = hexo.extend.console.get(cmd);\n        if (!c) cmd = 'help';\n      } else {\n        cmd = 'help';\n      }\n    } else {\n      cmd = 'help';\n    }\n\n    watchSignal(hexo);\n\n    return hexo.call(cmd, args).then(function() {\n      return hexo.exit();\n    }).catch(function(err) {\n      return hexo.exit(err).then(function() {\n        handleError(err);\n      });\n    });\n  }).catch(handleError);\n}\n\nentry.console = {\n  init: require('./console/init'),\n  help: require('./console/help'),\n  version: require('./console/version')\n};\n\nentry.version = require('../package.json').version;\n\nfunction loadModule(path, args) {\n  return Promise.try(function() {\n    var modulePath = pathFn.join(path, 'node_modules', 'hexo');\n    var Hexo = require(modulePath);\n\n    return new Hexo(path, args);\n  });\n}\n\nfunction watchSignal(hexo) {\n  process.on('SIGINT', function() {\n    hexo.log.info(goodbye());\n    hexo.unwatch();\n\n    hexo.exit().then(function() {\n      process.exit();\n    });\n  });\n}\n\nmodule.exports = entry;\n```\n\nNotice the last part\n\n``` javascript\nmodule.exports = entry;\n```\n\nRemember the contents of `hexo.js`?\n\n``` javascript\nrequire('../lib/hexo')();\n```\n\nSo what `hexo.js` does is calling the `entry` function. Here comes the question, what does `entry` do?\n\n1. It searched upwards from the working directory looking for `package.json` containing the key `hexo`.\n\n    ``` javascript\n    function findPkg(cwd, args) {\n      args = args || {};\n    \n      if (args.cwd) {\n        cwd = pathFn.resolve(cwd, args.cwd);\n      }\n    \n      return checkPkg(cwd);\n    }\n    \n    function checkPkg(path) {\n      var pkgPath = pathFn.join(path, 'package.json');\n    \n      return fs.readFile(pkgPath).then(function(content) {\n        var json = JSON.parse(content);\n        if (typeof json.hexo === 'object') return path;\n      }).catch(function(err) {\n        if (err && err.cause.code === 'ENOENT') {\n          var parent = pathFn.dirname(path);\n    \n          if (parent === path) return;\n          return checkPkg(parent);\n        }\n    \n        throw err;\n      });\n    }\n    ```\n\n2.  Then it loads the local hexo package.\n\n    ``` javascript\n    function loadModule(path, args) {\n      return Promise.try(function() {\n        var modulePath = pathFn.join(path, 'node_modules', 'hexo');\n        var Hexo = require(modulePath);\n    \n        return new Hexo(path, args);\n      });\n    }\n    ```\n3. `new` a `Hexo` object. The souce code of `Hexo` is as follows:\n\n  ``` javascript\n  function Hexo(base, args) {\n    base = base || process.cwd();\n    args = args || {};\n\n    EventEmitter.call(this);\n\n    this.base_dir = base + sep;\n    this.public_dir = pathFn.join(base, 'public') + sep;\n    this.source_dir = pathFn.join(base, 'source') + sep;\n    this.plugin_dir = pathFn.join(base, 'node_modules') + sep;\n    this.script_dir = pathFn.join(base, 'scripts') + sep;\n    this.scaffold_dir = pathFn.join(base, 'scaffolds') + sep;\n    this.theme_dir = pathFn.join(base, 'themes', defaultConfig.theme) + sep;\n    this.theme_script_dir = pathFn.join(this.theme_dir, 'scripts') + sep;\n\n    this.env = {\n      args: args,\n      debug: Boolean(args.debug),\n      safe: Boolean(args.safe),\n      silent: Boolean(args.silent),\n      env: process.env.NODE_ENV || 'development',\n      version: pkg.version,\n      init: false\n    };\n\n    this.config_path = args.config ? pathFn.resolve(base, args.config)\n                                   : pathFn.join(base, '_config.yml');\n\n    this.extend = {\n      console: new extend.Console(),\n      deployer: new extend.Deployer(),\n      filter: new extend.Filter(),\n      generator: new extend.Generator(),\n      helper: new extend.Helper(),\n      migrator: new extend.Migrator(),\n      processor: new extend.Processor(),\n      renderer: new extend.Renderer(),\n      tag: new extend.Tag()\n    };\n\n    this.config = _.cloneDeep(defaultConfig);\n\n    this.log = logger(this.env);\n\n    this.render = new Render(this);\n\n    this.route = new Router();\n\n    this.post = new Post(this);\n\n    this.scaffold = new Scaffold(this);\n\n    this._dbLoaded = false;\n\n    this._isGenerating = false;\n\n    this.database = new Database({\n      version: dbVersion,\n      path: pathFn.join(base, 'db.json')\n    });\n\n    registerModels(this);\n\n    this.source = new Source(this);\n    this.theme = new Theme(this);\n    this.locals = new Locals(this);\n    this._bindLocals();\n  }\n  ```\n\n  `Hexo` gets several directories such as `public_dir`, `source_dir`, etc. Then it defines the `this.extend` object, which contains `console`, `deployer`, etc. The format of each instance in the `this.extend` object is as follows:\n\n  ``` javascript\n  function Console() {\n    this.store = {};\n    this.alias = {};\n  }\n  //-------------------------\n  function Deployer() {\n    this.store = {};\n  }\n  //-------------------------\n  function Filter() {\n    this.store = {};\n  }\n  //-------------------------\n  function Generator() {\n    this.id = 0;\n    this.store = {};\n  }\n  //-------------------------\n  function Helper() {\n    this.store = {};\n  }\n  //-------------------------\n  function Migrator() {\n    this.store = {};\n  }\n  //-------------------------\n  function Processor() {\n    this.store = [];\n  }\n  //-------------------------\n  function Renderer() {\n    this.store = {};\n    this.storeSync = {};\n  }\n  //-------------------------\n  function Tag() {\n    this.env = new nunjucks.Environment(null, {\n      autoescape: false\n    });\n  }\n  //-------------------------\n  ```\n\n  All of them contain the same object `this.store`, which is used to map the name to the corresponding function. For example, `this.store` in `Console` is as follows:\n\n  ![this.store](http://i.imgur.com/fB0X6I3.png)\n\n  Each key in the object such as `clean`, `config` is of type string. What they are mapped to are functions that implement them.\n\n  Then it creates several instances, `logger`, `Render`, `Router`, `Post`, `Scaffold`, `database` etc. `logger` is used to log information on the console and the file, `Render` is used to render files(e.g. render markdownf files to html), `Router` is used to save all paths used in the site, `Post` is used to //TODO, `Scaffold` is used to //TODO, `database` is a [JSON-based database](https://github.com/tommy351/warehouse).\n\n  It then registered following schemas using `registerModels(this)`.\n  \n  ``` javascript\n  exports.Asset = require('./asset');\n  exports.Cache = require('./cache');\n  exports.Category = require('./category');\n  exports.Data = require('./data');\n  exports.Page = require('./page');\n  exports.Post = require('./post');\n  exports.PostAsset = require('./post_asset');\n  exports.PostCategory = require('./post_category');\n  exports.PostTag = require('./post_tag');\n  exports.Tag = require('./tag');\n  ```\n\n  Afterwards, two instances are initiated, `Source`, `Theme`,which represents `source` and `theme` folders respectively. They are both being processed by `Box`.\n\n  First, let's look at `source`.js.\n\n  ``` javascript\n  'use strict';\n\n  var Box = require('../box');\n  var util = require('util');\n\n  function Source(ctx) {\n    Box.call(this, ctx, ctx.source_dir);\n\n    this.processors = ctx.extend.processor.list();\n  }\n\n  util.inherits(Source, Box);\n\n  module.exports = Source;\n  ```\n\n  `ctx` refers to `Hexo`, `Source` function calls `Box` and gets the processor list, then it inherits `Box`. `Box` is used to read and render files in `source` or `theme` folder. To find out what's going on, we need to look into the source code of `Box`.\n\n  ``` javascript\n    function Box(ctx, base, options) {\n      EventEmitter.call(this);\n\n      this.options = _.assign({\n        persistent: true\n      }, options);\n\n      // if the last character of the working directory \n      // is not /, add it to the end of base\n      if (base.substring(base.length - 1) !== sep) {\n        base += sep;\n      }\n\n      this.context = ctx;\n      this.base = base;\n      this.processors = [];\n      this._processingFiles = {};\n      this.watcher = null;\n      this.Cache = ctx.model('Cache');\n      this.File = this._createFileClass();\n    }\n  ```\n\n  It sets several variables, then it gets the `Cache` model. The source code of `ctx.model` function is as follows.\n\n  ``` javascript\n    Hexo.prototype.model = function(name, schema) {\n    return this.database.model(name, schema);\n  };\n  ```\n\n  If the model was created before, `this.database.model` will just return the model, or it will create the model with the specified `name` and `schema`.\n\n  ``` javascript\n    Database.prototype.model = function(name, schema) {\n      if (this._models[name]) {\n        return this._models[name];\n      }\n\n      var model = this._models[name] = new this.Model(name, schema);\n      return model;\n    };\n  ```\n\n  Note that We have created the model in the `register_model` function, which is located in the `Hexo` function. When the code `new Hexo` is run, all the models are registered.\n\n  ``` javascript\n  'use strict';\n\n  var models = require('../models');\n\n  module.exports = function(ctx) {\n    var db = ctx.database;\n\n    var keys = Object.keys(models);\n    var key = '';\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      db.model(key, models[key](ctx));\n    }\n  };\n  ```\n\n  The models created here were as follows.\n\n  ``` javascript\n  'use strict';\n\n  exports.Asset = require('./asset');\n  exports.Cache = require('./cache');\n  exports.Category = require('./category');\n  exports.Data = require('./data');\n  exports.Page = require('./page');\n  exports.Post = require('./post');\n  exports.PostAsset = require('./post_asset');\n  exports.PostCategory = require('./post_category');\n  exports.PostTag = require('./post_tag');\n  exports.Tag = require('./tag');\n  ```\n\n  Which includes `cache`. So we can get the created `cache` model with `this.Cache = ctx.model('Cache');`. This model is used to cache generated posts and stuff, and store a hashed value for all of them. If the hash value is identical, hexo will not generate the post again, which reduces the generation time to a degree.\n\n  Now we only have a line left in the `box` function.\n\n  ``` javascript\n  this.File = this._createFileClass();\n  ```\n\n  `this.File` is used to read file contents and render it. The source code of `_createFileClass()` function is as follows.\n\n  ``` javascript\n  Box.prototype._createFileClass = function() {\n    //ctx is Hexo\n    var ctx = this.context;\n\n    var _File = function(data) {\n      File.call(this, data);\n    };\n\n    require('util').inherits(_File, File);\n\n    _File.prototype.box = this;\n\n    _File.prototype.render = function(options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return ctx.render.render({\n        path: this.source\n      }, options).asCallback(callback);\n    };\n\n    _File.prototype.renderSync = function(options) {\n      return ctx.render.renderSync({\n        path: this.source\n      }, options);\n    };\n\n    return _File;\n  };\n  ```\n\n  `File.call(this, data)` sets `_File`'s `source`, `path`, `params` and `type` as the same as ones in `data`. You can see it in the source of the `File` constructor.\n\n  ``` javascript\n  function File(data) {\n    this.source = data.source;\n    this.path = data.path;\n    this.params = data.params;\n    this.type = data.type;\n  }\n  ```\n\n  `_File` inherits `File` afterwards. Then it sets `render` and `renderSync` function of `_File` and returns it. As you can tell from their names, they are used to render files or strings, like this:\n\n  ``` javascript\n  hexo.render.render({text: 'example', engine: 'swig'}).then(function(result){\n    // ...\n  });\n  ```\n\n  ``` javascript\n  hexo.render.render({path: 'path/to/file.swig'}).then(function(result){\n    // ...\n  });\n  ```\n\n  ## Render\n\n  Let's look into the `Render` object.\n\n  ``` javascript\n  function Render(ctx) {\n    this.context = ctx;\n    this.renderer = ctx.extend.renderer;\n  }\n  ```\n\n  Still remember `renderer`? It's used to store all the information about rendering.\n\n  ``` javascript\n  function Renderer() {\n    this.store = {};\n    this.storeSync = {};\n  }\n  ```\n\n  The most important function in `render.js` is `Render.prototype.render`, the function is used to render text or files, the source code of it is as follows.\n\n  ``` javascript\n  Render.prototype.render = function(data, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    var ctx = this.context;\n    var self = this;\n    var ext = '';\n\n    return new Promise(function(resolve, reject) {\n      if (!data) return reject(new TypeError('No input file or string!'));\n      if (data.text != null) return resolve(data.text);\n      if (!data.path) return reject(new TypeError('No input file or string!'));\n\n      fs.readFile(data.path).then(resolve, reject);\n    }).then(function(text) {\n      data.text = text;\n      ext = data.engine || getExtname(data.path);\n      if (!ext || !self.isRenderable(ext)) return text;\n\n      var renderer = self.getRenderer(ext);\n      return renderer.call(ctx, data, options);\n    }).then(function(result) {\n      result = toString(result, data);\n      if (data.onRenderEnd) {\n        return data.onRenderEnd(result);\n      }\n\n      return result;\n    }).then(function(result) {\n      var output = self.getOutput(ext) || ext;\n      return ctx.execFilter('after_render:' + output, result, {\n        context: ctx,\n        args: [data]\n      });\n    }).asCallback(callback);\n  };\n  ```\n    \n  * First, it checks if `data` exists or not, `data` contains text(`data.text`) or file(`data.path`) that is going to be rendered, it throws an error if it doesn't exist.\n    \n    ``` javascript\n    if (!data) return reject(new TypeError('No input file or string!'));\n    ```\n\n  * Then if `data.text` exists, it will try to render the text first.\n\n    ``` javascript\n    if (data.text != null) return resolve(data.text);\n    ```\n\n  * If `data.path` exists, it will try to analyze the file specified by `data.path`.\n\n    ``` javascript\n    if (!data.path) return reject(new TypeError('No input file or string!'));\n    fs.readFile(data.path).then(resolve, reject);\n    ```\n\n  * It tries to find out if the rendering engine exists in `renderer.store`, which maps the rendering engine's name to the corresponding rendering function. If the engine exists, it will call the corresponding function to render it, return the original text if the engine doesn't exist.\n\n    ``` javascript\n    }).then(function(text) {\n    data.text = text;\n    ext = data.engine || getExtname(data.path);\n    if (!ext || !self.isRenderable(ext)) return text;\n\n    // get the function used to render\n    var renderer = self.getRenderer(ext);\n    return renderer.call(ctx, data, options);\n    ```\n\n    `renderer` refers to the function that is used to render text or files. What `renderer.call()` returns is usually of JSON format. For example, if the file to be rendered is like this:\n\n    ``` javascript\n    archive_dir: archives\n    author: John Doe\n    ```\n\n    The rendered result will be an object like this:\n\n    ``` javascript\n    {archive_dir: \"archives\", author: \"John Doe\"}\n    ```\n\n    Some files are not rendered in this way, e.g. `md`. The rendering results of markdown files are of type string. `Hexo` creates a `toString` function to make the conversion happen.\n\n    ``` javascript\n    result = toString(result, data);\n    ```\n\n    The source code of `toString` function is as follows.\n\n    ``` javascript\n    function toString(result, options) {\n      if (!options.hasOwnProperty('toString') || typeof result === 'string') return result;\n\n      if (typeof options.toString === 'function') {\n        return options.toString(result);\n      } else if (typeof result === 'object') {\n        return JSON.stringify(result);\n      } else if (result.toString) {\n        return result.toString();\n      }\n\n      return result;\n    }\n    ```\n\n    Because `md` files's rendering results are of type string. so `toString` returns the original result directly in this case. Sometimes it needs to be further processed.\n\n    Afterwards, `onRenderEnd` is followed in order to modify some contents of `result` after rendering.\n\n    ``` javascript\n    if (data.onRenderEnd) {\n      return data.onRenderEnd(result);\n    }\n    ```\n\n    Then the result is transferred to the next `then` function, and the `after_render` filter is executed.\n\n    ``` javascript\n    }).then(function(result) {\n      // output is the file's final type, e.g. html, css\n      // the result of self.getOutput('md') would be 'html',\n      // because the rendering result of a markdown file is of type html\n      var output = self.getOutput(ext) || ext;\n      return ctx.execFilter('after_render:' + output, result, {\n        context: ctx,\n        args: [data]\n      });\n    }).asCallback(callback);\n    ```\n\n    To make it even clearer about how to use `execFilter`, Here I give an example from the official Hexo website, the following code is used to uglify js files.\n\n      ``` javascript\n    var UglifyJS = require('uglify-js');\n\n    hexo.extend.filter.register('after_render:js', function(str, data){\n      var result = UglifyJS.minify(str);\n      return result.code;\n    });\n      ```\n\n    This is the source code of `register` function.\n\n    ``` javascript\n    Filter.prototype.register = function(type, fn, priority) {\n      if (!priority) {\n        if (typeof type === 'function') {\n          priority = fn;\n          fn = type;\n          type = 'after_post_render';\n        }\n      }\n\n      if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n      type = typeAlias[type] || type;\n      priority = priority == null ? 10 : priority;\n\n      var store = this.store[type] = this.store[type] || [];\n\n      fn.priority = priority;\n      store.push(fn);\n\n      store.sort(function(a, b) {\n        return a.priority - b.priority;\n      });\n    };\n    ```\n\n    As you can see, it stores `type`(e.g. `after_post_render:js`) and the corresponding processing function in the `this.store` object. After the registration is over, `Filter.prototype.exec` executes the specified filter (`after_post_render:js` in this case).\n\n    ``` javascript\n    Filter.prototype.exec = function(type, data, options) {\n      options = options || {};\n\n      // filters are the functions that are registered before.\n      // this.list(type) gets these functions from this.store\n      var filters = this.list(type);\n      var ctx = options.context;\n      var args = options.args || [];\n\n      args.unshift(data);\n\n      return Promise.each(filters, function(filter) {\n        return Promise.method(filter).apply(ctx, args).then(function(result) {\n          /* when the processing is over, the processing function returns\n             the processed result, if the result equals null, it will return\n             the original one without processed by the filter(data), if the\n             result is not null, it will return the result processed by the\n             filter */\n          args[0] = result == null ? data : result;\n          return args[0];\n        });\n      }).then(function() {\n        return args[0];\n      });\n    };\n  ```\n\n    OK, this part is over, let's look into the `theme/index.js` file next.\n\n    ``` javascript\n    'use strict';\n\n    var pathFn = require('path');\n    var util = require('util');\n    var Box = require('../box');\n    var View = require('./view');\n    var I18n = require('hexo-i18n');\n    var _ = require('lodash');\n\n    function Theme(ctx) {\n      Box.call(this, ctx, ctx.theme_dir);\n\n      this.config = {};\n\n      this.views = {};\n\n      this.processors = [\n        require('./processors/config'),\n        require('./processors/i18n'),\n        require('./processors/source'),\n        require('./processors/view')\n      ];\n\n      var languages = ctx.config.language;\n\n      if (!Array.isArray(languages)) {\n        languages = [languages];\n      }\n\n      languages.push('default');\n\n      this.i18n = new I18n({\n        languages: _(languages).compact().uniq().value()\n      });\n\n      var _View = this.View = function(path, data) {\n        View.call(this, path, data);\n      };\n\n      util.inherits(_View, View);\n\n      _View.prototype._theme = this;\n      _View.prototype._render = ctx.render;\n      _View.prototype._helper = ctx.extend.helper;\n    }\n\n    util.inherits(Theme, Box);\n    ```\n\n    The function `Theme` also calls `Box()`, then it adds several processors and sets languages and views.\n\n    Then it bind locals.\n\n    ``` javascript\n    Hexo.prototype._bindLocals = function() {\n    var db = this.database;\n    var locals = this.locals;\n    var self = this;\n\n    locals.set('posts', function() {\n      var query = {};\n\n      if (!self.config.future) {\n        query.date = {$lte: Date.now()};\n      }\n\n      if (!self._showDrafts()) {\n        query.published = true;\n      }\n\n      return db.model('Post').find(query);\n    });\n\n    locals.set('pages', function() {\n      var query = {};\n\n      if (!self.config.future) {\n        query.date = {$lte: Date.now()};\n      }\n\n      return db.model('Page').find(query);\n    });\n\n    locals.set('categories', function() {\n      return db.model('Category');\n    });\n\n    locals.set('tags', function() {\n      return db.model('Tag');\n    });\n\n    locals.set('data', function() {\n      var obj = {};\n\n      db.model('Data').forEach(function(data) {\n        obj[data._id] = data.data;\n      });\n\n      return obj;\n    });\n  };\n```\n\n4. After loading module is over, it calls `console` to execute the provided command\n  \n  ``` javascript\n  return loadModule(path, args).catch(function() {\n      log.error('Local hexo not found in %s', chalk.magenta(tildify(path)));\n      log.error('Try running: \\'npm install hexo --save\\'');\n      process.exit(2);\n    });\n  }).then(function(mod) {\n    if (mod) hexo = mod;\n    log = hexo.log;\n\n    require('./console')(hexo);\n\n    return hexo.init();\n  ```\n  \n  Let's look through the source code of `./console`.\n  \n  ``` javascript\n  'use strict';\n\n  module.exports = function(ctx) {\n    var console = ctx.extend.console;\n\n    console.register('help', 'Get help on a command.', {\n    }, require('./help'));\n\n    console.register('init', 'Create a new Hexo folder.', {\n    desc: 'Create a new Hexo folder at the specified path or the current directory.',\n    usage: '[destination]',\n    arguments: [\n      {name: 'destination', desc: 'Folder path. Initialize in current folder if not specified'}\n    ],\n    options: [\n      {name: '--no-clone', desc: 'Copy files instead of cloning from GitHub'},\n      {name: '--no-install', desc: 'Skip npm install'}\n    ]\n    }, require('./init'));\n\n    console.register('version', 'Display version information.', {\n    }, require('./version'));\n  };\n  ```\n  \n  It registers several commands using `console.register`, let's look through its source code.\n  \n  ``` javascript\n  Console.prototype.register = function(name, desc, options, fn) {\n    if (!name) throw new TypeError('name is required');\n\n    if (!fn) {\n      if (options) {\n        if (typeof options === 'function') {\n          fn = options;\n\n          if (typeof desc === 'object') { // name, options, fn\n            options = desc;\n            desc = '';\n          } else { // name, desc, fn\n            options = {};\n          }\n        } else {\n          throw new TypeError('fn must be a function');\n        }\n      } else {\n        // name, fn\n        if (typeof desc === 'function') {\n          fn = desc;\n          options = {};\n          desc = '';\n        } else {\n          throw new TypeError('fn must be a function');\n        }\n      }\n    }\n\n    if (fn.length > 1) {\n      fn = Promise.promisify(fn);\n    } else {\n      fn = Promise.method(fn);\n    }\n\n    var c = this.store[name.toLowerCase()] = fn;\n    c.options = options;\n    c.desc = desc;\n\n    this.alias = abbrev(Object.keys(this.store));\n  };\n  ```\n","source":"_posts/Hexo-Source-Code-Demystified.md","raw":"title: Hexo Source Code Demystified\ndate: 2016-07-17 07:52:23\ntags:\ncategories: Coding\nthumbnail:\n---\n\n# Preface\nHexo is an excellent static blog generator, I read its source code recently, and I think it's worth sharing the inner mechanism of its source code.\n\n# Generator\nWhen you run the command `hexo generate`, hexo will generate all the static files for you. This is the part we are going to start with. The directory where `hexo generate` is executed is `/home/searene/Development/hexo-twenty-sixteen` in this tutorial.\n\nFirst, we can find the location of the tool `hexo` with the command `which`.\n\n``` shell\nwhich hexo\n```\n\nMy output is\n\n``` shell\n/home/searene/.nvm/versions/node/v5.0.0/bin/hexo\n```\n\nThis is a soft link, we get the location of the original file with `ll`\n\n``` shell\nll ~/.nvm/versions/node/v5.0.0/bin/hexo \n\nlrwxrwxrwx 1 searene searene 37 May 24 01:15 /home/searene/.nvm/versions/node/v5.0.0/bin/hexo -> ../lib/node_modules/hexo-cli/bin/hexo\n```\n\nThe contents of `hexo` are as follows.\n\n``` javascript\n#!/usr/bin/env node\n'use strict';\nrequire('../lib/hexo')();\n```\n\nIt requires a js file called `hexo`, which is located in `/home/searene/.nvm/versions/node/v5.0.0/lib/node_modules/hexo-cli/lib/hexo.js` in my case. The beginning part of the file is as follows.\n\n``` javascript\n'use strict';\n\nvar chalk = require('chalk');\nvar tildify = require('tildify');\nvar pathFn = require('path');\nvar Promise = require('bluebird');\nvar Context = require('./context');\nvar findPkg = require('./find_pkg');\nvar goodbye = require('./goodbye');\nvar minimist = require('minimist');\nvar camelCaseKeys = require('hexo-util/lib/camel_case_keys');\n```\n\nIt requires several packages.\n\n1. `chalk` is used for colorful outputs,.\n2. `tildify` is used to convert an absolute path to a tilde path:, like `/Users/sindresorhus/dev` → `~/dev`.\n3. `context` is used to //TODO\n4. `find_pkg` is used to find the local hexo directory that contains `node_modules`\n5. `goodbye` is used to generate a random goodbye sentence.\n6. `minimist` is used to parse argument options.\n7. `camelCaseKeys` is used to convert keys in parameters to the camelCased ones\n\nLet's continue to read the file.\n\n``` javascript\nfunction entry(cwd, args) {\n  // cwd is the directory where you invoked the node command\n  cwd = cwd || process.cwd();\n  // the keys in args is camelCased\n  args = camelCaseKeys(args || minimist(process.argv.slice(2)));\n\n  var hexo = new Context(cwd, args);\n  var log = hexo.log;\n\n  // Change the title in console\n  process.title = 'hexo';\n\n  function handleError(err) {\n    log.fatal(err);\n    process.exit(2);\n  }\n  /* findPkg searched upwards from the working directory(cwd) to\n     find a directory containing package.json where the key hexo lies,\n     a promise is returned by the function. */\n  return findPkg(cwd, args).then(function(path) {\n    if (!path) return;\n\n    /* hexo.base_dir is set as the found directory, which is \n       /home/searene/Development/hexo-twenty-sixteen */\n    hexo.base_dir = path;\n\n    /* loadModule loads the hexo package located in the working\n       directory(/home/searene/Development/hexo-twenty-sixteen)\n       and returns a promise, the resolve function will carry a\n       newly-constructed Hexo(return new Hexo(path, args)) object \n       afterwards. From now on, local hexo will be used instead \n       of the global one. */\n    return loadModule(path, args).catch(function() {\n      log.error('Local hexo not found in %s', chalk.magenta(tildify(path)));\n      log.error('Try running: \\'npm install hexo --save\\'');\n      process.exit(2);\n    });\n  }).then(function(mod) {\n    if (mod) hexo = mod;\n    log = hexo.log;\n\n    require('./console')(hexo);\n\n    return hexo.init();\n  }).then(function() {\n    var cmd = '';\n\n    if (!args.h && !args.help) {\n      cmd = args._.shift();\n\n      if (cmd) {\n        var c = hexo.extend.console.get(cmd);\n        if (!c) cmd = 'help';\n      } else {\n        cmd = 'help';\n      }\n    } else {\n      cmd = 'help';\n    }\n\n    watchSignal(hexo);\n\n    return hexo.call(cmd, args).then(function() {\n      return hexo.exit();\n    }).catch(function(err) {\n      return hexo.exit(err).then(function() {\n        handleError(err);\n      });\n    });\n  }).catch(handleError);\n}\n\nentry.console = {\n  init: require('./console/init'),\n  help: require('./console/help'),\n  version: require('./console/version')\n};\n\nentry.version = require('../package.json').version;\n\nfunction loadModule(path, args) {\n  return Promise.try(function() {\n    var modulePath = pathFn.join(path, 'node_modules', 'hexo');\n    var Hexo = require(modulePath);\n\n    return new Hexo(path, args);\n  });\n}\n\nfunction watchSignal(hexo) {\n  process.on('SIGINT', function() {\n    hexo.log.info(goodbye());\n    hexo.unwatch();\n\n    hexo.exit().then(function() {\n      process.exit();\n    });\n  });\n}\n\nmodule.exports = entry;\n```\n\nNotice the last part\n\n``` javascript\nmodule.exports = entry;\n```\n\nRemember the contents of `hexo.js`?\n\n``` javascript\nrequire('../lib/hexo')();\n```\n\nSo what `hexo.js` does is calling the `entry` function. Here comes the question, what does `entry` do?\n\n1. It searched upwards from the working directory looking for `package.json` containing the key `hexo`.\n\n    ``` javascript\n    function findPkg(cwd, args) {\n      args = args || {};\n    \n      if (args.cwd) {\n        cwd = pathFn.resolve(cwd, args.cwd);\n      }\n    \n      return checkPkg(cwd);\n    }\n    \n    function checkPkg(path) {\n      var pkgPath = pathFn.join(path, 'package.json');\n    \n      return fs.readFile(pkgPath).then(function(content) {\n        var json = JSON.parse(content);\n        if (typeof json.hexo === 'object') return path;\n      }).catch(function(err) {\n        if (err && err.cause.code === 'ENOENT') {\n          var parent = pathFn.dirname(path);\n    \n          if (parent === path) return;\n          return checkPkg(parent);\n        }\n    \n        throw err;\n      });\n    }\n    ```\n\n2.  Then it loads the local hexo package.\n\n    ``` javascript\n    function loadModule(path, args) {\n      return Promise.try(function() {\n        var modulePath = pathFn.join(path, 'node_modules', 'hexo');\n        var Hexo = require(modulePath);\n    \n        return new Hexo(path, args);\n      });\n    }\n    ```\n3. `new` a `Hexo` object. The souce code of `Hexo` is as follows:\n\n  ``` javascript\n  function Hexo(base, args) {\n    base = base || process.cwd();\n    args = args || {};\n\n    EventEmitter.call(this);\n\n    this.base_dir = base + sep;\n    this.public_dir = pathFn.join(base, 'public') + sep;\n    this.source_dir = pathFn.join(base, 'source') + sep;\n    this.plugin_dir = pathFn.join(base, 'node_modules') + sep;\n    this.script_dir = pathFn.join(base, 'scripts') + sep;\n    this.scaffold_dir = pathFn.join(base, 'scaffolds') + sep;\n    this.theme_dir = pathFn.join(base, 'themes', defaultConfig.theme) + sep;\n    this.theme_script_dir = pathFn.join(this.theme_dir, 'scripts') + sep;\n\n    this.env = {\n      args: args,\n      debug: Boolean(args.debug),\n      safe: Boolean(args.safe),\n      silent: Boolean(args.silent),\n      env: process.env.NODE_ENV || 'development',\n      version: pkg.version,\n      init: false\n    };\n\n    this.config_path = args.config ? pathFn.resolve(base, args.config)\n                                   : pathFn.join(base, '_config.yml');\n\n    this.extend = {\n      console: new extend.Console(),\n      deployer: new extend.Deployer(),\n      filter: new extend.Filter(),\n      generator: new extend.Generator(),\n      helper: new extend.Helper(),\n      migrator: new extend.Migrator(),\n      processor: new extend.Processor(),\n      renderer: new extend.Renderer(),\n      tag: new extend.Tag()\n    };\n\n    this.config = _.cloneDeep(defaultConfig);\n\n    this.log = logger(this.env);\n\n    this.render = new Render(this);\n\n    this.route = new Router();\n\n    this.post = new Post(this);\n\n    this.scaffold = new Scaffold(this);\n\n    this._dbLoaded = false;\n\n    this._isGenerating = false;\n\n    this.database = new Database({\n      version: dbVersion,\n      path: pathFn.join(base, 'db.json')\n    });\n\n    registerModels(this);\n\n    this.source = new Source(this);\n    this.theme = new Theme(this);\n    this.locals = new Locals(this);\n    this._bindLocals();\n  }\n  ```\n\n  `Hexo` gets several directories such as `public_dir`, `source_dir`, etc. Then it defines the `this.extend` object, which contains `console`, `deployer`, etc. The format of each instance in the `this.extend` object is as follows:\n\n  ``` javascript\n  function Console() {\n    this.store = {};\n    this.alias = {};\n  }\n  //-------------------------\n  function Deployer() {\n    this.store = {};\n  }\n  //-------------------------\n  function Filter() {\n    this.store = {};\n  }\n  //-------------------------\n  function Generator() {\n    this.id = 0;\n    this.store = {};\n  }\n  //-------------------------\n  function Helper() {\n    this.store = {};\n  }\n  //-------------------------\n  function Migrator() {\n    this.store = {};\n  }\n  //-------------------------\n  function Processor() {\n    this.store = [];\n  }\n  //-------------------------\n  function Renderer() {\n    this.store = {};\n    this.storeSync = {};\n  }\n  //-------------------------\n  function Tag() {\n    this.env = new nunjucks.Environment(null, {\n      autoescape: false\n    });\n  }\n  //-------------------------\n  ```\n\n  All of them contain the same object `this.store`, which is used to map the name to the corresponding function. For example, `this.store` in `Console` is as follows:\n\n  ![this.store](http://i.imgur.com/fB0X6I3.png)\n\n  Each key in the object such as `clean`, `config` is of type string. What they are mapped to are functions that implement them.\n\n  Then it creates several instances, `logger`, `Render`, `Router`, `Post`, `Scaffold`, `database` etc. `logger` is used to log information on the console and the file, `Render` is used to render files(e.g. render markdownf files to html), `Router` is used to save all paths used in the site, `Post` is used to //TODO, `Scaffold` is used to //TODO, `database` is a [JSON-based database](https://github.com/tommy351/warehouse).\n\n  It then registered following schemas using `registerModels(this)`.\n  \n  ``` javascript\n  exports.Asset = require('./asset');\n  exports.Cache = require('./cache');\n  exports.Category = require('./category');\n  exports.Data = require('./data');\n  exports.Page = require('./page');\n  exports.Post = require('./post');\n  exports.PostAsset = require('./post_asset');\n  exports.PostCategory = require('./post_category');\n  exports.PostTag = require('./post_tag');\n  exports.Tag = require('./tag');\n  ```\n\n  Afterwards, two instances are initiated, `Source`, `Theme`,which represents `source` and `theme` folders respectively. They are both being processed by `Box`.\n\n  First, let's look at `source`.js.\n\n  ``` javascript\n  'use strict';\n\n  var Box = require('../box');\n  var util = require('util');\n\n  function Source(ctx) {\n    Box.call(this, ctx, ctx.source_dir);\n\n    this.processors = ctx.extend.processor.list();\n  }\n\n  util.inherits(Source, Box);\n\n  module.exports = Source;\n  ```\n\n  `ctx` refers to `Hexo`, `Source` function calls `Box` and gets the processor list, then it inherits `Box`. `Box` is used to read and render files in `source` or `theme` folder. To find out what's going on, we need to look into the source code of `Box`.\n\n  ``` javascript\n    function Box(ctx, base, options) {\n      EventEmitter.call(this);\n\n      this.options = _.assign({\n        persistent: true\n      }, options);\n\n      // if the last character of the working directory \n      // is not /, add it to the end of base\n      if (base.substring(base.length - 1) !== sep) {\n        base += sep;\n      }\n\n      this.context = ctx;\n      this.base = base;\n      this.processors = [];\n      this._processingFiles = {};\n      this.watcher = null;\n      this.Cache = ctx.model('Cache');\n      this.File = this._createFileClass();\n    }\n  ```\n\n  It sets several variables, then it gets the `Cache` model. The source code of `ctx.model` function is as follows.\n\n  ``` javascript\n    Hexo.prototype.model = function(name, schema) {\n    return this.database.model(name, schema);\n  };\n  ```\n\n  If the model was created before, `this.database.model` will just return the model, or it will create the model with the specified `name` and `schema`.\n\n  ``` javascript\n    Database.prototype.model = function(name, schema) {\n      if (this._models[name]) {\n        return this._models[name];\n      }\n\n      var model = this._models[name] = new this.Model(name, schema);\n      return model;\n    };\n  ```\n\n  Note that We have created the model in the `register_model` function, which is located in the `Hexo` function. When the code `new Hexo` is run, all the models are registered.\n\n  ``` javascript\n  'use strict';\n\n  var models = require('../models');\n\n  module.exports = function(ctx) {\n    var db = ctx.database;\n\n    var keys = Object.keys(models);\n    var key = '';\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      key = keys[i];\n      db.model(key, models[key](ctx));\n    }\n  };\n  ```\n\n  The models created here were as follows.\n\n  ``` javascript\n  'use strict';\n\n  exports.Asset = require('./asset');\n  exports.Cache = require('./cache');\n  exports.Category = require('./category');\n  exports.Data = require('./data');\n  exports.Page = require('./page');\n  exports.Post = require('./post');\n  exports.PostAsset = require('./post_asset');\n  exports.PostCategory = require('./post_category');\n  exports.PostTag = require('./post_tag');\n  exports.Tag = require('./tag');\n  ```\n\n  Which includes `cache`. So we can get the created `cache` model with `this.Cache = ctx.model('Cache');`. This model is used to cache generated posts and stuff, and store a hashed value for all of them. If the hash value is identical, hexo will not generate the post again, which reduces the generation time to a degree.\n\n  Now we only have a line left in the `box` function.\n\n  ``` javascript\n  this.File = this._createFileClass();\n  ```\n\n  `this.File` is used to read file contents and render it. The source code of `_createFileClass()` function is as follows.\n\n  ``` javascript\n  Box.prototype._createFileClass = function() {\n    //ctx is Hexo\n    var ctx = this.context;\n\n    var _File = function(data) {\n      File.call(this, data);\n    };\n\n    require('util').inherits(_File, File);\n\n    _File.prototype.box = this;\n\n    _File.prototype.render = function(options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      return ctx.render.render({\n        path: this.source\n      }, options).asCallback(callback);\n    };\n\n    _File.prototype.renderSync = function(options) {\n      return ctx.render.renderSync({\n        path: this.source\n      }, options);\n    };\n\n    return _File;\n  };\n  ```\n\n  `File.call(this, data)` sets `_File`'s `source`, `path`, `params` and `type` as the same as ones in `data`. You can see it in the source of the `File` constructor.\n\n  ``` javascript\n  function File(data) {\n    this.source = data.source;\n    this.path = data.path;\n    this.params = data.params;\n    this.type = data.type;\n  }\n  ```\n\n  `_File` inherits `File` afterwards. Then it sets `render` and `renderSync` function of `_File` and returns it. As you can tell from their names, they are used to render files or strings, like this:\n\n  ``` javascript\n  hexo.render.render({text: 'example', engine: 'swig'}).then(function(result){\n    // ...\n  });\n  ```\n\n  ``` javascript\n  hexo.render.render({path: 'path/to/file.swig'}).then(function(result){\n    // ...\n  });\n  ```\n\n  ## Render\n\n  Let's look into the `Render` object.\n\n  ``` javascript\n  function Render(ctx) {\n    this.context = ctx;\n    this.renderer = ctx.extend.renderer;\n  }\n  ```\n\n  Still remember `renderer`? It's used to store all the information about rendering.\n\n  ``` javascript\n  function Renderer() {\n    this.store = {};\n    this.storeSync = {};\n  }\n  ```\n\n  The most important function in `render.js` is `Render.prototype.render`, the function is used to render text or files, the source code of it is as follows.\n\n  ``` javascript\n  Render.prototype.render = function(data, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    var ctx = this.context;\n    var self = this;\n    var ext = '';\n\n    return new Promise(function(resolve, reject) {\n      if (!data) return reject(new TypeError('No input file or string!'));\n      if (data.text != null) return resolve(data.text);\n      if (!data.path) return reject(new TypeError('No input file or string!'));\n\n      fs.readFile(data.path).then(resolve, reject);\n    }).then(function(text) {\n      data.text = text;\n      ext = data.engine || getExtname(data.path);\n      if (!ext || !self.isRenderable(ext)) return text;\n\n      var renderer = self.getRenderer(ext);\n      return renderer.call(ctx, data, options);\n    }).then(function(result) {\n      result = toString(result, data);\n      if (data.onRenderEnd) {\n        return data.onRenderEnd(result);\n      }\n\n      return result;\n    }).then(function(result) {\n      var output = self.getOutput(ext) || ext;\n      return ctx.execFilter('after_render:' + output, result, {\n        context: ctx,\n        args: [data]\n      });\n    }).asCallback(callback);\n  };\n  ```\n    \n  * First, it checks if `data` exists or not, `data` contains text(`data.text`) or file(`data.path`) that is going to be rendered, it throws an error if it doesn't exist.\n    \n    ``` javascript\n    if (!data) return reject(new TypeError('No input file or string!'));\n    ```\n\n  * Then if `data.text` exists, it will try to render the text first.\n\n    ``` javascript\n    if (data.text != null) return resolve(data.text);\n    ```\n\n  * If `data.path` exists, it will try to analyze the file specified by `data.path`.\n\n    ``` javascript\n    if (!data.path) return reject(new TypeError('No input file or string!'));\n    fs.readFile(data.path).then(resolve, reject);\n    ```\n\n  * It tries to find out if the rendering engine exists in `renderer.store`, which maps the rendering engine's name to the corresponding rendering function. If the engine exists, it will call the corresponding function to render it, return the original text if the engine doesn't exist.\n\n    ``` javascript\n    }).then(function(text) {\n    data.text = text;\n    ext = data.engine || getExtname(data.path);\n    if (!ext || !self.isRenderable(ext)) return text;\n\n    // get the function used to render\n    var renderer = self.getRenderer(ext);\n    return renderer.call(ctx, data, options);\n    ```\n\n    `renderer` refers to the function that is used to render text or files. What `renderer.call()` returns is usually of JSON format. For example, if the file to be rendered is like this:\n\n    ``` javascript\n    archive_dir: archives\n    author: John Doe\n    ```\n\n    The rendered result will be an object like this:\n\n    ``` javascript\n    {archive_dir: \"archives\", author: \"John Doe\"}\n    ```\n\n    Some files are not rendered in this way, e.g. `md`. The rendering results of markdown files are of type string. `Hexo` creates a `toString` function to make the conversion happen.\n\n    ``` javascript\n    result = toString(result, data);\n    ```\n\n    The source code of `toString` function is as follows.\n\n    ``` javascript\n    function toString(result, options) {\n      if (!options.hasOwnProperty('toString') || typeof result === 'string') return result;\n\n      if (typeof options.toString === 'function') {\n        return options.toString(result);\n      } else if (typeof result === 'object') {\n        return JSON.stringify(result);\n      } else if (result.toString) {\n        return result.toString();\n      }\n\n      return result;\n    }\n    ```\n\n    Because `md` files's rendering results are of type string. so `toString` returns the original result directly in this case. Sometimes it needs to be further processed.\n\n    Afterwards, `onRenderEnd` is followed in order to modify some contents of `result` after rendering.\n\n    ``` javascript\n    if (data.onRenderEnd) {\n      return data.onRenderEnd(result);\n    }\n    ```\n\n    Then the result is transferred to the next `then` function, and the `after_render` filter is executed.\n\n    ``` javascript\n    }).then(function(result) {\n      // output is the file's final type, e.g. html, css\n      // the result of self.getOutput('md') would be 'html',\n      // because the rendering result of a markdown file is of type html\n      var output = self.getOutput(ext) || ext;\n      return ctx.execFilter('after_render:' + output, result, {\n        context: ctx,\n        args: [data]\n      });\n    }).asCallback(callback);\n    ```\n\n    To make it even clearer about how to use `execFilter`, Here I give an example from the official Hexo website, the following code is used to uglify js files.\n\n      ``` javascript\n    var UglifyJS = require('uglify-js');\n\n    hexo.extend.filter.register('after_render:js', function(str, data){\n      var result = UglifyJS.minify(str);\n      return result.code;\n    });\n      ```\n\n    This is the source code of `register` function.\n\n    ``` javascript\n    Filter.prototype.register = function(type, fn, priority) {\n      if (!priority) {\n        if (typeof type === 'function') {\n          priority = fn;\n          fn = type;\n          type = 'after_post_render';\n        }\n      }\n\n      if (typeof fn !== 'function') throw new TypeError('fn must be a function');\n\n      type = typeAlias[type] || type;\n      priority = priority == null ? 10 : priority;\n\n      var store = this.store[type] = this.store[type] || [];\n\n      fn.priority = priority;\n      store.push(fn);\n\n      store.sort(function(a, b) {\n        return a.priority - b.priority;\n      });\n    };\n    ```\n\n    As you can see, it stores `type`(e.g. `after_post_render:js`) and the corresponding processing function in the `this.store` object. After the registration is over, `Filter.prototype.exec` executes the specified filter (`after_post_render:js` in this case).\n\n    ``` javascript\n    Filter.prototype.exec = function(type, data, options) {\n      options = options || {};\n\n      // filters are the functions that are registered before.\n      // this.list(type) gets these functions from this.store\n      var filters = this.list(type);\n      var ctx = options.context;\n      var args = options.args || [];\n\n      args.unshift(data);\n\n      return Promise.each(filters, function(filter) {\n        return Promise.method(filter).apply(ctx, args).then(function(result) {\n          /* when the processing is over, the processing function returns\n             the processed result, if the result equals null, it will return\n             the original one without processed by the filter(data), if the\n             result is not null, it will return the result processed by the\n             filter */\n          args[0] = result == null ? data : result;\n          return args[0];\n        });\n      }).then(function() {\n        return args[0];\n      });\n    };\n  ```\n\n    OK, this part is over, let's look into the `theme/index.js` file next.\n\n    ``` javascript\n    'use strict';\n\n    var pathFn = require('path');\n    var util = require('util');\n    var Box = require('../box');\n    var View = require('./view');\n    var I18n = require('hexo-i18n');\n    var _ = require('lodash');\n\n    function Theme(ctx) {\n      Box.call(this, ctx, ctx.theme_dir);\n\n      this.config = {};\n\n      this.views = {};\n\n      this.processors = [\n        require('./processors/config'),\n        require('./processors/i18n'),\n        require('./processors/source'),\n        require('./processors/view')\n      ];\n\n      var languages = ctx.config.language;\n\n      if (!Array.isArray(languages)) {\n        languages = [languages];\n      }\n\n      languages.push('default');\n\n      this.i18n = new I18n({\n        languages: _(languages).compact().uniq().value()\n      });\n\n      var _View = this.View = function(path, data) {\n        View.call(this, path, data);\n      };\n\n      util.inherits(_View, View);\n\n      _View.prototype._theme = this;\n      _View.prototype._render = ctx.render;\n      _View.prototype._helper = ctx.extend.helper;\n    }\n\n    util.inherits(Theme, Box);\n    ```\n\n    The function `Theme` also calls `Box()`, then it adds several processors and sets languages and views.\n\n    Then it bind locals.\n\n    ``` javascript\n    Hexo.prototype._bindLocals = function() {\n    var db = this.database;\n    var locals = this.locals;\n    var self = this;\n\n    locals.set('posts', function() {\n      var query = {};\n\n      if (!self.config.future) {\n        query.date = {$lte: Date.now()};\n      }\n\n      if (!self._showDrafts()) {\n        query.published = true;\n      }\n\n      return db.model('Post').find(query);\n    });\n\n    locals.set('pages', function() {\n      var query = {};\n\n      if (!self.config.future) {\n        query.date = {$lte: Date.now()};\n      }\n\n      return db.model('Page').find(query);\n    });\n\n    locals.set('categories', function() {\n      return db.model('Category');\n    });\n\n    locals.set('tags', function() {\n      return db.model('Tag');\n    });\n\n    locals.set('data', function() {\n      var obj = {};\n\n      db.model('Data').forEach(function(data) {\n        obj[data._id] = data.data;\n      });\n\n      return obj;\n    });\n  };\n```\n\n4. After loading module is over, it calls `console` to execute the provided command\n  \n  ``` javascript\n  return loadModule(path, args).catch(function() {\n      log.error('Local hexo not found in %s', chalk.magenta(tildify(path)));\n      log.error('Try running: \\'npm install hexo --save\\'');\n      process.exit(2);\n    });\n  }).then(function(mod) {\n    if (mod) hexo = mod;\n    log = hexo.log;\n\n    require('./console')(hexo);\n\n    return hexo.init();\n  ```\n  \n  Let's look through the source code of `./console`.\n  \n  ``` javascript\n  'use strict';\n\n  module.exports = function(ctx) {\n    var console = ctx.extend.console;\n\n    console.register('help', 'Get help on a command.', {\n    }, require('./help'));\n\n    console.register('init', 'Create a new Hexo folder.', {\n    desc: 'Create a new Hexo folder at the specified path or the current directory.',\n    usage: '[destination]',\n    arguments: [\n      {name: 'destination', desc: 'Folder path. Initialize in current folder if not specified'}\n    ],\n    options: [\n      {name: '--no-clone', desc: 'Copy files instead of cloning from GitHub'},\n      {name: '--no-install', desc: 'Skip npm install'}\n    ]\n    }, require('./init'));\n\n    console.register('version', 'Display version information.', {\n    }, require('./version'));\n  };\n  ```\n  \n  It registers several commands using `console.register`, let's look through its source code.\n  \n  ``` javascript\n  Console.prototype.register = function(name, desc, options, fn) {\n    if (!name) throw new TypeError('name is required');\n\n    if (!fn) {\n      if (options) {\n        if (typeof options === 'function') {\n          fn = options;\n\n          if (typeof desc === 'object') { // name, options, fn\n            options = desc;\n            desc = '';\n          } else { // name, desc, fn\n            options = {};\n          }\n        } else {\n          throw new TypeError('fn must be a function');\n        }\n      } else {\n        // name, fn\n        if (typeof desc === 'function') {\n          fn = desc;\n          options = {};\n          desc = '';\n        } else {\n          throw new TypeError('fn must be a function');\n        }\n      }\n    }\n\n    if (fn.length > 1) {\n      fn = Promise.promisify(fn);\n    } else {\n      fn = Promise.method(fn);\n    }\n\n    var c = this.store[name.toLowerCase()] = fn;\n    c.options = options;\n    c.desc = desc;\n\n    this.alias = abbrev(Object.keys(this.store));\n  };\n  ```\n","slug":"Hexo-Source-Code-Demystified","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdb00298arfpzhr0vup","content":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>Hexo is an excellent static blog generator, I read its source code recently, and I think it’s worth sharing the inner mechanism of its source code.</p>\n<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><p>When you run the command <code>hexo generate</code>, hexo will generate all the static files for you. This is the part we are going to start with. The directory where <code>hexo generate</code> is executed is <code>/home/searene/Development/hexo-twenty-sixteen</code> in this tutorial.</p>\n<p>First, we can find the location of the tool <code>hexo</code> with the command <code>which</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">which hexo</div></pre></td></tr></table></figure>\n<p>My output is</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/home/searene/.nvm/versions/node/v5.0.0/bin/hexo</div></pre></td></tr></table></figure>\n<p>This is a soft link, we get the location of the original file with <code>ll</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ll ~/.nvm/versions/node/v5.0.0/bin/hexo </div><div class=\"line\"></div><div class=\"line\">lrwxrwxrwx 1 searene searene 37 May 24 01:15 /home/searene/.nvm/versions/node/v5.0.0/bin/hexo -&gt; ../lib/node_modules/hexo-cli/bin/hexo</div></pre></td></tr></table></figure>\n<p>The contents of <code>hexo</code> are as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../lib/hexo'</span>)();</div></pre></td></tr></table></figure>\n<p>It requires a js file called <code>hexo</code>, which is located in <code>/home/searene/.nvm/versions/node/v5.0.0/lib/node_modules/hexo-cli/lib/hexo.js</code> in my case. The beginning part of the file is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tildify = <span class=\"built_in\">require</span>(<span class=\"string\">'tildify'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pathFn = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Context = <span class=\"built_in\">require</span>(<span class=\"string\">'./context'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> findPkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./find_pkg'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> goodbye = <span class=\"built_in\">require</span>(<span class=\"string\">'./goodbye'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> minimist = <span class=\"built_in\">require</span>(<span class=\"string\">'minimist'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> camelCaseKeys = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-util/lib/camel_case_keys'</span>);</div></pre></td></tr></table></figure>\n<p>It requires several packages.</p>\n<ol>\n<li><code>chalk</code> is used for colorful outputs,.</li>\n<li><code>tildify</code> is used to convert an absolute path to a tilde path:, like <code>/Users/sindresorhus/dev</code> → <code>~/dev</code>.</li>\n<li><code>context</code> is used to //TODO</li>\n<li><code>find_pkg</code> is used to find the local hexo directory that contains <code>node_modules</code></li>\n<li><code>goodbye</code> is used to generate a random goodbye sentence.</li>\n<li><code>minimist</code> is used to parse argument options.</li>\n<li><code>camelCaseKeys</code> is used to convert keys in parameters to the camelCased ones</li>\n</ol>\n<p>Let’s continue to read the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entry</span>(<span class=\"params\">cwd, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cwd is the directory where you invoked the node command</span></div><div class=\"line\">  cwd = cwd || process.cwd();</div><div class=\"line\">  <span class=\"comment\">// the keys in args is camelCased</span></div><div class=\"line\">  args = camelCaseKeys(args || minimist(process.argv.slice(<span class=\"number\">2</span>)));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> hexo = <span class=\"keyword\">new</span> Context(cwd, args);</div><div class=\"line\">  <span class=\"keyword\">var</span> log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Change the title in console</span></div><div class=\"line\">  process.title = <span class=\"string\">'hexo'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleError</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    log.fatal(err);</div><div class=\"line\">    process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/* findPkg searched upwards from the working directory(cwd) to</span></div><div class=\"line\">     find a directory containing package.json where the key hexo lies,</div><div class=\"line\">     a promise is returned by the function. */</div><div class=\"line\">  <span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* hexo.base_dir is set as the found directory, which is </span></div><div class=\"line\">       /home/searene/Development/hexo-twenty-sixteen */</div><div class=\"line\">    hexo.base_dir = path;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* loadModule loads the hexo package located in the working</span></div><div class=\"line\">       directory(/home/searene/Development/hexo-twenty-sixteen)</div><div class=\"line\">       and returns a promise, the resolve function will carry a</div><div class=\"line\">       newly-constructed Hexo(return new Hexo(path, args)) object </div><div class=\"line\">       afterwards. From now on, local hexo will be used instead </div><div class=\"line\">       of the global one. */</div><div class=\"line\">    <span class=\"keyword\">return</span> loadModule(path, args).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log.error(<span class=\"string\">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class=\"line\">      log.error(<span class=\"string\">'Try running: \\'npm install hexo --save\\''</span>);</div><div class=\"line\">      process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mod) hexo = mod;</div><div class=\"line\">    log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./console'</span>)(hexo);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> hexo.init();</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cmd = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!args.h &amp;&amp; !args.help) &#123;</div><div class=\"line\">      cmd = args._.shift();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (cmd) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = hexo.extend.console.get(cmd);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!c) cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    watchSignal(hexo);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> hexo.call(cmd, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> hexo.exit();</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> hexo.exit(err).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        handleError(err);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).catch(handleError);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">entry.console = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/init'</span>),</div><div class=\"line\">  <span class=\"attr\">help</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/help'</span>),</div><div class=\"line\">  <span class=\"attr\">version</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/version'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">entry.version = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>).version;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modulePath = pathFn.join(path, <span class=\"string\">'node_modules'</span>, <span class=\"string\">'hexo'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watchSignal</span>(<span class=\"params\">hexo</span>) </span>&#123;</div><div class=\"line\">  process.on(<span class=\"string\">'SIGINT'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    hexo.log.info(goodbye());</div><div class=\"line\">    hexo.unwatch();</div><div class=\"line\"></div><div class=\"line\">    hexo.exit().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      process.exit();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = entry;</div></pre></td></tr></table></figure>\n<p>Notice the last part</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = entry;</div></pre></td></tr></table></figure>\n<p>Remember the contents of <code>hexo.js</code>?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../lib/hexo'</span>)();</div></pre></td></tr></table></figure>\n<p>So what <code>hexo.js</code> does is calling the <code>entry</code> function. Here comes the question, what does <code>entry</code> do?</p>\n<ol>\n<li><p>It searched upwards from the working directory looking for <code>package.json</code> containing the key <code>hexo</code>.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findPkg</span>(<span class=\"params\">cwd, args</span>) </span>&#123;</div><div class=\"line\">  args = args || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (args.cwd) &#123;</div><div class=\"line\">    cwd = pathFn.resolve(cwd, args.cwd);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> checkPkg(cwd);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPkg</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pkgPath = pathFn.join(path, <span class=\"string\">'package.json'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fs.readFile(pkgPath).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parse(content);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> json.hexo === <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> path;</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err &amp;&amp; err.cause.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> parent = pathFn.dirname(path);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (parent === path) <span class=\"keyword\">return</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> checkPkg(parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Then it loads the local hexo package.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modulePath = pathFn.join(path, <span class=\"string\">'node_modules'</span>, <span class=\"string\">'hexo'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>new</code> a <code>Hexo</code> object. The souce code of <code>Hexo</code> is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hexo</span>(<span class=\"params\">base, args</span>) </span>&#123;</div><div class=\"line\">  base = base || process.cwd();</div><div class=\"line\">  args = args || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.base_dir = base + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.public_dir = pathFn.join(base, <span class=\"string\">'public'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.source_dir = pathFn.join(base, <span class=\"string\">'source'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.plugin_dir = pathFn.join(base, <span class=\"string\">'node_modules'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.script_dir = pathFn.join(base, <span class=\"string\">'scripts'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.scaffold_dir = pathFn.join(base, <span class=\"string\">'scaffolds'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme_dir = pathFn.join(base, <span class=\"string\">'themes'</span>, defaultConfig.theme) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme_script_dir = pathFn.join(<span class=\"keyword\">this</span>.theme_dir, <span class=\"string\">'scripts'</span>) + sep;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.env = &#123;</div><div class=\"line\">    <span class=\"attr\">args</span>: args,</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"built_in\">Boolean</span>(args.debug),</div><div class=\"line\">    <span class=\"attr\">safe</span>: <span class=\"built_in\">Boolean</span>(args.safe),</div><div class=\"line\">    <span class=\"attr\">silent</span>: <span class=\"built_in\">Boolean</span>(args.silent),</div><div class=\"line\">    <span class=\"attr\">env</span>: process.env.NODE_ENV || <span class=\"string\">'development'</span>,</div><div class=\"line\">    <span class=\"attr\">version</span>: pkg.version,</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config_path = args.config ? pathFn.resolve(base, args.config)</div><div class=\"line\">                                 : pathFn.join(base, <span class=\"string\">'_config.yml'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.extend = &#123;</div><div class=\"line\">    <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> extend.Console(),</div><div class=\"line\">    <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> extend.Deployer(),</div><div class=\"line\">    <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> extend.Filter(),</div><div class=\"line\">    <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> extend.Generator(),</div><div class=\"line\">    <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> extend.Helper(),</div><div class=\"line\">    <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> extend.Migrator(),</div><div class=\"line\">    <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> extend.Processor(),</div><div class=\"line\">    <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> extend.Renderer(),</div><div class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> extend.Tag()</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config = _.cloneDeep(defaultConfig);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.log = logger(<span class=\"keyword\">this</span>.env);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.render = <span class=\"keyword\">new</span> Render(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.route = <span class=\"keyword\">new</span> Router();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.post = <span class=\"keyword\">new</span> Post(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.scaffold = <span class=\"keyword\">new</span> Scaffold(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>._dbLoaded = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>._isGenerating = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.database = <span class=\"keyword\">new</span> Database(&#123;</div><div class=\"line\">    <span class=\"attr\">version</span>: dbVersion,</div><div class=\"line\">    <span class=\"attr\">path</span>: pathFn.join(base, <span class=\"string\">'db.json'</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  registerModels(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme = <span class=\"keyword\">new</span> Theme(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.locals = <span class=\"keyword\">new</span> Locals(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>._bindLocals();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Hexo</code> gets several directories such as <code>public_dir</code>, <code>source_dir</code>, etc. Then it defines the <code>this.extend</code> object, which contains <code>console</code>, <code>deployer</code>, etc. The format of each instance in the <code>this.extend</code> object is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Console</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.alias = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Deployer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Filter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Generator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.id = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Helper</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Processor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Renderer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.storeSync = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.env = <span class=\"keyword\">new</span> nunjucks.Environment(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">autoescape</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div></pre></td></tr></table></figure>\n<p>All of them contain the same object <code>this.store</code>, which is used to map the name to the corresponding function. For example, <code>this.store</code> in <code>Console</code> is as follows:</p>\n<p><img src=\"http://i.imgur.com/fB0X6I3.png\" alt=\"this.store\"></p>\n<p>Each key in the object such as <code>clean</code>, <code>config</code> is of type string. What they are mapped to are functions that implement them.</p>\n<p>Then it creates several instances, <code>logger</code>, <code>Render</code>, <code>Router</code>, <code>Post</code>, <code>Scaffold</code>, <code>database</code> etc. <code>logger</code> is used to log information on the console and the file, <code>Render</code> is used to render files(e.g. render markdownf files to html), <code>Router</code> is used to save all paths used in the site, <code>Post</code> is used to //TODO, <code>Scaffold</code> is used to //TODO, <code>database</code> is a <a href=\"https://github.com/tommy351/warehouse\" target=\"_blank\" rel=\"external\">JSON-based database</a>.</p>\n<p>It then registered following schemas using <code>registerModels(this)</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.Asset = <span class=\"built_in\">require</span>(<span class=\"string\">'./asset'</span>);</div><div class=\"line\">exports.Cache = <span class=\"built_in\">require</span>(<span class=\"string\">'./cache'</span>);</div><div class=\"line\">exports.Category = <span class=\"built_in\">require</span>(<span class=\"string\">'./category'</span>);</div><div class=\"line\">exports.Data = <span class=\"built_in\">require</span>(<span class=\"string\">'./data'</span>);</div><div class=\"line\">exports.Page = <span class=\"built_in\">require</span>(<span class=\"string\">'./page'</span>);</div><div class=\"line\">exports.Post = <span class=\"built_in\">require</span>(<span class=\"string\">'./post'</span>);</div><div class=\"line\">exports.PostAsset = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_asset'</span>);</div><div class=\"line\">exports.PostCategory = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_category'</span>);</div><div class=\"line\">exports.PostTag = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_tag'</span>);</div><div class=\"line\">exports.Tag = <span class=\"built_in\">require</span>(<span class=\"string\">'./tag'</span>);</div></pre></td></tr></table></figure>\n<p>Afterwards, two instances are initiated, <code>Source</code>, <code>Theme</code>,which represents <code>source</code> and <code>theme</code> folders respectively. They are both being processed by <code>Box</code>.</p>\n<p>First, let’s look at <code>source</code>.js.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Box = <span class=\"built_in\">require</span>(<span class=\"string\">'../box'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Source</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  Box.call(<span class=\"keyword\">this</span>, ctx, ctx.source_dir);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = ctx.extend.processor.list();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Source, Box);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Source;</div></pre></td></tr></table></figure>\n<p><code>ctx</code> refers to <code>Hexo</code>, <code>Source</code> function calls <code>Box</code> and gets the processor list, then it inherits <code>Box</code>. <code>Box</code> is used to read and render files in <code>source</code> or <code>theme</code> folder. To find out what’s going on, we need to look into the source code of <code>Box</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Box</span>(<span class=\"params\">ctx, base, options</span>) </span>&#123;</div><div class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.options = _.assign(&#123;</div><div class=\"line\">    <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;, options);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// if the last character of the working directory </span></div><div class=\"line\">  <span class=\"comment\">// is not /, add it to the end of base</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (base.substring(base.length - <span class=\"number\">1</span>) !== sep) &#123;</div><div class=\"line\">    base += sep;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.context = ctx;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = base;</div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>._processingFiles = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.watcher = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.Cache = ctx.model(<span class=\"string\">'Cache'</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.File = <span class=\"keyword\">this</span>._createFileClass();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It sets several variables, then it gets the <code>Cache</code> model. The source code of <code>ctx.model</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Hexo.prototype.model = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, schema</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.database.model(name, schema);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>If the model was created before, <code>this.database.model</code> will just return the model, or it will create the model with the specified <code>name</code> and <code>schema</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Database.prototype.model = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, schema</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._models[name]) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._models[name];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> model = <span class=\"keyword\">this</span>._models[name] = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.Model(name, schema);</div><div class=\"line\">  <span class=\"keyword\">return</span> model;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Note that We have created the model in the <code>register_model</code> function, which is located in the <code>Hexo</code> function. When the code <code>new Hexo</code> is run, all the models are registered.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> models = <span class=\"built_in\">require</span>(<span class=\"string\">'../models'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> db = ctx.database;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(models);</div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = keys.length; i &lt; len; i++) &#123;</div><div class=\"line\">    key = keys[i];</div><div class=\"line\">    db.model(key, models[key](ctx));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The models created here were as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">exports.Asset = <span class=\"built_in\">require</span>(<span class=\"string\">'./asset'</span>);</div><div class=\"line\">exports.Cache = <span class=\"built_in\">require</span>(<span class=\"string\">'./cache'</span>);</div><div class=\"line\">exports.Category = <span class=\"built_in\">require</span>(<span class=\"string\">'./category'</span>);</div><div class=\"line\">exports.Data = <span class=\"built_in\">require</span>(<span class=\"string\">'./data'</span>);</div><div class=\"line\">exports.Page = <span class=\"built_in\">require</span>(<span class=\"string\">'./page'</span>);</div><div class=\"line\">exports.Post = <span class=\"built_in\">require</span>(<span class=\"string\">'./post'</span>);</div><div class=\"line\">exports.PostAsset = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_asset'</span>);</div><div class=\"line\">exports.PostCategory = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_category'</span>);</div><div class=\"line\">exports.PostTag = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_tag'</span>);</div><div class=\"line\">exports.Tag = <span class=\"built_in\">require</span>(<span class=\"string\">'./tag'</span>);</div></pre></td></tr></table></figure>\n<p>Which includes <code>cache</code>. So we can get the created <code>cache</code> model with <code>this.Cache = ctx.model(&#39;Cache&#39;);</code>. This model is used to cache generated posts and stuff, and store a hashed value for all of them. If the hash value is identical, hexo will not generate the post again, which reduces the generation time to a degree.</p>\n<p>Now we only have a line left in the <code>box</code> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.File = <span class=\"keyword\">this</span>._createFileClass();</div></pre></td></tr></table></figure>\n<p><code>this.File</code> is used to read file contents and render it. The source code of <code>_createFileClass()</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Box.prototype._createFileClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//ctx is Hexo</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>.context;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _File = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    File.call(<span class=\"keyword\">this</span>, data);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).inherits(_File, File);</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.box = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      callback = options;</div><div class=\"line\">      options = &#123;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.render.render(&#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.source</div><div class=\"line\">    &#125;, options).asCallback(callback);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.renderSync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.render.renderSync(&#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.source</div><div class=\"line\">    &#125;, options);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> _File;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>File.call(this, data)</code> sets <code>_File</code>‘s <code>source</code>, <code>path</code>, <code>params</code> and <code>type</code> as the same as ones in <code>data</code>. You can see it in the source of the <code>File</code> constructor.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">File</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.source = data.source;</div><div class=\"line\">  <span class=\"keyword\">this</span>.path = data.path;</div><div class=\"line\">  <span class=\"keyword\">this</span>.params = data.params;</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = data.type;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>_File</code> inherits <code>File</code> afterwards. Then it sets <code>render</code> and <code>renderSync</code> function of <code>_File</code> and returns it. As you can tell from their names, they are used to render files or strings, like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo.render.render(&#123;<span class=\"attr\">text</span>: <span class=\"string\">'example'</span>, <span class=\"attr\">engine</span>: <span class=\"string\">'swig'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo.render.render(&#123;<span class=\"attr\">path</span>: <span class=\"string\">'path/to/file.swig'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><p>Let’s look into the <code>Render</code> object.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Render</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.context = ctx;</div><div class=\"line\">  <span class=\"keyword\">this</span>.renderer = ctx.extend.renderer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Still remember <code>renderer</code>? It’s used to store all the information about rendering.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Renderer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.storeSync = &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The most important function in <code>render.js</code> is <code>Render.prototype.render</code>, the function is used to render text or files, the source code of it is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">Render.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, options, callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    callback = options;</div><div class=\"line\">    options = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>.context;</div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> ext = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.text != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> resolve(data.text);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data.path) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\"></div><div class=\"line\">    fs.readFile(data.path).then(resolve, reject);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    data.text = text;</div><div class=\"line\">    ext = data.engine || getExtname(data.path);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ext || !self.isRenderable(ext)) <span class=\"keyword\">return</span> text;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> renderer = self.getRenderer(ext);</div><div class=\"line\">    <span class=\"keyword\">return</span> renderer.call(ctx, data, options);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    result = toString(result, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.onRenderEnd) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data.onRenderEnd(result);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = self.getOutput(ext) || ext;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.execFilter(<span class=\"string\">'after_render:'</span> + output, result, &#123;</div><div class=\"line\">      <span class=\"attr\">context</span>: ctx,</div><div class=\"line\">      <span class=\"attr\">args</span>: [data]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).asCallback(callback);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>First, it checks if <code>data</code> exists or not, <code>data</code> contains text(<code>data.text</code>) or file(<code>data.path</code>) that is going to be rendered, it throws an error if it doesn’t exist.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>Then if <code>data.text</code> exists, it will try to render the text first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (data.text != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> resolve(data.text);</div></pre></td></tr></table></figure>\n</li>\n<li><p>If <code>data.path</code> exists, it will try to analyze the file specified by <code>data.path</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!data.path) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\">fs.readFile(data.path).then(resolve, reject);</div></pre></td></tr></table></figure>\n</li>\n<li><p>It tries to find out if the rendering engine exists in <code>renderer.store</code>, which maps the rendering engine’s name to the corresponding rendering function. If the engine exists, it will call the corresponding function to render it, return the original text if the engine doesn’t exist.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">data.text = text;</div><div class=\"line\">ext = data.engine || getExtname(data.path);</div><div class=\"line\"><span class=\"keyword\">if</span> (!ext || !self.isRenderable(ext)) <span class=\"keyword\">return</span> text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get the function used to render</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = self.getRenderer(ext);</div><div class=\"line\"><span class=\"keyword\">return</span> renderer.call(ctx, data, options);</div></pre></td></tr></table></figure>\n<p><code>renderer</code> refers to the function that is used to render text or files. What <code>renderer.call()</code> returns is usually of JSON format. For example, if the file to be rendered is like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">archive_dir: archives</div><div class=\"line\">author: John Doe</div></pre></td></tr></table></figure>\n<p>The rendered result will be an object like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">archive_dir</span>: <span class=\"string\">\"archives\"</span>, <span class=\"attr\">author</span>: <span class=\"string\">\"John Doe\"</span>&#125;</div></pre></td></tr></table></figure>\n<p>Some files are not rendered in this way, e.g. <code>md</code>. The rendering results of markdown files are of type string. <code>Hexo</code> creates a <code>toString</code> function to make the conversion happen.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = toString(result, data);</div></pre></td></tr></table></figure>\n<p>The source code of <code>toString</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\">result, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!options.hasOwnProperty(<span class=\"string\">'toString'</span>) || <span class=\"keyword\">typeof</span> result === <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.toString === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> options.toString(result);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(result);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result.toString) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result.toString();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Because <code>md</code> files’s rendering results are of type string. so <code>toString</code> returns the original result directly in this case. Sometimes it needs to be further processed.</p>\n<p>Afterwards, <code>onRenderEnd</code> is followed in order to modify some contents of <code>result</code> after rendering.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (data.onRenderEnd) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> data.onRenderEnd(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then the result is transferred to the next <code>then</code> function, and the <code>after_render</code> filter is executed.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// output is the file's final type, e.g. html, css</span></div><div class=\"line\">  <span class=\"comment\">// the result of self.getOutput('md') would be 'html',</span></div><div class=\"line\">  <span class=\"comment\">// because the rendering result of a markdown file is of type html</span></div><div class=\"line\">  <span class=\"keyword\">var</span> output = self.getOutput(ext) || ext;</div><div class=\"line\">  <span class=\"keyword\">return</span> ctx.execFilter(<span class=\"string\">'after_render:'</span> + output, result, &#123;</div><div class=\"line\">    <span class=\"attr\">context</span>: ctx,</div><div class=\"line\">    <span class=\"attr\">args</span>: [data]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).asCallback(callback);</div></pre></td></tr></table></figure>\n<p>To make it even clearer about how to use <code>execFilter</code>, Here I give an example from the official Hexo website, the following code is used to uglify js files.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UglifyJS = <span class=\"built_in\">require</span>(<span class=\"string\">'uglify-js'</span>);</div><div class=\"line\"></div><div class=\"line\">hexo.extend.filter.register(<span class=\"string\">'after_render:js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = UglifyJS.minify(str);</div><div class=\"line\">  <span class=\"keyword\">return</span> result.code;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This is the source code of <code>register</code> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter.prototype.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn, priority</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!priority) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      priority = fn;</div><div class=\"line\">      fn = type;</div><div class=\"line\">      type = <span class=\"string\">'after_post_render'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\"></div><div class=\"line\">  type = typeAlias[type] || type;</div><div class=\"line\">  priority = priority == <span class=\"literal\">null</span> ? <span class=\"number\">10</span> : priority;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> store = <span class=\"keyword\">this</span>.store[type] = <span class=\"keyword\">this</span>.store[type] || [];</div><div class=\"line\"></div><div class=\"line\">  fn.priority = priority;</div><div class=\"line\">  store.push(fn);</div><div class=\"line\"></div><div class=\"line\">  store.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.priority - b.priority;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>As you can see, it stores <code>type</code>(e.g. <code>after_post_render:js</code>) and the corresponding processing function in the <code>this.store</code> object. After the registration is over, <code>Filter.prototype.exec</code> executes the specified filter (<code>after_post_render:js</code> in this case).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter.prototype.exec = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options</span>) </span>&#123;</div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// filters are the functions that are registered before.</span></div><div class=\"line\">  <span class=\"comment\">// this.list(type) gets these functions from this.store</span></div><div class=\"line\">  <span class=\"keyword\">var</span> filters = <span class=\"keyword\">this</span>.list(type);</div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = options.context;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = options.args || [];</div><div class=\"line\"></div><div class=\"line\">  args.unshift(data);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each(filters, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.method(filter).apply(ctx, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/* when the processing is over, the processing function returns</span></div><div class=\"line\">         the processed result, if the result equals null, it will return</div><div class=\"line\">         the original one without processed by the filter(data), if the</div><div class=\"line\">         result is not null, it will return the result processed by the</div><div class=\"line\">         filter */</div><div class=\"line\">      args[<span class=\"number\">0</span>] = result == <span class=\"literal\">null</span> ? data : result;</div><div class=\"line\">      <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>OK, this part is over, let’s look into the <code>theme/index.js</code> file next.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pathFn = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Box = <span class=\"built_in\">require</span>(<span class=\"string\">'../box'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> View = <span class=\"built_in\">require</span>(<span class=\"string\">'./view'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-i18n'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Theme</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  Box.call(<span class=\"keyword\">this</span>, ctx, ctx.theme_dir);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.views = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/config'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/i18n'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/source'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/view'</span>)</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> languages = ctx.config.language;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(languages)) &#123;</div><div class=\"line\">    languages = [languages];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  languages.push(<span class=\"string\">'default'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.i18n = <span class=\"keyword\">new</span> I18n(&#123;</div><div class=\"line\">    <span class=\"attr\">languages</span>: _(languages).compact().uniq().value()</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _View = <span class=\"keyword\">this</span>.View = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path, data</span>) </span>&#123;</div><div class=\"line\">    View.call(<span class=\"keyword\">this</span>, path, data);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  util.inherits(_View, View);</div><div class=\"line\"></div><div class=\"line\">  _View.prototype._theme = <span class=\"keyword\">this</span>;</div><div class=\"line\">  _View.prototype._render = ctx.render;</div><div class=\"line\">  _View.prototype._helper = ctx.extend.helper;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Theme, Box);</div></pre></td></tr></table></figure>\n<p>The function <code>Theme</code> also calls <code>Box()</code>, then it adds several processors and sets languages and views.</p>\n<p>Then it bind locals.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Hexo.prototype._bindLocals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> db = <span class=\"keyword\">this</span>.database;</div><div class=\"line\">  <span class=\"keyword\">var</span> locals = <span class=\"keyword\">this</span>.locals;</div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self.config.future) &#123;</div><div class=\"line\">      query.date = &#123;<span class=\"attr\">$lte</span>: <span class=\"built_in\">Date</span>.now()&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self._showDrafts()) &#123;</div><div class=\"line\">      query.published = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Post'</span>).find(query);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'pages'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self.config.future) &#123;</div><div class=\"line\">      query.date = &#123;<span class=\"attr\">$lte</span>: <span class=\"built_in\">Date</span>.now()&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Page'</span>).find(query);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'categories'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Category'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'tags'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Tag'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    db.model(<span class=\"string\">'Data'</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      obj[data._id] = data.data;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>After loading module is over, it calls <code>console</code> to execute the provided command</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> loadModule(path, args).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log.error(<span class=\"string\">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class=\"line\">    log.error(<span class=\"string\">'Try running: \\'npm install hexo --save\\''</span>);</div><div class=\"line\">    process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mod) hexo = mod;</div><div class=\"line\">  log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./console'</span>)(hexo);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> hexo.init();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>  Let’s look through the source code of <code>./console</code>.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">console</span> = ctx.extend.console;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'help'</span>, <span class=\"string\">'Get help on a command.'</span>, &#123;</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./help'</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'init'</span>, <span class=\"string\">'Create a new Hexo folder.'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">desc</span>: <span class=\"string\">'Create a new Hexo folder at the specified path or the current directory.'</span>,</div><div class=\"line\">  <span class=\"attr\">usage</span>: <span class=\"string\">'[destination]'</span>,</div><div class=\"line\">  <span class=\"attr\">arguments</span>: [</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'destination'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Folder path. Initialize in current folder if not specified'</span>&#125;</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">options</span>: [</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'--no-clone'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Copy files instead of cloning from GitHub'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'--no-install'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Skip npm install'</span>&#125;</div><div class=\"line\">  ]</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./init'</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'version'</span>, <span class=\"string\">'Display version information.'</span>, &#123;</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./version'</span>));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>  It registers several commands using <code>console.register</code>, let’s look through its source code.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">Console.prototype.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, desc, options, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!name) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'name is required'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        fn = options;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> desc === <span class=\"string\">'object'</span>) &#123; <span class=\"comment\">// name, options, fn</span></div><div class=\"line\">          options = desc;</div><div class=\"line\">          desc = <span class=\"string\">''</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// name, desc, fn</span></div><div class=\"line\">          options = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// name, fn</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> desc === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        fn = desc;</div><div class=\"line\">        options = &#123;&#125;;</div><div class=\"line\">        desc = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    fn = <span class=\"built_in\">Promise</span>.promisify(fn);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    fn = <span class=\"built_in\">Promise</span>.method(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.store[name.toLowerCase()] = fn;</div><div class=\"line\">  c.options = options;</div><div class=\"line\">  c.desc = desc;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.alias = abbrev(<span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.store));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>Hexo is an excellent static blog generator, I read its source code recently, and I think it’s worth sharing the inner mechanism of its source code.</p>\n<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><p>When you run the command <code>hexo generate</code>, hexo will generate all the static files for you. This is the part we are going to start with. The directory where <code>hexo generate</code> is executed is <code>/home/searene/Development/hexo-twenty-sixteen</code> in this tutorial.</p>\n<p>First, we can find the location of the tool <code>hexo</code> with the command <code>which</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">which hexo</div></pre></td></tr></table></figure>\n<p>My output is</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/home/searene/.nvm/versions/node/v5.0.0/bin/hexo</div></pre></td></tr></table></figure>\n<p>This is a soft link, we get the location of the original file with <code>ll</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ll ~/.nvm/versions/node/v5.0.0/bin/hexo </div><div class=\"line\"></div><div class=\"line\">lrwxrwxrwx 1 searene searene 37 May 24 01:15 /home/searene/.nvm/versions/node/v5.0.0/bin/hexo -&gt; ../lib/node_modules/hexo-cli/bin/hexo</div></pre></td></tr></table></figure>\n<p>The contents of <code>hexo</code> are as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../lib/hexo'</span>)();</div></pre></td></tr></table></figure>\n<p>It requires a js file called <code>hexo</code>, which is located in <code>/home/searene/.nvm/versions/node/v5.0.0/lib/node_modules/hexo-cli/lib/hexo.js</code> in my case. The beginning part of the file is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> tildify = <span class=\"built_in\">require</span>(<span class=\"string\">'tildify'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> pathFn = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'bluebird'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Context = <span class=\"built_in\">require</span>(<span class=\"string\">'./context'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> findPkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./find_pkg'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> goodbye = <span class=\"built_in\">require</span>(<span class=\"string\">'./goodbye'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> minimist = <span class=\"built_in\">require</span>(<span class=\"string\">'minimist'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> camelCaseKeys = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-util/lib/camel_case_keys'</span>);</div></pre></td></tr></table></figure>\n<p>It requires several packages.</p>\n<ol>\n<li><code>chalk</code> is used for colorful outputs,.</li>\n<li><code>tildify</code> is used to convert an absolute path to a tilde path:, like <code>/Users/sindresorhus/dev</code> → <code>~/dev</code>.</li>\n<li><code>context</code> is used to //TODO</li>\n<li><code>find_pkg</code> is used to find the local hexo directory that contains <code>node_modules</code></li>\n<li><code>goodbye</code> is used to generate a random goodbye sentence.</li>\n<li><code>minimist</code> is used to parse argument options.</li>\n<li><code>camelCaseKeys</code> is used to convert keys in parameters to the camelCased ones</li>\n</ol>\n<p>Let’s continue to read the file.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entry</span>(<span class=\"params\">cwd, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// cwd is the directory where you invoked the node command</span></div><div class=\"line\">  cwd = cwd || process.cwd();</div><div class=\"line\">  <span class=\"comment\">// the keys in args is camelCased</span></div><div class=\"line\">  args = camelCaseKeys(args || minimist(process.argv.slice(<span class=\"number\">2</span>)));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> hexo = <span class=\"keyword\">new</span> Context(cwd, args);</div><div class=\"line\">  <span class=\"keyword\">var</span> log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// Change the title in console</span></div><div class=\"line\">  process.title = <span class=\"string\">'hexo'</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleError</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    log.fatal(err);</div><div class=\"line\">    process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/* findPkg searched upwards from the working directory(cwd) to</span></div><div class=\"line\">     find a directory containing package.json where the key hexo lies,</div><div class=\"line\">     a promise is returned by the function. */</div><div class=\"line\">  <span class=\"keyword\">return</span> findPkg(cwd, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!path) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* hexo.base_dir is set as the found directory, which is </span></div><div class=\"line\">       /home/searene/Development/hexo-twenty-sixteen */</div><div class=\"line\">    hexo.base_dir = path;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/* loadModule loads the hexo package located in the working</span></div><div class=\"line\">       directory(/home/searene/Development/hexo-twenty-sixteen)</div><div class=\"line\">       and returns a promise, the resolve function will carry a</div><div class=\"line\">       newly-constructed Hexo(return new Hexo(path, args)) object </div><div class=\"line\">       afterwards. From now on, local hexo will be used instead </div><div class=\"line\">       of the global one. */</div><div class=\"line\">    <span class=\"keyword\">return</span> loadModule(path, args).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      log.error(<span class=\"string\">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class=\"line\">      log.error(<span class=\"string\">'Try running: \\'npm install hexo --save\\''</span>);</div><div class=\"line\">      process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mod) hexo = mod;</div><div class=\"line\">    log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./console'</span>)(hexo);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> hexo.init();</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cmd = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!args.h &amp;&amp; !args.help) &#123;</div><div class=\"line\">      cmd = args._.shift();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (cmd) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> c = hexo.extend.console.get(cmd);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!c) cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      cmd = <span class=\"string\">'help'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    watchSignal(hexo);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> hexo.call(cmd, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> hexo.exit();</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> hexo.exit(err).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        handleError(err);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).catch(handleError);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">entry.console = &#123;</div><div class=\"line\">  <span class=\"attr\">init</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/init'</span>),</div><div class=\"line\">  <span class=\"attr\">help</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/help'</span>),</div><div class=\"line\">  <span class=\"attr\">version</span>: <span class=\"built_in\">require</span>(<span class=\"string\">'./console/version'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">entry.version = <span class=\"built_in\">require</span>(<span class=\"string\">'../package.json'</span>).version;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modulePath = pathFn.join(path, <span class=\"string\">'node_modules'</span>, <span class=\"string\">'hexo'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">watchSignal</span>(<span class=\"params\">hexo</span>) </span>&#123;</div><div class=\"line\">  process.on(<span class=\"string\">'SIGINT'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    hexo.log.info(goodbye());</div><div class=\"line\">    hexo.unwatch();</div><div class=\"line\"></div><div class=\"line\">    hexo.exit().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      process.exit();</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = entry;</div></pre></td></tr></table></figure>\n<p>Notice the last part</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = entry;</div></pre></td></tr></table></figure>\n<p>Remember the contents of <code>hexo.js</code>?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'../lib/hexo'</span>)();</div></pre></td></tr></table></figure>\n<p>So what <code>hexo.js</code> does is calling the <code>entry</code> function. Here comes the question, what does <code>entry</code> do?</p>\n<ol>\n<li><p>It searched upwards from the working directory looking for <code>package.json</code> containing the key <code>hexo</code>.</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findPkg</span>(<span class=\"params\">cwd, args</span>) </span>&#123;</div><div class=\"line\">  args = args || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (args.cwd) &#123;</div><div class=\"line\">    cwd = pathFn.resolve(cwd, args.cwd);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> checkPkg(cwd);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkPkg</span>(<span class=\"params\">path</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> pkgPath = pathFn.join(path, <span class=\"string\">'package.json'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> fs.readFile(pkgPath).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> json = <span class=\"built_in\">JSON</span>.parse(content);</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> json.hexo === <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> path;</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err &amp;&amp; err.cause.code === <span class=\"string\">'ENOENT'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> parent = pathFn.dirname(path);</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (parent === path) <span class=\"keyword\">return</span>;</div><div class=\"line\">      <span class=\"keyword\">return</span> checkPkg(parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Then it loads the local hexo package.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadModule</span>(<span class=\"params\">path, args</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.try(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> modulePath = pathFn.join(path, <span class=\"string\">'node_modules'</span>, <span class=\"string\">'hexo'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> Hexo = <span class=\"built_in\">require</span>(modulePath);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Hexo(path, args);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>new</code> a <code>Hexo</code> object. The souce code of <code>Hexo</code> is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hexo</span>(<span class=\"params\">base, args</span>) </span>&#123;</div><div class=\"line\">  base = base || process.cwd();</div><div class=\"line\">  args = args || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.base_dir = base + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.public_dir = pathFn.join(base, <span class=\"string\">'public'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.source_dir = pathFn.join(base, <span class=\"string\">'source'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.plugin_dir = pathFn.join(base, <span class=\"string\">'node_modules'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.script_dir = pathFn.join(base, <span class=\"string\">'scripts'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.scaffold_dir = pathFn.join(base, <span class=\"string\">'scaffolds'</span>) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme_dir = pathFn.join(base, <span class=\"string\">'themes'</span>, defaultConfig.theme) + sep;</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme_script_dir = pathFn.join(<span class=\"keyword\">this</span>.theme_dir, <span class=\"string\">'scripts'</span>) + sep;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.env = &#123;</div><div class=\"line\">    <span class=\"attr\">args</span>: args,</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"built_in\">Boolean</span>(args.debug),</div><div class=\"line\">    <span class=\"attr\">safe</span>: <span class=\"built_in\">Boolean</span>(args.safe),</div><div class=\"line\">    <span class=\"attr\">silent</span>: <span class=\"built_in\">Boolean</span>(args.silent),</div><div class=\"line\">    <span class=\"attr\">env</span>: process.env.NODE_ENV || <span class=\"string\">'development'</span>,</div><div class=\"line\">    <span class=\"attr\">version</span>: pkg.version,</div><div class=\"line\">    <span class=\"attr\">init</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config_path = args.config ? pathFn.resolve(base, args.config)</div><div class=\"line\">                                 : pathFn.join(base, <span class=\"string\">'_config.yml'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.extend = &#123;</div><div class=\"line\">    <span class=\"attr\">console</span>: <span class=\"keyword\">new</span> extend.Console(),</div><div class=\"line\">    <span class=\"attr\">deployer</span>: <span class=\"keyword\">new</span> extend.Deployer(),</div><div class=\"line\">    <span class=\"attr\">filter</span>: <span class=\"keyword\">new</span> extend.Filter(),</div><div class=\"line\">    <span class=\"attr\">generator</span>: <span class=\"keyword\">new</span> extend.Generator(),</div><div class=\"line\">    <span class=\"attr\">helper</span>: <span class=\"keyword\">new</span> extend.Helper(),</div><div class=\"line\">    <span class=\"attr\">migrator</span>: <span class=\"keyword\">new</span> extend.Migrator(),</div><div class=\"line\">    <span class=\"attr\">processor</span>: <span class=\"keyword\">new</span> extend.Processor(),</div><div class=\"line\">    <span class=\"attr\">renderer</span>: <span class=\"keyword\">new</span> extend.Renderer(),</div><div class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"keyword\">new</span> extend.Tag()</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config = _.cloneDeep(defaultConfig);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.log = logger(<span class=\"keyword\">this</span>.env);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.render = <span class=\"keyword\">new</span> Render(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.route = <span class=\"keyword\">new</span> Router();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.post = <span class=\"keyword\">new</span> Post(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.scaffold = <span class=\"keyword\">new</span> Scaffold(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>._dbLoaded = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>._isGenerating = <span class=\"literal\">false</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.database = <span class=\"keyword\">new</span> Database(&#123;</div><div class=\"line\">    <span class=\"attr\">version</span>: dbVersion,</div><div class=\"line\">    <span class=\"attr\">path</span>: pathFn.join(base, <span class=\"string\">'db.json'</span>)</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  registerModels(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.source = <span class=\"keyword\">new</span> Source(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.theme = <span class=\"keyword\">new</span> Theme(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.locals = <span class=\"keyword\">new</span> Locals(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>._bindLocals();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>Hexo</code> gets several directories such as <code>public_dir</code>, <code>source_dir</code>, etc. Then it defines the <code>this.extend</code> object, which contains <code>console</code>, <code>deployer</code>, etc. The format of each instance in the <code>this.extend</code> object is as follows:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Console</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.alias = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Deployer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Filter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Generator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.id = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Helper</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Processor</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Renderer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.storeSync = &#123;&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Tag</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.env = <span class=\"keyword\">new</span> nunjucks.Environment(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">autoescape</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//-------------------------</span></div></pre></td></tr></table></figure>\n<p>All of them contain the same object <code>this.store</code>, which is used to map the name to the corresponding function. For example, <code>this.store</code> in <code>Console</code> is as follows:</p>\n<p><img src=\"http://i.imgur.com/fB0X6I3.png\" alt=\"this.store\"></p>\n<p>Each key in the object such as <code>clean</code>, <code>config</code> is of type string. What they are mapped to are functions that implement them.</p>\n<p>Then it creates several instances, <code>logger</code>, <code>Render</code>, <code>Router</code>, <code>Post</code>, <code>Scaffold</code>, <code>database</code> etc. <code>logger</code> is used to log information on the console and the file, <code>Render</code> is used to render files(e.g. render markdownf files to html), <code>Router</code> is used to save all paths used in the site, <code>Post</code> is used to //TODO, <code>Scaffold</code> is used to //TODO, <code>database</code> is a <a href=\"https://github.com/tommy351/warehouse\" target=\"_blank\" rel=\"external\">JSON-based database</a>.</p>\n<p>It then registered following schemas using <code>registerModels(this)</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.Asset = <span class=\"built_in\">require</span>(<span class=\"string\">'./asset'</span>);</div><div class=\"line\">exports.Cache = <span class=\"built_in\">require</span>(<span class=\"string\">'./cache'</span>);</div><div class=\"line\">exports.Category = <span class=\"built_in\">require</span>(<span class=\"string\">'./category'</span>);</div><div class=\"line\">exports.Data = <span class=\"built_in\">require</span>(<span class=\"string\">'./data'</span>);</div><div class=\"line\">exports.Page = <span class=\"built_in\">require</span>(<span class=\"string\">'./page'</span>);</div><div class=\"line\">exports.Post = <span class=\"built_in\">require</span>(<span class=\"string\">'./post'</span>);</div><div class=\"line\">exports.PostAsset = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_asset'</span>);</div><div class=\"line\">exports.PostCategory = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_category'</span>);</div><div class=\"line\">exports.PostTag = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_tag'</span>);</div><div class=\"line\">exports.Tag = <span class=\"built_in\">require</span>(<span class=\"string\">'./tag'</span>);</div></pre></td></tr></table></figure>\n<p>Afterwards, two instances are initiated, <code>Source</code>, <code>Theme</code>,which represents <code>source</code> and <code>theme</code> folders respectively. They are both being processed by <code>Box</code>.</p>\n<p>First, let’s look at <code>source</code>.js.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Box = <span class=\"built_in\">require</span>(<span class=\"string\">'../box'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Source</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  Box.call(<span class=\"keyword\">this</span>, ctx, ctx.source_dir);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = ctx.extend.processor.list();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Source, Box);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Source;</div></pre></td></tr></table></figure>\n<p><code>ctx</code> refers to <code>Hexo</code>, <code>Source</code> function calls <code>Box</code> and gets the processor list, then it inherits <code>Box</code>. <code>Box</code> is used to read and render files in <code>source</code> or <code>theme</code> folder. To find out what’s going on, we need to look into the source code of <code>Box</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Box</span>(<span class=\"params\">ctx, base, options</span>) </span>&#123;</div><div class=\"line\">  EventEmitter.call(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.options = _.assign(&#123;</div><div class=\"line\">    <span class=\"attr\">persistent</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;, options);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// if the last character of the working directory </span></div><div class=\"line\">  <span class=\"comment\">// is not /, add it to the end of base</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (base.substring(base.length - <span class=\"number\">1</span>) !== sep) &#123;</div><div class=\"line\">    base += sep;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.context = ctx;</div><div class=\"line\">  <span class=\"keyword\">this</span>.base = base;</div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = [];</div><div class=\"line\">  <span class=\"keyword\">this</span>._processingFiles = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.watcher = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.Cache = ctx.model(<span class=\"string\">'Cache'</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.File = <span class=\"keyword\">this</span>._createFileClass();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>It sets several variables, then it gets the <code>Cache</code> model. The source code of <code>ctx.model</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Hexo.prototype.model = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, schema</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.database.model(name, schema);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>If the model was created before, <code>this.database.model</code> will just return the model, or it will create the model with the specified <code>name</code> and <code>schema</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Database.prototype.model = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, schema</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._models[name]) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._models[name];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> model = <span class=\"keyword\">this</span>._models[name] = <span class=\"keyword\">new</span> <span class=\"keyword\">this</span>.Model(name, schema);</div><div class=\"line\">  <span class=\"keyword\">return</span> model;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>Note that We have created the model in the <code>register_model</code> function, which is located in the <code>Hexo</code> function. When the code <code>new Hexo</code> is run, all the models are registered.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> models = <span class=\"built_in\">require</span>(<span class=\"string\">'../models'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> db = ctx.database;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(models);</div><div class=\"line\">  <span class=\"keyword\">var</span> key = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = keys.length; i &lt; len; i++) &#123;</div><div class=\"line\">    key = keys[i];</div><div class=\"line\">    db.model(key, models[key](ctx));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>The models created here were as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\">exports.Asset = <span class=\"built_in\">require</span>(<span class=\"string\">'./asset'</span>);</div><div class=\"line\">exports.Cache = <span class=\"built_in\">require</span>(<span class=\"string\">'./cache'</span>);</div><div class=\"line\">exports.Category = <span class=\"built_in\">require</span>(<span class=\"string\">'./category'</span>);</div><div class=\"line\">exports.Data = <span class=\"built_in\">require</span>(<span class=\"string\">'./data'</span>);</div><div class=\"line\">exports.Page = <span class=\"built_in\">require</span>(<span class=\"string\">'./page'</span>);</div><div class=\"line\">exports.Post = <span class=\"built_in\">require</span>(<span class=\"string\">'./post'</span>);</div><div class=\"line\">exports.PostAsset = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_asset'</span>);</div><div class=\"line\">exports.PostCategory = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_category'</span>);</div><div class=\"line\">exports.PostTag = <span class=\"built_in\">require</span>(<span class=\"string\">'./post_tag'</span>);</div><div class=\"line\">exports.Tag = <span class=\"built_in\">require</span>(<span class=\"string\">'./tag'</span>);</div></pre></td></tr></table></figure>\n<p>Which includes <code>cache</code>. So we can get the created <code>cache</code> model with <code>this.Cache = ctx.model(&#39;Cache&#39;);</code>. This model is used to cache generated posts and stuff, and store a hashed value for all of them. If the hash value is identical, hexo will not generate the post again, which reduces the generation time to a degree.</p>\n<p>Now we only have a line left in the <code>box</code> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.File = <span class=\"keyword\">this</span>._createFileClass();</div></pre></td></tr></table></figure>\n<p><code>this.File</code> is used to read file contents and render it. The source code of <code>_createFileClass()</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">Box.prototype._createFileClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">//ctx is Hexo</span></div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>.context;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _File = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    File.call(<span class=\"keyword\">this</span>, data);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).inherits(_File, File);</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.box = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      callback = options;</div><div class=\"line\">      options = &#123;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.render.render(&#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.source</div><div class=\"line\">    &#125;, options).asCallback(callback);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  _File.prototype.renderSync = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.render.renderSync(&#123;</div><div class=\"line\">      <span class=\"attr\">path</span>: <span class=\"keyword\">this</span>.source</div><div class=\"line\">    &#125;, options);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> _File;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>File.call(this, data)</code> sets <code>_File</code>‘s <code>source</code>, <code>path</code>, <code>params</code> and <code>type</code> as the same as ones in <code>data</code>. You can see it in the source of the <code>File</code> constructor.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">File</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.source = data.source;</div><div class=\"line\">  <span class=\"keyword\">this</span>.path = data.path;</div><div class=\"line\">  <span class=\"keyword\">this</span>.params = data.params;</div><div class=\"line\">  <span class=\"keyword\">this</span>.type = data.type;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>_File</code> inherits <code>File</code> afterwards. Then it sets <code>render</code> and <code>renderSync</code> function of <code>_File</code> and returns it. As you can tell from their names, they are used to render files or strings, like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo.render.render(&#123;<span class=\"attr\">text</span>: <span class=\"string\">'example'</span>, <span class=\"attr\">engine</span>: <span class=\"string\">'swig'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo.render.render(&#123;<span class=\"attr\">path</span>: <span class=\"string\">'path/to/file.swig'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Render\"><a href=\"#Render\" class=\"headerlink\" title=\"Render\"></a>Render</h2><p>Let’s look into the <code>Render</code> object.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Render</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.context = ctx;</div><div class=\"line\">  <span class=\"keyword\">this</span>.renderer = ctx.extend.renderer;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Still remember <code>renderer</code>? It’s used to store all the information about rendering.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Renderer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.store = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">this</span>.storeSync = &#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The most important function in <code>render.js</code> is <code>Render.prototype.render</code>, the function is used to render text or files, the source code of it is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">Render.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, options, callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!callback &amp;&amp; <span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    callback = options;</div><div class=\"line\">    options = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = <span class=\"keyword\">this</span>.context;</div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> ext = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.text != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> resolve(data.text);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!data.path) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\"></div><div class=\"line\">    fs.readFile(data.path).then(resolve, reject);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">    data.text = text;</div><div class=\"line\">    ext = data.engine || getExtname(data.path);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!ext || !self.isRenderable(ext)) <span class=\"keyword\">return</span> text;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> renderer = self.getRenderer(ext);</div><div class=\"line\">    <span class=\"keyword\">return</span> renderer.call(ctx, data, options);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    result = toString(result, data);</div><div class=\"line\">    <span class=\"keyword\">if</span> (data.onRenderEnd) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> data.onRenderEnd(result);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = self.getOutput(ext) || ext;</div><div class=\"line\">    <span class=\"keyword\">return</span> ctx.execFilter(<span class=\"string\">'after_render:'</span> + output, result, &#123;</div><div class=\"line\">      <span class=\"attr\">context</span>: ctx,</div><div class=\"line\">      <span class=\"attr\">args</span>: [data]</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).asCallback(callback);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>First, it checks if <code>data</code> exists or not, <code>data</code> contains text(<code>data.text</code>) or file(<code>data.path</code>) that is going to be rendered, it throws an error if it doesn’t exist.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!data) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div></pre></td></tr></table></figure>\n</li>\n<li><p>Then if <code>data.text</code> exists, it will try to render the text first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (data.text != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> resolve(data.text);</div></pre></td></tr></table></figure>\n</li>\n<li><p>If <code>data.path</code> exists, it will try to analyze the file specified by <code>data.path</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!data.path) <span class=\"keyword\">return</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'No input file or string!'</span>));</div><div class=\"line\">fs.readFile(data.path).then(resolve, reject);</div></pre></td></tr></table></figure>\n</li>\n<li><p>It tries to find out if the rendering engine exists in <code>renderer.store</code>, which maps the rendering engine’s name to the corresponding rendering function. If the engine exists, it will call the corresponding function to render it, return the original text if the engine doesn’t exist.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>) </span>&#123;</div><div class=\"line\">data.text = text;</div><div class=\"line\">ext = data.engine || getExtname(data.path);</div><div class=\"line\"><span class=\"keyword\">if</span> (!ext || !self.isRenderable(ext)) <span class=\"keyword\">return</span> text;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// get the function used to render</span></div><div class=\"line\"><span class=\"keyword\">var</span> renderer = self.getRenderer(ext);</div><div class=\"line\"><span class=\"keyword\">return</span> renderer.call(ctx, data, options);</div></pre></td></tr></table></figure>\n<p><code>renderer</code> refers to the function that is used to render text or files. What <code>renderer.call()</code> returns is usually of JSON format. For example, if the file to be rendered is like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">archive_dir: archives</div><div class=\"line\">author: John Doe</div></pre></td></tr></table></figure>\n<p>The rendered result will be an object like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">archive_dir</span>: <span class=\"string\">\"archives\"</span>, <span class=\"attr\">author</span>: <span class=\"string\">\"John Doe\"</span>&#125;</div></pre></td></tr></table></figure>\n<p>Some files are not rendered in this way, e.g. <code>md</code>. The rendering results of markdown files are of type string. <code>Hexo</code> creates a <code>toString</code> function to make the conversion happen.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">result = toString(result, data);</div></pre></td></tr></table></figure>\n<p>The source code of <code>toString</code> function is as follows.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toString</span>(<span class=\"params\">result, options</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!options.hasOwnProperty(<span class=\"string\">'toString'</span>) || <span class=\"keyword\">typeof</span> result === <span class=\"string\">'string'</span>) <span class=\"keyword\">return</span> result;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options.toString === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> options.toString(result);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(result);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result.toString) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> result.toString();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Because <code>md</code> files’s rendering results are of type string. so <code>toString</code> returns the original result directly in this case. Sometimes it needs to be further processed.</p>\n<p>Afterwards, <code>onRenderEnd</code> is followed in order to modify some contents of <code>result</code> after rendering.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (data.onRenderEnd) &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> data.onRenderEnd(result);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then the result is transferred to the next <code>then</code> function, and the <code>after_render</code> filter is executed.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// output is the file's final type, e.g. html, css</span></div><div class=\"line\">  <span class=\"comment\">// the result of self.getOutput('md') would be 'html',</span></div><div class=\"line\">  <span class=\"comment\">// because the rendering result of a markdown file is of type html</span></div><div class=\"line\">  <span class=\"keyword\">var</span> output = self.getOutput(ext) || ext;</div><div class=\"line\">  <span class=\"keyword\">return</span> ctx.execFilter(<span class=\"string\">'after_render:'</span> + output, result, &#123;</div><div class=\"line\">    <span class=\"attr\">context</span>: ctx,</div><div class=\"line\">    <span class=\"attr\">args</span>: [data]</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).asCallback(callback);</div></pre></td></tr></table></figure>\n<p>To make it even clearer about how to use <code>execFilter</code>, Here I give an example from the official Hexo website, the following code is used to uglify js files.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> UglifyJS = <span class=\"built_in\">require</span>(<span class=\"string\">'uglify-js'</span>);</div><div class=\"line\"></div><div class=\"line\">hexo.extend.filter.register(<span class=\"string\">'after_render:js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, data</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> result = UglifyJS.minify(str);</div><div class=\"line\">  <span class=\"keyword\">return</span> result.code;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>This is the source code of <code>register</code> function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter.prototype.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, fn, priority</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!priority) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> type === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      priority = fn;</div><div class=\"line\">      fn = type;</div><div class=\"line\">      type = <span class=\"string\">'after_post_render'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn !== <span class=\"string\">'function'</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\"></div><div class=\"line\">  type = typeAlias[type] || type;</div><div class=\"line\">  priority = priority == <span class=\"literal\">null</span> ? <span class=\"number\">10</span> : priority;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> store = <span class=\"keyword\">this</span>.store[type] = <span class=\"keyword\">this</span>.store[type] || [];</div><div class=\"line\"></div><div class=\"line\">  fn.priority = priority;</div><div class=\"line\">  store.push(fn);</div><div class=\"line\"></div><div class=\"line\">  store.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.priority - b.priority;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>As you can see, it stores <code>type</code>(e.g. <code>after_post_render:js</code>) and the corresponding processing function in the <code>this.store</code> object. After the registration is over, <code>Filter.prototype.exec</code> executes the specified filter (<code>after_post_render:js</code> in this case).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Filter.prototype.exec = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">type, data, options</span>) </span>&#123;</div><div class=\"line\">  options = options || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// filters are the functions that are registered before.</span></div><div class=\"line\">  <span class=\"comment\">// this.list(type) gets these functions from this.store</span></div><div class=\"line\">  <span class=\"keyword\">var</span> filters = <span class=\"keyword\">this</span>.list(type);</div><div class=\"line\">  <span class=\"keyword\">var</span> ctx = options.context;</div><div class=\"line\">  <span class=\"keyword\">var</span> args = options.args || [];</div><div class=\"line\"></div><div class=\"line\">  args.unshift(data);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.each(filters, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filter</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.method(filter).apply(ctx, args).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">/* when the processing is over, the processing function returns</span></div><div class=\"line\">         the processed result, if the result equals null, it will return</div><div class=\"line\">         the original one without processed by the filter(data), if the</div><div class=\"line\">         result is not null, it will return the result processed by the</div><div class=\"line\">         filter */</div><div class=\"line\">      args[<span class=\"number\">0</span>] = result == <span class=\"literal\">null</span> ? data : result;</div><div class=\"line\">      <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> args[<span class=\"number\">0</span>];</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>OK, this part is over, let’s look into the <code>theme/index.js</code> file next.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> pathFn = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Box = <span class=\"built_in\">require</span>(<span class=\"string\">'../box'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> View = <span class=\"built_in\">require</span>(<span class=\"string\">'./view'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> I18n = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-i18n'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"built_in\">require</span>(<span class=\"string\">'lodash'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Theme</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  Box.call(<span class=\"keyword\">this</span>, ctx, ctx.theme_dir);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.config = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.views = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.processors = [</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/config'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/i18n'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/source'</span>),</div><div class=\"line\">    <span class=\"built_in\">require</span>(<span class=\"string\">'./processors/view'</span>)</div><div class=\"line\">  ];</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> languages = ctx.config.language;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(languages)) &#123;</div><div class=\"line\">    languages = [languages];</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  languages.push(<span class=\"string\">'default'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.i18n = <span class=\"keyword\">new</span> I18n(&#123;</div><div class=\"line\">    <span class=\"attr\">languages</span>: _(languages).compact().uniq().value()</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> _View = <span class=\"keyword\">this</span>.View = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path, data</span>) </span>&#123;</div><div class=\"line\">    View.call(<span class=\"keyword\">this</span>, path, data);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  util.inherits(_View, View);</div><div class=\"line\"></div><div class=\"line\">  _View.prototype._theme = <span class=\"keyword\">this</span>;</div><div class=\"line\">  _View.prototype._render = ctx.render;</div><div class=\"line\">  _View.prototype._helper = ctx.extend.helper;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(Theme, Box);</div></pre></td></tr></table></figure>\n<p>The function <code>Theme</code> also calls <code>Box()</code>, then it adds several processors and sets languages and views.</p>\n<p>Then it bind locals.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\">  Hexo.prototype._bindLocals = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> db = <span class=\"keyword\">this</span>.database;</div><div class=\"line\">  <span class=\"keyword\">var</span> locals = <span class=\"keyword\">this</span>.locals;</div><div class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self.config.future) &#123;</div><div class=\"line\">      query.date = &#123;<span class=\"attr\">$lte</span>: <span class=\"built_in\">Date</span>.now()&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self._showDrafts()) &#123;</div><div class=\"line\">      query.published = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Post'</span>).find(query);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'pages'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!self.config.future) &#123;</div><div class=\"line\">      query.date = &#123;<span class=\"attr\">$lte</span>: <span class=\"built_in\">Date</span>.now()&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Page'</span>).find(query);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'categories'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Category'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'tags'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> db.model(<span class=\"string\">'Tag'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">  locals.set(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">    db.model(<span class=\"string\">'Data'</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      obj[data._id] = data.data;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> obj;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>After loading module is over, it calls <code>console</code> to execute the provided command</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">return</span> loadModule(path, args).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    log.error(<span class=\"string\">'Local hexo not found in %s'</span>, chalk.magenta(tildify(path)));</div><div class=\"line\">    log.error(<span class=\"string\">'Try running: \\'npm install hexo --save\\''</span>);</div><div class=\"line\">    process.exit(<span class=\"number\">2</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mod</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (mod) hexo = mod;</div><div class=\"line\">  log = hexo.log;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'./console'</span>)(hexo);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> hexo.init();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>  Let’s look through the source code of <code>./console</code>.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">console</span> = ctx.extend.console;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'help'</span>, <span class=\"string\">'Get help on a command.'</span>, &#123;</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./help'</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'init'</span>, <span class=\"string\">'Create a new Hexo folder.'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">desc</span>: <span class=\"string\">'Create a new Hexo folder at the specified path or the current directory.'</span>,</div><div class=\"line\">  <span class=\"attr\">usage</span>: <span class=\"string\">'[destination]'</span>,</div><div class=\"line\">  <span class=\"attr\">arguments</span>: [</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'destination'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Folder path. Initialize in current folder if not specified'</span>&#125;</div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">options</span>: [</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'--no-clone'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Copy files instead of cloning from GitHub'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">name</span>: <span class=\"string\">'--no-install'</span>, <span class=\"attr\">desc</span>: <span class=\"string\">'Skip npm install'</span>&#125;</div><div class=\"line\">  ]</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./init'</span>));</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.register(<span class=\"string\">'version'</span>, <span class=\"string\">'Display version information.'</span>, &#123;</div><div class=\"line\">  &#125;, <span class=\"built_in\">require</span>(<span class=\"string\">'./version'</span>));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>  It registers several commands using <code>console.register</code>, let’s look through its source code.</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">Console.prototype.register = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, desc, options, fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!name) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'name is required'</span>);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (options) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> options === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        fn = options;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> desc === <span class=\"string\">'object'</span>) &#123; <span class=\"comment\">// name, options, fn</span></div><div class=\"line\">          options = desc;</div><div class=\"line\">          desc = <span class=\"string\">''</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// name, desc, fn</span></div><div class=\"line\">          options = &#123;&#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// name, fn</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> desc === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">        fn = desc;</div><div class=\"line\">        options = &#123;&#125;;</div><div class=\"line\">        desc = <span class=\"string\">''</span>;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'fn must be a function'</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">if</span> (fn.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    fn = <span class=\"built_in\">Promise</span>.promisify(fn);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    fn = <span class=\"built_in\">Promise</span>.method(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> c = <span class=\"keyword\">this</span>.store[name.toLowerCase()] = fn;</div><div class=\"line\">  c.options = options;</div><div class=\"line\">  c.desc = desc;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">this</span>.alias = abbrev(<span class=\"built_in\">Object</span>.keys(<span class=\"keyword\">this</span>.store));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"PurgeAttributes, an Anki addon to purge unnecessary attributes","date":"2016-02-14T03:14:36.000Z","_content":"\n# Introduction\nPurgeAttributes is used to purge the `font-size` attribute originally. But you can purge any attribute defined in something like `style='font-size: 100px; color: red'`.\n\n# Install\n\nPut [PurgeAttributes.py](https://raw.githubusercontent.com/searene/Anki-Addons/master/PurgeAttributes/PurgeAttributes.py) in your anki addon directory and restart.\n\n# Usage\nPut all the files under `PurgeAttributes`(including `PurgeAttributes.py` and `PurgeAttribues` folder which contains `bs4`) into your Anki add-ons folder.\n\n# Effects\nIt will purge the four attributes by default:\n\n* font-family\n* font-size\n* background-color\n* line-height\n\nIf you are running Anki with a high-resolution like me, and you didn't strip the html when pasting like me, you may encounter something like this:\n\n![without PurgeAttributes](http://i.imgur.com/jQTDGaG.png)\n\nIf you use the addon, it will remove the yellow background and remove the `font-size` attribute, because the font size here is small. The result is like this:\n\n![with PurgeAttributes](http://i.imgur.com/wdbtrFa.png)\n\nNow it's not hard to see, right?\n\n# Configuration\n\nTo choose which attribute you need to remove, edit the `purgeAttributes.py` file from menu `Tools --> Add-ons --> PurgeAttributes --> Edit`, and modify the variable `REMOVE_ATTRIBUTES` at will.\n","source":"_posts/PurgeAttributes-an-Anki-addon-to-purge-unnecessary-attributes.md","raw":"title: 'PurgeAttributes, an Anki addon to purge unnecessary attributes'\ndate: 2016-02-14 11:14:36\ntags: [python, anki]\ncategories: Coding\n---\n\n# Introduction\nPurgeAttributes is used to purge the `font-size` attribute originally. But you can purge any attribute defined in something like `style='font-size: 100px; color: red'`.\n\n# Install\n\nPut [PurgeAttributes.py](https://raw.githubusercontent.com/searene/Anki-Addons/master/PurgeAttributes/PurgeAttributes.py) in your anki addon directory and restart.\n\n# Usage\nPut all the files under `PurgeAttributes`(including `PurgeAttributes.py` and `PurgeAttribues` folder which contains `bs4`) into your Anki add-ons folder.\n\n# Effects\nIt will purge the four attributes by default:\n\n* font-family\n* font-size\n* background-color\n* line-height\n\nIf you are running Anki with a high-resolution like me, and you didn't strip the html when pasting like me, you may encounter something like this:\n\n![without PurgeAttributes](http://i.imgur.com/jQTDGaG.png)\n\nIf you use the addon, it will remove the yellow background and remove the `font-size` attribute, because the font size here is small. The result is like this:\n\n![with PurgeAttributes](http://i.imgur.com/wdbtrFa.png)\n\nNow it's not hard to see, right?\n\n# Configuration\n\nTo choose which attribute you need to remove, edit the `purgeAttributes.py` file from menu `Tools --> Add-ons --> PurgeAttributes --> Edit`, and modify the variable `REMOVE_ATTRIBUTES` at will.\n","slug":"PurgeAttributes-an-Anki-addon-to-purge-unnecessary-attributes","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdd002d8arf76cm6sbx","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>PurgeAttributes is used to purge the <code>font-size</code> attribute originally. But you can purge any attribute defined in something like <code>style=&#39;font-size: 100px; color: red&#39;</code>.</p>\n<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><p>Put <a href=\"https://raw.githubusercontent.com/searene/Anki-Addons/master/PurgeAttributes/PurgeAttributes.py\" target=\"_blank\" rel=\"external\">PurgeAttributes.py</a> in your anki addon directory and restart.</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Put all the files under <code>PurgeAttributes</code>(including <code>PurgeAttributes.py</code> and <code>PurgeAttribues</code> folder which contains <code>bs4</code>) into your Anki add-ons folder.</p>\n<h1 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h1><p>It will purge the four attributes by default:</p>\n<ul>\n<li>font-family</li>\n<li>font-size</li>\n<li>background-color</li>\n<li>line-height</li>\n</ul>\n<p>If you are running Anki with a high-resolution like me, and you didn’t strip the html when pasting like me, you may encounter something like this:</p>\n<p><img src=\"http://i.imgur.com/jQTDGaG.png\" alt=\"without PurgeAttributes\"></p>\n<p>If you use the addon, it will remove the yellow background and remove the <code>font-size</code> attribute, because the font size here is small. The result is like this:</p>\n<p><img src=\"http://i.imgur.com/wdbtrFa.png\" alt=\"with PurgeAttributes\"></p>\n<p>Now it’s not hard to see, right?</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>To choose which attribute you need to remove, edit the <code>purgeAttributes.py</code> file from menu <code>Tools --&gt; Add-ons --&gt; PurgeAttributes --&gt; Edit</code>, and modify the variable <code>REMOVE_ATTRIBUTES</code> at will.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>PurgeAttributes is used to purge the <code>font-size</code> attribute originally. But you can purge any attribute defined in something like <code>style=&#39;font-size: 100px; color: red&#39;</code>.</p>\n<h1 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h1><p>Put <a href=\"https://raw.githubusercontent.com/searene/Anki-Addons/master/PurgeAttributes/PurgeAttributes.py\" target=\"_blank\" rel=\"external\">PurgeAttributes.py</a> in your anki addon directory and restart.</p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h1><p>Put all the files under <code>PurgeAttributes</code>(including <code>PurgeAttributes.py</code> and <code>PurgeAttribues</code> folder which contains <code>bs4</code>) into your Anki add-ons folder.</p>\n<h1 id=\"Effects\"><a href=\"#Effects\" class=\"headerlink\" title=\"Effects\"></a>Effects</h1><p>It will purge the four attributes by default:</p>\n<ul>\n<li>font-family</li>\n<li>font-size</li>\n<li>background-color</li>\n<li>line-height</li>\n</ul>\n<p>If you are running Anki with a high-resolution like me, and you didn’t strip the html when pasting like me, you may encounter something like this:</p>\n<p><img src=\"http://i.imgur.com/jQTDGaG.png\" alt=\"without PurgeAttributes\"></p>\n<p>If you use the addon, it will remove the yellow background and remove the <code>font-size</code> attribute, because the font size here is small. The result is like this:</p>\n<p><img src=\"http://i.imgur.com/wdbtrFa.png\" alt=\"with PurgeAttributes\"></p>\n<p>Now it’s not hard to see, right?</p>\n<h1 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h1><p>To choose which attribute you need to remove, edit the <code>purgeAttributes.py</code> file from menu <code>Tools --&gt; Add-ons --&gt; PurgeAttributes --&gt; Edit</code>, and modify the variable <code>REMOVE_ATTRIBUTES</code> at will.</p>\n"},{"title":"Some Linux Commands","date":"2017-10-05T00:37:42.000Z","thumbnail":"/images/xl-2017-linux-1.jpg","_content":"\n# :-\n\nTake `${val1:-val2}` for example, if `val1` is unset or null, return `val2`, otherwise return `val1`.\n\nExample:\n\n```bash\n#!/bin/bash\n\ndefault=\"default\"\npreset=\"preset\"\nvalue=\"This is ${preset:-\"$default\"} value\"\necho $value  # This is preset value\n```\n\n```bash\n#!/bin/bash\n\ndefault=\"default\"\nvalue=\"This is ${preset:-\"$default\"} value\"\necho $value  # This is default value\n```\n\n# set -a\n\nDefinition from the [Bash Manual](https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin)\n\n> `-a`\n>\n> Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.\n\nHonestly I haven't fully comprehended the definition, but we can set up an example to see what it does.\n\n1. Create `foo.sh`\n\n   ```bash\n   #!/usr/bin/env bash\n\n   set -a\n   . \"./bar.sh\"\n   set +a\n   echo \"a=$a\"\n   echo \"b=$b\"\n   echo \"c=$c\"\n   ```\n\n2. Create `bar.sh`\n\n   ```bash\n   #!/usr/bin/env bash\n\n   a=1\n   b=2\n   c=3\n   ```\n\n3. Set executable permission\n\n   ```bash\n   chmod +x foo.sh\n   chmod +x bar.sh\n   ```\n\n4. Source `foo.sh`\n\n   ```bash\n   . ./foo.sh\n   ```\n\n5. Result\n\n   ```bash\n   a=1\n   b=2\n   c=3\n   ```\n\n   As you can see, we can access all the variables defined in `bar.sh` in `foo.sh`, just as if they are marked as `export`. If we didn't use `set -a`, the result would be\n\n   ```bash\n   a=\n   b=\n   c=\n   ```\n\n6. We can access it directly in the terminal too, they are exported all the way to the top bash environment.\n\n   ```bash\n   ➜  /tmp echo $a\n   1\n   ➜  /tmp echo $b\n   2\n   ➜  /tmp echo $c\n   3\n   ```\n\n# Bash Regular Expressions\n\nWe can use regular expressions with the help of `=~`, here is an example.\n\n```bash\n#!/usr/bin/env bash\n\nfoo=1\nif [[ $foo =~ [[:digit:]]+$ ]]; then\n    echo number\nfi\n```\n\n**Output**\n\n```bash\nnumber\n```\n\nNotice that you cannot use `\\d` or `\\\\d` to replace `[[:digit:]]`, because `\\d` is PCRE, while it uses POSIX regex here, which doesn't recognize `\\d`. If you think `[[:digit:]]` is too long, you can use `[0-9]` to replace it, which has the same effect.\n\n```bash\n#!/usr/bin/env bash\n\nfoo=1\nif [[ $foo =~ [0-9]+$ ]]; then\n    echo number\nfi\n```\n\n**Output**\n\n```\nnumber\n```","source":"_posts/Some-Linux_Commands.md","raw":"title: Some Linux Commands\ndate: 2017-10-05 08:37:42\ntags: linux\ncategories: Coding\nthumbnail: /images/xl-2017-linux-1.jpg\n---\n\n# :-\n\nTake `${val1:-val2}` for example, if `val1` is unset or null, return `val2`, otherwise return `val1`.\n\nExample:\n\n```bash\n#!/bin/bash\n\ndefault=\"default\"\npreset=\"preset\"\nvalue=\"This is ${preset:-\"$default\"} value\"\necho $value  # This is preset value\n```\n\n```bash\n#!/bin/bash\n\ndefault=\"default\"\nvalue=\"This is ${preset:-\"$default\"} value\"\necho $value  # This is default value\n```\n\n# set -a\n\nDefinition from the [Bash Manual](https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin)\n\n> `-a`\n>\n> Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.\n\nHonestly I haven't fully comprehended the definition, but we can set up an example to see what it does.\n\n1. Create `foo.sh`\n\n   ```bash\n   #!/usr/bin/env bash\n\n   set -a\n   . \"./bar.sh\"\n   set +a\n   echo \"a=$a\"\n   echo \"b=$b\"\n   echo \"c=$c\"\n   ```\n\n2. Create `bar.sh`\n\n   ```bash\n   #!/usr/bin/env bash\n\n   a=1\n   b=2\n   c=3\n   ```\n\n3. Set executable permission\n\n   ```bash\n   chmod +x foo.sh\n   chmod +x bar.sh\n   ```\n\n4. Source `foo.sh`\n\n   ```bash\n   . ./foo.sh\n   ```\n\n5. Result\n\n   ```bash\n   a=1\n   b=2\n   c=3\n   ```\n\n   As you can see, we can access all the variables defined in `bar.sh` in `foo.sh`, just as if they are marked as `export`. If we didn't use `set -a`, the result would be\n\n   ```bash\n   a=\n   b=\n   c=\n   ```\n\n6. We can access it directly in the terminal too, they are exported all the way to the top bash environment.\n\n   ```bash\n   ➜  /tmp echo $a\n   1\n   ➜  /tmp echo $b\n   2\n   ➜  /tmp echo $c\n   3\n   ```\n\n# Bash Regular Expressions\n\nWe can use regular expressions with the help of `=~`, here is an example.\n\n```bash\n#!/usr/bin/env bash\n\nfoo=1\nif [[ $foo =~ [[:digit:]]+$ ]]; then\n    echo number\nfi\n```\n\n**Output**\n\n```bash\nnumber\n```\n\nNotice that you cannot use `\\d` or `\\\\d` to replace `[[:digit:]]`, because `\\d` is PCRE, while it uses POSIX regex here, which doesn't recognize `\\d`. If you think `[[:digit:]]` is too long, you can use `[0-9]` to replace it, which has the same effect.\n\n```bash\n#!/usr/bin/env bash\n\nfoo=1\nif [[ $foo =~ [0-9]+$ ]]; then\n    echo number\nfi\n```\n\n**Output**\n\n```\nnumber\n```","slug":"Some-Linux_Commands","published":1,"updated":"2017-10-05T03:57:24.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqde002f8arfp1qz15fu","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\":-\"></a>:-</h1><p>Take <code>${val1:-val2}</code> for example, if <code>val1</code> is unset or null, return <code>val2</code>, otherwise return <code>val1</code>.</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">default=<span class=\"string\">\"default\"</span></div><div class=\"line\">preset=<span class=\"string\">\"preset\"</span></div><div class=\"line\">value=<span class=\"string\">\"This is <span class=\"variable\">$&#123;preset:-\"$default\"&#125;</span> value\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$value</span>  <span class=\"comment\"># This is preset value</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">default=<span class=\"string\">\"default\"</span></div><div class=\"line\">value=<span class=\"string\">\"This is <span class=\"variable\">$&#123;preset:-\"$default\"&#125;</span> value\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$value</span>  <span class=\"comment\"># This is default value</span></div></pre></td></tr></table></figure>\n<h1 id=\"set-a\"><a href=\"#set-a\" class=\"headerlink\" title=\"set -a\"></a>set -a</h1><p>Definition from the <a href=\"https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin\" target=\"_blank\" rel=\"external\">Bash Manual</a></p>\n<blockquote>\n<p><code>-a</code></p>\n<p>Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.</p>\n</blockquote>\n<p>Honestly I haven’t fully comprehended the definition, but we can set up an example to see what it does.</p>\n<ol>\n<li><p>Create <code>foo.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> <span class=\"_\">-a</span></div><div class=\"line\">. <span class=\"string\">\"./bar.sh\"</span></div><div class=\"line\"><span class=\"built_in\">set</span> +a</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b=<span class=\"variable\">$b</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"c=<span class=\"variable\">$c</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Create <code>bar.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\">c=3</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set executable permission</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x foo.sh</div><div class=\"line\">chmod +x bar.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>Source <code>foo.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ./foo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>Result</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\">c=3</div></pre></td></tr></table></figure>\n<p>As you can see, we can access all the variables defined in <code>bar.sh</code> in <code>foo.sh</code>, just as if they are marked as <code>export</code>. If we didn’t use <code>set -a</code>, the result would be</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=</div><div class=\"line\">b=</div><div class=\"line\">c=</div></pre></td></tr></table></figure>\n</li>\n<li><p>We can access it directly in the terminal too, they are exported all the way to the top bash environment.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\">1</div><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$b</span></div><div class=\"line\">2</div><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$c</span></div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Bash-Regular-Expressions\"><a href=\"#Bash-Regular-Expressions\" class=\"headerlink\" title=\"Bash Regular Expressions\"></a>Bash Regular Expressions</h1><p>We can use regular expressions with the help of <code>=~</code>, here is an example.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">foo=1</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$foo</span> =~ [[:digit:]]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> number</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">number</div></pre></td></tr></table></figure>\n<p>Notice that you cannot use <code>\\d</code> or <code>\\\\d</code> to replace <code>[[:digit:]]</code>, because <code>\\d</code> is PCRE, while it uses POSIX regex here, which doesn’t recognize <code>\\d</code>. If you think <code>[[:digit:]]</code> is too long, you can use <code>[0-9]</code> to replace it, which has the same effect.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">foo=1</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$foo</span> =~ [0-9]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> number</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">number</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\":-\"></a>:-</h1><p>Take <code>${val1:-val2}</code> for example, if <code>val1</code> is unset or null, return <code>val2</code>, otherwise return <code>val1</code>.</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">default=<span class=\"string\">\"default\"</span></div><div class=\"line\">preset=<span class=\"string\">\"preset\"</span></div><div class=\"line\">value=<span class=\"string\">\"This is <span class=\"variable\">$&#123;preset:-\"$default\"&#125;</span> value\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$value</span>  <span class=\"comment\"># This is preset value</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">default=<span class=\"string\">\"default\"</span></div><div class=\"line\">value=<span class=\"string\">\"This is <span class=\"variable\">$&#123;preset:-\"$default\"&#125;</span> value\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$value</span>  <span class=\"comment\"># This is default value</span></div></pre></td></tr></table></figure>\n<h1 id=\"set-a\"><a href=\"#set-a\" class=\"headerlink\" title=\"set -a\"></a>set -a</h1><p>Definition from the <a href=\"https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html#The-Set-Builtin\" target=\"_blank\" rel=\"external\">Bash Manual</a></p>\n<blockquote>\n<p><code>-a</code></p>\n<p>Each variable or function that is created or modified is given the export attribute and marked for export to the environment of subsequent commands.</p>\n</blockquote>\n<p>Honestly I haven’t fully comprehended the definition, but we can set up an example to see what it does.</p>\n<ol>\n<li><p>Create <code>foo.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">set</span> <span class=\"_\">-a</span></div><div class=\"line\">. <span class=\"string\">\"./bar.sh\"</span></div><div class=\"line\"><span class=\"built_in\">set</span> +a</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"a=<span class=\"variable\">$a</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"b=<span class=\"variable\">$b</span>\"</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"c=<span class=\"variable\">$c</span>\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Create <code>bar.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\">c=3</div></pre></td></tr></table></figure>\n</li>\n<li><p>Set executable permission</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x foo.sh</div><div class=\"line\">chmod +x bar.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>Source <code>foo.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ./foo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>Result</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=1</div><div class=\"line\">b=2</div><div class=\"line\">c=3</div></pre></td></tr></table></figure>\n<p>As you can see, we can access all the variables defined in <code>bar.sh</code> in <code>foo.sh</code>, just as if they are marked as <code>export</code>. If we didn’t use <code>set -a</code>, the result would be</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=</div><div class=\"line\">b=</div><div class=\"line\">c=</div></pre></td></tr></table></figure>\n</li>\n<li><p>We can access it directly in the terminal too, they are exported all the way to the top bash environment.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$a</span></div><div class=\"line\">1</div><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$b</span></div><div class=\"line\">2</div><div class=\"line\">➜  /tmp <span class=\"built_in\">echo</span> <span class=\"variable\">$c</span></div><div class=\"line\">3</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"Bash-Regular-Expressions\"><a href=\"#Bash-Regular-Expressions\" class=\"headerlink\" title=\"Bash Regular Expressions\"></a>Bash Regular Expressions</h1><p>We can use regular expressions with the help of <code>=~</code>, here is an example.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">foo=1</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$foo</span> =~ [[:digit:]]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> number</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">number</div></pre></td></tr></table></figure>\n<p>Notice that you cannot use <code>\\d</code> or <code>\\\\d</code> to replace <code>[[:digit:]]</code>, because <code>\\d</code> is PCRE, while it uses POSIX regex here, which doesn’t recognize <code>\\d</code>. If you think <code>[[:digit:]]</code> is too long, you can use <code>[0-9]</code> to replace it, which has the same effect.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/env bash</span></div><div class=\"line\"></div><div class=\"line\">foo=1</div><div class=\"line\"><span class=\"keyword\">if</span> [[ <span class=\"variable\">$foo</span> =~ [0-9]+$ ]]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> number</div><div class=\"line\"><span class=\"keyword\">fi</span></div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">number</div></pre></td></tr></table></figure>"},{"title":"Specify Port For Hexo Git Deployment","date":"2015-12-17T13:11:12.000Z","thumbnail":"https://avatars2.githubusercontent.com/u/6375567?v=3&s=400","_content":"\nUsually if you want to deploy your hexo posts with git, you can add the following lines to your _config.yml file:\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@example.com:blog.git\n  branch: master\n  message:\n```\n\nAnd hexo would deploy your posts if you run `hexo deploy`, and it will use port 22 (because git uses ssh or https protocal to access server, and hexo will use `git under ssh` by default). What if the ssh port of your server is not 22? Say it's port 20000, what can you do? You can change the contents to the following lines:\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: ssh://git@example.com:20000/home/git/blog.git\n  branch: master\n  message:\n```\n\nRun `hexo deploy`, and it works too. Hooray!\n","source":"_posts/Specify-Port-For-Hexo-Git-Deployment.md","raw":"title: Specify Port For Hexo Git Deployment\ndate: 2015-12-17 21:11:12\ntags: [hexo, git]\nthumbnail: https://avatars2.githubusercontent.com/u/6375567?v=3&s=400\ncategories: Coding\n---\n\nUsually if you want to deploy your hexo posts with git, you can add the following lines to your _config.yml file:\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@example.com:blog.git\n  branch: master\n  message:\n```\n\nAnd hexo would deploy your posts if you run `hexo deploy`, and it will use port 22 (because git uses ssh or https protocal to access server, and hexo will use `git under ssh` by default). What if the ssh port of your server is not 22? Say it's port 20000, what can you do? You can change the contents to the following lines:\n\n```\n# Deployment\n## Docs: http://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: ssh://git@example.com:20000/home/git/blog.git\n  branch: master\n  message:\n```\n\nRun `hexo deploy`, and it works too. Hooray!\n","slug":"Specify-Port-For-Hexo-Git-Deployment","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdg002i8arfiotr9zc7","content":"<p>Usually if you want to deploy your hexo posts with git, you can add the following lines to your _config.yml file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@example.com:blog.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>And hexo would deploy your posts if you run <code>hexo deploy</code>, and it will use port 22 (because git uses ssh or https protocal to access server, and hexo will use <code>git under ssh</code> by default). What if the ssh port of your server is not 22? Say it’s port 20000, what can you do? You can change the contents to the following lines:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: ssh://git@example.com:20000/home/git/blog.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>Run <code>hexo deploy</code>, and it works too. Hooray!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Usually if you want to deploy your hexo posts with git, you can add the following lines to your _config.yml file:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@example.com:blog.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>And hexo would deploy your posts if you run <code>hexo deploy</code>, and it will use port 22 (because git uses ssh or https protocal to access server, and hexo will use <code>git under ssh</code> by default). What if the ssh port of your server is not 22? Say it’s port 20000, what can you do? You can change the contents to the following lines:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: http://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: ssh://git@example.com:20000/home/git/blog.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>Run <code>hexo deploy</code>, and it works too. Hooray!</p>\n"},{"title":"Super CapsLock On Ubuntu 16.10","date":"2016-12-06T14:02:35.000Z","thumbnail":"/images/capslock.jpg","_content":"\nOn ubuntu 16.10, make CapsLock act as Esc when it is hit, and as Ctrl when it is held.\n\nTo make it work, modify /etc/default/keyboard, change\n\n```\nXKBOPTIONS=\"\"\n```\n\nto\n\n```\nXKBOPTIONS=\"caps:ctrl_modifier\"\n```\n\nThen add the following line in `~/.xsessionrc`\n\n``` shell\n#!/usr/bin/env zsh\n\n/usr/bin/xcape -e 'Caps_Lock=Escape'\n```\n\nReboot.\n","source":"_posts/Super-CapsLock-On-Ubuntu-16-10.md","raw":"title: Super CapsLock On Ubuntu 16.10\ndate: 2016-12-06 22:02:35\ntags: [ubuntu, linux]\ncategories: Coding\nthumbnail: /images/capslock.jpg\n---\n\nOn ubuntu 16.10, make CapsLock act as Esc when it is hit, and as Ctrl when it is held.\n\nTo make it work, modify /etc/default/keyboard, change\n\n```\nXKBOPTIONS=\"\"\n```\n\nto\n\n```\nXKBOPTIONS=\"caps:ctrl_modifier\"\n```\n\nThen add the following line in `~/.xsessionrc`\n\n``` shell\n#!/usr/bin/env zsh\n\n/usr/bin/xcape -e 'Caps_Lock=Escape'\n```\n\nReboot.\n","slug":"Super-CapsLock-On-Ubuntu-16-10","published":1,"updated":"2016-12-10T04:59:41.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdh002l8arf03um4ko3","content":"<p>On ubuntu 16.10, make CapsLock act as Esc when it is hit, and as Ctrl when it is held.</p>\n<p>To make it work, modify /etc/default/keyboard, change</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XKBOPTIONS=&quot;&quot;</div></pre></td></tr></table></figure>\n<p>to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XKBOPTIONS=&quot;caps:ctrl_modifier&quot;</div></pre></td></tr></table></figure>\n<p>Then add the following line in <code>~/.xsessionrc</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env zsh</span></div><div class=\"line\"></div><div class=\"line\">/usr/bin/xcape -e 'Caps_Lock=Escape'</div></pre></td></tr></table></figure>\n<p>Reboot.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>On ubuntu 16.10, make CapsLock act as Esc when it is hit, and as Ctrl when it is held.</p>\n<p>To make it work, modify /etc/default/keyboard, change</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XKBOPTIONS=&quot;&quot;</div></pre></td></tr></table></figure>\n<p>to</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XKBOPTIONS=&quot;caps:ctrl_modifier&quot;</div></pre></td></tr></table></figure>\n<p>Then add the following line in <code>~/.xsessionrc</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/usr/bin/env zsh</span></div><div class=\"line\"></div><div class=\"line\">/usr/bin/xcape -e 'Caps_Lock=Escape'</div></pre></td></tr></table></figure>\n<p>Reboot.</p>\n"},{"title":"Something About Dnsmasq On Ubuntu 15.10","date":"2015-12-17T11:37:39.000Z","thumbnail":"http://recursostic.educacion.es/observatorio/web/images/upload/ccam0040/dnslinux/Servidor-DNS-con-dnsmasq_html_m6de5e09c.png","_content":"\n# Preface\n\nThere are something confusing about dnsmasq on ubuntu 15.10. I would like to write them down here, in case I might forget down the road.\n\n# How Dnsmasq Starts On Ubuntu 15.10\n\nYou can find the answer in the file `/etc/NetworkManager/NetworkManager.conf`:\n\n```bash\n[main]\nplugins=ifupdown,keyfile,ofono\ndns=dnsmasq\n\n[ifupdown]\nmanaged=false\n```\n\nIf you notice the line `dns=dnsmasq`, you may figure out that it is `network-manager` that starts dnsmasq. So if you run `sudo service network-manager restart`, `dnsmasq` will get retarted too.\n\n# Configure Network-Manager Not To Use Dnsmasq\n\nHow to let network-manager not use dnsmasq, but use the dns servers specified in the file `/etc/resolv.conf` instead? Just comment the line `dns=dnsmasq` in `/etc/NetworkManager/NetworkManager.conf` would be fine, as follows:\n\n```bash\n[main]\nplugins=ifupdown,keyfile,ofono\n#dns=dnsmasq\n\n[ifupdown]\nmanaged=false\n```\n\nThen edit `/etc/resolv.conf`, add your dns server:\n\n```bash\nnamesever 8.8.8.8\n```\n\nFinally restart network-manager, you will find out the dns server has changed.\n\n```bash\nsudo service network-manager restart\n```\n","source":"_posts/Something-About-Dnsmasq-On-Ubuntu-15-10.md","raw":"title: Something About Dnsmasq On Ubuntu 15.10\ndate: 2015-12-17 19:37:39\ntags: [linux, dnsmasq]\nthumbnail: http://recursostic.educacion.es/observatorio/web/images/upload/ccam0040/dnslinux/Servidor-DNS-con-dnsmasq_html_m6de5e09c.png\ncategories: Coding\n---\n\n# Preface\n\nThere are something confusing about dnsmasq on ubuntu 15.10. I would like to write them down here, in case I might forget down the road.\n\n# How Dnsmasq Starts On Ubuntu 15.10\n\nYou can find the answer in the file `/etc/NetworkManager/NetworkManager.conf`:\n\n```bash\n[main]\nplugins=ifupdown,keyfile,ofono\ndns=dnsmasq\n\n[ifupdown]\nmanaged=false\n```\n\nIf you notice the line `dns=dnsmasq`, you may figure out that it is `network-manager` that starts dnsmasq. So if you run `sudo service network-manager restart`, `dnsmasq` will get retarted too.\n\n# Configure Network-Manager Not To Use Dnsmasq\n\nHow to let network-manager not use dnsmasq, but use the dns servers specified in the file `/etc/resolv.conf` instead? Just comment the line `dns=dnsmasq` in `/etc/NetworkManager/NetworkManager.conf` would be fine, as follows:\n\n```bash\n[main]\nplugins=ifupdown,keyfile,ofono\n#dns=dnsmasq\n\n[ifupdown]\nmanaged=false\n```\n\nThen edit `/etc/resolv.conf`, add your dns server:\n\n```bash\nnamesever 8.8.8.8\n```\n\nFinally restart network-manager, you will find out the dns server has changed.\n\n```bash\nsudo service network-manager restart\n```\n","slug":"Something-About-Dnsmasq-On-Ubuntu-15-10","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdi002p8arf8k3paxfc","content":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>There are something confusing about dnsmasq on ubuntu 15.10. I would like to write them down here, in case I might forget down the road.</p>\n<h1 id=\"How-Dnsmasq-Starts-On-Ubuntu-15-10\"><a href=\"#How-Dnsmasq-Starts-On-Ubuntu-15-10\" class=\"headerlink\" title=\"How Dnsmasq Starts On Ubuntu 15.10\"></a>How Dnsmasq Starts On Ubuntu 15.10</h1><p>You can find the answer in the file <code>/etc/NetworkManager/NetworkManager.conf</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">plugins=ifupdown,keyfile,ofono</div><div class=\"line\">dns=dnsmasq</div><div class=\"line\"></div><div class=\"line\">[ifupdown]</div><div class=\"line\">managed=<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>If you notice the line <code>dns=dnsmasq</code>, you may figure out that it is <code>network-manager</code> that starts dnsmasq. So if you run <code>sudo service network-manager restart</code>, <code>dnsmasq</code> will get retarted too.</p>\n<h1 id=\"Configure-Network-Manager-Not-To-Use-Dnsmasq\"><a href=\"#Configure-Network-Manager-Not-To-Use-Dnsmasq\" class=\"headerlink\" title=\"Configure Network-Manager Not To Use Dnsmasq\"></a>Configure Network-Manager Not To Use Dnsmasq</h1><p>How to let network-manager not use dnsmasq, but use the dns servers specified in the file <code>/etc/resolv.conf</code> instead? Just comment the line <code>dns=dnsmasq</code> in <code>/etc/NetworkManager/NetworkManager.conf</code> would be fine, as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">plugins=ifupdown,keyfile,ofono</div><div class=\"line\"><span class=\"comment\">#dns=dnsmasq</span></div><div class=\"line\"></div><div class=\"line\">[ifupdown]</div><div class=\"line\">managed=<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>Then edit <code>/etc/resolv.conf</code>, add your dns server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">namesever 8.8.8.8</div></pre></td></tr></table></figure>\n<p>Finally restart network-manager, you will find out the dns server has changed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service network-manager restart</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>There are something confusing about dnsmasq on ubuntu 15.10. I would like to write them down here, in case I might forget down the road.</p>\n<h1 id=\"How-Dnsmasq-Starts-On-Ubuntu-15-10\"><a href=\"#How-Dnsmasq-Starts-On-Ubuntu-15-10\" class=\"headerlink\" title=\"How Dnsmasq Starts On Ubuntu 15.10\"></a>How Dnsmasq Starts On Ubuntu 15.10</h1><p>You can find the answer in the file <code>/etc/NetworkManager/NetworkManager.conf</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">plugins=ifupdown,keyfile,ofono</div><div class=\"line\">dns=dnsmasq</div><div class=\"line\"></div><div class=\"line\">[ifupdown]</div><div class=\"line\">managed=<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>If you notice the line <code>dns=dnsmasq</code>, you may figure out that it is <code>network-manager</code> that starts dnsmasq. So if you run <code>sudo service network-manager restart</code>, <code>dnsmasq</code> will get retarted too.</p>\n<h1 id=\"Configure-Network-Manager-Not-To-Use-Dnsmasq\"><a href=\"#Configure-Network-Manager-Not-To-Use-Dnsmasq\" class=\"headerlink\" title=\"Configure Network-Manager Not To Use Dnsmasq\"></a>Configure Network-Manager Not To Use Dnsmasq</h1><p>How to let network-manager not use dnsmasq, but use the dns servers specified in the file <code>/etc/resolv.conf</code> instead? Just comment the line <code>dns=dnsmasq</code> in <code>/etc/NetworkManager/NetworkManager.conf</code> would be fine, as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[main]</div><div class=\"line\">plugins=ifupdown,keyfile,ofono</div><div class=\"line\"><span class=\"comment\">#dns=dnsmasq</span></div><div class=\"line\"></div><div class=\"line\">[ifupdown]</div><div class=\"line\">managed=<span class=\"literal\">false</span></div></pre></td></tr></table></figure>\n<p>Then edit <code>/etc/resolv.conf</code>, add your dns server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">namesever 8.8.8.8</div></pre></td></tr></table></figure>\n<p>Finally restart network-manager, you will find out the dns server has changed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service network-manager restart</div></pre></td></tr></table></figure>\n"},{"title":"Switch CapsLock And Esc And Take CapsLock As Control When It Is Pressed","date":"2015-12-16T15:10:56.000Z","_content":"\n# Edit 1\n\nSometimes the method mentioned below just stops working, and I don't know why. For now I just switch Esc and CapsLock, and leave Control part behind. It's quite easy if you just want to switch Esc and CapsLock, all you need to do is install `gnome-tweak-tool` and find `CapsLock key behavior` under `Typing`, and choose `Swap Esc and Caps Lock`, just as shown below:\n\n![gnome-tweak-tool](http://i.imgur.com/qfmc5A0.png)\n\n---\n\n# Edit 2\n\nI found a way to make it work. First, open `gnome-tweak-tool` and find `CapsLock key behavior` under `Typing`, and choose `Make Caps Lock an additional Ctrl`\n\n![gnome-tweak-tool](http://i.imgur.com/LrpiLjH.png)\n\nThen add the following line in your `~/.bashrc` file:\n\n```bash\nxcape -e 'Caps_Lock=Escape'\n```\n\nIt works for me. The only problem is that you don't have a CapsLock key anymore. But I guess you can map another key with `gnome-tweak-tool`. I don't use that key a lot, so I haven't done that yet. By the way, you don't have to see the method below, it doesn't work properly, at least for me.\n\n---\n\n# Preface\n\nI've been using vim for years, and I've been using `Esc` for years. A few days before, I heard about an idea that I could switch `Caps Lock` and `Esc` to make vim more convenient, because you know, `Caps Lock` is nearer than `Esc`. This is interesting, but lately I heard about a even more convenient idea, which not only includes switching `Caps Lock` and `Esc`, but also taking `Caps Lock` as `Control` when it's pressed. So in this way, `Caps Lock` has two distinct functionalities, one is to be used as `Esc` when punched, the other is to be used as `Control` when pressed, what a great idea! Let's get started to make it real.\n\n# Installation\n\nI'm using ubuntu 15.10, so I can only guarantee it works in linux. First thing you need to do is to install xcape.\n\n```bash\nsudo apt-get install xcape\n```\n\n# Script\n\nAfter that, create a new file called `xmodmaprc`, let's put it under `~/Tools` (or wherever you want, ~ denotes your home folder). The contents of `xmodmaprc` are as follows:\n\n```bash\n!\n! make caps_lock an additional control\nclear Lock\n! NOTE: this keycode may need to be changed for your control\nkeycode 66 = Control_L\nadd Control = Control_L\n\n!\n! make escape be caps_lock\nkeysym Escape = Caps_Lock\nadd Lock = Caps_Lock\n\n!\n! make a fake escape key (so we can map it with xcape)\nkeycode 999 = Escape\n```\n\nCreate another file called `switch.sh`, put it under `~/Tools` too.\n\n```bash\n#!/bin/sh\n# keyboard settings need the desktop to be fully loaded, so we let it sleep for 15s to wait for it.\nsleep 15\n\nxmodmap $HOME/Tools/xmodmaprc\nxcape -e 'Control_L=Escape'\n```\n\nAdd permission to make it executable\n\n```bash\nchmod +x ~/Tools/switch.sh\n```\n\nNow if you run `~/Tools/switch.sh`, you will find that it's already working\n\n# Startup\n\nOf course you don't want to run `~/Tools/switch.sh` manually every time a session starts. Open `Startup Applications` in unity dash and add a new entry:\n\n![Startup Applications](http://i.imgur.com/FWQ1gkg.png)\n\nNow reboot, and you will find that you don't have to run the command manually any more. `Startup Applications` does this for you automatically. Enjoy.\n\n# Reference\n\n[super-caps](https://github.com/cmatheson/super-caps)\n","source":"_posts/Switch-CapsLock-And-Esc-And-Take-CapsLock-As-Control-When-It-Is-Pressed.md","raw":"title: Switch CapsLock And Esc And Take CapsLock As Control When It Is Pressed\ndate: 2015-12-16 23:10:56\ntags: [vim, linux]\ncategories: Coding\n---\n\n# Edit 1\n\nSometimes the method mentioned below just stops working, and I don't know why. For now I just switch Esc and CapsLock, and leave Control part behind. It's quite easy if you just want to switch Esc and CapsLock, all you need to do is install `gnome-tweak-tool` and find `CapsLock key behavior` under `Typing`, and choose `Swap Esc and Caps Lock`, just as shown below:\n\n![gnome-tweak-tool](http://i.imgur.com/qfmc5A0.png)\n\n---\n\n# Edit 2\n\nI found a way to make it work. First, open `gnome-tweak-tool` and find `CapsLock key behavior` under `Typing`, and choose `Make Caps Lock an additional Ctrl`\n\n![gnome-tweak-tool](http://i.imgur.com/LrpiLjH.png)\n\nThen add the following line in your `~/.bashrc` file:\n\n```bash\nxcape -e 'Caps_Lock=Escape'\n```\n\nIt works for me. The only problem is that you don't have a CapsLock key anymore. But I guess you can map another key with `gnome-tweak-tool`. I don't use that key a lot, so I haven't done that yet. By the way, you don't have to see the method below, it doesn't work properly, at least for me.\n\n---\n\n# Preface\n\nI've been using vim for years, and I've been using `Esc` for years. A few days before, I heard about an idea that I could switch `Caps Lock` and `Esc` to make vim more convenient, because you know, `Caps Lock` is nearer than `Esc`. This is interesting, but lately I heard about a even more convenient idea, which not only includes switching `Caps Lock` and `Esc`, but also taking `Caps Lock` as `Control` when it's pressed. So in this way, `Caps Lock` has two distinct functionalities, one is to be used as `Esc` when punched, the other is to be used as `Control` when pressed, what a great idea! Let's get started to make it real.\n\n# Installation\n\nI'm using ubuntu 15.10, so I can only guarantee it works in linux. First thing you need to do is to install xcape.\n\n```bash\nsudo apt-get install xcape\n```\n\n# Script\n\nAfter that, create a new file called `xmodmaprc`, let's put it under `~/Tools` (or wherever you want, ~ denotes your home folder). The contents of `xmodmaprc` are as follows:\n\n```bash\n!\n! make caps_lock an additional control\nclear Lock\n! NOTE: this keycode may need to be changed for your control\nkeycode 66 = Control_L\nadd Control = Control_L\n\n!\n! make escape be caps_lock\nkeysym Escape = Caps_Lock\nadd Lock = Caps_Lock\n\n!\n! make a fake escape key (so we can map it with xcape)\nkeycode 999 = Escape\n```\n\nCreate another file called `switch.sh`, put it under `~/Tools` too.\n\n```bash\n#!/bin/sh\n# keyboard settings need the desktop to be fully loaded, so we let it sleep for 15s to wait for it.\nsleep 15\n\nxmodmap $HOME/Tools/xmodmaprc\nxcape -e 'Control_L=Escape'\n```\n\nAdd permission to make it executable\n\n```bash\nchmod +x ~/Tools/switch.sh\n```\n\nNow if you run `~/Tools/switch.sh`, you will find that it's already working\n\n# Startup\n\nOf course you don't want to run `~/Tools/switch.sh` manually every time a session starts. Open `Startup Applications` in unity dash and add a new entry:\n\n![Startup Applications](http://i.imgur.com/FWQ1gkg.png)\n\nNow reboot, and you will find that you don't have to run the command manually any more. `Startup Applications` does this for you automatically. Enjoy.\n\n# Reference\n\n[super-caps](https://github.com/cmatheson/super-caps)\n","slug":"Switch-CapsLock-And-Esc-And-Take-CapsLock-As-Control-When-It-Is-Pressed","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdk002s8arfk9ma7i5a","content":"<h1 id=\"Edit-1\"><a href=\"#Edit-1\" class=\"headerlink\" title=\"Edit 1\"></a>Edit 1</h1><p>Sometimes the method mentioned below just stops working, and I don’t know why. For now I just switch Esc and CapsLock, and leave Control part behind. It’s quite easy if you just want to switch Esc and CapsLock, all you need to do is install <code>gnome-tweak-tool</code> and find <code>CapsLock key behavior</code> under <code>Typing</code>, and choose <code>Swap Esc and Caps Lock</code>, just as shown below:</p>\n<p><img src=\"http://i.imgur.com/qfmc5A0.png\" alt=\"gnome-tweak-tool\"></p>\n<hr>\n<h1 id=\"Edit-2\"><a href=\"#Edit-2\" class=\"headerlink\" title=\"Edit 2\"></a>Edit 2</h1><p>I found a way to make it work. First, open <code>gnome-tweak-tool</code> and find <code>CapsLock key behavior</code> under <code>Typing</code>, and choose <code>Make Caps Lock an additional Ctrl</code></p>\n<p><img src=\"http://i.imgur.com/LrpiLjH.png\" alt=\"gnome-tweak-tool\"></p>\n<p>Then add the following line in your <code>~/.bashrc</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcape <span class=\"_\">-e</span> <span class=\"string\">'Caps_Lock=Escape'</span></div></pre></td></tr></table></figure>\n<p>It works for me. The only problem is that you don’t have a CapsLock key anymore. But I guess you can map another key with <code>gnome-tweak-tool</code>. I don’t use that key a lot, so I haven’t done that yet. By the way, you don’t have to see the method below, it doesn’t work properly, at least for me.</p>\n<hr>\n<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>I’ve been using vim for years, and I’ve been using <code>Esc</code> for years. A few days before, I heard about an idea that I could switch <code>Caps Lock</code> and <code>Esc</code> to make vim more convenient, because you know, <code>Caps Lock</code> is nearer than <code>Esc</code>. This is interesting, but lately I heard about a even more convenient idea, which not only includes switching <code>Caps Lock</code> and <code>Esc</code>, but also taking <code>Caps Lock</code> as <code>Control</code> when it’s pressed. So in this way, <code>Caps Lock</code> has two distinct functionalities, one is to be used as <code>Esc</code> when punched, the other is to be used as <code>Control</code> when pressed, what a great idea! Let’s get started to make it real.</p>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><p>I’m using ubuntu 15.10, so I can only guarantee it works in linux. First thing you need to do is to install xcape.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install xcape</div></pre></td></tr></table></figure>\n<h1 id=\"Script\"><a href=\"#Script\" class=\"headerlink\" title=\"Script\"></a>Script</h1><p>After that, create a new file called <code>xmodmaprc</code>, let’s put it under <code>~/Tools</code> (or wherever you want, ~ denotes your home folder). The contents of <code>xmodmaprc</code> are as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">!</div><div class=\"line\">! make caps_lock an additional control</div><div class=\"line\">clear Lock</div><div class=\"line\">! NOTE: this keycode may need to be changed <span class=\"keyword\">for</span> your control</div><div class=\"line\">keycode 66 = Control_L</div><div class=\"line\">add Control = Control_L</div><div class=\"line\"></div><div class=\"line\">!</div><div class=\"line\">! make escape be caps_lock</div><div class=\"line\">keysym Escape = Caps_Lock</div><div class=\"line\">add Lock = Caps_Lock</div><div class=\"line\"></div><div class=\"line\">!</div><div class=\"line\">! make a fake escape key (so we can map it with xcape)</div><div class=\"line\">keycode 999 = Escape</div></pre></td></tr></table></figure>\n<p>Create another file called <code>switch.sh</code>, put it under <code>~/Tools</code> too.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\"># keyboard settings need the desktop to be fully loaded, so we let it sleep for 15s to wait for it.</span></div><div class=\"line\">sleep 15</div><div class=\"line\"></div><div class=\"line\">xmodmap <span class=\"variable\">$HOME</span>/Tools/xmodmaprc</div><div class=\"line\">xcape <span class=\"_\">-e</span> <span class=\"string\">'Control_L=Escape'</span></div></pre></td></tr></table></figure>\n<p>Add permission to make it executable</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x ~/Tools/switch.sh</div></pre></td></tr></table></figure>\n<p>Now if you run <code>~/Tools/switch.sh</code>, you will find that it’s already working</p>\n<h1 id=\"Startup\"><a href=\"#Startup\" class=\"headerlink\" title=\"Startup\"></a>Startup</h1><p>Of course you don’t want to run <code>~/Tools/switch.sh</code> manually every time a session starts. Open <code>Startup Applications</code> in unity dash and add a new entry:</p>\n<p><img src=\"http://i.imgur.com/FWQ1gkg.png\" alt=\"Startup Applications\"></p>\n<p>Now reboot, and you will find that you don’t have to run the command manually any more. <code>Startup Applications</code> does this for you automatically. Enjoy.</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://github.com/cmatheson/super-caps\" target=\"_blank\" rel=\"external\">super-caps</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Edit-1\"><a href=\"#Edit-1\" class=\"headerlink\" title=\"Edit 1\"></a>Edit 1</h1><p>Sometimes the method mentioned below just stops working, and I don’t know why. For now I just switch Esc and CapsLock, and leave Control part behind. It’s quite easy if you just want to switch Esc and CapsLock, all you need to do is install <code>gnome-tweak-tool</code> and find <code>CapsLock key behavior</code> under <code>Typing</code>, and choose <code>Swap Esc and Caps Lock</code>, just as shown below:</p>\n<p><img src=\"http://i.imgur.com/qfmc5A0.png\" alt=\"gnome-tweak-tool\"></p>\n<hr>\n<h1 id=\"Edit-2\"><a href=\"#Edit-2\" class=\"headerlink\" title=\"Edit 2\"></a>Edit 2</h1><p>I found a way to make it work. First, open <code>gnome-tweak-tool</code> and find <code>CapsLock key behavior</code> under <code>Typing</code>, and choose <code>Make Caps Lock an additional Ctrl</code></p>\n<p><img src=\"http://i.imgur.com/LrpiLjH.png\" alt=\"gnome-tweak-tool\"></p>\n<p>Then add the following line in your <code>~/.bashrc</code> file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xcape <span class=\"_\">-e</span> <span class=\"string\">'Caps_Lock=Escape'</span></div></pre></td></tr></table></figure>\n<p>It works for me. The only problem is that you don’t have a CapsLock key anymore. But I guess you can map another key with <code>gnome-tweak-tool</code>. I don’t use that key a lot, so I haven’t done that yet. By the way, you don’t have to see the method below, it doesn’t work properly, at least for me.</p>\n<hr>\n<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>I’ve been using vim for years, and I’ve been using <code>Esc</code> for years. A few days before, I heard about an idea that I could switch <code>Caps Lock</code> and <code>Esc</code> to make vim more convenient, because you know, <code>Caps Lock</code> is nearer than <code>Esc</code>. This is interesting, but lately I heard about a even more convenient idea, which not only includes switching <code>Caps Lock</code> and <code>Esc</code>, but also taking <code>Caps Lock</code> as <code>Control</code> when it’s pressed. So in this way, <code>Caps Lock</code> has two distinct functionalities, one is to be used as <code>Esc</code> when punched, the other is to be used as <code>Control</code> when pressed, what a great idea! Let’s get started to make it real.</p>\n<h1 id=\"Installation\"><a href=\"#Installation\" class=\"headerlink\" title=\"Installation\"></a>Installation</h1><p>I’m using ubuntu 15.10, so I can only guarantee it works in linux. First thing you need to do is to install xcape.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install xcape</div></pre></td></tr></table></figure>\n<h1 id=\"Script\"><a href=\"#Script\" class=\"headerlink\" title=\"Script\"></a>Script</h1><p>After that, create a new file called <code>xmodmaprc</code>, let’s put it under <code>~/Tools</code> (or wherever you want, ~ denotes your home folder). The contents of <code>xmodmaprc</code> are as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">!</div><div class=\"line\">! make caps_lock an additional control</div><div class=\"line\">clear Lock</div><div class=\"line\">! NOTE: this keycode may need to be changed <span class=\"keyword\">for</span> your control</div><div class=\"line\">keycode 66 = Control_L</div><div class=\"line\">add Control = Control_L</div><div class=\"line\"></div><div class=\"line\">!</div><div class=\"line\">! make escape be caps_lock</div><div class=\"line\">keysym Escape = Caps_Lock</div><div class=\"line\">add Lock = Caps_Lock</div><div class=\"line\"></div><div class=\"line\">!</div><div class=\"line\">! make a fake escape key (so we can map it with xcape)</div><div class=\"line\">keycode 999 = Escape</div></pre></td></tr></table></figure>\n<p>Create another file called <code>switch.sh</code>, put it under <code>~/Tools</code> too.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\"># keyboard settings need the desktop to be fully loaded, so we let it sleep for 15s to wait for it.</span></div><div class=\"line\">sleep 15</div><div class=\"line\"></div><div class=\"line\">xmodmap <span class=\"variable\">$HOME</span>/Tools/xmodmaprc</div><div class=\"line\">xcape <span class=\"_\">-e</span> <span class=\"string\">'Control_L=Escape'</span></div></pre></td></tr></table></figure>\n<p>Add permission to make it executable</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x ~/Tools/switch.sh</div></pre></td></tr></table></figure>\n<p>Now if you run <code>~/Tools/switch.sh</code>, you will find that it’s already working</p>\n<h1 id=\"Startup\"><a href=\"#Startup\" class=\"headerlink\" title=\"Startup\"></a>Startup</h1><p>Of course you don’t want to run <code>~/Tools/switch.sh</code> manually every time a session starts. Open <code>Startup Applications</code> in unity dash and add a new entry:</p>\n<p><img src=\"http://i.imgur.com/FWQ1gkg.png\" alt=\"Startup Applications\"></p>\n<p>Now reboot, and you will find that you don’t have to run the command manually any more. <code>Startup Applications</code> does this for you automatically. Enjoy.</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><p><a href=\"https://github.com/cmatheson/super-caps\" target=\"_blank\" rel=\"external\">super-caps</a></p>\n"},{"title":"Serialization and Deserialization in Java","date":"2017-05-10T02:01:24.000Z","thumbnail":"/images/serialization.jpg","_content":"\n## Introduction\n\n**Serialization:** a process which converts a Java instance into a bunch of bytes, so it can be stored in disk/database or transferred through network.\n\n**Deserialization:** the opposite of *Serialization*, in which a Java instance is extracted and recovered from disk/database/network.\n\n## How to serialize and deserialize?\n\nTo make the *Serialization* and *Deserialization* work for a Java class, you only need to *implement Serializable* in most cases.\n\nIn the following example, we will create a class called `Address`, serialize it using `WriteObject` and deserialize it using `ReadObject`.\n\n```java\npackage com.example;\n\nimport java.io.Serializable;\n\npublic class Address implements Serializable {\n\n  private String street;\n  private String country;\n\n  public void setStreet(String street) {\n    this.street = street;\n  }\n\n  public void setCountry(String country) {\n    this.country = country;\n  }\n\n  public String getStreet() {\n    return this.street;\n  }\n\n  public String getCountry() {\n    return this.country;\n  }\n\n  @Override\n    public String toString() {\n      return \" Street : \" +\n        this.street +\n        \" Country : \" +\n        this.country;\n    }\n}\n```\n\n```java\npackage com.example;\n\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\n\npublic class WriteObject{\n\n  public static void main (String args[]) {\n\n    Address address = new Address();\n    address.setStreet(\"wall street\");\n    address.setCountry(\"united states\");\n\n    try{\n\n      FileOutputStream fout = new FileOutputStream(\"c:\\\\address.ser\");\n      ObjectOutputStream oos = new ObjectOutputStream(fout);\n      oos.writeObject(address);\n      oos.close();\n      System.out.println(\"Done\");\n\n    }catch(Exception ex){\n      ex.printStackTrace();\n    }\n  }\n}\n```\n\n```java\npackage com.example;\n\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\npublic class ReadObject{\n\n  public static void main (String args[]) {\n\n    Address address;\n\n    try{\n\n      FileInputStream fin = new FileInputStream(\"c:\\\\address.ser\");\n      ObjectInputStream ois = new ObjectInputStream(fin);\n      address = (Address) ois.readObject();\n      ois.close();\n\n      System.out.println(address);\n\n    }catch(Exception ex){\n      ex.printStackTrace();\n    }\n  }\n}\n```\n\nFirst, run `WriteObject` to *Serialize* `Address` into `C:\\address.ser`, you can change it to another path if you use *Linux* or *Mac**OS*.\n\nThen run `readObject` to *Deserialize* `Address` from `C:\\address.ser`. And you can see from the console that we have obtained the serialized data in `C:\\address.ser`.\n\n```\nStreet : wall street Country : united states\n```\n\nThe whole process is illustrated as follows.\n\n#### Serialization\n\n![Serialization](/images/Serialization-and-Deserialization-in-Java.svg)\n\n#### Deserialization\n\n![Deserialization](/images/Serialization-and-Deserialization-in-Java-1.svg)\n\nWhat happened in the background was that Java serialized each field in `address`(aka. `street` and `country`) into disk and read it when the deserialization was done. But does Java know how to serialize/deserialize `street` and `country`? Yes, because they are of type *String*, which also *implements Serializable*, and Java has its own rules to convert a String instance into a stream of bytes, so they can be written into disk.\n\nEverything seems to be working fine, right? No, because you forgot to add `serialVersionUID` in `Address`. The correct version is this.\n\n```java\npackage com.example;\n\nimport java.io.Serializable;\n\npublic class Address implements Serializable{\n\n  // NOTICE HERE!\n  private static final long serialVersionUID = 1L;\n\n  private String street;\n  private String country;\n\n  public void setStreet(String street){\n    this.street = street;\n  }\n\n  public void setCountry(String country){\n    this.country = country;\n  }\n\n  public String getStreet(){\n    return this.street;\n  }\n\n  public String getCountry(){\n    return this.country;\n  }\n\n  @Override\n    public String toString() {\n      return \" Street : \" +\n        this.street +\n        \" Country : \" +\n        this.country;\n    }\n}\n```\n\nWhat is `serialVersionUID`? and why should I add it? Basically `serialVersionUID` is simply a number that is written into disk along with the serialized instance. And in the process of deserialization, Java checks whether the serialized `serialVersionUID` is the same as the one declared in class. If not, an exception will be thrown and deserialization will fail. It is used to make sure the serialized instance is compatible with the current class.\n\n#### Where Can I Get serialVersionUID?\n\n`serialVersionUID` can be set manually by the programmer with any number, or you can generate one using *serialver* provided by Oracle.\n\n#### What Will Happen If I Don’t Set serialVersionUID?\n\nJava will generate one for you based on class name, implemented interfaces, etc. But this is **highly discouraged**. Quote from Oracle doc:\n\n> It is strongly recommended that all serializable classes explicitly declare `serialVersionUID` values, since the default `serialVersionUID` computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected `serialVersionUID` conflicts during deserialization, causing deserialization to fail.\n\nFor example, if you don’t set `serialVersionUID` manually, Java may generate a `serialVersionUID = 12345` for you in the process of serialization. However, the deserializing program may use a different JVM and the `serialVersionUID` it gets may be `123456`, which is different because of different calculation algorithms. Then the program finds that the two `serialVersionUIDs` don’t match and throws an exception to tell the user that the deserialization fails.\n\n#### When should I update the serialVersionUID value?\n\nYou should update `serialVersionUID` when some incompatible fields are added to the class and it’s no longer possible to be support the old version.\n\nThat’s it. Below are some links that I found helpful when I was writing the article.\n\n*   [https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/](https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/)\n*   [http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it](http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it)\n","source":"_posts/Serialization-and-Deserialization-in-Java.md","raw":"title: Serialization and Deserialization in Java\ndate: 2017-05-10 10:01:24\ntags: Java\ncategories: Coding\nthumbnail: /images/serialization.jpg\n---\n\n## Introduction\n\n**Serialization:** a process which converts a Java instance into a bunch of bytes, so it can be stored in disk/database or transferred through network.\n\n**Deserialization:** the opposite of *Serialization*, in which a Java instance is extracted and recovered from disk/database/network.\n\n## How to serialize and deserialize?\n\nTo make the *Serialization* and *Deserialization* work for a Java class, you only need to *implement Serializable* in most cases.\n\nIn the following example, we will create a class called `Address`, serialize it using `WriteObject` and deserialize it using `ReadObject`.\n\n```java\npackage com.example;\n\nimport java.io.Serializable;\n\npublic class Address implements Serializable {\n\n  private String street;\n  private String country;\n\n  public void setStreet(String street) {\n    this.street = street;\n  }\n\n  public void setCountry(String country) {\n    this.country = country;\n  }\n\n  public String getStreet() {\n    return this.street;\n  }\n\n  public String getCountry() {\n    return this.country;\n  }\n\n  @Override\n    public String toString() {\n      return \" Street : \" +\n        this.street +\n        \" Country : \" +\n        this.country;\n    }\n}\n```\n\n```java\npackage com.example;\n\nimport java.io.FileOutputStream;\nimport java.io.ObjectOutputStream;\n\npublic class WriteObject{\n\n  public static void main (String args[]) {\n\n    Address address = new Address();\n    address.setStreet(\"wall street\");\n    address.setCountry(\"united states\");\n\n    try{\n\n      FileOutputStream fout = new FileOutputStream(\"c:\\\\address.ser\");\n      ObjectOutputStream oos = new ObjectOutputStream(fout);\n      oos.writeObject(address);\n      oos.close();\n      System.out.println(\"Done\");\n\n    }catch(Exception ex){\n      ex.printStackTrace();\n    }\n  }\n}\n```\n\n```java\npackage com.example;\n\nimport java.io.FileInputStream;\nimport java.io.ObjectInputStream;\n\npublic class ReadObject{\n\n  public static void main (String args[]) {\n\n    Address address;\n\n    try{\n\n      FileInputStream fin = new FileInputStream(\"c:\\\\address.ser\");\n      ObjectInputStream ois = new ObjectInputStream(fin);\n      address = (Address) ois.readObject();\n      ois.close();\n\n      System.out.println(address);\n\n    }catch(Exception ex){\n      ex.printStackTrace();\n    }\n  }\n}\n```\n\nFirst, run `WriteObject` to *Serialize* `Address` into `C:\\address.ser`, you can change it to another path if you use *Linux* or *Mac**OS*.\n\nThen run `readObject` to *Deserialize* `Address` from `C:\\address.ser`. And you can see from the console that we have obtained the serialized data in `C:\\address.ser`.\n\n```\nStreet : wall street Country : united states\n```\n\nThe whole process is illustrated as follows.\n\n#### Serialization\n\n![Serialization](/images/Serialization-and-Deserialization-in-Java.svg)\n\n#### Deserialization\n\n![Deserialization](/images/Serialization-and-Deserialization-in-Java-1.svg)\n\nWhat happened in the background was that Java serialized each field in `address`(aka. `street` and `country`) into disk and read it when the deserialization was done. But does Java know how to serialize/deserialize `street` and `country`? Yes, because they are of type *String*, which also *implements Serializable*, and Java has its own rules to convert a String instance into a stream of bytes, so they can be written into disk.\n\nEverything seems to be working fine, right? No, because you forgot to add `serialVersionUID` in `Address`. The correct version is this.\n\n```java\npackage com.example;\n\nimport java.io.Serializable;\n\npublic class Address implements Serializable{\n\n  // NOTICE HERE!\n  private static final long serialVersionUID = 1L;\n\n  private String street;\n  private String country;\n\n  public void setStreet(String street){\n    this.street = street;\n  }\n\n  public void setCountry(String country){\n    this.country = country;\n  }\n\n  public String getStreet(){\n    return this.street;\n  }\n\n  public String getCountry(){\n    return this.country;\n  }\n\n  @Override\n    public String toString() {\n      return \" Street : \" +\n        this.street +\n        \" Country : \" +\n        this.country;\n    }\n}\n```\n\nWhat is `serialVersionUID`? and why should I add it? Basically `serialVersionUID` is simply a number that is written into disk along with the serialized instance. And in the process of deserialization, Java checks whether the serialized `serialVersionUID` is the same as the one declared in class. If not, an exception will be thrown and deserialization will fail. It is used to make sure the serialized instance is compatible with the current class.\n\n#### Where Can I Get serialVersionUID?\n\n`serialVersionUID` can be set manually by the programmer with any number, or you can generate one using *serialver* provided by Oracle.\n\n#### What Will Happen If I Don’t Set serialVersionUID?\n\nJava will generate one for you based on class name, implemented interfaces, etc. But this is **highly discouraged**. Quote from Oracle doc:\n\n> It is strongly recommended that all serializable classes explicitly declare `serialVersionUID` values, since the default `serialVersionUID` computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected `serialVersionUID` conflicts during deserialization, causing deserialization to fail.\n\nFor example, if you don’t set `serialVersionUID` manually, Java may generate a `serialVersionUID = 12345` for you in the process of serialization. However, the deserializing program may use a different JVM and the `serialVersionUID` it gets may be `123456`, which is different because of different calculation algorithms. Then the program finds that the two `serialVersionUIDs` don’t match and throws an exception to tell the user that the deserialization fails.\n\n#### When should I update the serialVersionUID value?\n\nYou should update `serialVersionUID` when some incompatible fields are added to the class and it’s no longer possible to be support the old version.\n\nThat’s it. Below are some links that I found helpful when I was writing the article.\n\n*   [https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/](https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/)\n*   [http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it](http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it)\n","slug":"Serialization-and-Deserialization-in-Java","published":1,"updated":"2017-05-28T02:19:26.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdl002v8arfygpvfare","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><strong>Serialization:</strong> a process which converts a Java instance into a bunch of bytes, so it can be stored in disk/database or transferred through network.</p>\n<p><strong>Deserialization:</strong> the opposite of <em>Serialization</em>, in which a Java instance is extracted and recovered from disk/database/network.</p>\n<h2 id=\"How-to-serialize-and-deserialize\"><a href=\"#How-to-serialize-and-deserialize\" class=\"headerlink\" title=\"How to serialize and deserialize?\"></a>How to serialize and deserialize?</h2><p>To make the <em>Serialization</em> and <em>Deserialization</em> work for a Java class, you only need to <em>implement Serializable</em> in most cases.</p>\n<p>In the following example, we will create a class called <code>Address</code>, serialize it using <code>WriteObject</code> and deserialize it using <code>ReadObject</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String street;</div><div class=\"line\">  <span class=\"keyword\">private</span> String country;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStreet</span><span class=\"params\">(String street)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.street = street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCountry</span><span class=\"params\">(String country)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.country = country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStreet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCountry</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\" Street : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.street +</div><div class=\"line\">        <span class=\"string\">\" Country : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.country;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteObject</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Address address = <span class=\"keyword\">new</span> Address();</div><div class=\"line\">    address.setStreet(<span class=\"string\">\"wall street\"</span>);</div><div class=\"line\">    address.setCountry(<span class=\"string\">\"united states\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      FileOutputStream fout = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"c:\\\\address.ser\"</span>);</div><div class=\"line\">      ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fout);</div><div class=\"line\">      oos.writeObject(address);</div><div class=\"line\">      oos.close();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"Done\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</div><div class=\"line\">      ex.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadObject</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Address address;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      FileInputStream fin = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"c:\\\\address.ser\"</span>);</div><div class=\"line\">      ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fin);</div><div class=\"line\">      address = (Address) ois.readObject();</div><div class=\"line\">      ois.close();</div><div class=\"line\"></div><div class=\"line\">      System.out.println(address);</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</div><div class=\"line\">      ex.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>First, run <code>WriteObject</code> to <em>Serialize</em> <code>Address</code> into <code>C:\\address.ser</code>, you can change it to another path if you use <em>Linux</em> or <em>Mac**OS</em>.</p>\n<p>Then run <code>readObject</code> to <em>Deserialize</em> <code>Address</code> from <code>C:\\address.ser</code>. And you can see from the console that we have obtained the serialized data in <code>C:\\address.ser</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Street : wall street Country : united states</div></pre></td></tr></table></figure>\n<p>The whole process is illustrated as follows.</p>\n<h4 id=\"Serialization\"><a href=\"#Serialization\" class=\"headerlink\" title=\"Serialization\"></a>Serialization</h4><p><img src=\"/images/Serialization-and-Deserialization-in-Java.svg\" alt=\"Serialization\"></p>\n<h4 id=\"Deserialization\"><a href=\"#Deserialization\" class=\"headerlink\" title=\"Deserialization\"></a>Deserialization</h4><p><img src=\"/images/Serialization-and-Deserialization-in-Java-1.svg\" alt=\"Deserialization\"></p>\n<p>What happened in the background was that Java serialized each field in <code>address</code>(aka. <code>street</code> and <code>country</code>) into disk and read it when the deserialization was done. But does Java know how to serialize/deserialize <code>street</code> and <code>country</code>? Yes, because they are of type <em>String</em>, which also <em>implements Serializable</em>, and Java has its own rules to convert a String instance into a stream of bytes, so they can be written into disk.</p>\n<p>Everything seems to be working fine, right? No, because you forgot to add <code>serialVersionUID</code> in <code>Address</code>. The correct version is this.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// NOTICE HERE!</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String street;</div><div class=\"line\">  <span class=\"keyword\">private</span> String country;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStreet</span><span class=\"params\">(String street)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.street = street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCountry</span><span class=\"params\">(String country)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.country = country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStreet</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCountry</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\" Street : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.street +</div><div class=\"line\">        <span class=\"string\">\" Country : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.country;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>What is <code>serialVersionUID</code>? and why should I add it? Basically <code>serialVersionUID</code> is simply a number that is written into disk along with the serialized instance. And in the process of deserialization, Java checks whether the serialized <code>serialVersionUID</code> is the same as the one declared in class. If not, an exception will be thrown and deserialization will fail. It is used to make sure the serialized instance is compatible with the current class.</p>\n<h4 id=\"Where-Can-I-Get-serialVersionUID\"><a href=\"#Where-Can-I-Get-serialVersionUID\" class=\"headerlink\" title=\"Where Can I Get serialVersionUID?\"></a>Where Can I Get serialVersionUID?</h4><p><code>serialVersionUID</code> can be set manually by the programmer with any number, or you can generate one using <em>serialver</em> provided by Oracle.</p>\n<h4 id=\"What-Will-Happen-If-I-Don’t-Set-serialVersionUID\"><a href=\"#What-Will-Happen-If-I-Don’t-Set-serialVersionUID\" class=\"headerlink\" title=\"What Will Happen If I Don’t Set serialVersionUID?\"></a>What Will Happen If I Don’t Set serialVersionUID?</h4><p>Java will generate one for you based on class name, implemented interfaces, etc. But this is <strong>highly discouraged</strong>. Quote from Oracle doc:</p>\n<blockquote>\n<p>It is strongly recommended that all serializable classes explicitly declare <code>serialVersionUID</code> values, since the default <code>serialVersionUID</code> computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <code>serialVersionUID</code> conflicts during deserialization, causing deserialization to fail.</p>\n</blockquote>\n<p>For example, if you don’t set <code>serialVersionUID</code> manually, Java may generate a <code>serialVersionUID = 12345</code> for you in the process of serialization. However, the deserializing program may use a different JVM and the <code>serialVersionUID</code> it gets may be <code>123456</code>, which is different because of different calculation algorithms. Then the program finds that the two <code>serialVersionUIDs</code> don’t match and throws an exception to tell the user that the deserialization fails.</p>\n<h4 id=\"When-should-I-update-the-serialVersionUID-value\"><a href=\"#When-should-I-update-the-serialVersionUID-value\" class=\"headerlink\" title=\"When should I update the serialVersionUID value?\"></a>When should I update the serialVersionUID value?</h4><p>You should update <code>serialVersionUID</code> when some incompatible fields are added to the class and it’s no longer possible to be support the old version.</p>\n<p>That’s it. Below are some links that I found helpful when I was writing the article.</p>\n<ul>\n<li><a href=\"https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/\" target=\"_blank\" rel=\"external\">https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p><strong>Serialization:</strong> a process which converts a Java instance into a bunch of bytes, so it can be stored in disk/database or transferred through network.</p>\n<p><strong>Deserialization:</strong> the opposite of <em>Serialization</em>, in which a Java instance is extracted and recovered from disk/database/network.</p>\n<h2 id=\"How-to-serialize-and-deserialize\"><a href=\"#How-to-serialize-and-deserialize\" class=\"headerlink\" title=\"How to serialize and deserialize?\"></a>How to serialize and deserialize?</h2><p>To make the <em>Serialization</em> and <em>Deserialization</em> work for a Java class, you only need to <em>implement Serializable</em> in most cases.</p>\n<p>In the following example, we will create a class called <code>Address</code>, serialize it using <code>WriteObject</code> and deserialize it using <code>ReadObject</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String street;</div><div class=\"line\">  <span class=\"keyword\">private</span> String country;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStreet</span><span class=\"params\">(String street)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.street = street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCountry</span><span class=\"params\">(String country)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.country = country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStreet</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCountry</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\" Street : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.street +</div><div class=\"line\">        <span class=\"string\">\" Country : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.country;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectOutputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WriteObject</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Address address = <span class=\"keyword\">new</span> Address();</div><div class=\"line\">    address.setStreet(<span class=\"string\">\"wall street\"</span>);</div><div class=\"line\">    address.setCountry(<span class=\"string\">\"united states\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      FileOutputStream fout = <span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"c:\\\\address.ser\"</span>);</div><div class=\"line\">      ObjectOutputStream oos = <span class=\"keyword\">new</span> ObjectOutputStream(fout);</div><div class=\"line\">      oos.writeObject(address);</div><div class=\"line\">      oos.close();</div><div class=\"line\">      System.out.println(<span class=\"string\">\"Done\"</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</div><div class=\"line\">      ex.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</div><div class=\"line\"><span class=\"keyword\">import</span> java.io.ObjectInputStream;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReadObject</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span> <span class=\"params\">(String args[])</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    Address address;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\"></div><div class=\"line\">      FileInputStream fin = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"c:\\\\address.ser\"</span>);</div><div class=\"line\">      ObjectInputStream ois = <span class=\"keyword\">new</span> ObjectInputStream(fin);</div><div class=\"line\">      address = (Address) ois.readObject();</div><div class=\"line\">      ois.close();</div><div class=\"line\"></div><div class=\"line\">      System.out.println(address);</div><div class=\"line\"></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(Exception ex)&#123;</div><div class=\"line\">      ex.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>First, run <code>WriteObject</code> to <em>Serialize</em> <code>Address</code> into <code>C:\\address.ser</code>, you can change it to another path if you use <em>Linux</em> or <em>Mac**OS</em>.</p>\n<p>Then run <code>readObject</code> to <em>Deserialize</em> <code>Address</code> from <code>C:\\address.ser</code>. And you can see from the console that we have obtained the serialized data in <code>C:\\address.ser</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Street : wall street Country : united states</div></pre></td></tr></table></figure>\n<p>The whole process is illustrated as follows.</p>\n<h4 id=\"Serialization\"><a href=\"#Serialization\" class=\"headerlink\" title=\"Serialization\"></a>Serialization</h4><p><img src=\"/images/Serialization-and-Deserialization-in-Java.svg\" alt=\"Serialization\"></p>\n<h4 id=\"Deserialization\"><a href=\"#Deserialization\" class=\"headerlink\" title=\"Deserialization\"></a>Deserialization</h4><p><img src=\"/images/Serialization-and-Deserialization-in-Java-1.svg\" alt=\"Deserialization\"></p>\n<p>What happened in the background was that Java serialized each field in <code>address</code>(aka. <code>street</code> and <code>country</code>) into disk and read it when the deserialization was done. But does Java know how to serialize/deserialize <code>street</code> and <code>country</code>? Yes, because they are of type <em>String</em>, which also <em>implements Serializable</em>, and Java has its own rules to convert a String instance into a stream of bytes, so they can be written into disk.</p>\n<p>Everything seems to be working fine, right? No, because you forgot to add <code>serialVersionUID</code> in <code>Address</code>. The correct version is this.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.io.Serializable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// NOTICE HERE!</span></div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> String street;</div><div class=\"line\">  <span class=\"keyword\">private</span> String country;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStreet</span><span class=\"params\">(String street)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.street = street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCountry</span><span class=\"params\">(String country)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.country = country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getStreet</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.street;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCountry</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.country;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\" Street : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.street +</div><div class=\"line\">        <span class=\"string\">\" Country : \"</span> +</div><div class=\"line\">        <span class=\"keyword\">this</span>.country;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>What is <code>serialVersionUID</code>? and why should I add it? Basically <code>serialVersionUID</code> is simply a number that is written into disk along with the serialized instance. And in the process of deserialization, Java checks whether the serialized <code>serialVersionUID</code> is the same as the one declared in class. If not, an exception will be thrown and deserialization will fail. It is used to make sure the serialized instance is compatible with the current class.</p>\n<h4 id=\"Where-Can-I-Get-serialVersionUID\"><a href=\"#Where-Can-I-Get-serialVersionUID\" class=\"headerlink\" title=\"Where Can I Get serialVersionUID?\"></a>Where Can I Get serialVersionUID?</h4><p><code>serialVersionUID</code> can be set manually by the programmer with any number, or you can generate one using <em>serialver</em> provided by Oracle.</p>\n<h4 id=\"What-Will-Happen-If-I-Don’t-Set-serialVersionUID\"><a href=\"#What-Will-Happen-If-I-Don’t-Set-serialVersionUID\" class=\"headerlink\" title=\"What Will Happen If I Don’t Set serialVersionUID?\"></a>What Will Happen If I Don’t Set serialVersionUID?</h4><p>Java will generate one for you based on class name, implemented interfaces, etc. But this is <strong>highly discouraged</strong>. Quote from Oracle doc:</p>\n<blockquote>\n<p>It is strongly recommended that all serializable classes explicitly declare <code>serialVersionUID</code> values, since the default <code>serialVersionUID</code> computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected <code>serialVersionUID</code> conflicts during deserialization, causing deserialization to fail.</p>\n</blockquote>\n<p>For example, if you don’t set <code>serialVersionUID</code> manually, Java may generate a <code>serialVersionUID = 12345</code> for you in the process of serialization. However, the deserializing program may use a different JVM and the <code>serialVersionUID</code> it gets may be <code>123456</code>, which is different because of different calculation algorithms. Then the program finds that the two <code>serialVersionUIDs</code> don’t match and throws an exception to tell the user that the deserialization fails.</p>\n<h4 id=\"When-should-I-update-the-serialVersionUID-value\"><a href=\"#When-should-I-update-the-serialVersionUID-value\" class=\"headerlink\" title=\"When should I update the serialVersionUID value?\"></a>When should I update the serialVersionUID value?</h4><p>You should update <code>serialVersionUID</code> when some incompatible fields are added to the class and it’s no longer possible to be support the old version.</p>\n<p>That’s it. Below are some links that I found helpful when I was writing the article.</p>\n<ul>\n<li><a href=\"https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/\" target=\"_blank\" rel=\"external\">https://www.mkyong.com/java-best-practices/understand-the-serialversionuid/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it</a></li>\n</ul>\n"},{"title":"The empty set is the subset of any set","date":"2016-10-06T01:44:52.000Z","thumbnail":"/images/empty.jpg","_content":"\nThe empty set is the subset of any set. This is true. Some people take it as a convention, but in fact, it can be explained.\n\nAccording to the definition of $\\subset$, \n\n$\\varnothing\\subset A\\Leftrightarrow$ \n\n> $\\forall x$, if $x\\in\\varnothing$, then $x\\in A$. \n\nThis is a vacuous truth, because the antecedent ($x\\in\\varnothing$) could never be true, so the conclusion always holds ($x\\in A$). So $\\varnothing\\subset A$ holds.\n\nMaybe you are thinking, OK, this is a vacuous truth, so maybe I can change it so that the following expression is also true.\n\n$\\forall x$, if $x\\in\\varnothing$, then $x\\not\\in A$. \n\nThen you could say, $\\varnothing\\subset A$ is false.\n\nThis is what I asked on [math.stackexchange.com](https://math.stackexchange.com/questions/1953218/is-the-empty-set-is-a-subset-of-any-set-a-convention?noredirect=1#comment4015040_1953218) the other day, and I read through all the answers and comments in it. Then I realized the above expression doesn't mean $\\varnothing\\not\\subset A$, it just means $\\varnothing\\subset A^c$.\n\nI think what $\\varnothing\\not\\subset A$ means is\n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$\n\nSince you can never find $x$ such that $x\\in\\varnothing$, so the condition could never be correct, so we don't have enough evidence to make the conclusion($\\varnothing\\not\\subset A$).\n\nNotice the whole expression itself(If there exists $x\\in\\varnothing$ such that $x\\not\\in A$, then we say $\\varnothing\\not\\subset A$) is correct since it's a vacuous truth(the condition could never be true).\n\nIn fact\n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A\\Leftrightarrow$ $\\varnothing\\not\\subset A$\n\nBecause \n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$\n\nis false, so \n\n$\\varnothing\\not\\subset A$\n\n is false, which makes $\\varnothing\\subset A$ true.\n","source":"_posts/The-empty-set-is-the-subset-of-any-set.md","raw":"title: The empty set is the subset of any set\ndate: 2016-10-06 09:44:52\ntags: set-thoery\ncategories: Math\nthumbnail: /images/empty.jpg\n---\n\nThe empty set is the subset of any set. This is true. Some people take it as a convention, but in fact, it can be explained.\n\nAccording to the definition of $\\subset$, \n\n$\\varnothing\\subset A\\Leftrightarrow$ \n\n> $\\forall x$, if $x\\in\\varnothing$, then $x\\in A$. \n\nThis is a vacuous truth, because the antecedent ($x\\in\\varnothing$) could never be true, so the conclusion always holds ($x\\in A$). So $\\varnothing\\subset A$ holds.\n\nMaybe you are thinking, OK, this is a vacuous truth, so maybe I can change it so that the following expression is also true.\n\n$\\forall x$, if $x\\in\\varnothing$, then $x\\not\\in A$. \n\nThen you could say, $\\varnothing\\subset A$ is false.\n\nThis is what I asked on [math.stackexchange.com](https://math.stackexchange.com/questions/1953218/is-the-empty-set-is-a-subset-of-any-set-a-convention?noredirect=1#comment4015040_1953218) the other day, and I read through all the answers and comments in it. Then I realized the above expression doesn't mean $\\varnothing\\not\\subset A$, it just means $\\varnothing\\subset A^c$.\n\nI think what $\\varnothing\\not\\subset A$ means is\n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$\n\nSince you can never find $x$ such that $x\\in\\varnothing$, so the condition could never be correct, so we don't have enough evidence to make the conclusion($\\varnothing\\not\\subset A$).\n\nNotice the whole expression itself(If there exists $x\\in\\varnothing$ such that $x\\not\\in A$, then we say $\\varnothing\\not\\subset A$) is correct since it's a vacuous truth(the condition could never be true).\n\nIn fact\n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A\\Leftrightarrow$ $\\varnothing\\not\\subset A$\n\nBecause \n\n$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$\n\nis false, so \n\n$\\varnothing\\not\\subset A$\n\n is false, which makes $\\varnothing\\subset A$ true.\n","slug":"The-empty-set-is-the-subset-of-any-set","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdm002z8arfg6t91j53","content":"<p>The empty set is the subset of any set. This is true. Some people take it as a convention, but in fact, it can be explained.</p>\n<p>According to the definition of $\\subset$, </p>\n<p>$\\varnothing\\subset A\\Leftrightarrow$ </p>\n<blockquote>\n<p>$\\forall x$, if $x\\in\\varnothing$, then $x\\in A$. </p>\n</blockquote>\n<p>This is a vacuous truth, because the antecedent ($x\\in\\varnothing$) could never be true, so the conclusion always holds ($x\\in A$). So $\\varnothing\\subset A$ holds.</p>\n<p>Maybe you are thinking, OK, this is a vacuous truth, so maybe I can change it so that the following expression is also true.</p>\n<p>$\\forall x$, if $x\\in\\varnothing$, then $x\\not\\in A$. </p>\n<p>Then you could say, $\\varnothing\\subset A$ is false.</p>\n<p>This is what I asked on <a href=\"https://math.stackexchange.com/questions/1953218/is-the-empty-set-is-a-subset-of-any-set-a-convention?noredirect=1#comment4015040_1953218\" target=\"_blank\" rel=\"external\">math.stackexchange.com</a> the other day, and I read through all the answers and comments in it. Then I realized the above expression doesn’t mean $\\varnothing\\not\\subset A$, it just means $\\varnothing\\subset A^c$.</p>\n<p>I think what $\\varnothing\\not\\subset A$ means is</p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$</p>\n<p>Since you can never find $x$ such that $x\\in\\varnothing$, so the condition could never be correct, so we don’t have enough evidence to make the conclusion($\\varnothing\\not\\subset A$).</p>\n<p>Notice the whole expression itself(If there exists $x\\in\\varnothing$ such that $x\\not\\in A$, then we say $\\varnothing\\not\\subset A$) is correct since it’s a vacuous truth(the condition could never be true).</p>\n<p>In fact</p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A\\Leftrightarrow$ $\\varnothing\\not\\subset A$</p>\n<p>Because </p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$</p>\n<p>is false, so </p>\n<p>$\\varnothing\\not\\subset A$</p>\n<p> is false, which makes $\\varnothing\\subset A$ true.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The empty set is the subset of any set. This is true. Some people take it as a convention, but in fact, it can be explained.</p>\n<p>According to the definition of $\\subset$, </p>\n<p>$\\varnothing\\subset A\\Leftrightarrow$ </p>\n<blockquote>\n<p>$\\forall x$, if $x\\in\\varnothing$, then $x\\in A$. </p>\n</blockquote>\n<p>This is a vacuous truth, because the antecedent ($x\\in\\varnothing$) could never be true, so the conclusion always holds ($x\\in A$). So $\\varnothing\\subset A$ holds.</p>\n<p>Maybe you are thinking, OK, this is a vacuous truth, so maybe I can change it so that the following expression is also true.</p>\n<p>$\\forall x$, if $x\\in\\varnothing$, then $x\\not\\in A$. </p>\n<p>Then you could say, $\\varnothing\\subset A$ is false.</p>\n<p>This is what I asked on <a href=\"https://math.stackexchange.com/questions/1953218/is-the-empty-set-is-a-subset-of-any-set-a-convention?noredirect=1#comment4015040_1953218\" target=\"_blank\" rel=\"external\">math.stackexchange.com</a> the other day, and I read through all the answers and comments in it. Then I realized the above expression doesn’t mean $\\varnothing\\not\\subset A$, it just means $\\varnothing\\subset A^c$.</p>\n<p>I think what $\\varnothing\\not\\subset A$ means is</p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$</p>\n<p>Since you can never find $x$ such that $x\\in\\varnothing$, so the condition could never be correct, so we don’t have enough evidence to make the conclusion($\\varnothing\\not\\subset A$).</p>\n<p>Notice the whole expression itself(If there exists $x\\in\\varnothing$ such that $x\\not\\in A$, then we say $\\varnothing\\not\\subset A$) is correct since it’s a vacuous truth(the condition could never be true).</p>\n<p>In fact</p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A\\Leftrightarrow$ $\\varnothing\\not\\subset A$</p>\n<p>Because </p>\n<p>$\\exists x, x\\in\\varnothing$ and $x\\not\\in A$</p>\n<p>is false, so </p>\n<p>$\\varnothing\\not\\subset A$</p>\n<p> is false, which makes $\\varnothing\\subset A$ true.</p>\n"},{"title":"The fee paid to freelancer is not refundable","date":"2016-07-03T16:00:00.000Z","thumbnail":"/images/refund.png","_content":"\nAbout two days ago, I got a message from my phone that I was charged for ￥110.72. The money was taken directly from my debit card. At first, I thought the money was stolen using some high-end technology, but I was wrong. After having a conversation with the customer service of UnionPay, I got a keyword, freelancer.\n\nFreelancer charged me via Paypal because to try the free trial, I had to verify my Paypal account in the freelancer website. After the free-trial period was over, it automatically charged me for £12.45 GBP to continue the current plan. I remember that the plan chosen for me at first was much more expensive, and I changed the plan to the lowest one in order to prevent any unnecessary payments as much as possible. I thought UnionPay couldn’t be used to pay in GBP, but clearly I was wrong.\n\nI issued a ticket to freelancer to try to get a refund, but I failed. It replied that this charge was not refundable. This is really bad. But luckily, there is not too much money. If I didn’t change the plan at first, I would be charged for a fat stack! I don’t want to continue to ask my money back right now, I’m way too lazy. Maybe I will deal with it sometime in the future.\n","source":"_posts/The-fee-paid-to-freelancer-is-not-refundable.md","raw":"title: The fee paid to freelancer is not refundable\ndate: 2016-07-04 00:00:00\ntags:\ncategories: Journal\nthumbnail: /images/refund.png\n---\n\nAbout two days ago, I got a message from my phone that I was charged for ￥110.72. The money was taken directly from my debit card. At first, I thought the money was stolen using some high-end technology, but I was wrong. After having a conversation with the customer service of UnionPay, I got a keyword, freelancer.\n\nFreelancer charged me via Paypal because to try the free trial, I had to verify my Paypal account in the freelancer website. After the free-trial period was over, it automatically charged me for £12.45 GBP to continue the current plan. I remember that the plan chosen for me at first was much more expensive, and I changed the plan to the lowest one in order to prevent any unnecessary payments as much as possible. I thought UnionPay couldn’t be used to pay in GBP, but clearly I was wrong.\n\nI issued a ticket to freelancer to try to get a refund, but I failed. It replied that this charge was not refundable. This is really bad. But luckily, there is not too much money. If I didn’t change the plan at first, I would be charged for a fat stack! I don’t want to continue to ask my money back right now, I’m way too lazy. Maybe I will deal with it sometime in the future.\n","slug":"The-fee-paid-to-freelancer-is-not-refundable","published":1,"updated":"2017-05-15T15:06:55.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdn00328arfe6or1v8i","content":"<p>About two days ago, I got a message from my phone that I was charged for ￥110.72. The money was taken directly from my debit card. At first, I thought the money was stolen using some high-end technology, but I was wrong. After having a conversation with the customer service of UnionPay, I got a keyword, freelancer.</p>\n<p>Freelancer charged me via Paypal because to try the free trial, I had to verify my Paypal account in the freelancer website. After the free-trial period was over, it automatically charged me for £12.45 GBP to continue the current plan. I remember that the plan chosen for me at first was much more expensive, and I changed the plan to the lowest one in order to prevent any unnecessary payments as much as possible. I thought UnionPay couldn’t be used to pay in GBP, but clearly I was wrong.</p>\n<p>I issued a ticket to freelancer to try to get a refund, but I failed. It replied that this charge was not refundable. This is really bad. But luckily, there is not too much money. If I didn’t change the plan at first, I would be charged for a fat stack! I don’t want to continue to ask my money back right now, I’m way too lazy. Maybe I will deal with it sometime in the future.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>About two days ago, I got a message from my phone that I was charged for ￥110.72. The money was taken directly from my debit card. At first, I thought the money was stolen using some high-end technology, but I was wrong. After having a conversation with the customer service of UnionPay, I got a keyword, freelancer.</p>\n<p>Freelancer charged me via Paypal because to try the free trial, I had to verify my Paypal account in the freelancer website. After the free-trial period was over, it automatically charged me for £12.45 GBP to continue the current plan. I remember that the plan chosen for me at first was much more expensive, and I changed the plan to the lowest one in order to prevent any unnecessary payments as much as possible. I thought UnionPay couldn’t be used to pay in GBP, but clearly I was wrong.</p>\n<p>I issued a ticket to freelancer to try to get a refund, but I failed. It replied that this charge was not refundable. This is really bad. But luckily, there is not too much money. If I didn’t change the plan at first, I would be charged for a fat stack! I don’t want to continue to ask my money back right now, I’m way too lazy. Maybe I will deal with it sometime in the future.</p>\n"},{"title":"Ubuntu crashes when entering or exiting fullscreen while watching youtube videos","date":"2015-12-04T07:48:31.000Z","_content":"\n### Preface\n\nAfter I installed ubuntu 15.10, something weird happened from time to time. Ubuntu often crashed when I entered or exited fullscreen mode while watching youtube videos. Sometimes I could get away with it by punching the `Super` button to bring up another app, in which I could run some commands to terminate google-chrome. Or I could jumped to tty1 to `pkill chrome` or `sudo pkill Xorg`. But sometimes nothing worked. And the most important thing is, it's extremely annoying, so I decided to solve the problem.\n\n### Solution\n\nAfter searching for the solution online for a while, I found an answer, it's pretty simple, just disable `hardware accelerator` in chrome, as followed.\n\n![](http://i.imgur.com/Efu0Flw.png)\n\n### Result\n\nI haven't encountered the `crash` phenomenon since I disabled `hardware accelerator`. So I guess it worked. Whether it's a bug of google-chrome or ubuntu, I don't know. But now I can safely enter or exit fullscreen mode without worrying a crash might happen. Hooray!\n","source":"_posts/Ubuntu-crashes-when-entering-or-exiting-fullscreen-while-watching-youtube-videos.md","raw":"title: Ubuntu crashes when entering or exiting fullscreen while watching youtube videos\ndate: 2015-12-04 15:48:31\ntags: linux\ncategories: Coding\n---\n\n### Preface\n\nAfter I installed ubuntu 15.10, something weird happened from time to time. Ubuntu often crashed when I entered or exited fullscreen mode while watching youtube videos. Sometimes I could get away with it by punching the `Super` button to bring up another app, in which I could run some commands to terminate google-chrome. Or I could jumped to tty1 to `pkill chrome` or `sudo pkill Xorg`. But sometimes nothing worked. And the most important thing is, it's extremely annoying, so I decided to solve the problem.\n\n### Solution\n\nAfter searching for the solution online for a while, I found an answer, it's pretty simple, just disable `hardware accelerator` in chrome, as followed.\n\n![](http://i.imgur.com/Efu0Flw.png)\n\n### Result\n\nI haven't encountered the `crash` phenomenon since I disabled `hardware accelerator`. So I guess it worked. Whether it's a bug of google-chrome or ubuntu, I don't know. But now I can safely enter or exit fullscreen mode without worrying a crash might happen. Hooray!\n","slug":"Ubuntu-crashes-when-entering-or-exiting-fullscreen-while-watching-youtube-videos","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdo00368arf6we1jj04","content":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>After I installed ubuntu 15.10, something weird happened from time to time. Ubuntu often crashed when I entered or exited fullscreen mode while watching youtube videos. Sometimes I could get away with it by punching the <code>Super</code> button to bring up another app, in which I could run some commands to terminate google-chrome. Or I could jumped to tty1 to <code>pkill chrome</code> or <code>sudo pkill Xorg</code>. But sometimes nothing worked. And the most important thing is, it’s extremely annoying, so I decided to solve the problem.</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>After searching for the solution online for a while, I found an answer, it’s pretty simple, just disable <code>hardware accelerator</code> in chrome, as followed.</p>\n<p><img src=\"http://i.imgur.com/Efu0Flw.png\" alt=\"\"></p>\n<h3 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h3><p>I haven’t encountered the <code>crash</code> phenomenon since I disabled <code>hardware accelerator</code>. So I guess it worked. Whether it’s a bug of google-chrome or ubuntu, I don’t know. But now I can safely enter or exit fullscreen mode without worrying a crash might happen. Hooray!</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>After I installed ubuntu 15.10, something weird happened from time to time. Ubuntu often crashed when I entered or exited fullscreen mode while watching youtube videos. Sometimes I could get away with it by punching the <code>Super</code> button to bring up another app, in which I could run some commands to terminate google-chrome. Or I could jumped to tty1 to <code>pkill chrome</code> or <code>sudo pkill Xorg</code>. But sometimes nothing worked. And the most important thing is, it’s extremely annoying, so I decided to solve the problem.</p>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h3><p>After searching for the solution online for a while, I found an answer, it’s pretty simple, just disable <code>hardware accelerator</code> in chrome, as followed.</p>\n<p><img src=\"http://i.imgur.com/Efu0Flw.png\" alt=\"\"></p>\n<h3 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h3><p>I haven’t encountered the <code>crash</code> phenomenon since I disabled <code>hardware accelerator</code>. So I guess it worked. Whether it’s a bug of google-chrome or ubuntu, I don’t know. But now I can safely enter or exit fullscreen mode without worrying a crash might happen. Hooray!</p>\n"},{"title":"The difference between a case class and a normal class in Scala","date":"2017-10-06T01:03:48.000Z","thumbnail":"/images/scala-logo.png","_content":"\n# What is a case class like\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\")\n    println(person.toString)\n  }\n}\n```\n\n# Can be Instantiated without the new keyword\n\nCase classes have prebuilt companion objects with `apply()` implemented, so a case class can be instantiated without using `new`.\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // Both ways have the same effect\n    val person1 = Person(\"John\")\n    val person2 = new Person(\"John\")\n  }\n}\n```\n\nWhy removing the `new` keyword? Because case classes are often used to implement [algebraic data types](https://en.wikipedia.org/wiki/Algebraic_data_type), it's more elegant to do so without the `new` keyword.\n\n# Default equals and hashCode implementation\n\nCase classes have default equals and hashCode implementations. Let's pick `equals` and talk about it in this part, because it's easier to verify.\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person1 = Person(\"John\")\n    val person2 = Person(\"John\")\n    println(person1 == person2) // true\n  }\n}\n```\n\nBecause Case classes have default `equals` implementation, so although `person1` and `person2` are different objects(I'm talking about their references), they are still equal because Scala only checks field values(`name` in this case) for case classes.\n\nThe result is different if we use a normal class, which compares equality by references.\n\n```scala\nclass Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person1 = new Person(\"John\")\n    val person2 = new Person(\"John\")\n    println(person1 == person2) // false\n  }\n}\n```\n\n# Serializable\n\nCase classes can be serialized.\n\n```scala\nimport java.io.{FileOutputStream, ObjectOutputStream}\n\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // creat an instance\n    val person = Person(\"John\")\n\n    // serialize\n    val oos = new ObjectOutputStream(new FileOutputStream(\"/tmp/person\"))\n    oos.writeObject(person)\n    oos.close()\n  }\n}\n```\n\nA normal class cannot be serialized by default.\n\n```scala\nclass Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // creat an instance\n    val person = new Person(\"John\")\n\n    // serialize\n    val oos = new ObjectOutputStream(new FileOutputStream(\"/tmp/person\"))\n    oos.writeObject(person) // Exception in thread \"main\" java.io.NotSerializableException: com.example.Person\n    oos.close()\n  }\n}\n```\n\n# Better toString\n\n```scala\npackage com.example\n\ncase class Person(name: String)\nclass Animal(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    val person = Person(\"John\")\n    val animal = new Animal(\"Dog\")\n\n    println(person.toString) // Person(John)\n    println(animal.toString) // com.example.Animal@5a39699c\n  }\n}\n```\n\n# Pattern Matching\n\nCase classes support pattern matching.\n\n```scala\npackage com.example\n\nabstract class Animal\ncase class Dog() extends Animal\ncase class Cat() extends Animal\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val animal = Dog()\n    printType(animal)\n  }\n  def printType(animal: Animal): Unit = {\n    animal match {\n      case Dog() => println(\"It's a dog.\")\n      case Cat() => println(\"It's a cat.\")\n    }\n  }\n}\n```\n\nCan we achieve pattern matching using a normal class? Of course, just implement the `unapply` method, here is an example.\n\n```scala\npackage com.example\n\nabstract class Animal\nclass Dog() extends Animal\nclass Cat() extends Animal\nobject Dog {\n  def apply(): Dog = new Dog()\n  def unapply(arg: Animal): Boolean = arg.isInstanceOf[Dog]\n}\nobject Cat {\n  def apply(): Cat = new Cat()\n  def unapply(arg: Animal): Boolean = arg.isInstanceOf[Cat]\n}\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val animal = Dog()\n    printType(animal)\n  }\n  def printType(animal: Animal): Unit = {\n    animal match {\n      case Dog() => println(\"It's a dog.\")\n      case Cat() => println(\"It's a cat.\")\n    }\n  }\n}\n```\n\nSo we can use pattern matching with normal classes, but with case classes, we don't need to write those boilerplate code any more.\n\n# Case classes extend the Product class\n\nCase classes extend the `Product` class, so it has some methods inherited from it, like `productArity`\n\n```scala\ncase class Person(name: String, address: String)\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\", \"Earth\")\n    println(person.productArity) // 2, the size of the product, i.e. the number of arguments\n  }\n}\n```\n\n# Other Interesting stuff\n\nCase classes also have other interesting stuff, e.g. we can copy a case class by calling `copy` on it.\n\n```scala\ncase class Person(name: String, address: String)\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\", \"Earth\")\n\n    val copiedPerson = person.copy()\n    println(copiedPerson) // Person(John,Earth)\n\n    val copiedPersonWithModifiedName = person.copy(\"Johnson\")\n    println(copiedPersonWithModifiedName) // Person(Johnson,Earth)\n  }\n}\n```\n\nI think I've covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.","source":"_posts/The-difference-between-a-case-class-and-a-normal-class-in-Scala.md","raw":"title: The difference between a case class and a normal class in Scala\ndate: 2017-10-06 09:03:48\ntags: Scala\ncategories: Coding\nthumbnail: /images/scala-logo.png\n---\n\n# What is a case class like\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\")\n    println(person.toString)\n  }\n}\n```\n\n# Can be Instantiated without the new keyword\n\nCase classes have prebuilt companion objects with `apply()` implemented, so a case class can be instantiated without using `new`.\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // Both ways have the same effect\n    val person1 = Person(\"John\")\n    val person2 = new Person(\"John\")\n  }\n}\n```\n\nWhy removing the `new` keyword? Because case classes are often used to implement [algebraic data types](https://en.wikipedia.org/wiki/Algebraic_data_type), it's more elegant to do so without the `new` keyword.\n\n# Default equals and hashCode implementation\n\nCase classes have default equals and hashCode implementations. Let's pick `equals` and talk about it in this part, because it's easier to verify.\n\n```scala\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person1 = Person(\"John\")\n    val person2 = Person(\"John\")\n    println(person1 == person2) // true\n  }\n}\n```\n\nBecause Case classes have default `equals` implementation, so although `person1` and `person2` are different objects(I'm talking about their references), they are still equal because Scala only checks field values(`name` in this case) for case classes.\n\nThe result is different if we use a normal class, which compares equality by references.\n\n```scala\nclass Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person1 = new Person(\"John\")\n    val person2 = new Person(\"John\")\n    println(person1 == person2) // false\n  }\n}\n```\n\n# Serializable\n\nCase classes can be serialized.\n\n```scala\nimport java.io.{FileOutputStream, ObjectOutputStream}\n\ncase class Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // creat an instance\n    val person = Person(\"John\")\n\n    // serialize\n    val oos = new ObjectOutputStream(new FileOutputStream(\"/tmp/person\"))\n    oos.writeObject(person)\n    oos.close()\n  }\n}\n```\n\nA normal class cannot be serialized by default.\n\n```scala\nclass Person(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    // creat an instance\n    val person = new Person(\"John\")\n\n    // serialize\n    val oos = new ObjectOutputStream(new FileOutputStream(\"/tmp/person\"))\n    oos.writeObject(person) // Exception in thread \"main\" java.io.NotSerializableException: com.example.Person\n    oos.close()\n  }\n}\n```\n\n# Better toString\n\n```scala\npackage com.example\n\ncase class Person(name: String)\nclass Animal(name: String)\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n\n    val person = Person(\"John\")\n    val animal = new Animal(\"Dog\")\n\n    println(person.toString) // Person(John)\n    println(animal.toString) // com.example.Animal@5a39699c\n  }\n}\n```\n\n# Pattern Matching\n\nCase classes support pattern matching.\n\n```scala\npackage com.example\n\nabstract class Animal\ncase class Dog() extends Animal\ncase class Cat() extends Animal\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val animal = Dog()\n    printType(animal)\n  }\n  def printType(animal: Animal): Unit = {\n    animal match {\n      case Dog() => println(\"It's a dog.\")\n      case Cat() => println(\"It's a cat.\")\n    }\n  }\n}\n```\n\nCan we achieve pattern matching using a normal class? Of course, just implement the `unapply` method, here is an example.\n\n```scala\npackage com.example\n\nabstract class Animal\nclass Dog() extends Animal\nclass Cat() extends Animal\nobject Dog {\n  def apply(): Dog = new Dog()\n  def unapply(arg: Animal): Boolean = arg.isInstanceOf[Dog]\n}\nobject Cat {\n  def apply(): Cat = new Cat()\n  def unapply(arg: Animal): Boolean = arg.isInstanceOf[Cat]\n}\n\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val animal = Dog()\n    printType(animal)\n  }\n  def printType(animal: Animal): Unit = {\n    animal match {\n      case Dog() => println(\"It's a dog.\")\n      case Cat() => println(\"It's a cat.\")\n    }\n  }\n}\n```\n\nSo we can use pattern matching with normal classes, but with case classes, we don't need to write those boilerplate code any more.\n\n# Case classes extend the Product class\n\nCase classes extend the `Product` class, so it has some methods inherited from it, like `productArity`\n\n```scala\ncase class Person(name: String, address: String)\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\", \"Earth\")\n    println(person.productArity) // 2, the size of the product, i.e. the number of arguments\n  }\n}\n```\n\n# Other Interesting stuff\n\nCase classes also have other interesting stuff, e.g. we can copy a case class by calling `copy` on it.\n\n```scala\ncase class Person(name: String, address: String)\nobject CaseClassTest {\n  def main(args: Array[String]): Unit = {\n    val person = Person(\"John\", \"Earth\")\n\n    val copiedPerson = person.copy()\n    println(copiedPerson) // Person(John,Earth)\n\n    val copiedPersonWithModifiedName = person.copy(\"Johnson\")\n    println(copiedPersonWithModifiedName) // Person(Johnson,Earth)\n  }\n}\n```\n\nI think I've covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.","slug":"The-difference-between-a-case-class-and-a-normal-class-in-Scala","published":1,"updated":"2017-10-06T09:05:46.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdp00398arfnltqc73a","content":"<h1 id=\"What-is-a-case-class-like\"><a href=\"#What-is-a-case-class-like\" class=\"headerlink\" title=\"What is a case class like\"></a>What is a case class like</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person.toString)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Can-be-Instantiated-without-the-new-keyword\"><a href=\"#Can-be-Instantiated-without-the-new-keyword\" class=\"headerlink\" title=\"Can be Instantiated without the new keyword\"></a>Can be Instantiated without the new keyword</h1><p>Case classes have prebuilt companion objects with <code>apply()</code> implemented, so a case class can be instantiated without using <code>new</code>.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Both ways have the same effect</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why removing the <code>new</code> keyword? Because case classes are often used to implement <a href=\"https://en.wikipedia.org/wiki/Algebraic_data_type\" target=\"_blank\" rel=\"external\">algebraic data types</a>, it’s more elegant to do so without the <code>new</code> keyword.</p>\n<h1 id=\"Default-equals-and-hashCode-implementation\"><a href=\"#Default-equals-and-hashCode-implementation\" class=\"headerlink\" title=\"Default equals and hashCode implementation\"></a>Default equals and hashCode implementation</h1><p>Case classes have default equals and hashCode implementations. Let’s pick <code>equals</code> and talk about it in this part, because it’s easier to verify.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person1 == person2) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Because Case classes have default <code>equals</code> implementation, so although <code>person1</code> and <code>person2</code> are different objects(I’m talking about their references), they are still equal because Scala only checks field values(<code>name</code> in this case) for case classes.</p>\n<p>The result is different if we use a normal class, which compares equality by references.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person1 == person2) <span class=\"comment\">// false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h1><p>Case classes can be serialized.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.&#123;<span class=\"type\">FileOutputStream</span>, <span class=\"type\">ObjectOutputStream</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// creat an instance</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// serialize</span></div><div class=\"line\">    <span class=\"keyword\">val</span> oos = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/person\"</span>))</div><div class=\"line\">    oos.writeObject(person)</div><div class=\"line\">    oos.close()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>A normal class cannot be serialized by default.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// creat an instance</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// serialize</span></div><div class=\"line\">    <span class=\"keyword\">val</span> oos = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/person\"</span>))</div><div class=\"line\">    oos.writeObject(person) <span class=\"comment\">// Exception in thread \"main\" java.io.NotSerializableException: com.example.Person</span></div><div class=\"line\">    oos.close()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Better-toString\"><a href=\"#Better-toString\" class=\"headerlink\" title=\"Better toString\"></a>Better toString</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"keyword\">new</span> <span class=\"type\">Animal</span>(<span class=\"string\">\"Dog\"</span>)</div><div class=\"line\"></div><div class=\"line\">    println(person.toString) <span class=\"comment\">// Person(John)</span></div><div class=\"line\">    println(animal.toString) <span class=\"comment\">// com.example.Animal@5a39699c</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Pattern-Matching\"><a href=\"#Pattern-Matching\" class=\"headerlink\" title=\"Pattern Matching\"></a>Pattern Matching</h1><p>Case classes support pattern matching.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"type\">Dog</span>()</div><div class=\"line\">    printType(animal)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printType</span></span>(animal: <span class=\"type\">Animal</span>): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    animal <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Dog</span>() =&gt; println(<span class=\"string\">\"It's a dog.\"</span>)</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Cat</span>() =&gt; println(<span class=\"string\">\"It's a cat.\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Can we achieve pattern matching using a normal class? Of course, just implement the <code>unapply</code> method, here is an example.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Dog</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Dog</span> = <span class=\"keyword\">new</span> <span class=\"type\">Dog</span>()</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(arg: <span class=\"type\">Animal</span>): <span class=\"type\">Boolean</span> = arg.isInstanceOf[<span class=\"type\">Dog</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Cat</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Cat</span> = <span class=\"keyword\">new</span> <span class=\"type\">Cat</span>()</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(arg: <span class=\"type\">Animal</span>): <span class=\"type\">Boolean</span> = arg.isInstanceOf[<span class=\"type\">Cat</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"type\">Dog</span>()</div><div class=\"line\">    printType(animal)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printType</span></span>(animal: <span class=\"type\">Animal</span>): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    animal <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Dog</span>() =&gt; println(<span class=\"string\">\"It's a dog.\"</span>)</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Cat</span>() =&gt; println(<span class=\"string\">\"It's a cat.\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So we can use pattern matching with normal classes, but with case classes, we don’t need to write those boilerplate code any more.</p>\n<h1 id=\"Case-classes-extend-the-Product-class\"><a href=\"#Case-classes-extend-the-Product-class\" class=\"headerlink\" title=\"Case classes extend the Product class\"></a>Case classes extend the Product class</h1><p>Case classes extend the <code>Product</code> class, so it has some methods inherited from it, like <code>productArity</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, address: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Earth\"</span>)</div><div class=\"line\">    println(person.productArity) <span class=\"comment\">// 2, the size of the product, i.e. the number of arguments</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Other-Interesting-stuff\"><a href=\"#Other-Interesting-stuff\" class=\"headerlink\" title=\"Other Interesting stuff\"></a>Other Interesting stuff</h1><p>Case classes also have other interesting stuff, e.g. we can copy a case class by calling <code>copy</code> on it.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, address: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Earth\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> copiedPerson = person.copy()</div><div class=\"line\">    println(copiedPerson) <span class=\"comment\">// Person(John,Earth)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> copiedPersonWithModifiedName = person.copy(<span class=\"string\">\"Johnson\"</span>)</div><div class=\"line\">    println(copiedPersonWithModifiedName) <span class=\"comment\">// Person(Johnson,Earth)</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I think I’ve covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-a-case-class-like\"><a href=\"#What-is-a-case-class-like\" class=\"headerlink\" title=\"What is a case class like\"></a>What is a case class like</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person.toString)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Can-be-Instantiated-without-the-new-keyword\"><a href=\"#Can-be-Instantiated-without-the-new-keyword\" class=\"headerlink\" title=\"Can be Instantiated without the new keyword\"></a>Can be Instantiated without the new keyword</h1><p>Case classes have prebuilt companion objects with <code>apply()</code> implemented, so a case class can be instantiated without using <code>new</code>.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Both ways have the same effect</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Why removing the <code>new</code> keyword? Because case classes are often used to implement <a href=\"https://en.wikipedia.org/wiki/Algebraic_data_type\" target=\"_blank\" rel=\"external\">algebraic data types</a>, it’s more elegant to do so without the <code>new</code> keyword.</p>\n<h1 id=\"Default-equals-and-hashCode-implementation\"><a href=\"#Default-equals-and-hashCode-implementation\" class=\"headerlink\" title=\"Default equals and hashCode implementation\"></a>Default equals and hashCode implementation</h1><p>Case classes have default equals and hashCode implementations. Let’s pick <code>equals</code> and talk about it in this part, because it’s easier to verify.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person1 == person2) <span class=\"comment\">// true</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Because Case classes have default <code>equals</code> implementation, so although <code>person1</code> and <code>person2</code> are different objects(I’m talking about their references), they are still equal because Scala only checks field values(<code>name</code> in this case) for case classes.</p>\n<p>The result is different if we use a normal class, which compares equality by references.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person1 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> person2 = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    println(person1 == person2) <span class=\"comment\">// false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a>Serializable</h1><p>Case classes can be serialized.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> java.io.&#123;<span class=\"type\">FileOutputStream</span>, <span class=\"type\">ObjectOutputStream</span>&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// creat an instance</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// serialize</span></div><div class=\"line\">    <span class=\"keyword\">val</span> oos = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/person\"</span>))</div><div class=\"line\">    oos.writeObject(person)</div><div class=\"line\">    oos.close()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>A normal class cannot be serialized by default.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// creat an instance</span></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"keyword\">new</span> <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// serialize</span></div><div class=\"line\">    <span class=\"keyword\">val</span> oos = <span class=\"keyword\">new</span> <span class=\"type\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"type\">FileOutputStream</span>(<span class=\"string\">\"/tmp/person\"</span>))</div><div class=\"line\">    oos.writeObject(person) <span class=\"comment\">// Exception in thread \"main\" java.io.NotSerializableException: com.example.Person</span></div><div class=\"line\">    oos.close()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Better-toString\"><a href=\"#Better-toString\" class=\"headerlink\" title=\"Better toString\"></a>Better toString</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span>(<span class=\"params\">name: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>)</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"keyword\">new</span> <span class=\"type\">Animal</span>(<span class=\"string\">\"Dog\"</span>)</div><div class=\"line\"></div><div class=\"line\">    println(person.toString) <span class=\"comment\">// Person(John)</span></div><div class=\"line\">    println(animal.toString) <span class=\"comment\">// com.example.Animal@5a39699c</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Pattern-Matching\"><a href=\"#Pattern-Matching\" class=\"headerlink\" title=\"Pattern Matching\"></a>Pattern Matching</h1><p>Case classes support pattern matching.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"type\">Dog</span>()</div><div class=\"line\">    printType(animal)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printType</span></span>(animal: <span class=\"type\">Animal</span>): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    animal <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Dog</span>() =&gt; println(<span class=\"string\">\"It's a dog.\"</span>)</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Cat</span>() =&gt; println(<span class=\"string\">\"It's a cat.\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Can we achieve pattern matching using a normal class? Of course, just implement the <code>unapply</code> method, here is an example.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>) <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Dog</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Dog</span> = <span class=\"keyword\">new</span> <span class=\"type\">Dog</span>()</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(arg: <span class=\"type\">Animal</span>): <span class=\"type\">Boolean</span> = arg.isInstanceOf[<span class=\"type\">Dog</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">Cat</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">apply</span></span>(): <span class=\"type\">Cat</span> = <span class=\"keyword\">new</span> <span class=\"type\">Cat</span>()</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unapply</span></span>(arg: <span class=\"type\">Animal</span>): <span class=\"type\">Boolean</span> = arg.isInstanceOf[<span class=\"type\">Cat</span>]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> animal = <span class=\"type\">Dog</span>()</div><div class=\"line\">    printType(animal)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printType</span></span>(animal: <span class=\"type\">Animal</span>): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    animal <span class=\"keyword\">match</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Dog</span>() =&gt; println(<span class=\"string\">\"It's a dog.\"</span>)</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"type\">Cat</span>() =&gt; println(<span class=\"string\">\"It's a cat.\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>So we can use pattern matching with normal classes, but with case classes, we don’t need to write those boilerplate code any more.</p>\n<h1 id=\"Case-classes-extend-the-Product-class\"><a href=\"#Case-classes-extend-the-Product-class\" class=\"headerlink\" title=\"Case classes extend the Product class\"></a>Case classes extend the Product class</h1><p>Case classes extend the <code>Product</code> class, so it has some methods inherited from it, like <code>productArity</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, address: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Earth\"</span>)</div><div class=\"line\">    println(person.productArity) <span class=\"comment\">// 2, the size of the product, i.e. the number of arguments</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Other-Interesting-stuff\"><a href=\"#Other-Interesting-stuff\" class=\"headerlink\" title=\"Other Interesting stuff\"></a>Other Interesting stuff</h1><p>Case classes also have other interesting stuff, e.g. we can copy a case class by calling <code>copy</code> on it.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>(<span class=\"params\">name: <span class=\"type\">String</span>, address: <span class=\"type\">String</span></span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">CaseClassTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> person = <span class=\"type\">Person</span>(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Earth\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> copiedPerson = person.copy()</div><div class=\"line\">    println(copiedPerson) <span class=\"comment\">// Person(John,Earth)</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> copiedPersonWithModifiedName = person.copy(<span class=\"string\">\"Johnson\"</span>)</div><div class=\"line\">    println(copiedPersonWithModifiedName) <span class=\"comment\">// Person(Johnson,Earth)</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>I think I’ve covered almost all the interesting parts of case classes, you can check the official Scala docs for more details.</p>\n"},{"title":"The difference between wait and sleep","date":"2017-09-09T08:29:09.000Z","thumbnail":"/images/sleep.jpg","_content":"\n`wait` and `sleep` can both be used to put a thread into sleep and wait for a while. So what's the difference? To find it out, we need to figure out how to use them first.\n\n# Wait\nTo use wait, you have to put `mon.wait()` and `mon.notify()` inside the `synchronized` block, where `mon` is the monitor object. `mon` is used such that only one thread can enter the `synchronized` block. It's easier to see it with the code.\n\n```java\npackage com.example;\n\npublic class WaitTest {\n\n    private static final Object mon = new Object();\n\n    private static volatile boolean stopWaiting = false;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        final Thread boyThread = new Thread(new Runnable() {\n            public void run() {\n                synchronized (mon) {\n                    System.out.println(\"I'm waiting for the girl to show up\");\n                    try {\n                        while(!stopWaiting) mon.wait();\n                        System.out.println(\"The girl showed up, I can stop waiting now.\");\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        });\n\n        Thread girlThread = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    System.out.println(\"I'm wearing make-ups, the boy need to wait for me for 5 seconds.\");\n                    Thread.sleep(5 * 1000);\n                    System.out.println(\"Make-up is completed, I'm going to see the boy and stop him from waiting\");\n\n                    stopWaiting = true;\n                    synchronized (mon) {\n                        mon.notify();\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        boyThread.start();\n        girlThread.start();\n\n        boyThread.join();\n        girlThread.join();\n\n        System.out.println(\"The test is completed.\");\n    }\n}\n```\n\nOutput:\n\n```bash\nI'm waiting for the girl to show up\nI'm wearing make-ups, the boy need to wait for me for 5 seconds.\nMake-up is completed, I'm going to see the boy and stop him from waiting\nThe girl showed up, I can stop waiting now.\nThe test is completed.\n```\n\nHere the girl needs to wear the make-up before going out to see the boy. When she finishes, `mon.notify()` is called and the boy stops waiting, and they meet in the end.\n\n# Sleep\n`sleep` can also be used to put a thread into sleep for a while, and you can use `thread.interrupt()` to cancel the sleep and put the thread into running. Let's see an example.\n\n```java\npackage com.example;\n\npublic class SleepTest {\n    public static void main(String[] args) throws InterruptedException {\n        final Thread boyThread = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    System.out.println(\"I'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\");\n                    Thread.sleep(5 * 1000);\n                    System.out.println(\"The girl didn't show up, bummer.\");\n                } catch (InterruptedException e) {\n                    System.out.println(\"The girl showed up, great!\");\n                }\n            }\n        });\n\n        Thread girlThread = new Thread(new Runnable() {\n            public void run() {\n                System.out.println(\"I'm going to wear make-ups, which will take 3 seconds\");\n                try {\n                    Thread.sleep(3 * 1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"I'm done, going to see my boy and stop him from waiting\");\n                boyThread.interrupt();\n            }\n        });\n\n        boyThread.start();\n        girlThread.start();\n\n        boyThread.join();\n        girlThread.join();\n\n        System.out.println(\"The test is completed.\");\n    }\n}\n```\n\nOutput:\n\n```bash\nI'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\nI'm going to wear make-ups, which will take 3 seconds\nI'm done, going to see my boy and stop him from waiting\nThe girl showed up, great!\nThe test is completed.\n```\n\nThe girl takes 3 seconds to wear her make-up, and when it's done, she tells the boy to stop sleeping by calling `boyThread.interrupt()`, the boy stops sleeping and they meet in the end.\n\n# Difference\nSo what's the difference?\n\n1. `wait` should be used in a `synchronized` block, while `sleep` doesn't need to.\n2. `wait` belongs to `java.lang.Object` and is an instance method, while `sleep` belongs to `java.lang.Thread` and is a static method.\n3. `wait` can be woken by `notify`, `notifyAll` and `interrupt`, while `sleep` can only be woken by `interrupt`.\n4. `wait` and `notify` release the lock, which means you can enter the `synchronized` block for multiple times as long as those threads call `wait`, while `sleep` doesn't release the lock.\n\n# Use Cases\n`sleep` is a normal way to put the thread into sleep for a pre-defined time, and `interrupt` is only a way to cancel the sleep.\n\n`wait` is a normal way for inter-thread communication, and usually you can build a publish-subscribe system by it. notify => publish, wait => subscribe. When you call `notify`, it means some messages are available, and one thread will be woken to consume those messages.\n","source":"_posts/The-difference-between-wait-and-sleep.md","raw":"title: The difference between wait and sleep\ndate: 2017-09-09 16:29:09\ntags: java\ncategories: Coding\nthumbnail: /images/sleep.jpg\n---\n\n`wait` and `sleep` can both be used to put a thread into sleep and wait for a while. So what's the difference? To find it out, we need to figure out how to use them first.\n\n# Wait\nTo use wait, you have to put `mon.wait()` and `mon.notify()` inside the `synchronized` block, where `mon` is the monitor object. `mon` is used such that only one thread can enter the `synchronized` block. It's easier to see it with the code.\n\n```java\npackage com.example;\n\npublic class WaitTest {\n\n    private static final Object mon = new Object();\n\n    private static volatile boolean stopWaiting = false;\n\n    public static void main(String[] args) throws InterruptedException {\n\n        final Thread boyThread = new Thread(new Runnable() {\n            public void run() {\n                synchronized (mon) {\n                    System.out.println(\"I'm waiting for the girl to show up\");\n                    try {\n                        while(!stopWaiting) mon.wait();\n                        System.out.println(\"The girl showed up, I can stop waiting now.\");\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        });\n\n        Thread girlThread = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    System.out.println(\"I'm wearing make-ups, the boy need to wait for me for 5 seconds.\");\n                    Thread.sleep(5 * 1000);\n                    System.out.println(\"Make-up is completed, I'm going to see the boy and stop him from waiting\");\n\n                    stopWaiting = true;\n                    synchronized (mon) {\n                        mon.notify();\n                    }\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n\n        boyThread.start();\n        girlThread.start();\n\n        boyThread.join();\n        girlThread.join();\n\n        System.out.println(\"The test is completed.\");\n    }\n}\n```\n\nOutput:\n\n```bash\nI'm waiting for the girl to show up\nI'm wearing make-ups, the boy need to wait for me for 5 seconds.\nMake-up is completed, I'm going to see the boy and stop him from waiting\nThe girl showed up, I can stop waiting now.\nThe test is completed.\n```\n\nHere the girl needs to wear the make-up before going out to see the boy. When she finishes, `mon.notify()` is called and the boy stops waiting, and they meet in the end.\n\n# Sleep\n`sleep` can also be used to put a thread into sleep for a while, and you can use `thread.interrupt()` to cancel the sleep and put the thread into running. Let's see an example.\n\n```java\npackage com.example;\n\npublic class SleepTest {\n    public static void main(String[] args) throws InterruptedException {\n        final Thread boyThread = new Thread(new Runnable() {\n            public void run() {\n                try {\n                    System.out.println(\"I'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\");\n                    Thread.sleep(5 * 1000);\n                    System.out.println(\"The girl didn't show up, bummer.\");\n                } catch (InterruptedException e) {\n                    System.out.println(\"The girl showed up, great!\");\n                }\n            }\n        });\n\n        Thread girlThread = new Thread(new Runnable() {\n            public void run() {\n                System.out.println(\"I'm going to wear make-ups, which will take 3 seconds\");\n                try {\n                    Thread.sleep(3 * 1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"I'm done, going to see my boy and stop him from waiting\");\n                boyThread.interrupt();\n            }\n        });\n\n        boyThread.start();\n        girlThread.start();\n\n        boyThread.join();\n        girlThread.join();\n\n        System.out.println(\"The test is completed.\");\n    }\n}\n```\n\nOutput:\n\n```bash\nI'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\nI'm going to wear make-ups, which will take 3 seconds\nI'm done, going to see my boy and stop him from waiting\nThe girl showed up, great!\nThe test is completed.\n```\n\nThe girl takes 3 seconds to wear her make-up, and when it's done, she tells the boy to stop sleeping by calling `boyThread.interrupt()`, the boy stops sleeping and they meet in the end.\n\n# Difference\nSo what's the difference?\n\n1. `wait` should be used in a `synchronized` block, while `sleep` doesn't need to.\n2. `wait` belongs to `java.lang.Object` and is an instance method, while `sleep` belongs to `java.lang.Thread` and is a static method.\n3. `wait` can be woken by `notify`, `notifyAll` and `interrupt`, while `sleep` can only be woken by `interrupt`.\n4. `wait` and `notify` release the lock, which means you can enter the `synchronized` block for multiple times as long as those threads call `wait`, while `sleep` doesn't release the lock.\n\n# Use Cases\n`sleep` is a normal way to put the thread into sleep for a pre-defined time, and `interrupt` is only a way to cancel the sleep.\n\n`wait` is a normal way for inter-thread communication, and usually you can build a publish-subscribe system by it. notify => publish, wait => subscribe. When you call `notify`, it means some messages are available, and one thread will be woken to consume those messages.\n","slug":"The-difference-between-wait-and-sleep","published":1,"updated":"2017-09-09T09:01:04.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdq003d8arfa0g7xxqd","content":"<p><code>wait</code> and <code>sleep</code> can both be used to put a thread into sleep and wait for a while. So what’s the difference? To find it out, we need to figure out how to use them first.</p>\n<h1 id=\"Wait\"><a href=\"#Wait\" class=\"headerlink\" title=\"Wait\"></a>Wait</h1><p>To use wait, you have to put <code>mon.wait()</code> and <code>mon.notify()</code> inside the <code>synchronized</code> block, where <code>mon</code> is the monitor object. <code>mon</code> is used such that only one thread can enter the <code>synchronized</code> block. It’s easier to see it with the code.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object mon = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopWaiting = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Thread boyThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mon) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm waiting for the girl to show up\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(!stopWaiting) mon.wait();</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"The girl showed up, I can stop waiting now.\"</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        Thread girlThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm wearing make-ups, the boy need to wait for me for 5 seconds.\"</span>);</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Make-up is completed, I'm going to see the boy and stop him from waiting\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    stopWaiting = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (mon) &#123;</div><div class=\"line\">                        mon.notify();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        boyThread.start();</div><div class=\"line\">        girlThread.start();</div><div class=\"line\"></div><div class=\"line\">        boyThread.join();</div><div class=\"line\">        girlThread.join();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"The test is completed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I<span class=\"string\">'m waiting for the girl to show up</span></div><div class=\"line\">I'm wearing make-ups, the boy need to <span class=\"built_in\">wait</span> <span class=\"keyword\">for</span> me <span class=\"keyword\">for</span> 5 seconds.</div><div class=\"line\">Make-up is completed, I<span class=\"string\">'m going to see the boy and stop him from waiting</span></div><div class=\"line\">The girl showed up, I can stop waiting now.</div><div class=\"line\">The test is completed.</div></pre></td></tr></table></figure>\n<p>Here the girl needs to wear the make-up before going out to see the boy. When she finishes, <code>mon.notify()</code> is called and the boy stops waiting, and they meet in the end.</p>\n<h1 id=\"Sleep\"><a href=\"#Sleep\" class=\"headerlink\" title=\"Sleep\"></a>Sleep</h1><p><code>sleep</code> can also be used to put a thread into sleep for a while, and you can use <code>thread.interrupt()</code> to cancel the sleep and put the thread into running. Let’s see an example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Thread boyThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\"</span>);</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"The girl didn't show up, bummer.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"The girl showed up, great!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        Thread girlThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"I'm going to wear make-ups, which will take 3 seconds\"</span>);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">3</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"I'm done, going to see my boy and stop him from waiting\"</span>);</div><div class=\"line\">                boyThread.interrupt();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        boyThread.start();</div><div class=\"line\">        girlThread.start();</div><div class=\"line\"></div><div class=\"line\">        boyThread.join();</div><div class=\"line\">        girlThread.join();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"The test is completed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I<span class=\"string\">'m going to sleep for 5 seconds. If the girl wouldn'</span>t show up after 5 second, I<span class=\"string\">'ll stop waiting.</span></div><div class=\"line\">I'm going to wear make-ups, <span class=\"built_in\">which</span> will take 3 seconds</div><div class=\"line\">I<span class=\"string\">'m done, going to see my boy and stop him from waiting</span></div><div class=\"line\">The girl showed up, great!</div><div class=\"line\">The test is completed.</div></pre></td></tr></table></figure>\n<p>The girl takes 3 seconds to wear her make-up, and when it’s done, she tells the boy to stop sleeping by calling <code>boyThread.interrupt()</code>, the boy stops sleeping and they meet in the end.</p>\n<h1 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h1><p>So what’s the difference?</p>\n<ol>\n<li><code>wait</code> should be used in a <code>synchronized</code> block, while <code>sleep</code> doesn’t need to.</li>\n<li><code>wait</code> belongs to <code>java.lang.Object</code> and is an instance method, while <code>sleep</code> belongs to <code>java.lang.Thread</code> and is a static method.</li>\n<li><code>wait</code> can be woken by <code>notify</code>, <code>notifyAll</code> and <code>interrupt</code>, while <code>sleep</code> can only be woken by <code>interrupt</code>.</li>\n<li><code>wait</code> and <code>notify</code> release the lock, which means you can enter the <code>synchronized</code> block for multiple times as long as those threads call <code>wait</code>, while <code>sleep</code> doesn’t release the lock.</li>\n</ol>\n<h1 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use Cases\"></a>Use Cases</h1><p><code>sleep</code> is a normal way to put the thread into sleep for a pre-defined time, and <code>interrupt</code> is only a way to cancel the sleep.</p>\n<p><code>wait</code> is a normal way for inter-thread communication, and usually you can build a publish-subscribe system by it. notify =&gt; publish, wait =&gt; subscribe. When you call <code>notify</code>, it means some messages are available, and one thread will be woken to consume those messages.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>wait</code> and <code>sleep</code> can both be used to put a thread into sleep and wait for a while. So what’s the difference? To find it out, we need to figure out how to use them first.</p>\n<h1 id=\"Wait\"><a href=\"#Wait\" class=\"headerlink\" title=\"Wait\"></a>Wait</h1><p>To use wait, you have to put <code>mon.wait()</code> and <code>mon.notify()</code> inside the <code>synchronized</code> block, where <code>mon</code> is the monitor object. <code>mon</code> is used such that only one thread can enter the <code>synchronized</code> block. It’s easier to see it with the code.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitTest</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object mon = <span class=\"keyword\">new</span> Object();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> stopWaiting = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">final</span> Thread boyThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">synchronized</span> (mon) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm waiting for the girl to show up\"</span>);</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">while</span>(!stopWaiting) mon.wait();</div><div class=\"line\">                        System.out.println(<span class=\"string\">\"The girl showed up, I can stop waiting now.\"</span>);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                        e.printStackTrace();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        Thread girlThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm wearing make-ups, the boy need to wait for me for 5 seconds.\"</span>);</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"Make-up is completed, I'm going to see the boy and stop him from waiting\"</span>);</div><div class=\"line\"></div><div class=\"line\">                    stopWaiting = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">synchronized</span> (mon) &#123;</div><div class=\"line\">                        mon.notify();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        boyThread.start();</div><div class=\"line\">        girlThread.start();</div><div class=\"line\"></div><div class=\"line\">        boyThread.join();</div><div class=\"line\">        girlThread.join();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"The test is completed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I<span class=\"string\">'m waiting for the girl to show up</span></div><div class=\"line\">I'm wearing make-ups, the boy need to <span class=\"built_in\">wait</span> <span class=\"keyword\">for</span> me <span class=\"keyword\">for</span> 5 seconds.</div><div class=\"line\">Make-up is completed, I<span class=\"string\">'m going to see the boy and stop him from waiting</span></div><div class=\"line\">The girl showed up, I can stop waiting now.</div><div class=\"line\">The test is completed.</div></pre></td></tr></table></figure>\n<p>Here the girl needs to wear the make-up before going out to see the boy. When she finishes, <code>mon.notify()</code> is called and the boy stops waiting, and they meet in the end.</p>\n<h1 id=\"Sleep\"><a href=\"#Sleep\" class=\"headerlink\" title=\"Sleep\"></a>Sleep</h1><p><code>sleep</code> can also be used to put a thread into sleep for a while, and you can use <code>thread.interrupt()</code> to cancel the sleep and put the thread into running. Let’s see an example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.example;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SleepTest</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> Thread boyThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"I'm going to sleep for 5 seconds. If the girl wouldn't show up after 5 second, I'll stop waiting.\"</span>);</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"The girl didn't show up, bummer.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    System.out.println(<span class=\"string\">\"The girl showed up, great!\"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        Thread girlThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"I'm going to wear make-ups, which will take 3 seconds\"</span>);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">3</span> * <span class=\"number\">1000</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(<span class=\"string\">\"I'm done, going to see my boy and stop him from waiting\"</span>);</div><div class=\"line\">                boyThread.interrupt();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        boyThread.start();</div><div class=\"line\">        girlThread.start();</div><div class=\"line\"></div><div class=\"line\">        boyThread.join();</div><div class=\"line\">        girlThread.join();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"The test is completed.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Output:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">I<span class=\"string\">'m going to sleep for 5 seconds. If the girl wouldn'</span>t show up after 5 second, I<span class=\"string\">'ll stop waiting.</span></div><div class=\"line\">I'm going to wear make-ups, <span class=\"built_in\">which</span> will take 3 seconds</div><div class=\"line\">I<span class=\"string\">'m done, going to see my boy and stop him from waiting</span></div><div class=\"line\">The girl showed up, great!</div><div class=\"line\">The test is completed.</div></pre></td></tr></table></figure>\n<p>The girl takes 3 seconds to wear her make-up, and when it’s done, she tells the boy to stop sleeping by calling <code>boyThread.interrupt()</code>, the boy stops sleeping and they meet in the end.</p>\n<h1 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h1><p>So what’s the difference?</p>\n<ol>\n<li><code>wait</code> should be used in a <code>synchronized</code> block, while <code>sleep</code> doesn’t need to.</li>\n<li><code>wait</code> belongs to <code>java.lang.Object</code> and is an instance method, while <code>sleep</code> belongs to <code>java.lang.Thread</code> and is a static method.</li>\n<li><code>wait</code> can be woken by <code>notify</code>, <code>notifyAll</code> and <code>interrupt</code>, while <code>sleep</code> can only be woken by <code>interrupt</code>.</li>\n<li><code>wait</code> and <code>notify</code> release the lock, which means you can enter the <code>synchronized</code> block for multiple times as long as those threads call <code>wait</code>, while <code>sleep</code> doesn’t release the lock.</li>\n</ol>\n<h1 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use Cases\"></a>Use Cases</h1><p><code>sleep</code> is a normal way to put the thread into sleep for a pre-defined time, and <code>interrupt</code> is only a way to cancel the sleep.</p>\n<p><code>wait</code> is a normal way for inter-thread communication, and usually you can build a publish-subscribe system by it. notify =&gt; publish, wait =&gt; subscribe. When you call <code>notify</code>, it means some messages are available, and one thread will be woken to consume those messages.</p>\n"},{"title":"Went to Qiandao Lake","date":"2018-04-07T02:48:09.000Z","thumbnail":null,"_content":"\nQingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.\n\nQiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.\n\nWhen the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.\n\n![](/images/IMG_20180406_084153.jpg)\n\nThere were even bigger ones, which looked like a building.\n\n![](/images/IMG_20180406_123639.jpg)\n\nI found that the scenery was not bad, maybe slightly better than I thought. This is small island.\n\n![](/images/IMG_20180406_090110.jpg)\n\n![](/images/IMG_20180406_094127.jpg)\n\n![](/images/IMG_20180406_095808.jpg)\n\nOn our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn't finish dealing with the accident until 8 o'clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn't need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.\n\nThen we drove to my company and had a supper around it, it was about 9 o'clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.","source":"_posts/Went-to-Qiandao-Lake.md","raw":"title: Went to Qiandao Lake\ndate: 2018-04-07 10:48:09\ntags:\ncategories: Journal\nthumbnail:\n---\n\nQingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.\n\nQiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.\n\nWhen the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.\n\n![](/images/IMG_20180406_084153.jpg)\n\nThere were even bigger ones, which looked like a building.\n\n![](/images/IMG_20180406_123639.jpg)\n\nI found that the scenery was not bad, maybe slightly better than I thought. This is small island.\n\n![](/images/IMG_20180406_090110.jpg)\n\n![](/images/IMG_20180406_094127.jpg)\n\n![](/images/IMG_20180406_095808.jpg)\n\nOn our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn't finish dealing with the accident until 8 o'clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn't need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.\n\nThen we drove to my company and had a supper around it, it was about 9 o'clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.","slug":"Went-to-Qiandao-Lake","published":1,"updated":"2018-04-07T03:11:28.155Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdr003f8arfvx0wpp25","content":"<p>Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.</p>\n<p>Qiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.</p>\n<p>When the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.</p>\n<p><img src=\"/images/IMG_20180406_084153.jpg\" alt=\"\"></p>\n<p>There were even bigger ones, which looked like a building.</p>\n<p><img src=\"/images/IMG_20180406_123639.jpg\" alt=\"\"></p>\n<p>I found that the scenery was not bad, maybe slightly better than I thought. This is small island.</p>\n<p><img src=\"/images/IMG_20180406_090110.jpg\" alt=\"\"></p>\n<p><img src=\"/images/IMG_20180406_094127.jpg\" alt=\"\"></p>\n<p><img src=\"/images/IMG_20180406_095808.jpg\" alt=\"\"></p>\n<p>On our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn’t finish dealing with the accident until 8 o’clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn’t need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.</p>\n<p>Then we drove to my company and had a supper around it, it was about 9 o’clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Qingming Festival of 2018 falls on April 5 to April 7 in China, and I, along with two of my college classmates, planed to go to Qiandao Lake for two days.</p>\n<p>Qiandao Lake is about 150km away from my house, we started at about 10:00 AM, and arrived at around 2:30 PM. All of us were exhausted, after having our lunch at a local restaurant, we all went to sleep. In fact, we did almost nothing but driving/watching TV on the first day.</p>\n<p>When the second day came, we decided to go around by boat and have some fun. The boat was bigger than I thought, which might be able to hold around 100 people.</p>\n<p><img src=\"/images/IMG_20180406_084153.jpg\" alt=\"\"></p>\n<p>There were even bigger ones, which looked like a building.</p>\n<p><img src=\"/images/IMG_20180406_123639.jpg\" alt=\"\"></p>\n<p>I found that the scenery was not bad, maybe slightly better than I thought. This is small island.</p>\n<p><img src=\"/images/IMG_20180406_090110.jpg\" alt=\"\"></p>\n<p><img src=\"/images/IMG_20180406_094127.jpg\" alt=\"\"></p>\n<p><img src=\"/images/IMG_20180406_095808.jpg\" alt=\"\"></p>\n<p>On our way back, we were hit by another car in the highway. This was intense. Luckily no one got hurt. We didn’t finish dealing with the accident until 8 o’clock, during which we called the police and the insurance company. Since we were the one that got hit, we didn’t need to assume any responsibility. And for the other car, all the money was covered by the insurance company, so no one needed to worry about that.</p>\n<p>Then we drove to my company and had a supper around it, it was about 9 o’clock at that time. We were all pretty tired. We went to our home respectively and the travel was over.</p>\n"},{"title":"The meaning of life","date":"2018-03-05T10:53:53.000Z","thumbnail":"/images/980x.png","_content":"\nI've been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, *The Meaning Of Life*.\n\nThe question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that *Life had no meaning at all*.\n\nI guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:\n\n1. We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.\n2. Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.\n\nI learned a word *nihilism* when I was learning English, the definition of this word is as follows(From Longman DOCE).\n\n> the belief that nothing has any meaning or value\n\nNow that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!\n\nI think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that's why some people choose to commit suicide in the end, there's just no hope in their lives.\n\nWe have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what's the answer?\n\nThis is a hard question, but in my humble option, the answer is *no*, we should not adopt it.\n\nThe reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don't adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.\n\nBut maybe you have noticed, I only described the outcome of our choice, I didn't mention the answer of our ultimate question, what's the meaning of our lives?\n\nBefore trying to get the answer, let's just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?\n\nNo, the only thing you would question is, why you are mortal? It's obvious that you want to live forever in this wonderful world.\n\nSo you see, it's not about the question, it's about why we would ask this question, there maybe two reasons.\n\n1. This world is horrible.\n2. We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.\n\nAbout the first one, we cannot change this world, whether it's good, horrible, the truth is, it already exists and there's nothing we can do to change it.\n\nSo it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That's the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn't exist in your head any more.\n\nBut it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others' lives, which may not be so bad otherwise. Think about it, it's not an option.\n\nSo we are back to the second point again. We are suffering, is there a solution?\n\nIn most cases, yes, just do everything you can to make your life better.\n\nDon't have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.\n\nIn fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don't have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor... God has a thousand ways to make your life miserable and you cannot even change it, what should you do?\n\nI want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God's intention over and over again. But finally, he found the purpose of his life, which is *to be an inspiration, to help others live a better life*, because if he can do it, it's obvious that most people should be able to do it.\n\n![Nick](/images/nick.jpg)\n\nSo, as you can see, maybe you haven't tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.\n\nBut what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That's exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don't have anything to show for in your life. What should you do? Maybe lower your goals is one option.\n\nI went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don't try to pursue the useless in your life, and only then will you find your purpose.\n\nI agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that's not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.\n\nStill, I'm struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.","source":"_posts/The-meaning-of-life.md","raw":"title: The meaning of life\ndate: 2018-03-05 18:53:53\ntags: life\ncategories: Journal\nthumbnail: /images/980x.png\n---\n\nI've been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, *The Meaning Of Life*.\n\nThe question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that *Life had no meaning at all*.\n\nI guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:\n\n1. We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.\n2. Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.\n\nI learned a word *nihilism* when I was learning English, the definition of this word is as follows(From Longman DOCE).\n\n> the belief that nothing has any meaning or value\n\nNow that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!\n\nI think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that's why some people choose to commit suicide in the end, there's just no hope in their lives.\n\nWe have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what's the answer?\n\nThis is a hard question, but in my humble option, the answer is *no*, we should not adopt it.\n\nThe reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don't adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.\n\nBut maybe you have noticed, I only described the outcome of our choice, I didn't mention the answer of our ultimate question, what's the meaning of our lives?\n\nBefore trying to get the answer, let's just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?\n\nNo, the only thing you would question is, why you are mortal? It's obvious that you want to live forever in this wonderful world.\n\nSo you see, it's not about the question, it's about why we would ask this question, there maybe two reasons.\n\n1. This world is horrible.\n2. We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.\n\nAbout the first one, we cannot change this world, whether it's good, horrible, the truth is, it already exists and there's nothing we can do to change it.\n\nSo it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That's the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn't exist in your head any more.\n\nBut it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others' lives, which may not be so bad otherwise. Think about it, it's not an option.\n\nSo we are back to the second point again. We are suffering, is there a solution?\n\nIn most cases, yes, just do everything you can to make your life better.\n\nDon't have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.\n\nIn fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don't have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor... God has a thousand ways to make your life miserable and you cannot even change it, what should you do?\n\nI want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God's intention over and over again. But finally, he found the purpose of his life, which is *to be an inspiration, to help others live a better life*, because if he can do it, it's obvious that most people should be able to do it.\n\n![Nick](/images/nick.jpg)\n\nSo, as you can see, maybe you haven't tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.\n\nBut what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That's exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don't have anything to show for in your life. What should you do? Maybe lower your goals is one option.\n\nI went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don't try to pursue the useless in your life, and only then will you find your purpose.\n\nI agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that's not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.\n\nStill, I'm struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.","slug":"The-meaning-of-life","published":1,"updated":"2018-03-06T00:00:48.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqds003j8arfkxv5pjuv","content":"<p>I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, <em>The Meaning Of Life</em>.</p>\n<p>The question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that <em>Life had no meaning at all</em>.</p>\n<p>I guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:</p>\n<ol>\n<li>We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.</li>\n<li>Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.</li>\n</ol>\n<p>I learned a word <em>nihilism</em> when I was learning English, the definition of this word is as follows(From Longman DOCE).</p>\n<blockquote>\n<p>the belief that nothing has any meaning or value</p>\n</blockquote>\n<p>Now that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!</p>\n<p>I think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that’s why some people choose to commit suicide in the end, there’s just no hope in their lives.</p>\n<p>We have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what’s the answer?</p>\n<p>This is a hard question, but in my humble option, the answer is <em>no</em>, we should not adopt it.</p>\n<p>The reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don’t adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.</p>\n<p>But maybe you have noticed, I only described the outcome of our choice, I didn’t mention the answer of our ultimate question, what’s the meaning of our lives?</p>\n<p>Before trying to get the answer, let’s just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?</p>\n<p>No, the only thing you would question is, why you are mortal? It’s obvious that you want to live forever in this wonderful world.</p>\n<p>So you see, it’s not about the question, it’s about why we would ask this question, there maybe two reasons.</p>\n<ol>\n<li>This world is horrible.</li>\n<li>We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.</li>\n</ol>\n<p>About the first one, we cannot change this world, whether it’s good, horrible, the truth is, it already exists and there’s nothing we can do to change it.</p>\n<p>So it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That’s the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn’t exist in your head any more.</p>\n<p>But it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others’ lives, which may not be so bad otherwise. Think about it, it’s not an option.</p>\n<p>So we are back to the second point again. We are suffering, is there a solution?</p>\n<p>In most cases, yes, just do everything you can to make your life better.</p>\n<p>Don’t have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.</p>\n<p>In fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don’t have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor… God has a thousand ways to make your life miserable and you cannot even change it, what should you do?</p>\n<p>I want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God’s intention over and over again. But finally, he found the purpose of his life, which is <em>to be an inspiration, to help others live a better life</em>, because if he can do it, it’s obvious that most people should be able to do it.</p>\n<p><img src=\"/images/nick.jpg\" alt=\"Nick\"></p>\n<p>So, as you can see, maybe you haven’t tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.</p>\n<p>But what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That’s exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don’t have anything to show for in your life. What should you do? Maybe lower your goals is one option.</p>\n<p>I went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don’t try to pursue the useless in your life, and only then will you find your purpose.</p>\n<p>I agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that’s not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.</p>\n<p>Still, I’m struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve been pretty busy since joining the new company, but finally I get some time to write a blog today, so I decided to discuss a question that has been baffling me for a long time, <em>The Meaning Of Life</em>.</p>\n<p>The question came into my head when I was studying for a master degree. I never pondered over it before, and when it hit me, the first and obvious answer I could think of, was that <em>Life had no meaning at all</em>.</p>\n<p>I guess I was just too lonely, and I had been quiet for a long time, which may be the reason why I started to question it. And I guess there is high likelihood that people who suffer in their lives would ask the same question, due to some obvious reasons:</p>\n<ol>\n<li>We are mortal, which means whatever we do, it will disappear someday, which proves the meaninglessness of our lives.</li>\n<li>Although life is meaningless, we still have to suffer in this world, because this world is cruel and we are afraid to die.</li>\n</ol>\n<p>I learned a word <em>nihilism</em> when I was learning English, the definition of this word is as follows(From Longman DOCE).</p>\n<blockquote>\n<p>the belief that nothing has any meaning or value</p>\n</blockquote>\n<p>Now that I think about it, this is exactly what I described above. And there have to be a lot of people harboring the same thoughts, because there even exists a specific word here describing it!</p>\n<p>I think the thoughts mainly exist in people who suffer, who are depressed, because life is both hard and meaningless, and that’s why some people choose to commit suicide in the end, there’s just no hope in their lives.</p>\n<p>We have the above points to describe our problem, and we even have a terminology to concentrate our problem, now the question is, should we adopt it? If we adopt it, we concede the meaninglessness of our lives, which leads to the question that whether we should commit suicide to leave this horrible world. If we refuse to adopt it, we have to give enough evidence that life does have meaning and what we do has its own purpose in its own way. So what’s the answer?</p>\n<p>This is a hard question, but in my humble option, the answer is <em>no</em>, we should not adopt it.</p>\n<p>The reason is that, if everybody in this world adopts this mentality, our world would absolutely gets worse, which makes our lives even more miserable. But if we don’t adopt it, and think that life has some sort of purposes in its own way, we may strive to find it, or just do whatever we do to make us thrive, so this world would get better everyday, and maybe someday in the future, we will get an answer somewhere.</p>\n<p>But maybe you have noticed, I only described the outcome of our choice, I didn’t mention the answer of our ultimate question, what’s the meaning of our lives?</p>\n<p>Before trying to get the answer, let’s just try to recall why we would think about this question in the first place. You know why? Because we are suffering. Consider a life that is so easy, and you can enjoy all kinds of pleasure you can think of, would you asking this question in that situation?</p>\n<p>No, the only thing you would question is, why you are mortal? It’s obvious that you want to live forever in this wonderful world.</p>\n<p>So you see, it’s not about the question, it’s about why we would ask this question, there maybe two reasons.</p>\n<ol>\n<li>This world is horrible.</li>\n<li>We are not smart/lucky enough to live a good life in this world, and we are suffering because of it.</li>\n</ol>\n<p>About the first one, we cannot change this world, whether it’s good, horrible, the truth is, it already exists and there’s nothing we can do to change it.</p>\n<p>So it comes to the second one, I think this is actually the answer, we are not smart/lucky enough to live a good life. That’s the truth. If you were suffering and you knew that life was meaningless, suicide would become the final resort. Because by committing suicide, both the suffering and the question would be gone, they wouldn’t exist in your head any more.</p>\n<p>But it will also lead to the great sorrow of your beloved, it could easily crush them. So your death would destroy others’ lives, which may not be so bad otherwise. Think about it, it’s not an option.</p>\n<p>So we are back to the second point again. We are suffering, is there a solution?</p>\n<p>In most cases, yes, just do everything you can to make your life better.</p>\n<p>Don’t have money? Try to get a job. Hate your job? Just try to do better in your job or get a new job if you cannot handle the pain. Cannot get a job? Learn something, so you could be utilized by some company.</p>\n<p>In fact, some people can make their lives better just by changing their mentalities, but some people cannot, because they don’t have enough resources to change their lives. Image that you are handicapped, you have a pretty low IQ, you are extremely poor… God has a thousand ways to make your life miserable and you cannot even change it, what should you do?</p>\n<p>I want to talk about a person before answering the question. I once saw Nick in a video, and I was shocked. Nick is guy with no arms or legs, yet he managed to marry a beautiful wife and have several kids. He talked about his life for many times on the Internet, about how he was depressed and decided to commit suicide when he was only 10, and how he was pondering over God’s intention over and over again. But finally, he found the purpose of his life, which is <em>to be an inspiration, to help others live a better life</em>, because if he can do it, it’s obvious that most people should be able to do it.</p>\n<p><img src=\"/images/nick.jpg\" alt=\"Nick\"></p>\n<p>So, as you can see, maybe you haven’t tried the best of you, you should try harder, so you can live a better life, so you could be happy for the most of your time. So you can start to enjoy in this world, at least you are not making your life worse, which is very important.</p>\n<p>But what if you cannot? E.g. what if you have a pretty low IQ? I guess sometimes you just need to change your mentality. God only gives us limited resources, which means no matter how hard we try, we still cannot achieve something that is beyond our capabilities. That’s exactly why you should change your goal. The reason why you are unhappy is because you cannot get what you want. Just imagine, you would feel miserable if you are surrounded by rich business men, lucky guys, lottery winners, etc. You are nothing compared to them, you don’t have anything to show for in your life. What should you do? Maybe lower your goals is one option.</p>\n<p>I went to a template several days before, and I was pretty surprised by the sentences printed on the walls of the temple because it conforms to what I learned in the past few years. It says that our life is just a dream, all the fame and fortune are just hallucinations in our lives. Be calm and quiet, listen to yourself, don’t try to pursue the useless in your life, and only then will you find your purpose.</p>\n<p>I agree with most of them, if we cannot achieve what we want, we need to listen to our heart, is this really what we want? Money? Fame? Maybe that’s not what you want. Of course, money is necessary in your life, you need it to live. But what if you have enough of it to avoid hunger? Do you really need them in that situation? Maybe, or maybe not. It depends on your mentalities. It seems that your life would get better if you had more money? But is this really true? Not necessary. Many rich people choose to commit suicide. If more money means more happiness, then why they choose death? So if pursuing those things makes your miserable, just stop, your life may get better if you have a better mentality.</p>\n<p>Still, I’m struggling to make my life better. To figure out what I want, and to strive for them as hard as I can. I get pretty upset sometimes, because life is so cruel, but we have no other options. Try everything, and see what happens. Maybe we will get the answer to the ultimate question someday.</p>\n"},{"title":"We are either young or old, never something in between","date":"2018-01-20T07:55:01.000Z","thumbnail":null,"_content":"\nToday I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.\n\nI remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.\n\nWell, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.\n\nI once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It's true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn't notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.\n\nI miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It's not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn't getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don't know what to do with my money, I just want to go back to the past, when I don't have money but I'm still young, when everything is possible.\n\n![垫底辣妹](/images/128910133_14610369084721n.jpg)","source":"_posts/We-are-either-young-or-old-never-something-in-between.md","raw":"title: 'We are either young or old, never something in between'\ndate: 2018-01-20 15:55:01\ntags:\ncategories: Journey\nthumbnail:\n---\n\nToday I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.\n\nI remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.\n\nWell, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.\n\nI once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It's true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn't notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.\n\nI miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It's not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn't getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don't know what to do with my money, I just want to go back to the past, when I don't have money but I'm still young, when everything is possible.\n\n![垫底辣妹](/images/128910133_14610369084721n.jpg)","slug":"We-are-either-young-or-old-never-something-in-between","published":1,"updated":"2018-01-20T08:42:01.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdu003m8arf2qsh3bzi","content":"<p>Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.</p>\n<p>I remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.</p>\n<p>Well, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.</p>\n<p>I once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It’s true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn’t notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.</p>\n<p>I miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It’s not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn’t getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don’t know what to do with my money, I just want to go back to the past, when I don’t have money but I’m still young, when everything is possible.</p>\n<p><img src=\"/images/128910133_14610369084721n.jpg\" alt=\"垫底辣妹\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I watched ビリギャル(垫底辣妹)，it told a story of how a bad student strove for a top university and finally succeeded. While moved by the movie plot, I also realized I was not a student any more, life would never the same.</p>\n<p>I remember that my teacher often told me school might be the best place you could ever stay in your entire life, where there was no trouble , no frustration, you got a lot of classmates to study with, to play with, to strive for the same goal together with. Life would never be the same when you went to the society, where life might become so unfair and frustrating to the extent that you had never imagine.</p>\n<p>Well, this is so true, but this is not the worst part. The worst part is you will never be as young as before. You have to grow up, grow old, and grow older, until someday you start wondering what is going wrong with you. But actually nothing is going wrong, this is just life.</p>\n<p>I once heard a theory that you would only consider yourself as young, or old in the audience, never something in between. It’s true. Life flies by so fast, you may not even notice that. And here we are, 2018, I didn’t notice it either. But it came, so I became older, once again. I cannot prevent the process, and the process will be faster and faster as we grow older.</p>\n<p>I miss those days when I was still in school, when everything was new. When I still believed in love, when I had lots of friends to play with, when I still looked forward to the future. It’s not the same any more. No matter how hard I strive, I will never get younger. Not to say that my life isn’t getting better, either. Every day is an ordinary day, every day is the same. I go to work, I earn my money, then I don’t know what to do with my money, I just want to go back to the past, when I don’t have money but I’m still young, when everything is possible.</p>\n<p><img src=\"/images/128910133_14610369084721n.jpg\" alt=\"垫底辣妹\"></p>\n"},{"title":"Understand poisson distribution","date":"2016-10-01T15:34:25.000Z","thumbnail":"/images/call.jpg","_content":"\n# Introduction\nPoisson distribution can be derived from Binomial distribution when $\\lim\\limits_{n\\to\\infty}np = \\lambda(\\lambda\\in\\mathbb R)$, in which $n$ is the number of trials, $p$ is the probability of success in each trial. But how is the formula of poisson distribution obtained? Why is $p$ getting smaller when $n$ approaches infinity? I will try to answer these questions in this post.\n\n# Question\nImagine there's a call center in your local city, it receives a certain amount of calls per day. Let's say the expected value of the number of the received calls is $\\lambda$. Now we need to calculate the probability of the number of received calls equaling $x$. How can we do it?\n\n# Model\nLet's split one day into $n$ periods. So there could exist the two following cases for each period of time.\n\n1. There are calls received, either only one call or multiple calls\n2. There are no call received\n\nWhether there being calls received in each period of time is independent. Let's define the following symbols:\n\n1. $P(X=x)$: the probability of the number of periods during which one or more calls received being $x$,\n2. $p_n$: the probability of there existing one or more calls during one period of time.\n3. ${p_n}'$: the probability of there existing only one call during one period of time\n\nIt can be easily found out that $P(X=x)$ follows Binomial distribution, so\n\n$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n - x)}\\tag1$$\n\nThe expected value of $X$ is\n\n$$E(X) = np_n$$\n\nNotice that we have another information: the average number of received calls per day is $\\lambda$, which means the expected value of the number of received calls per day is $\\lambda$. It's going to come in handy later on.\n\nIncrease $n$, we will notice that the amount of time each period contains decreases, so some periods in which there exist two or more calls before only exist one or even zero call now. So the expected value of $X$ increases(because some periods in which two or more calls exists is split into multiple periods in which only one call exists), which means $np_n$ increases as $n$ increases. When $n$ is large enough, so that each period of time is so short that no more than one call can exist in one period of time, the following equation would hold in this case.\n\n$$p_n = {p_n}'$$\n\nSo that\n\n$$E(X) = np_n = n{p_n}' = \\lambda\\tag2$$\n\nLet's define another variable Y\n\n* $Y$: the total number of calls received per day.\n*  $\\delta t$: the amount of time each period contains\n\nWhen $n$ is large enough, no more than one call exists in one period of time, so the number of periods of time in which one or more calls received($X$) equals the number of total calls received per day($Y$).\n\nSo\n\n$$P(Y=x) = P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag3$$\n\nHow large should $n$ be to hold the above equation? 100, 10000, 10000000000? The larger, the better, so we set $n \\to\\infty$, so $\\delta t \\to 0$. In this case, no more than one call exists in one period of time. \n\nLet's prove that no more than one call exists in $\\delta t$ when $\\delta t \\to 0$. Assuming more than one call exist in $\\delta t$, because $\\delta t \\to 0$, so $\\delta t$ should be smaller than $\\forall \\varepsilon>0$. So we can futher split $\\delta t$ into several parts so each part only contains one call or no call, so no more than one call could exist in $\\delta t$ when $\\delta t \\to\\infty$. But is there a possibility that one call exists in $\\delta t$? Yes. Notice that $\\delta t\\to 0$ doesn't mean $\\delta t = 0$. It just means $\\delta t$ is smaller than any positive real number. Just like the figure of $y=\\frac 1 x$ below. While $y\\to0$ when $x\\to \\infty$, but $y$ could be smaller than any positive real number, but $y$ can never be 0.\n\n![$y=\\frac 1 x$](/images/y=1_over_x.png)\n\nSo $p_n$ becomes the possibility of there existing only one call in each period of time, so $np_n$ becomes the total number of calls per day, i.e.\n\n$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$\n\nTo make it work, the following equation must hold.\n\n$$\\lim\\limits_{n\\to\\infty}p_n = 0$$\n\nSo the possibility of there existing only one call in $\\delta t$ is 0. Does it mean there exists no call in any period of time? Of course not. The probability being 0 doesn't mean it's not possible. There will always be some calls falling into some periods of time, $p_n\\to 0$ only means $p_n$ could be smaller than any positive real number. In the real world, you cannot actually make $n = \\infty$, so you cannot actually make $p_n = 0$. To better illustrate what I mean, let's define the two following events.\n\n* *event1*: Only one call is received in some periods of time\n* *event2*: Two or more calls are received in some periods of time. \n\nThe number of *event1* can never be 0 as long as we receive at least one call in a day. But when $n$ gets larger and larger, *event2* will finally be 0. This is different although the possibility of both events is 0 when $n\\to\\infty$.\n\nLet's add $n\\to\\infty$, so $(3)$ becomes\n\n$$P(Y=x) = P(X=x) = \\lim\\limits_{n\\to\\infty}\\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag4$$\n\nLet\n\n$$\\lambda_n = np_n$$\n\nAccording to $(2)$\n\n$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$$\n\nPut $p_n = \\frac{\\lambda_n} n$ into $(4)$, we get\n\n$$\\begin{equation}\\begin{split} &P(Y=x) \\\\\n&= \\lim\\limits_{n\\to\\infty}\\binom n x(\\frac{\\lambda_n} n)^x(1-\\frac{\\lambda_n}n)^{(n-x)}\\\\\n&=\\lim\\limits_{n\\to\\infty}\\frac{n(n-1)\\cdots(n-x+1)}{x!\\cdot n^x}\\cdot{\\lambda_n}^x\\cdot(1-\\frac{\\lambda_n} n)^n\\cdot(1-\\frac{\\lambda_n} n)^{-x}\\\\\n&=\\lim\\limits_{n\\to\\infty}\\frac 1 {x!} \\cdot 1 \\cdot \\underbrace{(1-\\frac 1 n)\\cdot(1-\\frac 2 n)\\cdots(1-\\frac{x-1} n)}_1\\cdot\\underbrace{ {\\lambda_n}^x}_{\\lambda}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^n}_{e^{-\\lambda}}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^{-x}}_1\\\\\n&=\\frac{e^{-\\lambda}{\\lambda}^x}{x!}\\end{split}\\end{equation}$$\n\nYou can find out why $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$ in [this post](https://searene.me/2016/09/30/Calculate-1-lambda-n-n/)\n\n# FAQ\n\n**Q**: If I was given $n$ and $p_n$, and I got $\\lambda$ using $\\lambda = np_n$, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.\n\n$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\n Is it the exact value I want or just an approximation?\n\n**A**: This is just an approximation. The value you get is **the number of pieces where events exist**. There could be one event in a piece, there could be two or more events in a piece. So $P(X=x)$ not only includes the some of the cases where we want, but also the case where we don't want, e.g. it also includes the case where $x+1$ events occur, but it doesn't include the case where $x$ events fall into $x-1$ or less pieces.\n\n**Q**: If I was given the expected value $\\lambda$, and I calculate the probability using the following equation, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.\n\n$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\n Is it the exact value I want or just an approximation?\n\n**A**: It's the value you want. When $n$ is not large, the reason why there is a difference between $\\binom n x{p_n}^x(1-p_n)^{(n-x)}$ and $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$ is that $p_n$ is not exactly the value we want. That is, when $n$ is not large and we calculate the probability using $(1)$, the answer we get is\n\n$$P(X=x) = P_1 + P_2$$\n\n* $X$: the number of pieces where one or more events exist\n* $P_1$ refers to the case where $x$ events fall into $x$ pieces\n* $P_2$ refers to the case where $x+1$ or more events fall into $x$ pieces\n\nThe value we want would be\n\n$$P(Y = x) = P_1 + P_3$$\n\n* $P_3$ refers to the case where $x$ events fall into $x-1$ or less pieces.\n* Y: the total number of events occurring.\n\nAs $n\\to\\infty$, $P_2\\to 0$, $P_3\\to 0$, so $P(X=x) \\to P(Y=x)$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}P(X=x) = \\lim\\limits_{n\\to\\infty}P(Y=x) = P_1$$\n\nBecause\n\n$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}$$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\nBecause P(Y=x) has nothing to do with what $n$ is, so $\\lim\\limits_{n\\to\\infty}P(Y=x) = P(Y=x)$\n\nSo\n\n$$P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\nThat is, the number of total events is $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$.\n","source":"_posts/Understanding-poisson-distribution.md","raw":"title: Understand poisson distribution\ndate: 2016-10-01 23:34:25\ntags: [poisson, probability, math]\ncategories: Math\nthumbnail: /images/call.jpg\n---\n\n# Introduction\nPoisson distribution can be derived from Binomial distribution when $\\lim\\limits_{n\\to\\infty}np = \\lambda(\\lambda\\in\\mathbb R)$, in which $n$ is the number of trials, $p$ is the probability of success in each trial. But how is the formula of poisson distribution obtained? Why is $p$ getting smaller when $n$ approaches infinity? I will try to answer these questions in this post.\n\n# Question\nImagine there's a call center in your local city, it receives a certain amount of calls per day. Let's say the expected value of the number of the received calls is $\\lambda$. Now we need to calculate the probability of the number of received calls equaling $x$. How can we do it?\n\n# Model\nLet's split one day into $n$ periods. So there could exist the two following cases for each period of time.\n\n1. There are calls received, either only one call or multiple calls\n2. There are no call received\n\nWhether there being calls received in each period of time is independent. Let's define the following symbols:\n\n1. $P(X=x)$: the probability of the number of periods during which one or more calls received being $x$,\n2. $p_n$: the probability of there existing one or more calls during one period of time.\n3. ${p_n}'$: the probability of there existing only one call during one period of time\n\nIt can be easily found out that $P(X=x)$ follows Binomial distribution, so\n\n$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n - x)}\\tag1$$\n\nThe expected value of $X$ is\n\n$$E(X) = np_n$$\n\nNotice that we have another information: the average number of received calls per day is $\\lambda$, which means the expected value of the number of received calls per day is $\\lambda$. It's going to come in handy later on.\n\nIncrease $n$, we will notice that the amount of time each period contains decreases, so some periods in which there exist two or more calls before only exist one or even zero call now. So the expected value of $X$ increases(because some periods in which two or more calls exists is split into multiple periods in which only one call exists), which means $np_n$ increases as $n$ increases. When $n$ is large enough, so that each period of time is so short that no more than one call can exist in one period of time, the following equation would hold in this case.\n\n$$p_n = {p_n}'$$\n\nSo that\n\n$$E(X) = np_n = n{p_n}' = \\lambda\\tag2$$\n\nLet's define another variable Y\n\n* $Y$: the total number of calls received per day.\n*  $\\delta t$: the amount of time each period contains\n\nWhen $n$ is large enough, no more than one call exists in one period of time, so the number of periods of time in which one or more calls received($X$) equals the number of total calls received per day($Y$).\n\nSo\n\n$$P(Y=x) = P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag3$$\n\nHow large should $n$ be to hold the above equation? 100, 10000, 10000000000? The larger, the better, so we set $n \\to\\infty$, so $\\delta t \\to 0$. In this case, no more than one call exists in one period of time. \n\nLet's prove that no more than one call exists in $\\delta t$ when $\\delta t \\to 0$. Assuming more than one call exist in $\\delta t$, because $\\delta t \\to 0$, so $\\delta t$ should be smaller than $\\forall \\varepsilon>0$. So we can futher split $\\delta t$ into several parts so each part only contains one call or no call, so no more than one call could exist in $\\delta t$ when $\\delta t \\to\\infty$. But is there a possibility that one call exists in $\\delta t$? Yes. Notice that $\\delta t\\to 0$ doesn't mean $\\delta t = 0$. It just means $\\delta t$ is smaller than any positive real number. Just like the figure of $y=\\frac 1 x$ below. While $y\\to0$ when $x\\to \\infty$, but $y$ could be smaller than any positive real number, but $y$ can never be 0.\n\n![$y=\\frac 1 x$](/images/y=1_over_x.png)\n\nSo $p_n$ becomes the possibility of there existing only one call in each period of time, so $np_n$ becomes the total number of calls per day, i.e.\n\n$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$\n\nTo make it work, the following equation must hold.\n\n$$\\lim\\limits_{n\\to\\infty}p_n = 0$$\n\nSo the possibility of there existing only one call in $\\delta t$ is 0. Does it mean there exists no call in any period of time? Of course not. The probability being 0 doesn't mean it's not possible. There will always be some calls falling into some periods of time, $p_n\\to 0$ only means $p_n$ could be smaller than any positive real number. In the real world, you cannot actually make $n = \\infty$, so you cannot actually make $p_n = 0$. To better illustrate what I mean, let's define the two following events.\n\n* *event1*: Only one call is received in some periods of time\n* *event2*: Two or more calls are received in some periods of time. \n\nThe number of *event1* can never be 0 as long as we receive at least one call in a day. But when $n$ gets larger and larger, *event2* will finally be 0. This is different although the possibility of both events is 0 when $n\\to\\infty$.\n\nLet's add $n\\to\\infty$, so $(3)$ becomes\n\n$$P(Y=x) = P(X=x) = \\lim\\limits_{n\\to\\infty}\\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag4$$\n\nLet\n\n$$\\lambda_n = np_n$$\n\nAccording to $(2)$\n\n$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$$\n\nPut $p_n = \\frac{\\lambda_n} n$ into $(4)$, we get\n\n$$\\begin{equation}\\begin{split} &P(Y=x) \\\\\n&= \\lim\\limits_{n\\to\\infty}\\binom n x(\\frac{\\lambda_n} n)^x(1-\\frac{\\lambda_n}n)^{(n-x)}\\\\\n&=\\lim\\limits_{n\\to\\infty}\\frac{n(n-1)\\cdots(n-x+1)}{x!\\cdot n^x}\\cdot{\\lambda_n}^x\\cdot(1-\\frac{\\lambda_n} n)^n\\cdot(1-\\frac{\\lambda_n} n)^{-x}\\\\\n&=\\lim\\limits_{n\\to\\infty}\\frac 1 {x!} \\cdot 1 \\cdot \\underbrace{(1-\\frac 1 n)\\cdot(1-\\frac 2 n)\\cdots(1-\\frac{x-1} n)}_1\\cdot\\underbrace{ {\\lambda_n}^x}_{\\lambda}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^n}_{e^{-\\lambda}}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^{-x}}_1\\\\\n&=\\frac{e^{-\\lambda}{\\lambda}^x}{x!}\\end{split}\\end{equation}$$\n\nYou can find out why $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$ in [this post](https://searene.me/2016/09/30/Calculate-1-lambda-n-n/)\n\n# FAQ\n\n**Q**: If I was given $n$ and $p_n$, and I got $\\lambda$ using $\\lambda = np_n$, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.\n\n$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\n Is it the exact value I want or just an approximation?\n\n**A**: This is just an approximation. The value you get is **the number of pieces where events exist**. There could be one event in a piece, there could be two or more events in a piece. So $P(X=x)$ not only includes the some of the cases where we want, but also the case where we don't want, e.g. it also includes the case where $x+1$ events occur, but it doesn't include the case where $x$ events fall into $x-1$ or less pieces.\n\n**Q**: If I was given the expected value $\\lambda$, and I calculate the probability using the following equation, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.\n\n$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\n Is it the exact value I want or just an approximation?\n\n**A**: It's the value you want. When $n$ is not large, the reason why there is a difference between $\\binom n x{p_n}^x(1-p_n)^{(n-x)}$ and $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$ is that $p_n$ is not exactly the value we want. That is, when $n$ is not large and we calculate the probability using $(1)$, the answer we get is\n\n$$P(X=x) = P_1 + P_2$$\n\n* $X$: the number of pieces where one or more events exist\n* $P_1$ refers to the case where $x$ events fall into $x$ pieces\n* $P_2$ refers to the case where $x+1$ or more events fall into $x$ pieces\n\nThe value we want would be\n\n$$P(Y = x) = P_1 + P_3$$\n\n* $P_3$ refers to the case where $x$ events fall into $x-1$ or less pieces.\n* Y: the total number of events occurring.\n\nAs $n\\to\\infty$, $P_2\\to 0$, $P_3\\to 0$, so $P(X=x) \\to P(Y=x)$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}P(X=x) = \\lim\\limits_{n\\to\\infty}P(Y=x) = P_1$$\n\nBecause\n\n$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}$$\n\nSo\n\n$$\\lim\\limits_{n\\to\\infty}P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\nBecause P(Y=x) has nothing to do with what $n$ is, so $\\lim\\limits_{n\\to\\infty}P(Y=x) = P(Y=x)$\n\nSo\n\n$$P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$\n\nThat is, the number of total events is $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$.\n","slug":"Understanding-poisson-distribution","published":1,"updated":"2017-05-18T16:42:28.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdw003q8arfal8uav4a","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Poisson distribution can be derived from Binomial distribution when $\\lim\\limits_{n\\to\\infty}np = \\lambda(\\lambda\\in\\mathbb R)$, in which $n$ is the number of trials, $p$ is the probability of success in each trial. But how is the formula of poisson distribution obtained? Why is $p$ getting smaller when $n$ approaches infinity? I will try to answer these questions in this post.</p>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>Imagine there’s a call center in your local city, it receives a certain amount of calls per day. Let’s say the expected value of the number of the received calls is $\\lambda$. Now we need to calculate the probability of the number of received calls equaling $x$. How can we do it?</p>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>Let’s split one day into $n$ periods. So there could exist the two following cases for each period of time.</p>\n<ol>\n<li>There are calls received, either only one call or multiple calls</li>\n<li>There are no call received</li>\n</ol>\n<p>Whether there being calls received in each period of time is independent. Let’s define the following symbols:</p>\n<ol>\n<li>$P(X=x)$: the probability of the number of periods during which one or more calls received being $x$,</li>\n<li>$p_n$: the probability of there existing one or more calls during one period of time.</li>\n<li>${p_n}’$: the probability of there existing only one call during one period of time</li>\n</ol>\n<p>It can be easily found out that $P(X=x)$ follows Binomial distribution, so</p>\n<p>$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n - x)}\\tag1$$</p>\n<p>The expected value of $X$ is</p>\n<p>$$E(X) = np_n$$</p>\n<p>Notice that we have another information: the average number of received calls per day is $\\lambda$, which means the expected value of the number of received calls per day is $\\lambda$. It’s going to come in handy later on.</p>\n<p>Increase $n$, we will notice that the amount of time each period contains decreases, so some periods in which there exist two or more calls before only exist one or even zero call now. So the expected value of $X$ increases(because some periods in which two or more calls exists is split into multiple periods in which only one call exists), which means $np_n$ increases as $n$ increases. When $n$ is large enough, so that each period of time is so short that no more than one call can exist in one period of time, the following equation would hold in this case.</p>\n<p>$$p_n = {p_n}’$$</p>\n<p>So that</p>\n<p>$$E(X) = np_n = n{p_n}’ = \\lambda\\tag2$$</p>\n<p>Let’s define another variable Y</p>\n<ul>\n<li>$Y$: the total number of calls received per day.</li>\n<li>$\\delta t$: the amount of time each period contains</li>\n</ul>\n<p>When $n$ is large enough, no more than one call exists in one period of time, so the number of periods of time in which one or more calls received($X$) equals the number of total calls received per day($Y$).</p>\n<p>So</p>\n<p>$$P(Y=x) = P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag3$$</p>\n<p>How large should $n$ be to hold the above equation? 100, 10000, 10000000000? The larger, the better, so we set $n \\to\\infty$, so $\\delta t \\to 0$. In this case, no more than one call exists in one period of time. </p>\n<p>Let’s prove that no more than one call exists in $\\delta t$ when $\\delta t \\to 0$. Assuming more than one call exist in $\\delta t$, because $\\delta t \\to 0$, so $\\delta t$ should be smaller than $\\forall \\varepsilon&gt;0$. So we can futher split $\\delta t$ into several parts so each part only contains one call or no call, so no more than one call could exist in $\\delta t$ when $\\delta t \\to\\infty$. But is there a possibility that one call exists in $\\delta t$? Yes. Notice that $\\delta t\\to 0$ doesn’t mean $\\delta t = 0$. It just means $\\delta t$ is smaller than any positive real number. Just like the figure of $y=\\frac 1 x$ below. While $y\\to0$ when $x\\to \\infty$, but $y$ could be smaller than any positive real number, but $y$ can never be 0.</p>\n<p><img src=\"/images/y=1_over_x.png\" alt=\"$y=\\frac 1 x$\"></p>\n<p>So $p_n$ becomes the possibility of there existing only one call in each period of time, so $np_n$ becomes the total number of calls per day, i.e.</p>\n<p>$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$</p>\n<p>To make it work, the following equation must hold.</p>\n<p>$$\\lim\\limits_{n\\to\\infty}p_n = 0$$</p>\n<p>So the possibility of there existing only one call in $\\delta t$ is 0. Does it mean there exists no call in any period of time? Of course not. The probability being 0 doesn’t mean it’s not possible. There will always be some calls falling into some periods of time, $p_n\\to 0$ only means $p_n$ could be smaller than any positive real number. In the real world, you cannot actually make $n = \\infty$, so you cannot actually make $p_n = 0$. To better illustrate what I mean, let’s define the two following events.</p>\n<ul>\n<li><em>event1</em>: Only one call is received in some periods of time</li>\n<li><em>event2</em>: Two or more calls are received in some periods of time. </li>\n</ul>\n<p>The number of <em>event1</em> can never be 0 as long as we receive at least one call in a day. But when $n$ gets larger and larger, <em>event2</em> will finally be 0. This is different although the possibility of both events is 0 when $n\\to\\infty$.</p>\n<p>Let’s add $n\\to\\infty$, so $(3)$ becomes</p>\n<p>$$P(Y=x) = P(X=x) = \\lim\\limits_{n\\to\\infty}\\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag4$$</p>\n<p>Let</p>\n<p>$$\\lambda_n = np_n$$</p>\n<p>According to $(2)$</p>\n<p>$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$$</p>\n<p>Put $p_n = \\frac{\\lambda_n} n$ into $(4)$, we get</p>\n<p>$$\\begin{equation}\\begin{split} &amp;P(Y=x) \\\\<br>&amp;= \\lim\\limits_{n\\to\\infty}\\binom n x(\\frac{\\lambda_n} n)^x(1-\\frac{\\lambda_n}n)^{(n-x)}\\\\<br>&amp;=\\lim\\limits_{n\\to\\infty}\\frac{n(n-1)\\cdots(n-x+1)}{x!\\cdot n^x}\\cdot{\\lambda_n}^x\\cdot(1-\\frac{\\lambda_n} n)^n\\cdot(1-\\frac{\\lambda_n} n)^{-x}\\\\<br>&amp;=\\lim\\limits_{n\\to\\infty}\\frac 1 {x!} \\cdot 1 \\cdot \\underbrace{(1-\\frac 1 n)\\cdot(1-\\frac 2 n)\\cdots(1-\\frac{x-1} n)}_1\\cdot\\underbrace{ {\\lambda_n}^x}_{\\lambda}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^n}_{e^{-\\lambda}}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^{-x}}_1\\\\<br>&amp;=\\frac{e^{-\\lambda}{\\lambda}^x}{x!}\\end{split}\\end{equation}$$</p>\n<p>You can find out why $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$ in <a href=\"https://searene.me/2016/09/30/Calculate-1-lambda-n-n/\">this post</a></p>\n<h1 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h1><p><strong>Q</strong>: If I was given $n$ and $p_n$, and I got $\\lambda$ using $\\lambda = np_n$, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.</p>\n<p>$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p> Is it the exact value I want or just an approximation?</p>\n<p><strong>A</strong>: This is just an approximation. The value you get is <strong>the number of pieces where events exist</strong>. There could be one event in a piece, there could be two or more events in a piece. So $P(X=x)$ not only includes the some of the cases where we want, but also the case where we don’t want, e.g. it also includes the case where $x+1$ events occur, but it doesn’t include the case where $x$ events fall into $x-1$ or less pieces.</p>\n<p><strong>Q</strong>: If I was given the expected value $\\lambda$, and I calculate the probability using the following equation, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.</p>\n<p>$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p> Is it the exact value I want or just an approximation?</p>\n<p><strong>A</strong>: It’s the value you want. When $n$ is not large, the reason why there is a difference between $\\binom n x{p_n}^x(1-p_n)^{(n-x)}$ and $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$ is that $p_n$ is not exactly the value we want. That is, when $n$ is not large and we calculate the probability using $(1)$, the answer we get is</p>\n<p>$$P(X=x) = P_1 + P_2$$</p>\n<ul>\n<li>$X$: the number of pieces where one or more events exist</li>\n<li>$P_1$ refers to the case where $x$ events fall into $x$ pieces</li>\n<li>$P_2$ refers to the case where $x+1$ or more events fall into $x$ pieces</li>\n</ul>\n<p>The value we want would be</p>\n<p>$$P(Y = x) = P_1 + P_3$$</p>\n<ul>\n<li>$P_3$ refers to the case where $x$ events fall into $x-1$ or less pieces.</li>\n<li>Y: the total number of events occurring.</li>\n</ul>\n<p>As $n\\to\\infty$, $P_2\\to 0$, $P_3\\to 0$, so $P(X=x) \\to P(Y=x)$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}P(X=x) = \\lim\\limits_{n\\to\\infty}P(Y=x) = P_1$$</p>\n<p>Because</p>\n<p>$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}$$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p>Because P(Y=x) has nothing to do with what $n$ is, so $\\lim\\limits_{n\\to\\infty}P(Y=x) = P(Y=x)$</p>\n<p>So</p>\n<p>$$P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p>That is, the number of total events is $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Poisson distribution can be derived from Binomial distribution when $\\lim\\limits_{n\\to\\infty}np = \\lambda(\\lambda\\in\\mathbb R)$, in which $n$ is the number of trials, $p$ is the probability of success in each trial. But how is the formula of poisson distribution obtained? Why is $p$ getting smaller when $n$ approaches infinity? I will try to answer these questions in this post.</p>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>Imagine there’s a call center in your local city, it receives a certain amount of calls per day. Let’s say the expected value of the number of the received calls is $\\lambda$. Now we need to calculate the probability of the number of received calls equaling $x$. How can we do it?</p>\n<h1 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h1><p>Let’s split one day into $n$ periods. So there could exist the two following cases for each period of time.</p>\n<ol>\n<li>There are calls received, either only one call or multiple calls</li>\n<li>There are no call received</li>\n</ol>\n<p>Whether there being calls received in each period of time is independent. Let’s define the following symbols:</p>\n<ol>\n<li>$P(X=x)$: the probability of the number of periods during which one or more calls received being $x$,</li>\n<li>$p_n$: the probability of there existing one or more calls during one period of time.</li>\n<li>${p_n}’$: the probability of there existing only one call during one period of time</li>\n</ol>\n<p>It can be easily found out that $P(X=x)$ follows Binomial distribution, so</p>\n<p>$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n - x)}\\tag1$$</p>\n<p>The expected value of $X$ is</p>\n<p>$$E(X) = np_n$$</p>\n<p>Notice that we have another information: the average number of received calls per day is $\\lambda$, which means the expected value of the number of received calls per day is $\\lambda$. It’s going to come in handy later on.</p>\n<p>Increase $n$, we will notice that the amount of time each period contains decreases, so some periods in which there exist two or more calls before only exist one or even zero call now. So the expected value of $X$ increases(because some periods in which two or more calls exists is split into multiple periods in which only one call exists), which means $np_n$ increases as $n$ increases. When $n$ is large enough, so that each period of time is so short that no more than one call can exist in one period of time, the following equation would hold in this case.</p>\n<p>$$p_n = {p_n}’$$</p>\n<p>So that</p>\n<p>$$E(X) = np_n = n{p_n}’ = \\lambda\\tag2$$</p>\n<p>Let’s define another variable Y</p>\n<ul>\n<li>$Y$: the total number of calls received per day.</li>\n<li>$\\delta t$: the amount of time each period contains</li>\n</ul>\n<p>When $n$ is large enough, no more than one call exists in one period of time, so the number of periods of time in which one or more calls received($X$) equals the number of total calls received per day($Y$).</p>\n<p>So</p>\n<p>$$P(Y=x) = P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag3$$</p>\n<p>How large should $n$ be to hold the above equation? 100, 10000, 10000000000? The larger, the better, so we set $n \\to\\infty$, so $\\delta t \\to 0$. In this case, no more than one call exists in one period of time. </p>\n<p>Let’s prove that no more than one call exists in $\\delta t$ when $\\delta t \\to 0$. Assuming more than one call exist in $\\delta t$, because $\\delta t \\to 0$, so $\\delta t$ should be smaller than $\\forall \\varepsilon&gt;0$. So we can futher split $\\delta t$ into several parts so each part only contains one call or no call, so no more than one call could exist in $\\delta t$ when $\\delta t \\to\\infty$. But is there a possibility that one call exists in $\\delta t$? Yes. Notice that $\\delta t\\to 0$ doesn’t mean $\\delta t = 0$. It just means $\\delta t$ is smaller than any positive real number. Just like the figure of $y=\\frac 1 x$ below. While $y\\to0$ when $x\\to \\infty$, but $y$ could be smaller than any positive real number, but $y$ can never be 0.</p>\n<p><img src=\"/images/y=1_over_x.png\" alt=\"$y=\\frac 1 x$\"></p>\n<p>So $p_n$ becomes the possibility of there existing only one call in each period of time, so $np_n$ becomes the total number of calls per day, i.e.</p>\n<p>$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$</p>\n<p>To make it work, the following equation must hold.</p>\n<p>$$\\lim\\limits_{n\\to\\infty}p_n = 0$$</p>\n<p>So the possibility of there existing only one call in $\\delta t$ is 0. Does it mean there exists no call in any period of time? Of course not. The probability being 0 doesn’t mean it’s not possible. There will always be some calls falling into some periods of time, $p_n\\to 0$ only means $p_n$ could be smaller than any positive real number. In the real world, you cannot actually make $n = \\infty$, so you cannot actually make $p_n = 0$. To better illustrate what I mean, let’s define the two following events.</p>\n<ul>\n<li><em>event1</em>: Only one call is received in some periods of time</li>\n<li><em>event2</em>: Two or more calls are received in some periods of time. </li>\n</ul>\n<p>The number of <em>event1</em> can never be 0 as long as we receive at least one call in a day. But when $n$ gets larger and larger, <em>event2</em> will finally be 0. This is different although the possibility of both events is 0 when $n\\to\\infty$.</p>\n<p>Let’s add $n\\to\\infty$, so $(3)$ becomes</p>\n<p>$$P(Y=x) = P(X=x) = \\lim\\limits_{n\\to\\infty}\\binom n x {p_n}^x(1-p_n)^{(n-x)}\\tag4$$</p>\n<p>Let</p>\n<p>$$\\lambda_n = np_n$$</p>\n<p>According to $(2)$</p>\n<p>$$\\lim\\limits_{n\\to\\infty}np_n = \\lambda$$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}\\lambda_n = \\lambda$$</p>\n<p>Put $p_n = \\frac{\\lambda_n} n$ into $(4)$, we get</p>\n<p>$$\\begin{equation}\\begin{split} &amp;P(Y=x) \\\\<br>&amp;= \\lim\\limits_{n\\to\\infty}\\binom n x(\\frac{\\lambda_n} n)^x(1-\\frac{\\lambda_n}n)^{(n-x)}\\\\<br>&amp;=\\lim\\limits_{n\\to\\infty}\\frac{n(n-1)\\cdots(n-x+1)}{x!\\cdot n^x}\\cdot{\\lambda_n}^x\\cdot(1-\\frac{\\lambda_n} n)^n\\cdot(1-\\frac{\\lambda_n} n)^{-x}\\\\<br>&amp;=\\lim\\limits_{n\\to\\infty}\\frac 1 {x!} \\cdot 1 \\cdot \\underbrace{(1-\\frac 1 n)\\cdot(1-\\frac 2 n)\\cdots(1-\\frac{x-1} n)}_1\\cdot\\underbrace{ {\\lambda_n}^x}_{\\lambda}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^n}_{e^{-\\lambda}}\\cdot\\underbrace{(1-\\frac{\\lambda_n} n)^{-x}}_1\\\\<br>&amp;=\\frac{e^{-\\lambda}{\\lambda}^x}{x!}\\end{split}\\end{equation}$$</p>\n<p>You can find out why $\\lim\\limits_{n\\to\\infty}(1-\\frac{\\lambda_n} n)^n = e^{-\\lambda}$ in <a href=\"https://searene.me/2016/09/30/Calculate-1-lambda-n-n/\">this post</a></p>\n<h1 id=\"FAQ\"><a href=\"#FAQ\" class=\"headerlink\" title=\"FAQ\"></a>FAQ</h1><p><strong>Q</strong>: If I was given $n$ and $p_n$, and I got $\\lambda$ using $\\lambda = np_n$, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.</p>\n<p>$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p> Is it the exact value I want or just an approximation?</p>\n<p><strong>A</strong>: This is just an approximation. The value you get is <strong>the number of pieces where events exist</strong>. There could be one event in a piece, there could be two or more events in a piece. So $P(X=x)$ not only includes the some of the cases where we want, but also the case where we don’t want, e.g. it also includes the case where $x+1$ events occur, but it doesn’t include the case where $x$ events fall into $x-1$ or less pieces.</p>\n<p><strong>Q</strong>: If I was given the expected value $\\lambda$, and I calculate the probability using the following equation, then I calculate the probability of there exising $x$ events in the total amount of time using the following equation.</p>\n<p>$$P(X=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p> Is it the exact value I want or just an approximation?</p>\n<p><strong>A</strong>: It’s the value you want. When $n$ is not large, the reason why there is a difference between $\\binom n x{p_n}^x(1-p_n)^{(n-x)}$ and $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$ is that $p_n$ is not exactly the value we want. That is, when $n$ is not large and we calculate the probability using $(1)$, the answer we get is</p>\n<p>$$P(X=x) = P_1 + P_2$$</p>\n<ul>\n<li>$X$: the number of pieces where one or more events exist</li>\n<li>$P_1$ refers to the case where $x$ events fall into $x$ pieces</li>\n<li>$P_2$ refers to the case where $x+1$ or more events fall into $x$ pieces</li>\n</ul>\n<p>The value we want would be</p>\n<p>$$P(Y = x) = P_1 + P_3$$</p>\n<ul>\n<li>$P_3$ refers to the case where $x$ events fall into $x-1$ or less pieces.</li>\n<li>Y: the total number of events occurring.</li>\n</ul>\n<p>As $n\\to\\infty$, $P_2\\to 0$, $P_3\\to 0$, so $P(X=x) \\to P(Y=x)$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}P(X=x) = \\lim\\limits_{n\\to\\infty}P(Y=x) = P_1$$</p>\n<p>Because</p>\n<p>$$P(X=x) = \\binom n x {p_n}^x(1-p_n)^{(n-x)}$$</p>\n<p>So</p>\n<p>$$\\lim\\limits_{n\\to\\infty}P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p>Because P(Y=x) has nothing to do with what $n$ is, so $\\lim\\limits_{n\\to\\infty}P(Y=x) = P(Y=x)$</p>\n<p>So</p>\n<p>$$P(Y=x) = \\frac{e^{-\\lambda}{\\lambda}^x}{x!}$$</p>\n<p>That is, the number of total events is $\\frac{e^{-\\lambda}{\\lambda}^x}{x!}$.</p>\n"},{"title":"WriteToDisk -- An Anki Addon to avoid losing data","date":"2016-04-13T01:21:40.000Z","thumbnail":"https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Gnome-document-save.svg/2000px-Gnome-document-save.svg.png","_content":"\nAnki wouldn't save the cards you added or reviewed if anki or system crashes while anki is running. The addon solves the problem. \n\nAfter installing the addon, when you add or review a card, the data is immediately written to disk, so you wouldn't lose it no matter what happens. \n\nIt does have a side-effect, undo card deletion doesn't work because the deletion works immediately.\n\nTry it if you want to avoid losing data.\n\ngithub: https://github.com/searene/Anki-Addons\nankiweb: https://ankiweb.net/shared/info/657538072\n","source":"_posts/WriteToDisk.md","raw":"title: WriteToDisk -- An Anki Addon to avoid losing data\ndate: 2016-04-13 09:21:40\ntags: [anki, python]\nthumbnail: https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Gnome-document-save.svg/2000px-Gnome-document-save.svg.png\ncategories: Coding\n---\n\nAnki wouldn't save the cards you added or reviewed if anki or system crashes while anki is running. The addon solves the problem. \n\nAfter installing the addon, when you add or review a card, the data is immediately written to disk, so you wouldn't lose it no matter what happens. \n\nIt does have a side-effect, undo card deletion doesn't work because the deletion works immediately.\n\nTry it if you want to avoid losing data.\n\ngithub: https://github.com/searene/Anki-Addons\nankiweb: https://ankiweb.net/shared/info/657538072\n","slug":"WriteToDisk","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdx003u8arfh81kat3i","content":"<p>Anki wouldn’t save the cards you added or reviewed if anki or system crashes while anki is running. The addon solves the problem. </p>\n<p>After installing the addon, when you add or review a card, the data is immediately written to disk, so you wouldn’t lose it no matter what happens. </p>\n<p>It does have a side-effect, undo card deletion doesn’t work because the deletion works immediately.</p>\n<p>Try it if you want to avoid losing data.</p>\n<p>github: <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">https://github.com/searene/Anki-Addons</a><br>ankiweb: <a href=\"https://ankiweb.net/shared/info/657538072\" target=\"_blank\" rel=\"external\">https://ankiweb.net/shared/info/657538072</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Anki wouldn’t save the cards you added or reviewed if anki or system crashes while anki is running. The addon solves the problem. </p>\n<p>After installing the addon, when you add or review a card, the data is immediately written to disk, so you wouldn’t lose it no matter what happens. </p>\n<p>It does have a side-effect, undo card deletion doesn’t work because the deletion works immediately.</p>\n<p>Try it if you want to avoid losing data.</p>\n<p>github: <a href=\"https://github.com/searene/Anki-Addons\" target=\"_blank\" rel=\"external\">https://github.com/searene/Anki-Addons</a><br>ankiweb: <a href=\"https://ankiweb.net/shared/info/657538072\" target=\"_blank\" rel=\"external\">https://ankiweb.net/shared/info/657538072</a></p>\n"},{"title":"Where to go","date":"2017-03-29T14:49:23.000Z","thumbnail":"/images/where.jpg","_content":"\nI haven't written my blog for a long time, partly it's due to my sheer laziness, partly because I gathered nobody would even find it, let alone read it. But anyway, I decided to write something tonight.\n\nI'm almost 27, I told my self. And it is 2017, 17 years after 2000, I could never figure out where those years went. So many years, I'm getting older every day. Does the performance in the work really matter? Not sure, maybe not that important. So what really matters? I know it, I always know it, but I'm always afraid to face it.\n\nI started trying to solve problems on leetcode, that was for my career. Sometimes I thought maybe I just needed to choose a life and went with it, but I really hoped the life I chose would be perfect, or at least full of happiness and fulfillment, but actually it was not.\n\nI often think of the Sergeant in Forrest Gump, he lost his legs during the war, he didn't know what to do. He cursed his life, joked about God, but when he finally got a normal life, he didn't say anything. He never mentioned whether God existed or not, maybe he still didn't know. I often pondered over the same question, but I had no answer to it. Why wouldn't God give me a better life? Maybe he has his reason, I just need to go with it.\n\nIt's already late, I have to go to bed and sleep. I wrote some nonsense here, whatever.\n","source":"_posts/Where-to-go.md","raw":"title: Where to go\ndate: 2017-03-29 22:49:23\ntags:\ncategories: Journal\nthumbnail: /images/where.jpg\n---\n\nI haven't written my blog for a long time, partly it's due to my sheer laziness, partly because I gathered nobody would even find it, let alone read it. But anyway, I decided to write something tonight.\n\nI'm almost 27, I told my self. And it is 2017, 17 years after 2000, I could never figure out where those years went. So many years, I'm getting older every day. Does the performance in the work really matter? Not sure, maybe not that important. So what really matters? I know it, I always know it, but I'm always afraid to face it.\n\nI started trying to solve problems on leetcode, that was for my career. Sometimes I thought maybe I just needed to choose a life and went with it, but I really hoped the life I chose would be perfect, or at least full of happiness and fulfillment, but actually it was not.\n\nI often think of the Sergeant in Forrest Gump, he lost his legs during the war, he didn't know what to do. He cursed his life, joked about God, but when he finally got a normal life, he didn't say anything. He never mentioned whether God existed or not, maybe he still didn't know. I often pondered over the same question, but I had no answer to it. Why wouldn't God give me a better life? Maybe he has his reason, I just need to go with it.\n\nIt's already late, I have to go to bed and sleep. I wrote some nonsense here, whatever.\n","slug":"Where-to-go","published":1,"updated":"2017-05-15T14:59:10.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqdy003y8arfqcmx6mbn","content":"<p>I haven’t written my blog for a long time, partly it’s due to my sheer laziness, partly because I gathered nobody would even find it, let alone read it. But anyway, I decided to write something tonight.</p>\n<p>I’m almost 27, I told my self. And it is 2017, 17 years after 2000, I could never figure out where those years went. So many years, I’m getting older every day. Does the performance in the work really matter? Not sure, maybe not that important. So what really matters? I know it, I always know it, but I’m always afraid to face it.</p>\n<p>I started trying to solve problems on leetcode, that was for my career. Sometimes I thought maybe I just needed to choose a life and went with it, but I really hoped the life I chose would be perfect, or at least full of happiness and fulfillment, but actually it was not.</p>\n<p>I often think of the Sergeant in Forrest Gump, he lost his legs during the war, he didn’t know what to do. He cursed his life, joked about God, but when he finally got a normal life, he didn’t say anything. He never mentioned whether God existed or not, maybe he still didn’t know. I often pondered over the same question, but I had no answer to it. Why wouldn’t God give me a better life? Maybe he has his reason, I just need to go with it.</p>\n<p>It’s already late, I have to go to bed and sleep. I wrote some nonsense here, whatever.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I haven’t written my blog for a long time, partly it’s due to my sheer laziness, partly because I gathered nobody would even find it, let alone read it. But anyway, I decided to write something tonight.</p>\n<p>I’m almost 27, I told my self. And it is 2017, 17 years after 2000, I could never figure out where those years went. So many years, I’m getting older every day. Does the performance in the work really matter? Not sure, maybe not that important. So what really matters? I know it, I always know it, but I’m always afraid to face it.</p>\n<p>I started trying to solve problems on leetcode, that was for my career. Sometimes I thought maybe I just needed to choose a life and went with it, but I really hoped the life I chose would be perfect, or at least full of happiness and fulfillment, but actually it was not.</p>\n<p>I often think of the Sergeant in Forrest Gump, he lost his legs during the war, he didn’t know what to do. He cursed his life, joked about God, but when he finally got a normal life, he didn’t say anything. He never mentioned whether God existed or not, maybe he still didn’t know. I often pondered over the same question, but I had no answer to it. Why wouldn’t God give me a better life? Maybe he has his reason, I just need to go with it.</p>\n<p>It’s already late, I have to go to bed and sleep. I wrote some nonsense here, whatever.</p>\n"},{"title":"When and how to use InheritableThreadLocal","date":"2017-10-02T14:02:51.000Z","thumbnail":"/images/inherit.jpg","_content":"\nToday I was reading Spark's source code, and found `InheritableThreadLocal` in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.\n\n# ThreadLocal\n\nBefore diving into `InheritableThreadLocal`, we need to understand `ThreadLocal`. `ThreadLocal` is used to create separate variables for each thread, as follows.\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new ThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.5157676349493098\n0.37557496403907353\n```\n\nThe above code is written in Scala.\n\nAs you can see, `thread1` and `thread2` have different values for `number`, because we use `ThreadLocal` here, so the result is different.\n\n# InheritableThreadLocal\n\nNow we decided to start a child thread within thread1/thread2, obtain the value of `number` and print it, can we achieve it?\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new ThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n    \n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n      }\n    })\n    childThread.start()\n    childThread.join()\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.5475226099407153\n0.8376546404552231\nnull\nnull\n```\n\nNo, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use `InheritableThreadLocal`!\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new InheritableThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n\n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n      }\n    })\n    childThread.start()\n    childThread.join()\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.006425375134899158\n0.021932306310074368\n0.006425375134899158\n0.021932306310074368\n```\n\nNotice that we cannot set the value of InheritableThreadLocal in the child thread.\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new InheritableThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n\n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n        number.set(0.1)\n      }\n    })\n    childThread.start()\n    childThread.join()\n    println(number.get())\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n    val thread1 = new Thread(printRunnable)\n    thread1.start()\n    thread1.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.7413853012849937\n0.7413853012849937\n0.7413853012849937\n```\n\nAs you can see, setting the value of `InheritableThreadLocal` doesn't have any effect.","source":"_posts/When-and-how-to-use-InheritableThreadLocal.md","raw":"title: When and how to use InheritableThreadLocal\ndate: 2017-10-02 22:02:51\ntags: multi-thread, java, scala\ncategories: Coding\nthumbnail: /images/inherit.jpg\n---\n\nToday I was reading Spark's source code, and found `InheritableThreadLocal` in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.\n\n# ThreadLocal\n\nBefore diving into `InheritableThreadLocal`, we need to understand `ThreadLocal`. `ThreadLocal` is used to create separate variables for each thread, as follows.\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new ThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.5157676349493098\n0.37557496403907353\n```\n\nThe above code is written in Scala.\n\nAs you can see, `thread1` and `thread2` have different values for `number`, because we use `ThreadLocal` here, so the result is different.\n\n# InheritableThreadLocal\n\nNow we decided to start a child thread within thread1/thread2, obtain the value of `number` and print it, can we achieve it?\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new ThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n    \n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n      }\n    })\n    childThread.start()\n    childThread.join()\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.5475226099407153\n0.8376546404552231\nnull\nnull\n```\n\nNo, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use `InheritableThreadLocal`!\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new InheritableThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n\n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n      }\n    })\n    childThread.start()\n    childThread.join()\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n\n    val thread1 = new Thread(printRunnable)\n    val thread2 = new Thread(printRunnable)\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.006425375134899158\n0.021932306310074368\n0.006425375134899158\n0.021932306310074368\n```\n\nNotice that we cannot set the value of InheritableThreadLocal in the child thread.\n\n```scala\nclass PrintRunnable extends Runnable {\n  val number = new InheritableThreadLocal[Double]\n\n  override def run(): Unit = {\n    number.set(Math.random())\n    println(number.get())\n\n    val childThread = new Thread(new Runnable {\n      override def run(): Unit = {\n        println(number.get())\n        number.set(0.1)\n      }\n    })\n    childThread.start()\n    childThread.join()\n    println(number.get())\n  }\n}\n\nobject SimpleApp {\n  def main(args: Array[String]): Unit = {\n    val printRunnable = new PrintRunnable\n    val thread1 = new Thread(printRunnable)\n    thread1.start()\n    thread1.join()\n  }\n}\n```\n\n**Output**\n\n```\n0.7413853012849937\n0.7413853012849937\n0.7413853012849937\n```\n\nAs you can see, setting the value of `InheritableThreadLocal` doesn't have any effect.","slug":"When-and-how-to-use-InheritableThreadLocal","published":1,"updated":"2017-10-02T14:29:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe100418arfcqwonmz4","content":"<p>Today I was reading Spark’s source code, and found <code>InheritableThreadLocal</code> in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.</p>\n<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>Before diving into <code>InheritableThreadLocal</code>, we need to understand <code>ThreadLocal</code>. <code>ThreadLocal</code> is used to create separate variables for each thread, as follows.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">ThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.5157676349493098</div><div class=\"line\">0.37557496403907353</div></pre></td></tr></table></figure>\n<p>The above code is written in Scala.</p>\n<p>As you can see, <code>thread1</code> and <code>thread2</code> have different values for <code>number</code>, because we use <code>ThreadLocal</code> here, so the result is different.</p>\n<h1 id=\"InheritableThreadLocal\"><a href=\"#InheritableThreadLocal\" class=\"headerlink\" title=\"InheritableThreadLocal\"></a>InheritableThreadLocal</h1><p>Now we decided to start a child thread within thread1/thread2, obtain the value of <code>number</code> and print it, can we achieve it?</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">ThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.5475226099407153</div><div class=\"line\">0.8376546404552231</div><div class=\"line\">null</div><div class=\"line\">null</div></pre></td></tr></table></figure>\n<p>No, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use <code>InheritableThreadLocal</code>!</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">InheritableThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.006425375134899158</div><div class=\"line\">0.021932306310074368</div><div class=\"line\">0.006425375134899158</div><div class=\"line\">0.021932306310074368</div></pre></td></tr></table></figure>\n<p>Notice that we cannot set the value of InheritableThreadLocal in the child thread.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">InheritableThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">        number.set(<span class=\"number\">0.1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">    println(number.get())</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread1.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.7413853012849937</div><div class=\"line\">0.7413853012849937</div><div class=\"line\">0.7413853012849937</div></pre></td></tr></table></figure>\n<p>As you can see, setting the value of <code>InheritableThreadLocal</code> doesn’t have any effect.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I was reading Spark’s source code, and found <code>InheritableThreadLocal</code> in it. Little information could be found online about this class, so I decided to write a blog to illustrate how to use it, based on the experiments I did.</p>\n<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>Before diving into <code>InheritableThreadLocal</code>, we need to understand <code>ThreadLocal</code>. <code>ThreadLocal</code> is used to create separate variables for each thread, as follows.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">ThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.5157676349493098</div><div class=\"line\">0.37557496403907353</div></pre></td></tr></table></figure>\n<p>The above code is written in Scala.</p>\n<p>As you can see, <code>thread1</code> and <code>thread2</code> have different values for <code>number</code>, because we use <code>ThreadLocal</code> here, so the result is different.</p>\n<h1 id=\"InheritableThreadLocal\"><a href=\"#InheritableThreadLocal\" class=\"headerlink\" title=\"InheritableThreadLocal\"></a>InheritableThreadLocal</h1><p>Now we decided to start a child thread within thread1/thread2, obtain the value of <code>number</code> and print it, can we achieve it?</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">ThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.5475226099407153</div><div class=\"line\">0.8376546404552231</div><div class=\"line\">null</div><div class=\"line\">null</div></pre></td></tr></table></figure>\n<p>No, we cannot, because threadLocal cannot be passed into child threads. But what if we want it to do so? Just use <code>InheritableThreadLocal</code>!</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">InheritableThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    <span class=\"keyword\">val</span> thread2 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\"></div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread2.start()</div><div class=\"line\"></div><div class=\"line\">    thread1.join()</div><div class=\"line\">    thread2.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.006425375134899158</div><div class=\"line\">0.021932306310074368</div><div class=\"line\">0.006425375134899158</div><div class=\"line\">0.021932306310074368</div></pre></td></tr></table></figure>\n<p>Notice that we cannot set the value of InheritableThreadLocal in the child thread.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintRunnable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">val</span> number = <span class=\"keyword\">new</span> <span class=\"type\">InheritableThreadLocal</span>[<span class=\"type\">Double</span>]</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    number.set(<span class=\"type\">Math</span>.random())</div><div class=\"line\">    println(number.get())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">val</span> childThread = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"type\">Runnable</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">        println(number.get())</div><div class=\"line\">        number.set(<span class=\"number\">0.1</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    childThread.start()</div><div class=\"line\">    childThread.join()</div><div class=\"line\">    println(number.get())</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">SimpleApp</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> printRunnable = <span class=\"keyword\">new</span> <span class=\"type\">PrintRunnable</span></div><div class=\"line\">    <span class=\"keyword\">val</span> thread1 = <span class=\"keyword\">new</span> <span class=\"type\">Thread</span>(printRunnable)</div><div class=\"line\">    thread1.start()</div><div class=\"line\">    thread1.join()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">0.7413853012849937</div><div class=\"line\">0.7413853012849937</div><div class=\"line\">0.7413853012849937</div></pre></td></tr></table></figure>\n<p>As you can see, setting the value of <code>InheritableThreadLocal</code> doesn’t have any effect.</p>\n"},{"title":"Why is Kafka so fast","date":"2017-07-09T00:45:39.000Z","thumbnail":"/images/fast.png","_content":"\nAs we all know that Kafka is very fast, much faster than most of its competitors. So what's the reason here?\n\n# Avoid Random Disk Access\nKafka writes everything onto the disk in order and consumers fetch data in order too. So disk access always works sequentially instead of randomly. For traditional hard disks(HDD), sequential access is much faster than random access. Here is a comparison:\n\n| hardware                | sequential writes | random writes |\n| ----------------------- | ----------------- | ------------- |\n| 6 * 7200rpm SATA RAID-5 | 300MB/s           | 50KB/s        |\n\n# Kafka Writes Everything Onto The Disk Instead of Memory\nYes, you read that right. Kafka writes everything onto the disk instead of memory. But wait a moment, isn't memory supposed to be faster than disks? Typically it's the case, for Random Disk Access.  But for sequential access, the difference is much smaller. Here is a comparison taken from [https://queue.acm.org/detail.cfm?id=1563874](https://queue.acm.org/detail.cfm?id=1563874)\n\n![comparison](/images/comparison-between-disk-and-memory.jpg)\n\nAs you can see, it's not that different. But still, sequential memory access is faster than Sequential Disk Access, why not choose memory? Because Kafka runs on top of JVM, which gives us two disadvantages.\n\n1. The memory overhead of objects is very high, often **doubling** the size of the data stored(or even higher).\n2. Garbage Collection happens every now and then, so creating objects in memory is very expensive as in-heap data increases because we will need more time to collect unused data(which is garbage).\n\nSo writing to file systems may be better than writing to memory. Even better, we can utilize MMAP(memory mapped files) to make it faster.\n\n# Memory Mapped Files(MMAP)\nBasically, MMAP(Memory Mapped Files) can map the file contents from the disk into memory. And when we write something into the mapped memory, the OS will flush the change onto the disk sometime later. So everything is faster because we are using memory actually, but in an indirect way. So here comes the question. Why would we use MMAP to write data onto disks, which later will be mapped into memory? It seems to be a roundabout route. Why not just write data into memory directly? As we have learned previously, Kafka runs on top of JVM, if we wrote data into memory directly, the memory overhead would be high and GC would happen frequently. So we use MMAP here to avoid the issue.\n\n# Zero Copy\nSuppose that we are fetching data from the memory and sending them to the Internet. What is happening in the process is usually twofold.\n1. To fetch data from the memory, we need to copy those data from the Kernel Context into the Application Context.\n2. To send those data to the Internet, we need to copy the data from the Application Context into the Kernel Context.\n\n![no zero copy](/images/no-zero-copy.png)\n\nAs you can see, it's redundant to copy data between the Kernel Context and the Application Context. Can we avoid it? Yes, using Zero Copy we can copy data directly from the Kernel Context to the Kernel Context.\n\n![zero copy](/images/zero-copy.png)\n\n# Batch Data\nKafka only sends data when `batch.size` is reached instead of one by one. Assuming the bandwidth is 10MB/s, sending 10MB data in one go is much faster than sending 10000 messages one by one(assuming each message takes 100 bytes).\n\n# Reference\n* [https://www.slideshare.net/baniuyao/kafka-24299168](https://www.slideshare.net/baniuyao/kafka-24299168https://www.slideshare.net/baniuyao/kafka-24299168)\n* [https://toutiao.io/posts/508935/app_preview](https://toutiao.io/posts/508935/app_preview)","source":"_posts/Why-is-Kafka-so-fast.md","raw":"title: Why is Kafka so fast\ndate: 2017-07-09 08:45:39\ntags: [Big Data, Kafka]\ncategories: Coding\nthumbnail: /images/fast.png\n---\n\nAs we all know that Kafka is very fast, much faster than most of its competitors. So what's the reason here?\n\n# Avoid Random Disk Access\nKafka writes everything onto the disk in order and consumers fetch data in order too. So disk access always works sequentially instead of randomly. For traditional hard disks(HDD), sequential access is much faster than random access. Here is a comparison:\n\n| hardware                | sequential writes | random writes |\n| ----------------------- | ----------------- | ------------- |\n| 6 * 7200rpm SATA RAID-5 | 300MB/s           | 50KB/s        |\n\n# Kafka Writes Everything Onto The Disk Instead of Memory\nYes, you read that right. Kafka writes everything onto the disk instead of memory. But wait a moment, isn't memory supposed to be faster than disks? Typically it's the case, for Random Disk Access.  But for sequential access, the difference is much smaller. Here is a comparison taken from [https://queue.acm.org/detail.cfm?id=1563874](https://queue.acm.org/detail.cfm?id=1563874)\n\n![comparison](/images/comparison-between-disk-and-memory.jpg)\n\nAs you can see, it's not that different. But still, sequential memory access is faster than Sequential Disk Access, why not choose memory? Because Kafka runs on top of JVM, which gives us two disadvantages.\n\n1. The memory overhead of objects is very high, often **doubling** the size of the data stored(or even higher).\n2. Garbage Collection happens every now and then, so creating objects in memory is very expensive as in-heap data increases because we will need more time to collect unused data(which is garbage).\n\nSo writing to file systems may be better than writing to memory. Even better, we can utilize MMAP(memory mapped files) to make it faster.\n\n# Memory Mapped Files(MMAP)\nBasically, MMAP(Memory Mapped Files) can map the file contents from the disk into memory. And when we write something into the mapped memory, the OS will flush the change onto the disk sometime later. So everything is faster because we are using memory actually, but in an indirect way. So here comes the question. Why would we use MMAP to write data onto disks, which later will be mapped into memory? It seems to be a roundabout route. Why not just write data into memory directly? As we have learned previously, Kafka runs on top of JVM, if we wrote data into memory directly, the memory overhead would be high and GC would happen frequently. So we use MMAP here to avoid the issue.\n\n# Zero Copy\nSuppose that we are fetching data from the memory and sending them to the Internet. What is happening in the process is usually twofold.\n1. To fetch data from the memory, we need to copy those data from the Kernel Context into the Application Context.\n2. To send those data to the Internet, we need to copy the data from the Application Context into the Kernel Context.\n\n![no zero copy](/images/no-zero-copy.png)\n\nAs you can see, it's redundant to copy data between the Kernel Context and the Application Context. Can we avoid it? Yes, using Zero Copy we can copy data directly from the Kernel Context to the Kernel Context.\n\n![zero copy](/images/zero-copy.png)\n\n# Batch Data\nKafka only sends data when `batch.size` is reached instead of one by one. Assuming the bandwidth is 10MB/s, sending 10MB data in one go is much faster than sending 10000 messages one by one(assuming each message takes 100 bytes).\n\n# Reference\n* [https://www.slideshare.net/baniuyao/kafka-24299168](https://www.slideshare.net/baniuyao/kafka-24299168https://www.slideshare.net/baniuyao/kafka-24299168)\n* [https://toutiao.io/posts/508935/app_preview](https://toutiao.io/posts/508935/app_preview)","slug":"Why-is-Kafka-so-fast","published":1,"updated":"2018-08-05T03:38:26.070Z","_id":"cjjhacqe200448arfv5fc0d98","comments":1,"layout":"post","photos":[],"link":"","content":"<p>As we all know that Kafka is very fast, much faster than most of its competitors. So what’s the reason here?</p>\n<h1 id=\"Avoid-Random-Disk-Access\"><a href=\"#Avoid-Random-Disk-Access\" class=\"headerlink\" title=\"Avoid Random Disk Access\"></a>Avoid Random Disk Access</h1><p>Kafka writes everything onto the disk in order and consumers fetch data in order too. So disk access always works sequentially instead of randomly. For traditional hard disks(HDD), sequential access is much faster than random access. Here is a comparison:</p>\n<table>\n<thead>\n<tr>\n<th>hardware</th>\n<th>sequential writes</th>\n<th>random writes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6 * 7200rpm SATA RAID-5</td>\n<td>300MB/s</td>\n<td>50KB/s</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory\"><a href=\"#Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory\" class=\"headerlink\" title=\"Kafka Writes Everything Onto The Disk Instead of Memory\"></a>Kafka Writes Everything Onto The Disk Instead of Memory</h1><p>Yes, you read that right. Kafka writes everything onto the disk instead of memory. But wait a moment, isn’t memory supposed to be faster than disks? Typically it’s the case, for Random Disk Access.  But for sequential access, the difference is much smaller. Here is a comparison taken from <a href=\"https://queue.acm.org/detail.cfm?id=1563874\" target=\"_blank\" rel=\"external\">https://queue.acm.org/detail.cfm?id=1563874</a></p>\n<p><img src=\"/images/comparison-between-disk-and-memory.jpg\" alt=\"comparison\"></p>\n<p>As you can see, it’s not that different. But still, sequential memory access is faster than Sequential Disk Access, why not choose memory? Because Kafka runs on top of JVM, which gives us two disadvantages.</p>\n<ol>\n<li>The memory overhead of objects is very high, often <strong>doubling</strong> the size of the data stored(or even higher).</li>\n<li>Garbage Collection happens every now and then, so creating objects in memory is very expensive as in-heap data increases because we will need more time to collect unused data(which is garbage).</li>\n</ol>\n<p>So writing to file systems may be better than writing to memory. Even better, we can utilize MMAP(memory mapped files) to make it faster.</p>\n<h1 id=\"Memory-Mapped-Files-MMAP\"><a href=\"#Memory-Mapped-Files-MMAP\" class=\"headerlink\" title=\"Memory Mapped Files(MMAP)\"></a>Memory Mapped Files(MMAP)</h1><p>Basically, MMAP(Memory Mapped Files) can map the file contents from the disk into memory. And when we write something into the mapped memory, the OS will flush the change onto the disk sometime later. So everything is faster because we are using memory actually, but in an indirect way. So here comes the question. Why would we use MMAP to write data onto disks, which later will be mapped into memory? It seems to be a roundabout route. Why not just write data into memory directly? As we have learned previously, Kafka runs on top of JVM, if we wrote data into memory directly, the memory overhead would be high and GC would happen frequently. So we use MMAP here to avoid the issue.</p>\n<h1 id=\"Zero-Copy\"><a href=\"#Zero-Copy\" class=\"headerlink\" title=\"Zero Copy\"></a>Zero Copy</h1><p>Suppose that we are fetching data from the memory and sending them to the Internet. What is happening in the process is usually twofold.</p>\n<ol>\n<li>To fetch data from the memory, we need to copy those data from the Kernel Context into the Application Context.</li>\n<li>To send those data to the Internet, we need to copy the data from the Application Context into the Kernel Context.</li>\n</ol>\n<p><img src=\"/images/no-zero-copy.png\" alt=\"no zero copy\"></p>\n<p>As you can see, it’s redundant to copy data between the Kernel Context and the Application Context. Can we avoid it? Yes, using Zero Copy we can copy data directly from the Kernel Context to the Kernel Context.</p>\n<p><img src=\"/images/zero-copy.png\" alt=\"zero copy\"></p>\n<h1 id=\"Batch-Data\"><a href=\"#Batch-Data\" class=\"headerlink\" title=\"Batch Data\"></a>Batch Data</h1><p>Kafka only sends data when <code>batch.size</code> is reached instead of one by one. Assuming the bandwidth is 10MB/s, sending 10MB data in one go is much faster than sending 10000 messages one by one(assuming each message takes 100 bytes).</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://www.slideshare.net/baniuyao/kafka-24299168https://www.slideshare.net/baniuyao/kafka-24299168\" target=\"_blank\" rel=\"external\">https://www.slideshare.net/baniuyao/kafka-24299168</a></li>\n<li><a href=\"https://toutiao.io/posts/508935/app_preview\" target=\"_blank\" rel=\"external\">https://toutiao.io/posts/508935/app_preview</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>As we all know that Kafka is very fast, much faster than most of its competitors. So what’s the reason here?</p>\n<h1 id=\"Avoid-Random-Disk-Access\"><a href=\"#Avoid-Random-Disk-Access\" class=\"headerlink\" title=\"Avoid Random Disk Access\"></a>Avoid Random Disk Access</h1><p>Kafka writes everything onto the disk in order and consumers fetch data in order too. So disk access always works sequentially instead of randomly. For traditional hard disks(HDD), sequential access is much faster than random access. Here is a comparison:</p>\n<table>\n<thead>\n<tr>\n<th>hardware</th>\n<th>sequential writes</th>\n<th>random writes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6 * 7200rpm SATA RAID-5</td>\n<td>300MB/s</td>\n<td>50KB/s</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory\"><a href=\"#Kafka-Writes-Everything-Onto-The-Disk-Instead-of-Memory\" class=\"headerlink\" title=\"Kafka Writes Everything Onto The Disk Instead of Memory\"></a>Kafka Writes Everything Onto The Disk Instead of Memory</h1><p>Yes, you read that right. Kafka writes everything onto the disk instead of memory. But wait a moment, isn’t memory supposed to be faster than disks? Typically it’s the case, for Random Disk Access.  But for sequential access, the difference is much smaller. Here is a comparison taken from <a href=\"https://queue.acm.org/detail.cfm?id=1563874\" target=\"_blank\" rel=\"external\">https://queue.acm.org/detail.cfm?id=1563874</a></p>\n<p><img src=\"/images/comparison-between-disk-and-memory.jpg\" alt=\"comparison\"></p>\n<p>As you can see, it’s not that different. But still, sequential memory access is faster than Sequential Disk Access, why not choose memory? Because Kafka runs on top of JVM, which gives us two disadvantages.</p>\n<ol>\n<li>The memory overhead of objects is very high, often <strong>doubling</strong> the size of the data stored(or even higher).</li>\n<li>Garbage Collection happens every now and then, so creating objects in memory is very expensive as in-heap data increases because we will need more time to collect unused data(which is garbage).</li>\n</ol>\n<p>So writing to file systems may be better than writing to memory. Even better, we can utilize MMAP(memory mapped files) to make it faster.</p>\n<h1 id=\"Memory-Mapped-Files-MMAP\"><a href=\"#Memory-Mapped-Files-MMAP\" class=\"headerlink\" title=\"Memory Mapped Files(MMAP)\"></a>Memory Mapped Files(MMAP)</h1><p>Basically, MMAP(Memory Mapped Files) can map the file contents from the disk into memory. And when we write something into the mapped memory, the OS will flush the change onto the disk sometime later. So everything is faster because we are using memory actually, but in an indirect way. So here comes the question. Why would we use MMAP to write data onto disks, which later will be mapped into memory? It seems to be a roundabout route. Why not just write data into memory directly? As we have learned previously, Kafka runs on top of JVM, if we wrote data into memory directly, the memory overhead would be high and GC would happen frequently. So we use MMAP here to avoid the issue.</p>\n<h1 id=\"Zero-Copy\"><a href=\"#Zero-Copy\" class=\"headerlink\" title=\"Zero Copy\"></a>Zero Copy</h1><p>Suppose that we are fetching data from the memory and sending them to the Internet. What is happening in the process is usually twofold.</p>\n<ol>\n<li>To fetch data from the memory, we need to copy those data from the Kernel Context into the Application Context.</li>\n<li>To send those data to the Internet, we need to copy the data from the Application Context into the Kernel Context.</li>\n</ol>\n<p><img src=\"/images/no-zero-copy.png\" alt=\"no zero copy\"></p>\n<p>As you can see, it’s redundant to copy data between the Kernel Context and the Application Context. Can we avoid it? Yes, using Zero Copy we can copy data directly from the Kernel Context to the Kernel Context.</p>\n<p><img src=\"/images/zero-copy.png\" alt=\"zero copy\"></p>\n<h1 id=\"Batch-Data\"><a href=\"#Batch-Data\" class=\"headerlink\" title=\"Batch Data\"></a>Batch Data</h1><p>Kafka only sends data when <code>batch.size</code> is reached instead of one by one. Assuming the bandwidth is 10MB/s, sending 10MB data in one go is much faster than sending 10000 messages one by one(assuming each message takes 100 bytes).</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li><a href=\"https://www.slideshare.net/baniuyao/kafka-24299168https://www.slideshare.net/baniuyao/kafka-24299168\" target=\"_blank\" rel=\"external\">https://www.slideshare.net/baniuyao/kafka-24299168</a></li>\n<li><a href=\"https://toutiao.io/posts/508935/app_preview\" target=\"_blank\" rel=\"external\">https://toutiao.io/posts/508935/app_preview</a></li>\n</ul>\n"},{"title":"beautify i3wm","date":"2016-10-07T00:28:38.000Z","thumbnail":"/images/i3.png","_content":"\n# Motivation\nI enjoy using i3wm, big time. You can switch to different windows/apps conveniently with it. The only problem to me is that it's not beautiful enough, and it's ridiculously small in my high-resolution screen. So I decided to change it a little bit.\n\n# Effect\nHere is what you would get after applying the method.\n\n![i3wm screenshot](/images/i3wm_screenshot.png)\n\n# Method\nTo change the appearance, you only need to modify the config file, usually it's `~/.config/i3/config`. Add the following lines.\n\n```\nfont pango:nimbus sans 18\nbar {\n  status_command conky -c $HOME/.i3/conky/conkyrc\n  mode dock\n  position top\n  strip_workspace_numbers yes\n  colors {\n    background #F1F2F6\n    statusline #788491\n    separator #51c4d4\n\n    focused_workspace  #F1F2F6 #F1F2F6 #4FC0E8\n    active_workspace   #F1F2F6 #F1F2F6 #4FC0E8\n    inactive_workspace #F1F2F6 #F1F2F6 #C1D1E0\n    urgent_workspace   #F1F2F6 #F1F2F6 #C1D1E0\n  }\n}\n```\n\nRemove those lines.\n\n```\nfont pango:DejaVu Sans Mono 10 (Or whatever the font is)\nbar {\n        status_command i3status\n}\n```\n\nThen install `conky` and `font-awesome`, create a new file `~/.i3/conky/conkyrc`, put the following lines in it.\n\n```\n###    lovelybacon.deviantart.com   ####\n\nbackground no\nout_to_x no\nout_to_console yes\nupdate_interval 1\ntotal_run_times 0\nuse_spacer none\n\n\nTEXT\n${exec acpi -b | awk \"{print $1}\" | sed 's/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\3/'}% \\\n${exec acpi -b | awk \"{print $1}\" | sed 's/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\2/'} \\\n${if_mpd_playing}${mpd_artist}${mpd_title}${endif}     \\\n   ${downspeedf wlp3s0} | ${upspeedf wlp3s0}     \\\n  ${wireless_link_qual_perc wlp3s0}  ${wireless_essid wlp3s0}     \\\n   ${hwmon 2 temp 1} | ${hwmon 2 temp 3}     \\\n  ${exec amixer get Master -c 0 -M | grep -oE \"[[:digit:]]*%\"}     \\\n  ${time %a %b %d}     \\\n  ${time %H:%M}   \n```\n\nRestart i3, the shortcut of mine is `Shift+$mod+r`, `$mod` could either be `Alt` or `Super key`.\n\nNote that if spaces are not recognized, install `awesome-terminal-fonts` and restart.\n\n```\npacaur -S awesome-terminal-fonts\n```\n\n# Credit\nThe above contents are from [lovelybacon.deviantart.com](http://lovelybacon.deviantart.com/art/i3bar-icons-white-edition-575375105), thanks for your amazing work. I only did a few modifications.\n","source":"_posts/beautify-i3wm.md","raw":"title: beautify i3wm\ndate: 2016-10-07 08:28:38\ntags: [i3, linux]\ncategories: Coding\nthumbnail: /images/i3.png\n---\n\n# Motivation\nI enjoy using i3wm, big time. You can switch to different windows/apps conveniently with it. The only problem to me is that it's not beautiful enough, and it's ridiculously small in my high-resolution screen. So I decided to change it a little bit.\n\n# Effect\nHere is what you would get after applying the method.\n\n![i3wm screenshot](/images/i3wm_screenshot.png)\n\n# Method\nTo change the appearance, you only need to modify the config file, usually it's `~/.config/i3/config`. Add the following lines.\n\n```\nfont pango:nimbus sans 18\nbar {\n  status_command conky -c $HOME/.i3/conky/conkyrc\n  mode dock\n  position top\n  strip_workspace_numbers yes\n  colors {\n    background #F1F2F6\n    statusline #788491\n    separator #51c4d4\n\n    focused_workspace  #F1F2F6 #F1F2F6 #4FC0E8\n    active_workspace   #F1F2F6 #F1F2F6 #4FC0E8\n    inactive_workspace #F1F2F6 #F1F2F6 #C1D1E0\n    urgent_workspace   #F1F2F6 #F1F2F6 #C1D1E0\n  }\n}\n```\n\nRemove those lines.\n\n```\nfont pango:DejaVu Sans Mono 10 (Or whatever the font is)\nbar {\n        status_command i3status\n}\n```\n\nThen install `conky` and `font-awesome`, create a new file `~/.i3/conky/conkyrc`, put the following lines in it.\n\n```\n###    lovelybacon.deviantart.com   ####\n\nbackground no\nout_to_x no\nout_to_console yes\nupdate_interval 1\ntotal_run_times 0\nuse_spacer none\n\n\nTEXT\n${exec acpi -b | awk \"{print $1}\" | sed 's/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\3/'}% \\\n${exec acpi -b | awk \"{print $1}\" | sed 's/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\2/'} \\\n${if_mpd_playing}${mpd_artist}${mpd_title}${endif}     \\\n   ${downspeedf wlp3s0} | ${upspeedf wlp3s0}     \\\n  ${wireless_link_qual_perc wlp3s0}  ${wireless_essid wlp3s0}     \\\n   ${hwmon 2 temp 1} | ${hwmon 2 temp 3}     \\\n  ${exec amixer get Master -c 0 -M | grep -oE \"[[:digit:]]*%\"}     \\\n  ${time %a %b %d}     \\\n  ${time %H:%M}   \n```\n\nRestart i3, the shortcut of mine is `Shift+$mod+r`, `$mod` could either be `Alt` or `Super key`.\n\nNote that if spaces are not recognized, install `awesome-terminal-fonts` and restart.\n\n```\npacaur -S awesome-terminal-fonts\n```\n\n# Credit\nThe above contents are from [lovelybacon.deviantart.com](http://lovelybacon.deviantart.com/art/i3bar-icons-white-edition-575375105), thanks for your amazing work. I only did a few modifications.\n","slug":"beautify-i3wm","published":1,"updated":"2018-05-05T08:22:47.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe400488arfijtcbtyl","content":"<h1 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h1><p>I enjoy using i3wm, big time. You can switch to different windows/apps conveniently with it. The only problem to me is that it’s not beautiful enough, and it’s ridiculously small in my high-resolution screen. So I decided to change it a little bit.</p>\n<h1 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h1><p>Here is what you would get after applying the method.</p>\n<p><img src=\"/images/i3wm_screenshot.png\" alt=\"i3wm screenshot\"></p>\n<h1 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h1><p>To change the appearance, you only need to modify the config file, usually it’s <code>~/.config/i3/config</code>. Add the following lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">font pango:nimbus sans 18</div><div class=\"line\">bar &#123;</div><div class=\"line\">  status_command conky -c $HOME/.i3/conky/conkyrc</div><div class=\"line\">  mode dock</div><div class=\"line\">  position top</div><div class=\"line\">  strip_workspace_numbers yes</div><div class=\"line\">  colors &#123;</div><div class=\"line\">    background #F1F2F6</div><div class=\"line\">    statusline #788491</div><div class=\"line\">    separator #51c4d4</div><div class=\"line\"></div><div class=\"line\">    focused_workspace  #F1F2F6 #F1F2F6 #4FC0E8</div><div class=\"line\">    active_workspace   #F1F2F6 #F1F2F6 #4FC0E8</div><div class=\"line\">    inactive_workspace #F1F2F6 #F1F2F6 #C1D1E0</div><div class=\"line\">    urgent_workspace   #F1F2F6 #F1F2F6 #C1D1E0</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Remove those lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">font pango:DejaVu Sans Mono 10 (Or whatever the font is)</div><div class=\"line\">bar &#123;</div><div class=\"line\">        status_command i3status</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then install <code>conky</code> and <code>font-awesome</code>, create a new file <code>~/.i3/conky/conkyrc</code>, put the following lines in it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">###    lovelybacon.deviantart.com   ####</div><div class=\"line\"></div><div class=\"line\">background no</div><div class=\"line\">out_to_x no</div><div class=\"line\">out_to_console yes</div><div class=\"line\">update_interval 1</div><div class=\"line\">total_run_times 0</div><div class=\"line\">use_spacer none</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">TEXT</div><div class=\"line\">$&#123;exec acpi -b | awk &quot;&#123;print $1&#125;&quot; | sed &apos;s/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\3/&apos;&#125;% \\</div><div class=\"line\">$&#123;exec acpi -b | awk &quot;&#123;print $1&#125;&quot; | sed &apos;s/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\2/&apos;&#125; \\</div><div class=\"line\">$&#123;if_mpd_playing&#125;$&#123;mpd_artist&#125;$&#123;mpd_title&#125;$&#123;endif&#125;     \\</div><div class=\"line\">   $&#123;downspeedf wlp3s0&#125; | $&#123;upspeedf wlp3s0&#125;     \\</div><div class=\"line\">  $&#123;wireless_link_qual_perc wlp3s0&#125;  $&#123;wireless_essid wlp3s0&#125;     \\</div><div class=\"line\">   $&#123;hwmon 2 temp 1&#125; | $&#123;hwmon 2 temp 3&#125;     \\</div><div class=\"line\">  $&#123;exec amixer get Master -c 0 -M | grep -oE &quot;[[:digit:]]*%&quot;&#125;     \\</div><div class=\"line\">  $&#123;time %a %b %d&#125;     \\</div><div class=\"line\">  $&#123;time %H:%M&#125;</div></pre></td></tr></table></figure>\n<p>Restart i3, the shortcut of mine is <code>Shift+$mod+r</code>, <code>$mod</code> could either be <code>Alt</code> or <code>Super key</code>.</p>\n<p>Note that if spaces are not recognized, install <code>awesome-terminal-fonts</code> and restart.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pacaur -S awesome-terminal-fonts</div></pre></td></tr></table></figure>\n<h1 id=\"Credit\"><a href=\"#Credit\" class=\"headerlink\" title=\"Credit\"></a>Credit</h1><p>The above contents are from <a href=\"http://lovelybacon.deviantart.com/art/i3bar-icons-white-edition-575375105\" target=\"_blank\" rel=\"external\">lovelybacon.deviantart.com</a>, thanks for your amazing work. I only did a few modifications.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Motivation\"><a href=\"#Motivation\" class=\"headerlink\" title=\"Motivation\"></a>Motivation</h1><p>I enjoy using i3wm, big time. You can switch to different windows/apps conveniently with it. The only problem to me is that it’s not beautiful enough, and it’s ridiculously small in my high-resolution screen. So I decided to change it a little bit.</p>\n<h1 id=\"Effect\"><a href=\"#Effect\" class=\"headerlink\" title=\"Effect\"></a>Effect</h1><p>Here is what you would get after applying the method.</p>\n<p><img src=\"/images/i3wm_screenshot.png\" alt=\"i3wm screenshot\"></p>\n<h1 id=\"Method\"><a href=\"#Method\" class=\"headerlink\" title=\"Method\"></a>Method</h1><p>To change the appearance, you only need to modify the config file, usually it’s <code>~/.config/i3/config</code>. Add the following lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">font pango:nimbus sans 18</div><div class=\"line\">bar &#123;</div><div class=\"line\">  status_command conky -c $HOME/.i3/conky/conkyrc</div><div class=\"line\">  mode dock</div><div class=\"line\">  position top</div><div class=\"line\">  strip_workspace_numbers yes</div><div class=\"line\">  colors &#123;</div><div class=\"line\">    background #F1F2F6</div><div class=\"line\">    statusline #788491</div><div class=\"line\">    separator #51c4d4</div><div class=\"line\"></div><div class=\"line\">    focused_workspace  #F1F2F6 #F1F2F6 #4FC0E8</div><div class=\"line\">    active_workspace   #F1F2F6 #F1F2F6 #4FC0E8</div><div class=\"line\">    inactive_workspace #F1F2F6 #F1F2F6 #C1D1E0</div><div class=\"line\">    urgent_workspace   #F1F2F6 #F1F2F6 #C1D1E0</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Remove those lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">font pango:DejaVu Sans Mono 10 (Or whatever the font is)</div><div class=\"line\">bar &#123;</div><div class=\"line\">        status_command i3status</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then install <code>conky</code> and <code>font-awesome</code>, create a new file <code>~/.i3/conky/conkyrc</code>, put the following lines in it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">###    lovelybacon.deviantart.com   ####</div><div class=\"line\"></div><div class=\"line\">background no</div><div class=\"line\">out_to_x no</div><div class=\"line\">out_to_console yes</div><div class=\"line\">update_interval 1</div><div class=\"line\">total_run_times 0</div><div class=\"line\">use_spacer none</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">TEXT</div><div class=\"line\">$&#123;exec acpi -b | awk &quot;&#123;print $1&#125;&quot; | sed &apos;s/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\3/&apos;&#125;% \\</div><div class=\"line\">$&#123;exec acpi -b | awk &quot;&#123;print $1&#125;&quot; | sed &apos;s/\\([^:]*\\): \\([^,]*\\), \\([0-9]*\\)%.*/\\2/&apos;&#125; \\</div><div class=\"line\">$&#123;if_mpd_playing&#125;$&#123;mpd_artist&#125;$&#123;mpd_title&#125;$&#123;endif&#125;     \\</div><div class=\"line\">   $&#123;downspeedf wlp3s0&#125; | $&#123;upspeedf wlp3s0&#125;     \\</div><div class=\"line\">  $&#123;wireless_link_qual_perc wlp3s0&#125;  $&#123;wireless_essid wlp3s0&#125;     \\</div><div class=\"line\">   $&#123;hwmon 2 temp 1&#125; | $&#123;hwmon 2 temp 3&#125;     \\</div><div class=\"line\">  $&#123;exec amixer get Master -c 0 -M | grep -oE &quot;[[:digit:]]*%&quot;&#125;     \\</div><div class=\"line\">  $&#123;time %a %b %d&#125;     \\</div><div class=\"line\">  $&#123;time %H:%M&#125;</div></pre></td></tr></table></figure>\n<p>Restart i3, the shortcut of mine is <code>Shift+$mod+r</code>, <code>$mod</code> could either be <code>Alt</code> or <code>Super key</code>.</p>\n<p>Note that if spaces are not recognized, install <code>awesome-terminal-fonts</code> and restart.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pacaur -S awesome-terminal-fonts</div></pre></td></tr></table></figure>\n<h1 id=\"Credit\"><a href=\"#Credit\" class=\"headerlink\" title=\"Credit\"></a>Credit</h1><p>The above contents are from <a href=\"http://lovelybacon.deviantart.com/art/i3bar-icons-white-edition-575375105\" target=\"_blank\" rel=\"external\">lovelybacon.deviantart.com</a>, thanks for your amazing work. I only did a few modifications.</p>\n"},{"title":"bittorrent sync","date":"2016-05-21T15:07:27.000Z","thumbnail":"https://www.flockport.com/wp-content/uploads/2015/02/btsync-smallcaps.png","_content":"\nI installed *bittorrent sync* tonight, one on my PC and one on my digitalocean VPS. If it's working correctly, the previous [backup script](/2015/12/27/backup-script/) would be useless.\n\nOne of the possible issues might be the storage limitation of my VPS, which is only 20GB by now. I haven't checked how much storage the synced files take, but I guess it's not a lot by now, though it will grow.\n\nAnother problem is the huge amount of git files to sync. These files are of little use on account of the *archive* feature of *bittorrent sync*. But anyway, I will see if it's working correctly and smoothly without doing any changes to it.\n","source":"_posts/bittorrent-sync.md","raw":"title: bittorrent sync\ndate: 2016-05-21 23:07:27\ntags:\ncategories: Coding\nthumbnail: https://www.flockport.com/wp-content/uploads/2015/02/btsync-smallcaps.png\n---\n\nI installed *bittorrent sync* tonight, one on my PC and one on my digitalocean VPS. If it's working correctly, the previous [backup script](/2015/12/27/backup-script/) would be useless.\n\nOne of the possible issues might be the storage limitation of my VPS, which is only 20GB by now. I haven't checked how much storage the synced files take, but I guess it's not a lot by now, though it will grow.\n\nAnother problem is the huge amount of git files to sync. These files are of little use on account of the *archive* feature of *bittorrent sync*. But anyway, I will see if it's working correctly and smoothly without doing any changes to it.\n","slug":"bittorrent-sync","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe5004b8arf66zbflrq","content":"<p>I installed <em>bittorrent sync</em> tonight, one on my PC and one on my digitalocean VPS. If it’s working correctly, the previous <a href=\"/2015/12/27/backup-script/\">backup script</a> would be useless.</p>\n<p>One of the possible issues might be the storage limitation of my VPS, which is only 20GB by now. I haven’t checked how much storage the synced files take, but I guess it’s not a lot by now, though it will grow.</p>\n<p>Another problem is the huge amount of git files to sync. These files are of little use on account of the <em>archive</em> feature of <em>bittorrent sync</em>. But anyway, I will see if it’s working correctly and smoothly without doing any changes to it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I installed <em>bittorrent sync</em> tonight, one on my PC and one on my digitalocean VPS. If it’s working correctly, the previous <a href=\"/2015/12/27/backup-script/\">backup script</a> would be useless.</p>\n<p>One of the possible issues might be the storage limitation of my VPS, which is only 20GB by now. I haven’t checked how much storage the synced files take, but I guess it’s not a lot by now, though it will grow.</p>\n<p>Another problem is the huge amount of git files to sync. These files are of little use on account of the <em>archive</em> feature of <em>bittorrent sync</em>. But anyway, I will see if it’s working correctly and smoothly without doing any changes to it.</p>\n"},{"title":"backup script","date":"2015-12-27T14:50:08.000Z","thumbnail":"http://3.bp.blogspot.com/-K8PhVRHMmMQ/TyExkSKTRoI/AAAAAAAAFR0/zO8hnnIRykc/s1600/backup.png","_content":"\nRecently I made a backup script with python2.7, and it worked fine by now. So I think it might be a good idea to share it here.\n\n# Install megaFuse\n\nThe first thing you need to do is to install [megaFuse](https://github.com/matteoserva/MegaFuse)\n\n## Install additional packages:\n\n```bash\nsudo apt-get install libcrypto++-dev libcurl4-openssl-dev libdb5.1++-dev libfreeimage-dev libreadline-dev libfuse-dev\n```\n\n## Compile megaFuse\n\n```bash\ncd MegaFuse\nmake\n```\n\n## Fill in your mega username, password and mountpoint in `megafuse.conf`, just as follows:\n\n```\nUSERNAME = username@email.com\nPASSWORD = your_password\nMOUNTPOINT = /media/mega\n```\n\n## Enable MegaFuse\n\n```bash\nsudo ./MegaFuse -f -o allow_other -o uid=1000\n```\n\n## Run MegaFuse at system boot\n\nSave the following code as a bash file, e.g. `start_mega.sh`. Then run the file automatically every time the OS boots by using `Startup Applications` on ubuntu, note that you should modify `/path/to/MegaFuse` to the correct one\n\n```bash\n#!/bin/bash\n\nsleep 100\necho \"yourpassword\" | sudo -S /path/to/MegaFuse/MegaFuse -c /path/to/MegaFuse/megafuse.conf -f -o allow_other -o uid=1000\n```\n\nWhy do you need `sleep 100`? I don't know either. I tried to add the line `/path/to/MegaFuse -c /path/to/megafuse.conf -f -o allow_other -o uid=1000` in the file `/etc/rc.local` before, but it failed. I don't know why. And it almost caused my PC fail to boot because it output way too many errors in `/var/log/syslog` file. Finally I decided to put it in `Startup Applications`. Notice that I used `sudo` here, and you have to put your password in plaintext. This is a security risk. But I don't know to make it work without it, because you need to have root permission to mount it. If you know how to work without `sudo`, I'd like to hear your opinion.\n\n# MegaTools\n\nYou also need [MegaTools](https://megatools.megous.com/) to run this script, I put the tools in `/usr/local/bin/` to make it work.\n\n```\n~/Development/demos$ ls /usr/local/bin|grep mega\nmegacopy\nmegadf\nmegadl\nmegaget\nmegals\nmegamkdir\nmegaput\nmegareg\nmegarm\n```\n\n# my python backup script\n\nMy backup script was written with python. But I think maybe bash script would be easier. Anyway, this is my backup file\n\n```python\n#!/usr/bin/env python\n\nimport subprocess\nimport os\nimport datetime\nimport re\nimport logging\n\nif __name__ == \"__main__\":\n\n    # the location in mega where you want to put your files\n    BACKUP_DIRECOTORY = \"Backups\"\n\n    # local location in which mega was mounted using MegaFuse\n    MOUNTED_LOCATION = \"/media/mega\"\n\n    # BACKUP_LIST: files you want to back up\n    #     file: the file that you want to backup\n    #     count: how many versions you want to keep\n    #     name: backup basename\n    BACKUP_LIST = [\n            {'file': '/var/www/html',\n             'count': 3,\n             'name': 'html'},\n            {'file': '/home/searene/Documents/blog/source/_posts',\n             'count': 3,\n             'name' : 'blog'}\n            ]\n\n    devnull = open(os.devnull, 'w')\n\n    if not os.path.exists(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY)):\n        os.makedirs(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY))\n\n    for f in BACKUP_LIST:\n        today = datetime.datetime.today()\n        backup_path = os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY, f['name'])\n        if not os.path.exists(backup_path):\n            os.makedirs(backup_path)\n        backup_name = '{}-TIME-{}.tar.gz'.format(os.path.join(backup_path, f['name']), today.strftime(\"%Y-%m-%d-%H-%M-%S\"))\n\n        logging.info('tar...')\n        subprocess.call(['tar', '-zcvf', backup_name, f['file']], stdout=devnull)\n        file_list = subprocess.check_output(['/usr/local/bin/megals', backup_path]).split('\\n')\n        file_list = [x for x in file_list if re.match(r'{}-TIME-.*'.format(f['name']), x)]\n        if len(file_list) > f['count']:\n            redundant_files = sorted(file_list, reverse=True)[f['count']:]\n            for f in redundant_files:\n                logging.info('{} is deprecated, removing'.format(redundant_files))\n                subprocess.call(['rm', os.path.join(backup_path, f)])\n```\n\n# run the backup script every day at 5:00pm\n\nrun `crontab -e`, add the following line\n\n```\n0 17 * * * python /home/searene/Tools/backupMega.py\n```\n","source":"_posts/backup-script.md","raw":"title: backup script\ndate: 2015-12-27 22:50:08\ntags: [python, linux]\ncategories: Coding\nthumbnail: http://3.bp.blogspot.com/-K8PhVRHMmMQ/TyExkSKTRoI/AAAAAAAAFR0/zO8hnnIRykc/s1600/backup.png\n---\n\nRecently I made a backup script with python2.7, and it worked fine by now. So I think it might be a good idea to share it here.\n\n# Install megaFuse\n\nThe first thing you need to do is to install [megaFuse](https://github.com/matteoserva/MegaFuse)\n\n## Install additional packages:\n\n```bash\nsudo apt-get install libcrypto++-dev libcurl4-openssl-dev libdb5.1++-dev libfreeimage-dev libreadline-dev libfuse-dev\n```\n\n## Compile megaFuse\n\n```bash\ncd MegaFuse\nmake\n```\n\n## Fill in your mega username, password and mountpoint in `megafuse.conf`, just as follows:\n\n```\nUSERNAME = username@email.com\nPASSWORD = your_password\nMOUNTPOINT = /media/mega\n```\n\n## Enable MegaFuse\n\n```bash\nsudo ./MegaFuse -f -o allow_other -o uid=1000\n```\n\n## Run MegaFuse at system boot\n\nSave the following code as a bash file, e.g. `start_mega.sh`. Then run the file automatically every time the OS boots by using `Startup Applications` on ubuntu, note that you should modify `/path/to/MegaFuse` to the correct one\n\n```bash\n#!/bin/bash\n\nsleep 100\necho \"yourpassword\" | sudo -S /path/to/MegaFuse/MegaFuse -c /path/to/MegaFuse/megafuse.conf -f -o allow_other -o uid=1000\n```\n\nWhy do you need `sleep 100`? I don't know either. I tried to add the line `/path/to/MegaFuse -c /path/to/megafuse.conf -f -o allow_other -o uid=1000` in the file `/etc/rc.local` before, but it failed. I don't know why. And it almost caused my PC fail to boot because it output way too many errors in `/var/log/syslog` file. Finally I decided to put it in `Startup Applications`. Notice that I used `sudo` here, and you have to put your password in plaintext. This is a security risk. But I don't know to make it work without it, because you need to have root permission to mount it. If you know how to work without `sudo`, I'd like to hear your opinion.\n\n# MegaTools\n\nYou also need [MegaTools](https://megatools.megous.com/) to run this script, I put the tools in `/usr/local/bin/` to make it work.\n\n```\n~/Development/demos$ ls /usr/local/bin|grep mega\nmegacopy\nmegadf\nmegadl\nmegaget\nmegals\nmegamkdir\nmegaput\nmegareg\nmegarm\n```\n\n# my python backup script\n\nMy backup script was written with python. But I think maybe bash script would be easier. Anyway, this is my backup file\n\n```python\n#!/usr/bin/env python\n\nimport subprocess\nimport os\nimport datetime\nimport re\nimport logging\n\nif __name__ == \"__main__\":\n\n    # the location in mega where you want to put your files\n    BACKUP_DIRECOTORY = \"Backups\"\n\n    # local location in which mega was mounted using MegaFuse\n    MOUNTED_LOCATION = \"/media/mega\"\n\n    # BACKUP_LIST: files you want to back up\n    #     file: the file that you want to backup\n    #     count: how many versions you want to keep\n    #     name: backup basename\n    BACKUP_LIST = [\n            {'file': '/var/www/html',\n             'count': 3,\n             'name': 'html'},\n            {'file': '/home/searene/Documents/blog/source/_posts',\n             'count': 3,\n             'name' : 'blog'}\n            ]\n\n    devnull = open(os.devnull, 'w')\n\n    if not os.path.exists(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY)):\n        os.makedirs(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY))\n\n    for f in BACKUP_LIST:\n        today = datetime.datetime.today()\n        backup_path = os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY, f['name'])\n        if not os.path.exists(backup_path):\n            os.makedirs(backup_path)\n        backup_name = '{}-TIME-{}.tar.gz'.format(os.path.join(backup_path, f['name']), today.strftime(\"%Y-%m-%d-%H-%M-%S\"))\n\n        logging.info('tar...')\n        subprocess.call(['tar', '-zcvf', backup_name, f['file']], stdout=devnull)\n        file_list = subprocess.check_output(['/usr/local/bin/megals', backup_path]).split('\\n')\n        file_list = [x for x in file_list if re.match(r'{}-TIME-.*'.format(f['name']), x)]\n        if len(file_list) > f['count']:\n            redundant_files = sorted(file_list, reverse=True)[f['count']:]\n            for f in redundant_files:\n                logging.info('{} is deprecated, removing'.format(redundant_files))\n                subprocess.call(['rm', os.path.join(backup_path, f)])\n```\n\n# run the backup script every day at 5:00pm\n\nrun `crontab -e`, add the following line\n\n```\n0 17 * * * python /home/searene/Tools/backupMega.py\n```\n","slug":"backup-script","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe7004f8arfl7ye1tel","content":"<p>Recently I made a backup script with python2.7, and it worked fine by now. So I think it might be a good idea to share it here.</p>\n<h1 id=\"Install-megaFuse\"><a href=\"#Install-megaFuse\" class=\"headerlink\" title=\"Install megaFuse\"></a>Install megaFuse</h1><p>The first thing you need to do is to install <a href=\"https://github.com/matteoserva/MegaFuse\" target=\"_blank\" rel=\"external\">megaFuse</a></p>\n<h2 id=\"Install-additional-packages\"><a href=\"#Install-additional-packages\" class=\"headerlink\" title=\"Install additional packages:\"></a>Install additional packages:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libcrypto++-dev libcurl4-openssl-dev libdb5.1++-dev libfreeimage-dev libreadline-dev libfuse-dev</div></pre></td></tr></table></figure>\n<h2 id=\"Compile-megaFuse\"><a href=\"#Compile-megaFuse\" class=\"headerlink\" title=\"Compile megaFuse\"></a>Compile megaFuse</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> MegaFuse</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<h2 id=\"Fill-in-your-mega-username-password-and-mountpoint-in-megafuse-conf-just-as-follows\"><a href=\"#Fill-in-your-mega-username-password-and-mountpoint-in-megafuse-conf-just-as-follows\" class=\"headerlink\" title=\"Fill in your mega username, password and mountpoint in megafuse.conf, just as follows:\"></a>Fill in your mega username, password and mountpoint in <code>megafuse.conf</code>, just as follows:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">USERNAME = username@email.com</div><div class=\"line\">PASSWORD = your_password</div><div class=\"line\">MOUNTPOINT = /media/mega</div></pre></td></tr></table></figure>\n<h2 id=\"Enable-MegaFuse\"><a href=\"#Enable-MegaFuse\" class=\"headerlink\" title=\"Enable MegaFuse\"></a>Enable MegaFuse</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./MegaFuse <span class=\"_\">-f</span> -o allow_other -o uid=1000</div></pre></td></tr></table></figure>\n<h2 id=\"Run-MegaFuse-at-system-boot\"><a href=\"#Run-MegaFuse-at-system-boot\" class=\"headerlink\" title=\"Run MegaFuse at system boot\"></a>Run MegaFuse at system boot</h2><p>Save the following code as a bash file, e.g. <code>start_mega.sh</code>. Then run the file automatically every time the OS boots by using <code>Startup Applications</code> on ubuntu, note that you should modify <code>/path/to/MegaFuse</code> to the correct one</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">sleep 100</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"yourpassword\"</span> | sudo -S /path/to/MegaFuse/MegaFuse -c /path/to/MegaFuse/megafuse.conf <span class=\"_\">-f</span> -o allow_other -o uid=1000</div></pre></td></tr></table></figure>\n<p>Why do you need <code>sleep 100</code>? I don’t know either. I tried to add the line <code>/path/to/MegaFuse -c /path/to/megafuse.conf -f -o allow_other -o uid=1000</code> in the file <code>/etc/rc.local</code> before, but it failed. I don’t know why. And it almost caused my PC fail to boot because it output way too many errors in <code>/var/log/syslog</code> file. Finally I decided to put it in <code>Startup Applications</code>. Notice that I used <code>sudo</code> here, and you have to put your password in plaintext. This is a security risk. But I don’t know to make it work without it, because you need to have root permission to mount it. If you know how to work without <code>sudo</code>, I’d like to hear your opinion.</p>\n<h1 id=\"MegaTools\"><a href=\"#MegaTools\" class=\"headerlink\" title=\"MegaTools\"></a>MegaTools</h1><p>You also need <a href=\"https://megatools.megous.com/\" target=\"_blank\" rel=\"external\">MegaTools</a> to run this script, I put the tools in <code>/usr/local/bin/</code> to make it work.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">~/Development/demos$ ls /usr/local/bin|grep mega</div><div class=\"line\">megacopy</div><div class=\"line\">megadf</div><div class=\"line\">megadl</div><div class=\"line\">megaget</div><div class=\"line\">megals</div><div class=\"line\">megamkdir</div><div class=\"line\">megaput</div><div class=\"line\">megareg</div><div class=\"line\">megarm</div></pre></td></tr></table></figure>\n<h1 id=\"my-python-backup-script\"><a href=\"#my-python-backup-script\" class=\"headerlink\" title=\"my python backup script\"></a>my python backup script</h1><p>My backup script was written with python. But I think maybe bash script would be easier. Anyway, this is my backup file</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># the location in mega where you want to put your files</span></div><div class=\"line\">    BACKUP_DIRECOTORY = <span class=\"string\">\"Backups\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># local location in which mega was mounted using MegaFuse</span></div><div class=\"line\">    MOUNTED_LOCATION = <span class=\"string\">\"/media/mega\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># BACKUP_LIST: files you want to back up</span></div><div class=\"line\">    <span class=\"comment\">#     file: the file that you want to backup</span></div><div class=\"line\">    <span class=\"comment\">#     count: how many versions you want to keep</span></div><div class=\"line\">    <span class=\"comment\">#     name: backup basename</span></div><div class=\"line\">    BACKUP_LIST = [</div><div class=\"line\">            &#123;<span class=\"string\">'file'</span>: <span class=\"string\">'/var/www/html'</span>,</div><div class=\"line\">             <span class=\"string\">'count'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">             <span class=\"string\">'name'</span>: <span class=\"string\">'html'</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"string\">'file'</span>: <span class=\"string\">'/home/searene/Documents/blog/source/_posts'</span>,</div><div class=\"line\">             <span class=\"string\">'count'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">             <span class=\"string\">'name'</span> : <span class=\"string\">'blog'</span>&#125;</div><div class=\"line\">            ]</div><div class=\"line\"></div><div class=\"line\">    devnull = open(os.devnull, <span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY)):</div><div class=\"line\">        os.makedirs(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> BACKUP_LIST:</div><div class=\"line\">        today = datetime.datetime.today()</div><div class=\"line\">        backup_path = os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY, f[<span class=\"string\">'name'</span>])</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(backup_path):</div><div class=\"line\">            os.makedirs(backup_path)</div><div class=\"line\">        backup_name = <span class=\"string\">'&#123;&#125;-TIME-&#123;&#125;.tar.gz'</span>.format(os.path.join(backup_path, f[<span class=\"string\">'name'</span>]), today.strftime(<span class=\"string\">\"%Y-%m-%d-%H-%M-%S\"</span>))</div><div class=\"line\"></div><div class=\"line\">        logging.info(<span class=\"string\">'tar...'</span>)</div><div class=\"line\">        subprocess.call([<span class=\"string\">'tar'</span>, <span class=\"string\">'-zcvf'</span>, backup_name, f[<span class=\"string\">'file'</span>]], stdout=devnull)</div><div class=\"line\">        file_list = subprocess.check_output([<span class=\"string\">'/usr/local/bin/megals'</span>, backup_path]).split(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">        file_list = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> file_list <span class=\"keyword\">if</span> re.match(<span class=\"string\">r'&#123;&#125;-TIME-.*'</span>.format(f[<span class=\"string\">'name'</span>]), x)]</div><div class=\"line\">        <span class=\"keyword\">if</span> len(file_list) &gt; f[<span class=\"string\">'count'</span>]:</div><div class=\"line\">            redundant_files = sorted(file_list, reverse=<span class=\"keyword\">True</span>)[f[<span class=\"string\">'count'</span>]:]</div><div class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> redundant_files:</div><div class=\"line\">                logging.info(<span class=\"string\">'&#123;&#125; is deprecated, removing'</span>.format(redundant_files))</div><div class=\"line\">                subprocess.call([<span class=\"string\">'rm'</span>, os.path.join(backup_path, f)])</div></pre></td></tr></table></figure>\n<h1 id=\"run-the-backup-script-every-day-at-5-00pm\"><a href=\"#run-the-backup-script-every-day-at-5-00pm\" class=\"headerlink\" title=\"run the backup script every day at 5:00pm\"></a>run the backup script every day at 5:00pm</h1><p>run <code>crontab -e</code>, add the following line</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">0 17 * * * python /home/searene/Tools/backupMega.py</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently I made a backup script with python2.7, and it worked fine by now. So I think it might be a good idea to share it here.</p>\n<h1 id=\"Install-megaFuse\"><a href=\"#Install-megaFuse\" class=\"headerlink\" title=\"Install megaFuse\"></a>Install megaFuse</h1><p>The first thing you need to do is to install <a href=\"https://github.com/matteoserva/MegaFuse\" target=\"_blank\" rel=\"external\">megaFuse</a></p>\n<h2 id=\"Install-additional-packages\"><a href=\"#Install-additional-packages\" class=\"headerlink\" title=\"Install additional packages:\"></a>Install additional packages:</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libcrypto++-dev libcurl4-openssl-dev libdb5.1++-dev libfreeimage-dev libreadline-dev libfuse-dev</div></pre></td></tr></table></figure>\n<h2 id=\"Compile-megaFuse\"><a href=\"#Compile-megaFuse\" class=\"headerlink\" title=\"Compile megaFuse\"></a>Compile megaFuse</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> MegaFuse</div><div class=\"line\">make</div></pre></td></tr></table></figure>\n<h2 id=\"Fill-in-your-mega-username-password-and-mountpoint-in-megafuse-conf-just-as-follows\"><a href=\"#Fill-in-your-mega-username-password-and-mountpoint-in-megafuse-conf-just-as-follows\" class=\"headerlink\" title=\"Fill in your mega username, password and mountpoint in megafuse.conf, just as follows:\"></a>Fill in your mega username, password and mountpoint in <code>megafuse.conf</code>, just as follows:</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">USERNAME = username@email.com</div><div class=\"line\">PASSWORD = your_password</div><div class=\"line\">MOUNTPOINT = /media/mega</div></pre></td></tr></table></figure>\n<h2 id=\"Enable-MegaFuse\"><a href=\"#Enable-MegaFuse\" class=\"headerlink\" title=\"Enable MegaFuse\"></a>Enable MegaFuse</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo ./MegaFuse <span class=\"_\">-f</span> -o allow_other -o uid=1000</div></pre></td></tr></table></figure>\n<h2 id=\"Run-MegaFuse-at-system-boot\"><a href=\"#Run-MegaFuse-at-system-boot\" class=\"headerlink\" title=\"Run MegaFuse at system boot\"></a>Run MegaFuse at system boot</h2><p>Save the following code as a bash file, e.g. <code>start_mega.sh</code>. Then run the file automatically every time the OS boots by using <code>Startup Applications</code> on ubuntu, note that you should modify <code>/path/to/MegaFuse</code> to the correct one</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\">sleep 100</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"yourpassword\"</span> | sudo -S /path/to/MegaFuse/MegaFuse -c /path/to/MegaFuse/megafuse.conf <span class=\"_\">-f</span> -o allow_other -o uid=1000</div></pre></td></tr></table></figure>\n<p>Why do you need <code>sleep 100</code>? I don’t know either. I tried to add the line <code>/path/to/MegaFuse -c /path/to/megafuse.conf -f -o allow_other -o uid=1000</code> in the file <code>/etc/rc.local</code> before, but it failed. I don’t know why. And it almost caused my PC fail to boot because it output way too many errors in <code>/var/log/syslog</code> file. Finally I decided to put it in <code>Startup Applications</code>. Notice that I used <code>sudo</code> here, and you have to put your password in plaintext. This is a security risk. But I don’t know to make it work without it, because you need to have root permission to mount it. If you know how to work without <code>sudo</code>, I’d like to hear your opinion.</p>\n<h1 id=\"MegaTools\"><a href=\"#MegaTools\" class=\"headerlink\" title=\"MegaTools\"></a>MegaTools</h1><p>You also need <a href=\"https://megatools.megous.com/\" target=\"_blank\" rel=\"external\">MegaTools</a> to run this script, I put the tools in <code>/usr/local/bin/</code> to make it work.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">~/Development/demos$ ls /usr/local/bin|grep mega</div><div class=\"line\">megacopy</div><div class=\"line\">megadf</div><div class=\"line\">megadl</div><div class=\"line\">megaget</div><div class=\"line\">megals</div><div class=\"line\">megamkdir</div><div class=\"line\">megaput</div><div class=\"line\">megareg</div><div class=\"line\">megarm</div></pre></td></tr></table></figure>\n<h1 id=\"my-python-backup-script\"><a href=\"#my-python-backup-script\" class=\"headerlink\" title=\"my python backup script\"></a>my python backup script</h1><p>My backup script was written with python. But I think maybe bash script would be easier. Anyway, this is my backup file</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> datetime</div><div class=\"line\"><span class=\"keyword\">import</span> re</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># the location in mega where you want to put your files</span></div><div class=\"line\">    BACKUP_DIRECOTORY = <span class=\"string\">\"Backups\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># local location in which mega was mounted using MegaFuse</span></div><div class=\"line\">    MOUNTED_LOCATION = <span class=\"string\">\"/media/mega\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># BACKUP_LIST: files you want to back up</span></div><div class=\"line\">    <span class=\"comment\">#     file: the file that you want to backup</span></div><div class=\"line\">    <span class=\"comment\">#     count: how many versions you want to keep</span></div><div class=\"line\">    <span class=\"comment\">#     name: backup basename</span></div><div class=\"line\">    BACKUP_LIST = [</div><div class=\"line\">            &#123;<span class=\"string\">'file'</span>: <span class=\"string\">'/var/www/html'</span>,</div><div class=\"line\">             <span class=\"string\">'count'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">             <span class=\"string\">'name'</span>: <span class=\"string\">'html'</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"string\">'file'</span>: <span class=\"string\">'/home/searene/Documents/blog/source/_posts'</span>,</div><div class=\"line\">             <span class=\"string\">'count'</span>: <span class=\"number\">3</span>,</div><div class=\"line\">             <span class=\"string\">'name'</span> : <span class=\"string\">'blog'</span>&#125;</div><div class=\"line\">            ]</div><div class=\"line\"></div><div class=\"line\">    devnull = open(os.devnull, <span class=\"string\">'w'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY)):</div><div class=\"line\">        os.makedirs(os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> BACKUP_LIST:</div><div class=\"line\">        today = datetime.datetime.today()</div><div class=\"line\">        backup_path = os.path.join(MOUNTED_LOCATION, BACKUP_DIRECOTORY, f[<span class=\"string\">'name'</span>])</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(backup_path):</div><div class=\"line\">            os.makedirs(backup_path)</div><div class=\"line\">        backup_name = <span class=\"string\">'&#123;&#125;-TIME-&#123;&#125;.tar.gz'</span>.format(os.path.join(backup_path, f[<span class=\"string\">'name'</span>]), today.strftime(<span class=\"string\">\"%Y-%m-%d-%H-%M-%S\"</span>))</div><div class=\"line\"></div><div class=\"line\">        logging.info(<span class=\"string\">'tar...'</span>)</div><div class=\"line\">        subprocess.call([<span class=\"string\">'tar'</span>, <span class=\"string\">'-zcvf'</span>, backup_name, f[<span class=\"string\">'file'</span>]], stdout=devnull)</div><div class=\"line\">        file_list = subprocess.check_output([<span class=\"string\">'/usr/local/bin/megals'</span>, backup_path]).split(<span class=\"string\">'\\n'</span>)</div><div class=\"line\">        file_list = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> file_list <span class=\"keyword\">if</span> re.match(<span class=\"string\">r'&#123;&#125;-TIME-.*'</span>.format(f[<span class=\"string\">'name'</span>]), x)]</div><div class=\"line\">        <span class=\"keyword\">if</span> len(file_list) &gt; f[<span class=\"string\">'count'</span>]:</div><div class=\"line\">            redundant_files = sorted(file_list, reverse=<span class=\"keyword\">True</span>)[f[<span class=\"string\">'count'</span>]:]</div><div class=\"line\">            <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> redundant_files:</div><div class=\"line\">                logging.info(<span class=\"string\">'&#123;&#125; is deprecated, removing'</span>.format(redundant_files))</div><div class=\"line\">                subprocess.call([<span class=\"string\">'rm'</span>, os.path.join(backup_path, f)])</div></pre></td></tr></table></figure>\n<h1 id=\"run-the-backup-script-every-day-at-5-00pm\"><a href=\"#run-the-backup-script-every-day-at-5-00pm\" class=\"headerlink\" title=\"run the backup script every day at 5:00pm\"></a>run the backup script every day at 5:00pm</h1><p>run <code>crontab -e</code>, add the following line</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">0 17 * * * python /home/searene/Tools/backupMega.py</div></pre></td></tr></table></figure>\n"},{"title":"auto save in vim","date":"2015-12-26T06:49:31.000Z","thumbnail":"http://www.iconarchive.com/download/i48662/custom-icon-design/pretty-office-7/Save.ico","_content":"\nI'd been using [vim-auto-save](https://github.com/vim-scripts/vim-auto-save) for a long time, but I also found that it often messed up with my buffer order because it used `silent wa` to save all buffers. And sometimes `undo` didn't work, I suspected that it had something to do with `silent wa`. After searching online for a while, I found out a way to make vim automatically save files without an extra plugin installed, just add the following lines to your `.vimrc`:\n\n```\n\" save automatically when text is changed\nset updatetime=200\nau CursorHold * silent! update\n```\n\nIt will save the current file whenever text is changed in normal mode or you leave the insert mode. It works pretty well for me. Note that it only works in vim 7.4 or above. Check out your vim version first.\n","source":"_posts/auto-save-in-vim.md","raw":"title: auto save in vim\ndate: 2015-12-26 14:49:31\ntags: [vim]\nthumbnail: http://www.iconarchive.com/download/i48662/custom-icon-design/pretty-office-7/Save.ico\ncategories: Coding\n---\n\nI'd been using [vim-auto-save](https://github.com/vim-scripts/vim-auto-save) for a long time, but I also found that it often messed up with my buffer order because it used `silent wa` to save all buffers. And sometimes `undo` didn't work, I suspected that it had something to do with `silent wa`. After searching online for a while, I found out a way to make vim automatically save files without an extra plugin installed, just add the following lines to your `.vimrc`:\n\n```\n\" save automatically when text is changed\nset updatetime=200\nau CursorHold * silent! update\n```\n\nIt will save the current file whenever text is changed in normal mode or you leave the insert mode. It works pretty well for me. Note that it only works in vim 7.4 or above. Check out your vim version first.\n","slug":"auto-save-in-vim","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe8004i8arftuwscl6u","content":"<p>I’d been using <a href=\"https://github.com/vim-scripts/vim-auto-save\" target=\"_blank\" rel=\"external\">vim-auto-save</a> for a long time, but I also found that it often messed up with my buffer order because it used <code>silent wa</code> to save all buffers. And sometimes <code>undo</code> didn’t work, I suspected that it had something to do with <code>silent wa</code>. After searching online for a while, I found out a way to make vim automatically save files without an extra plugin installed, just add the following lines to your <code>.vimrc</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot; save automatically when text is changed</div><div class=\"line\">set updatetime=200</div><div class=\"line\">au CursorHold * silent! update</div></pre></td></tr></table></figure>\n<p>It will save the current file whenever text is changed in normal mode or you leave the insert mode. It works pretty well for me. Note that it only works in vim 7.4 or above. Check out your vim version first.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’d been using <a href=\"https://github.com/vim-scripts/vim-auto-save\" target=\"_blank\" rel=\"external\">vim-auto-save</a> for a long time, but I also found that it often messed up with my buffer order because it used <code>silent wa</code> to save all buffers. And sometimes <code>undo</code> didn’t work, I suspected that it had something to do with <code>silent wa</code>. After searching online for a while, I found out a way to make vim automatically save files without an extra plugin installed, just add the following lines to your <code>.vimrc</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot; save automatically when text is changed</div><div class=\"line\">set updatetime=200</div><div class=\"line\">au CursorHold * silent! update</div></pre></td></tr></table></figure>\n<p>It will save the current file whenever text is changed in normal mode or you leave the insert mode. It works pretty well for me. Note that it only works in vim 7.4 or above. Check out your vim version first.</p>\n"},{"title":"change openwrt source to UTSC","date":"2016-12-18T07:08:29.000Z","thumbnail":"/images/openwrt.png","_content":"\nThe following steps only apply to Netgear 4300 and openwrt 15.05.1.\n\nModify `/etc/opkg.conf` to the following lines.\n\n```\ndest root /\ndest ram /tmp\nlists_dir ext /var/opkg-lists\noption overlay_root /overlay\noption check_signature 1\nsrc/gz chaos_calmer_base http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/base\nsrc/gz chaos_calmer_luci http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/luci\nsrc/gz chaos_calmer_management http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/management\nsrc/gz chaos_calmer_packages http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/packages\nsrc/gz chaos_calmer_routing http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/routing\nsrc/gz chaos_calmer_telephony http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/telephony\n```\n","source":"_posts/change-openwrt-source-to-UTSC.md","raw":"title: change openwrt source to UTSC\ndate: 2016-12-18 15:08:29\ntags:\ncategories:\nthumbnail: /images/openwrt.png\n---\n\nThe following steps only apply to Netgear 4300 and openwrt 15.05.1.\n\nModify `/etc/opkg.conf` to the following lines.\n\n```\ndest root /\ndest ram /tmp\nlists_dir ext /var/opkg-lists\noption overlay_root /overlay\noption check_signature 1\nsrc/gz chaos_calmer_base http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/base\nsrc/gz chaos_calmer_luci http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/luci\nsrc/gz chaos_calmer_management http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/management\nsrc/gz chaos_calmer_packages http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/packages\nsrc/gz chaos_calmer_routing http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/routing\nsrc/gz chaos_calmer_telephony http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/telephony\n```\n","slug":"change-openwrt-source-to-UTSC","published":1,"updated":"2017-02-11T01:24:24.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqe9004m8arfa2cg81ps","content":"<p>The following steps only apply to Netgear 4300 and openwrt 15.05.1.</p>\n<p>Modify <code>/etc/opkg.conf</code> to the following lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dest root /</div><div class=\"line\">dest ram /tmp</div><div class=\"line\">lists_dir ext /var/opkg-lists</div><div class=\"line\">option overlay_root /overlay</div><div class=\"line\">option check_signature 1</div><div class=\"line\">src/gz chaos_calmer_base http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/base</div><div class=\"line\">src/gz chaos_calmer_luci http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/luci</div><div class=\"line\">src/gz chaos_calmer_management http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/management</div><div class=\"line\">src/gz chaos_calmer_packages http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/packages</div><div class=\"line\">src/gz chaos_calmer_routing http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/routing</div><div class=\"line\">src/gz chaos_calmer_telephony http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/telephony</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>The following steps only apply to Netgear 4300 and openwrt 15.05.1.</p>\n<p>Modify <code>/etc/opkg.conf</code> to the following lines.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">dest root /</div><div class=\"line\">dest ram /tmp</div><div class=\"line\">lists_dir ext /var/opkg-lists</div><div class=\"line\">option overlay_root /overlay</div><div class=\"line\">option check_signature 1</div><div class=\"line\">src/gz chaos_calmer_base http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/base</div><div class=\"line\">src/gz chaos_calmer_luci http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/luci</div><div class=\"line\">src/gz chaos_calmer_management http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/management</div><div class=\"line\">src/gz chaos_calmer_packages http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/packages</div><div class=\"line\">src/gz chaos_calmer_routing http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/routing</div><div class=\"line\">src/gz chaos_calmer_telephony http://openwrt.proxy.ustclug.org/chaos_calmer/15.05.1/ar71xx/nand/packages/telephony</div></pre></td></tr></table></figure>\n"},{"title":"enlarge the size of a vdi of virtualbox","date":"2015-12-03T10:45:54.000Z","_content":"\nI'm more accustomed to Linux compared with Windows, but some apps are not accessible in Linux, e.g. QQ. And sometimes I have to use Visual Studio, which is a cumbersome, slow developing tool. I don't like that. But I have to use that sometimes. So I use a virtual machine to access Windows, which could help to access those windows apps. For example, today my classmate asked for help, which was about building a client-server app with windows socket. But I didn't install C++ development environment in my Visual Studio, so I have to install them. But one afternoon passed, and I found that I've got no place to install any extra packages any more, since Visual Studio installed a lot of tools on my virtual machine before C++ development tools were installed. Anyway, this is just some bullshit. I know this paragraph has little to do with the title, you can skip the paragraph if you want. But I guess you've finished reading it, so, anyway. :)\n\nThe way to enlarge a vdi is unbelievably simple, it's just like this:\n\n```bash\nVBoxManage modifyhd ~/VirtualBox\\ VMs/win7/win7.vdi --resize 61440 #61440MB = 60GB\n```\n\nThen you will find the output like this:\n\n```\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n```\n\nIt's very fast, no more than 1 second. Then you can find that the size of the disk has been enlarged to 60GB\n\n![](http://i.imgur.com/FUCOGNn.png)\n\nBut when you start Virtual Machine, you will find that the size of the disk doesn't change in the system, This is because you haven't extended the volume in the System.\n\n![](http://i.imgur.com/DAYxcvh.png)\n\nOpen `Control Panel`, and search `disk` in it. Click on `Create and format hard disk partiton` to open `Disk Management`. \n\n![](https://i.imgur.com/EIW1UBv.png)\n\nYou will find 10GB or whatever the size is that is not allocated yet. Click on the disk that you want to extend, click on `extend volume`.\n\n![](http://i.imgur.com/8Y81k4V.png)\n\nThen next, next... All done!\n","source":"_posts/enlarge-the-size-of-a-vdi-of-virtualbox.md","raw":"title: enlarge the size of a vdi of virtualbox\ndate: 2015-12-03 18:45:54\ncategories: Coding\ntags: virtualbox\n---\n\nI'm more accustomed to Linux compared with Windows, but some apps are not accessible in Linux, e.g. QQ. And sometimes I have to use Visual Studio, which is a cumbersome, slow developing tool. I don't like that. But I have to use that sometimes. So I use a virtual machine to access Windows, which could help to access those windows apps. For example, today my classmate asked for help, which was about building a client-server app with windows socket. But I didn't install C++ development environment in my Visual Studio, so I have to install them. But one afternoon passed, and I found that I've got no place to install any extra packages any more, since Visual Studio installed a lot of tools on my virtual machine before C++ development tools were installed. Anyway, this is just some bullshit. I know this paragraph has little to do with the title, you can skip the paragraph if you want. But I guess you've finished reading it, so, anyway. :)\n\nThe way to enlarge a vdi is unbelievably simple, it's just like this:\n\n```bash\nVBoxManage modifyhd ~/VirtualBox\\ VMs/win7/win7.vdi --resize 61440 #61440MB = 60GB\n```\n\nThen you will find the output like this:\n\n```\n0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%\n```\n\nIt's very fast, no more than 1 second. Then you can find that the size of the disk has been enlarged to 60GB\n\n![](http://i.imgur.com/FUCOGNn.png)\n\nBut when you start Virtual Machine, you will find that the size of the disk doesn't change in the system, This is because you haven't extended the volume in the System.\n\n![](http://i.imgur.com/DAYxcvh.png)\n\nOpen `Control Panel`, and search `disk` in it. Click on `Create and format hard disk partiton` to open `Disk Management`. \n\n![](https://i.imgur.com/EIW1UBv.png)\n\nYou will find 10GB or whatever the size is that is not allocated yet. Click on the disk that you want to extend, click on `extend volume`.\n\n![](http://i.imgur.com/8Y81k4V.png)\n\nThen next, next... All done!\n","slug":"enlarge-the-size-of-a-vdi-of-virtualbox","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqea004p8arfjfp6domw","content":"<p>I’m more accustomed to Linux compared with Windows, but some apps are not accessible in Linux, e.g. QQ. And sometimes I have to use Visual Studio, which is a cumbersome, slow developing tool. I don’t like that. But I have to use that sometimes. So I use a virtual machine to access Windows, which could help to access those windows apps. For example, today my classmate asked for help, which was about building a client-server app with windows socket. But I didn’t install C++ development environment in my Visual Studio, so I have to install them. But one afternoon passed, and I found that I’ve got no place to install any extra packages any more, since Visual Studio installed a lot of tools on my virtual machine before C++ development tools were installed. Anyway, this is just some bullshit. I know this paragraph has little to do with the title, you can skip the paragraph if you want. But I guess you’ve finished reading it, so, anyway. :)</p>\n<p>The way to enlarge a vdi is unbelievably simple, it’s just like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">VBoxManage modifyhd ~/VirtualBox\\ VMs/win7/win7.vdi --resize 61440 <span class=\"comment\">#61440MB = 60GB</span></div></pre></td></tr></table></figure>\n<p>Then you will find the output like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</div></pre></td></tr></table></figure>\n<p>It’s very fast, no more than 1 second. Then you can find that the size of the disk has been enlarged to 60GB</p>\n<p><img src=\"http://i.imgur.com/FUCOGNn.png\" alt=\"\"></p>\n<p>But when you start Virtual Machine, you will find that the size of the disk doesn’t change in the system, This is because you haven’t extended the volume in the System.</p>\n<p><img src=\"http://i.imgur.com/DAYxcvh.png\" alt=\"\"></p>\n<p>Open <code>Control Panel</code>, and search <code>disk</code> in it. Click on <code>Create and format hard disk partiton</code> to open <code>Disk Management</code>. </p>\n<p><img src=\"https://i.imgur.com/EIW1UBv.png\" alt=\"\"></p>\n<p>You will find 10GB or whatever the size is that is not allocated yet. Click on the disk that you want to extend, click on <code>extend volume</code>.</p>\n<p><img src=\"http://i.imgur.com/8Y81k4V.png\" alt=\"\"></p>\n<p>Then next, next… All done!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’m more accustomed to Linux compared with Windows, but some apps are not accessible in Linux, e.g. QQ. And sometimes I have to use Visual Studio, which is a cumbersome, slow developing tool. I don’t like that. But I have to use that sometimes. So I use a virtual machine to access Windows, which could help to access those windows apps. For example, today my classmate asked for help, which was about building a client-server app with windows socket. But I didn’t install C++ development environment in my Visual Studio, so I have to install them. But one afternoon passed, and I found that I’ve got no place to install any extra packages any more, since Visual Studio installed a lot of tools on my virtual machine before C++ development tools were installed. Anyway, this is just some bullshit. I know this paragraph has little to do with the title, you can skip the paragraph if you want. But I guess you’ve finished reading it, so, anyway. :)</p>\n<p>The way to enlarge a vdi is unbelievably simple, it’s just like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">VBoxManage modifyhd ~/VirtualBox\\ VMs/win7/win7.vdi --resize 61440 <span class=\"comment\">#61440MB = 60GB</span></div></pre></td></tr></table></figure>\n<p>Then you will find the output like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">0%...10%...20%...30%...40%...50%...60%...70%...80%...90%...100%</div></pre></td></tr></table></figure>\n<p>It’s very fast, no more than 1 second. Then you can find that the size of the disk has been enlarged to 60GB</p>\n<p><img src=\"http://i.imgur.com/FUCOGNn.png\" alt=\"\"></p>\n<p>But when you start Virtual Machine, you will find that the size of the disk doesn’t change in the system, This is because you haven’t extended the volume in the System.</p>\n<p><img src=\"http://i.imgur.com/DAYxcvh.png\" alt=\"\"></p>\n<p>Open <code>Control Panel</code>, and search <code>disk</code> in it. Click on <code>Create and format hard disk partiton</code> to open <code>Disk Management</code>. </p>\n<p><img src=\"https://i.imgur.com/EIW1UBv.png\" alt=\"\"></p>\n<p>You will find 10GB or whatever the size is that is not allocated yet. Click on the disk that you want to extend, click on <code>extend volume</code>.</p>\n<p><img src=\"http://i.imgur.com/8Y81k4V.png\" alt=\"\"></p>\n<p>Then next, next… All done!</p>\n"},{"title":"connect to wifi via commandline on arch","date":"2016-06-08T12:16:30.000Z","thumbnail":"http://baltimorecomputersolutions.net/wp-content/uploads/2014/09/network_monitor.jpg","_content":"\nI just spent hours connecting to the wireless network on archlinux today. Finally I resorted to various tools in commandline. Here's how I do it. Make sure you run the following commands as root to avoid some permission errors.\n\n# Find out SSID of the target wifi\n\n```\niw dev \"your_interface\" scan | less\n```\n\nReplace *your_interface* with your own one, usually it's *wlp3s0* or *wlan0*. You can run `ifconfig` to find out the name of your interface\n\nYou will get something like\n\n```\nBSS fc:d7:33:59:74:74(on wlp3s0) -- associated\n        TSF: 85505115422 usec (0d, 23:45:05)\n        freq: 2412\n        beacon interval: 100 TUs\n        capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)\n        signal: -54.00 dBm\n        last seen: 136 ms ago\n        Information elements from Probe Response frame:\n        SSID: TP-LINK_7474\n        Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 \n\t\t...\n```\nThe SSID is something after *SSID*. It's *TP-LINK_7474* in my case.\n\n# Association\n\nAfter finding out your SSID, you would need to connect to it. There are two cases here, one is when there's no encryption and one is when *WPA/WPA2* is enabled. Find the case that suits you most.\n\n## No Encryption\n\nThis is pretty easy, you only need one line here.\n\n```\niw dev wlan0 connect \"your_essid\"\n```\n\n*your_essid* is the name of the network you found out before, such as *TP-LINK_7474*\n\nThen you will need to [Get an IP address](#Get-IP-Address)\n\n## WPA/WPA2\n\nYou have a lot of work to be done here. First create a new file `/etc/wpa_supplicant/wpa_supplicant.conf`. Type in the following contents and save it.\n\n```\nctrl_interface=/var/run/wpa_supplicant\nupdate_config=1\n```\n\nGenerate passphrase and save it to the above file. Replace *your_SSID* and *your_key* with your own ones.\n\n```\nwpa_passphrase \"your_SSID\" \"your_key\" >> /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nCheck if wpa_supplicant is running.\n\n```\nps -aux|grep wpa_supplicant\n```\n\nIf it's running, just as follows\n\n```\nroot     21108  0.0  0.0  43488  3260 ?        Ss   20:01   0:00 wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nKill the process, and remove `/var/run/wpa_supplicant/` if it exists\n\n```\nkill 21108\nrm /var/run/wpa_supplicant -rf\n```\n\nIf it's not running or you've killed the running one, run the following command to start `wpa_supplicant`.\n\n```\nwpa_supplicant -B -i \"your_interface\" -c /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\n# Get IP Address\n\nAfter connect to the network, you need to get an IP using `dhcpcd`\n\n```\ndhcpcd wlp3s0\n```\n\nWait for several seconds. If everything went smoothly, you would be connected to the network successfully.\n","source":"_posts/connect-to-wifi-via-commandline-on-arch.md","raw":"title: connect to wifi via commandline on arch\ndate: 2016-06-08 20:16:30\ntags: [linux, network]\ncategories: Coding\nthumbnail: http://baltimorecomputersolutions.net/wp-content/uploads/2014/09/network_monitor.jpg\n---\n\nI just spent hours connecting to the wireless network on archlinux today. Finally I resorted to various tools in commandline. Here's how I do it. Make sure you run the following commands as root to avoid some permission errors.\n\n# Find out SSID of the target wifi\n\n```\niw dev \"your_interface\" scan | less\n```\n\nReplace *your_interface* with your own one, usually it's *wlp3s0* or *wlan0*. You can run `ifconfig` to find out the name of your interface\n\nYou will get something like\n\n```\nBSS fc:d7:33:59:74:74(on wlp3s0) -- associated\n        TSF: 85505115422 usec (0d, 23:45:05)\n        freq: 2412\n        beacon interval: 100 TUs\n        capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)\n        signal: -54.00 dBm\n        last seen: 136 ms ago\n        Information elements from Probe Response frame:\n        SSID: TP-LINK_7474\n        Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 \n\t\t...\n```\nThe SSID is something after *SSID*. It's *TP-LINK_7474* in my case.\n\n# Association\n\nAfter finding out your SSID, you would need to connect to it. There are two cases here, one is when there's no encryption and one is when *WPA/WPA2* is enabled. Find the case that suits you most.\n\n## No Encryption\n\nThis is pretty easy, you only need one line here.\n\n```\niw dev wlan0 connect \"your_essid\"\n```\n\n*your_essid* is the name of the network you found out before, such as *TP-LINK_7474*\n\nThen you will need to [Get an IP address](#Get-IP-Address)\n\n## WPA/WPA2\n\nYou have a lot of work to be done here. First create a new file `/etc/wpa_supplicant/wpa_supplicant.conf`. Type in the following contents and save it.\n\n```\nctrl_interface=/var/run/wpa_supplicant\nupdate_config=1\n```\n\nGenerate passphrase and save it to the above file. Replace *your_SSID* and *your_key* with your own ones.\n\n```\nwpa_passphrase \"your_SSID\" \"your_key\" >> /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nCheck if wpa_supplicant is running.\n\n```\nps -aux|grep wpa_supplicant\n```\n\nIf it's running, just as follows\n\n```\nroot     21108  0.0  0.0  43488  3260 ?        Ss   20:01   0:00 wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\nKill the process, and remove `/var/run/wpa_supplicant/` if it exists\n\n```\nkill 21108\nrm /var/run/wpa_supplicant -rf\n```\n\nIf it's not running or you've killed the running one, run the following command to start `wpa_supplicant`.\n\n```\nwpa_supplicant -B -i \"your_interface\" -c /etc/wpa_supplicant/wpa_supplicant.conf\n```\n\n# Get IP Address\n\nAfter connect to the network, you need to get an IP using `dhcpcd`\n\n```\ndhcpcd wlp3s0\n```\n\nWait for several seconds. If everything went smoothly, you would be connected to the network successfully.\n","slug":"connect-to-wifi-via-commandline-on-arch","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqeb004t8arfr7mjnbn7","content":"<p>I just spent hours connecting to the wireless network on archlinux today. Finally I resorted to various tools in commandline. Here’s how I do it. Make sure you run the following commands as root to avoid some permission errors.</p>\n<h1 id=\"Find-out-SSID-of-the-target-wifi\"><a href=\"#Find-out-SSID-of-the-target-wifi\" class=\"headerlink\" title=\"Find out SSID of the target wifi\"></a>Find out SSID of the target wifi</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iw dev &quot;your_interface&quot; scan | less</div></pre></td></tr></table></figure>\n<p>Replace <em>your_interface</em> with your own one, usually it’s <em>wlp3s0</em> or <em>wlan0</em>. You can run <code>ifconfig</code> to find out the name of your interface</p>\n<p>You will get something like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">BSS fc:d7:33:59:74:74(on wlp3s0) -- associated</div><div class=\"line\">        TSF: 85505115422 usec (0d, 23:45:05)</div><div class=\"line\">        freq: 2412</div><div class=\"line\">        beacon interval: 100 TUs</div><div class=\"line\">        capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)</div><div class=\"line\">        signal: -54.00 dBm</div><div class=\"line\">        last seen: 136 ms ago</div><div class=\"line\">        Information elements from Probe Response frame:</div><div class=\"line\">        SSID: TP-LINK_7474</div><div class=\"line\">        Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 </div><div class=\"line\">\t\t...</div></pre></td></tr></table></figure>\n<p>The SSID is something after <em>SSID</em>. It’s <em>TP-LINK_7474</em> in my case.</p>\n<h1 id=\"Association\"><a href=\"#Association\" class=\"headerlink\" title=\"Association\"></a>Association</h1><p>After finding out your SSID, you would need to connect to it. There are two cases here, one is when there’s no encryption and one is when <em>WPA/WPA2</em> is enabled. Find the case that suits you most.</p>\n<h2 id=\"No-Encryption\"><a href=\"#No-Encryption\" class=\"headerlink\" title=\"No Encryption\"></a>No Encryption</h2><p>This is pretty easy, you only need one line here.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iw dev wlan0 connect &quot;your_essid&quot;</div></pre></td></tr></table></figure>\n<p><em>your_essid</em> is the name of the network you found out before, such as <em>TP-LINK_7474</em></p>\n<p>Then you will need to <a href=\"#Get-IP-Address\">Get an IP address</a></p>\n<h2 id=\"WPA-WPA2\"><a href=\"#WPA-WPA2\" class=\"headerlink\" title=\"WPA/WPA2\"></a>WPA/WPA2</h2><p>You have a lot of work to be done here. First create a new file <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>. Type in the following contents and save it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl_interface=/var/run/wpa_supplicant</div><div class=\"line\">update_config=1</div></pre></td></tr></table></figure>\n<p>Generate passphrase and save it to the above file. Replace <em>your_SSID</em> and <em>your_key</em> with your own ones.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wpa_passphrase &quot;your_SSID&quot; &quot;your_key&quot; &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<p>Check if wpa_supplicant is running.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux|grep wpa_supplicant</div></pre></td></tr></table></figure>\n<p>If it’s running, just as follows</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     21108  0.0  0.0  43488  3260 ?        Ss   20:01   0:00 wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<p>Kill the process, and remove <code>/var/run/wpa_supplicant/</code> if it exists</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 21108</div><div class=\"line\">rm /var/run/wpa_supplicant -rf</div></pre></td></tr></table></figure>\n<p>If it’s not running or you’ve killed the running one, run the following command to start <code>wpa_supplicant</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wpa_supplicant -B -i &quot;your_interface&quot; -c /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<h1 id=\"Get-IP-Address\"><a href=\"#Get-IP-Address\" class=\"headerlink\" title=\"Get IP Address\"></a>Get IP Address</h1><p>After connect to the network, you need to get an IP using <code>dhcpcd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dhcpcd wlp3s0</div></pre></td></tr></table></figure>\n<p>Wait for several seconds. If everything went smoothly, you would be connected to the network successfully.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I just spent hours connecting to the wireless network on archlinux today. Finally I resorted to various tools in commandline. Here’s how I do it. Make sure you run the following commands as root to avoid some permission errors.</p>\n<h1 id=\"Find-out-SSID-of-the-target-wifi\"><a href=\"#Find-out-SSID-of-the-target-wifi\" class=\"headerlink\" title=\"Find out SSID of the target wifi\"></a>Find out SSID of the target wifi</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iw dev &quot;your_interface&quot; scan | less</div></pre></td></tr></table></figure>\n<p>Replace <em>your_interface</em> with your own one, usually it’s <em>wlp3s0</em> or <em>wlan0</em>. You can run <code>ifconfig</code> to find out the name of your interface</p>\n<p>You will get something like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">BSS fc:d7:33:59:74:74(on wlp3s0) -- associated</div><div class=\"line\">        TSF: 85505115422 usec (0d, 23:45:05)</div><div class=\"line\">        freq: 2412</div><div class=\"line\">        beacon interval: 100 TUs</div><div class=\"line\">        capability: ESS Privacy ShortPreamble ShortSlotTime (0x0431)</div><div class=\"line\">        signal: -54.00 dBm</div><div class=\"line\">        last seen: 136 ms ago</div><div class=\"line\">        Information elements from Probe Response frame:</div><div class=\"line\">        SSID: TP-LINK_7474</div><div class=\"line\">        Supported rates: 1.0* 2.0* 5.5* 11.0* 6.0 9.0 12.0 18.0 </div><div class=\"line\">\t\t...</div></pre></td></tr></table></figure>\n<p>The SSID is something after <em>SSID</em>. It’s <em>TP-LINK_7474</em> in my case.</p>\n<h1 id=\"Association\"><a href=\"#Association\" class=\"headerlink\" title=\"Association\"></a>Association</h1><p>After finding out your SSID, you would need to connect to it. There are two cases here, one is when there’s no encryption and one is when <em>WPA/WPA2</em> is enabled. Find the case that suits you most.</p>\n<h2 id=\"No-Encryption\"><a href=\"#No-Encryption\" class=\"headerlink\" title=\"No Encryption\"></a>No Encryption</h2><p>This is pretty easy, you only need one line here.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">iw dev wlan0 connect &quot;your_essid&quot;</div></pre></td></tr></table></figure>\n<p><em>your_essid</em> is the name of the network you found out before, such as <em>TP-LINK_7474</em></p>\n<p>Then you will need to <a href=\"#Get-IP-Address\">Get an IP address</a></p>\n<h2 id=\"WPA-WPA2\"><a href=\"#WPA-WPA2\" class=\"headerlink\" title=\"WPA/WPA2\"></a>WPA/WPA2</h2><p>You have a lot of work to be done here. First create a new file <code>/etc/wpa_supplicant/wpa_supplicant.conf</code>. Type in the following contents and save it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ctrl_interface=/var/run/wpa_supplicant</div><div class=\"line\">update_config=1</div></pre></td></tr></table></figure>\n<p>Generate passphrase and save it to the above file. Replace <em>your_SSID</em> and <em>your_key</em> with your own ones.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wpa_passphrase &quot;your_SSID&quot; &quot;your_key&quot; &gt;&gt; /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<p>Check if wpa_supplicant is running.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -aux|grep wpa_supplicant</div></pre></td></tr></table></figure>\n<p>If it’s running, just as follows</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">root     21108  0.0  0.0  43488  3260 ?        Ss   20:01   0:00 wpa_supplicant -i wlp3s0 -B -c /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<p>Kill the process, and remove <code>/var/run/wpa_supplicant/</code> if it exists</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill 21108</div><div class=\"line\">rm /var/run/wpa_supplicant -rf</div></pre></td></tr></table></figure>\n<p>If it’s not running or you’ve killed the running one, run the following command to start <code>wpa_supplicant</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wpa_supplicant -B -i &quot;your_interface&quot; -c /etc/wpa_supplicant/wpa_supplicant.conf</div></pre></td></tr></table></figure>\n<h1 id=\"Get-IP-Address\"><a href=\"#Get-IP-Address\" class=\"headerlink\" title=\"Get IP Address\"></a>Get IP Address</h1><p>After connect to the network, you need to get an IP using <code>dhcpcd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dhcpcd wlp3s0</div></pre></td></tr></table></figure>\n<p>Wait for several seconds. If everything went smoothly, you would be connected to the network successfully.</p>\n"},{"title":"django.db.utils.IntegrityError: duplicate key value violates unique constraint","date":"2016-01-10T05:23:57.000Z","thumbnail":"http://blog.djangostars.com/content/images/2015/12/maxresdefault.jpg","_content":"\n# Error\nRecently I ran into a problem, which bugged me for days. I'm using django and spirit to build a website, there's a model called category in spirit, which is like this\n\n```python\nclass Category(models.Model):\n\t\t...\n    title = models.CharField(_(\"title\"), max_length=75)\n    description = models.CharField(_(\"description\"), max_length=255, blank=True)\n\t\t...\n```\n\nThe only thing you need to know is that, there's no such thing as an `id` in the model, which means django and postgresql will take care of the primary key. It seems fine, right? Until I ran a test, which created a category:\n\n```python\nclass UserViewTest(TestCase):\n\n    def setUp(self):\n        cache.clear()\n        self.category = utils.create_category()\n\n    def simple_test(self):\n        self.assertEqual(1, 1)\n```\n\nThis is a very simple test, `create_category` is only responsible for creating a brand new category. Everything should work fine. Then I got an error:\n\n```\ndjango.db.utils.IntegrityError: duplicate key value violates unique constraint \"spirit_category_category_pkey\"\nDETAIL:  Key (id)=(1) already exists.\n```\n\n# Try to find the reason\nIs there an already existing `Key (id)=(1)`? I leafed through the migration file, and found this:\n\n```python\nif not Category.objects.filter(pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK).exists():\n\t\tCategory.objects.create(\n\t\t\t\tpk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,\n\t\t\t\ttitle=\"Private\",\n\t\t\t\tslug=\"private\",\n\t\t\t\tis_private=True\n\t\t)\n\nif not Category.objects.filter(pk=settings.ST_UNCATEGORIZED_CATEGORY_PK).exists():\n\t\tCategory.objects.create(\n\t\t\t\tpk=settings.ST_UNCATEGORIZED_CATEGORY_PK,\n\t\t\t\ttitle=\"Uncategorized\",\n\t\t\t\tslug=\"uncategorized\"\n\t\t)\n```\n\nSo django will create two default categories due to the migration file. OK, that's fine. But why did postgresql insert a record with a `Key (id)=(1)` instead of `Key (id)=(3)`? Maybe it's django's fault? Maybe django was trying to insert a specified record with `Key (id)=(1)`? To find out the reason, I debugged all the way to this part:\n\n```python\ndef execute(self, sql, params=None):\n\tself.db.validate_no_broken_transaction()\n\twith self.db.wrap_database_errors:\n\t\tif params is None:\n\t\t\treturn self.cursor.execute(sql)\n\t\telse:\n\t\t\treturn self.cursor.execute(sql, params)\n```\n\nThis was where the insert happened. I checked the sql and params, which was:\n\n```python\nsql = 'INSERT INTO \"spirit_category_category\" (\"parent_id\", \"title\", \"slug\", \"description\", \"is_global\", \"is_closed\", \"is_removed\", \"is_private\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING \"spirit_category_category\".\"id\"'\nparams = (None, 'category_foo2', 'categoryfoo2', '', True, False, False, False)\n```\n\nSo django didn't include the `id` part, but why didn't postgresql auto increment the `id`? After searching online for a long time, I found [this website](http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/). I followed its process and ran the following code to find out the `last_value` of the `id` sequence(the primary key is usually a sequence in postgresql if you use django to generate the tables automatically)\n\n```SQL\nSELECT last_value from spirit_category_category_id_seq;\n```\n\nAnd the answer I got was `1`. It's ONE! What does it mean? It means the next `id` to be generated will be `1`. This is so not what we want. This is why the error happened.\n\n# Fix the problem\nLet's alter it to `3`.\n\n```SQL\nalter sequence spirit_category_category_id_seq restart with 3\n```\n\nContinue the test, and you will pass it. Wait, this is a test, right? So the next time you run the test, it will create all kinds of brand new tables again in order to start a fresh test. So it's meaningless to alter the sequence, because it would be flushed. Don't believe it? Run the test again, and it will fail.\n\n# Fix it for a test\nSo how to fix this? Just remove the line which `id` was specified in the migration file, i.e. let postgresql handle the primary key for us. Don't insert the primary key manually, don't try to calculate the next avaible id number, you will mess it up. In my case, I just need to remove the following two lines in file `0002_auto_20150728_0442.py`\n\n```python\npk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,\npk=settings.ST_UNCATEGORIZED_CATEGORY_PK,\n```\n\nRun the test again, it will pass.\n\n# Conclusion\nIt's a long story, I've debugged for days to find out the reason, but it's totally fine. Though the solution is quite simple, I have to fight all the way to find. During the process, I read a lot of django source code, I learned a lot of python features. I learned how postgresql's sequence worked. It's very helpful to me.\n","source":"_posts/django-db-utils-IntegrityError-duplicate-key-value-violates-unique-constraint.md","raw":"title: 'django.db.utils.IntegrityError: duplicate key value violates unique constraint'\ndate: 2016-01-10 13:23:57\ntags: [python, django]\ncategories: Coding\nthumbnail: http://blog.djangostars.com/content/images/2015/12/maxresdefault.jpg\n---\n\n# Error\nRecently I ran into a problem, which bugged me for days. I'm using django and spirit to build a website, there's a model called category in spirit, which is like this\n\n```python\nclass Category(models.Model):\n\t\t...\n    title = models.CharField(_(\"title\"), max_length=75)\n    description = models.CharField(_(\"description\"), max_length=255, blank=True)\n\t\t...\n```\n\nThe only thing you need to know is that, there's no such thing as an `id` in the model, which means django and postgresql will take care of the primary key. It seems fine, right? Until I ran a test, which created a category:\n\n```python\nclass UserViewTest(TestCase):\n\n    def setUp(self):\n        cache.clear()\n        self.category = utils.create_category()\n\n    def simple_test(self):\n        self.assertEqual(1, 1)\n```\n\nThis is a very simple test, `create_category` is only responsible for creating a brand new category. Everything should work fine. Then I got an error:\n\n```\ndjango.db.utils.IntegrityError: duplicate key value violates unique constraint \"spirit_category_category_pkey\"\nDETAIL:  Key (id)=(1) already exists.\n```\n\n# Try to find the reason\nIs there an already existing `Key (id)=(1)`? I leafed through the migration file, and found this:\n\n```python\nif not Category.objects.filter(pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK).exists():\n\t\tCategory.objects.create(\n\t\t\t\tpk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,\n\t\t\t\ttitle=\"Private\",\n\t\t\t\tslug=\"private\",\n\t\t\t\tis_private=True\n\t\t)\n\nif not Category.objects.filter(pk=settings.ST_UNCATEGORIZED_CATEGORY_PK).exists():\n\t\tCategory.objects.create(\n\t\t\t\tpk=settings.ST_UNCATEGORIZED_CATEGORY_PK,\n\t\t\t\ttitle=\"Uncategorized\",\n\t\t\t\tslug=\"uncategorized\"\n\t\t)\n```\n\nSo django will create two default categories due to the migration file. OK, that's fine. But why did postgresql insert a record with a `Key (id)=(1)` instead of `Key (id)=(3)`? Maybe it's django's fault? Maybe django was trying to insert a specified record with `Key (id)=(1)`? To find out the reason, I debugged all the way to this part:\n\n```python\ndef execute(self, sql, params=None):\n\tself.db.validate_no_broken_transaction()\n\twith self.db.wrap_database_errors:\n\t\tif params is None:\n\t\t\treturn self.cursor.execute(sql)\n\t\telse:\n\t\t\treturn self.cursor.execute(sql, params)\n```\n\nThis was where the insert happened. I checked the sql and params, which was:\n\n```python\nsql = 'INSERT INTO \"spirit_category_category\" (\"parent_id\", \"title\", \"slug\", \"description\", \"is_global\", \"is_closed\", \"is_removed\", \"is_private\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING \"spirit_category_category\".\"id\"'\nparams = (None, 'category_foo2', 'categoryfoo2', '', True, False, False, False)\n```\n\nSo django didn't include the `id` part, but why didn't postgresql auto increment the `id`? After searching online for a long time, I found [this website](http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/). I followed its process and ran the following code to find out the `last_value` of the `id` sequence(the primary key is usually a sequence in postgresql if you use django to generate the tables automatically)\n\n```SQL\nSELECT last_value from spirit_category_category_id_seq;\n```\n\nAnd the answer I got was `1`. It's ONE! What does it mean? It means the next `id` to be generated will be `1`. This is so not what we want. This is why the error happened.\n\n# Fix the problem\nLet's alter it to `3`.\n\n```SQL\nalter sequence spirit_category_category_id_seq restart with 3\n```\n\nContinue the test, and you will pass it. Wait, this is a test, right? So the next time you run the test, it will create all kinds of brand new tables again in order to start a fresh test. So it's meaningless to alter the sequence, because it would be flushed. Don't believe it? Run the test again, and it will fail.\n\n# Fix it for a test\nSo how to fix this? Just remove the line which `id` was specified in the migration file, i.e. let postgresql handle the primary key for us. Don't insert the primary key manually, don't try to calculate the next avaible id number, you will mess it up. In my case, I just need to remove the following two lines in file `0002_auto_20150728_0442.py`\n\n```python\npk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,\npk=settings.ST_UNCATEGORIZED_CATEGORY_PK,\n```\n\nRun the test again, it will pass.\n\n# Conclusion\nIt's a long story, I've debugged for days to find out the reason, but it's totally fine. Though the solution is quite simple, I have to fight all the way to find. During the process, I read a lot of django source code, I learned a lot of python features. I learned how postgresql's sequence worked. It's very helpful to me.\n","slug":"django-db-utils-IntegrityError-duplicate-key-value-violates-unique-constraint","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqec004w8arfarumobij","content":"<h1 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h1><p>Recently I ran into a problem, which bugged me for days. I’m using django and spirit to build a website, there’s a model called category in spirit, which is like this</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Category</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">\t\t...</div><div class=\"line\">    title = models.CharField(_(<span class=\"string\">\"title\"</span>), max_length=<span class=\"number\">75</span>)</div><div class=\"line\">    description = models.CharField(_(<span class=\"string\">\"description\"</span>), max_length=<span class=\"number\">255</span>, blank=<span class=\"keyword\">True</span>)</div><div class=\"line\">\t\t...</div></pre></td></tr></table></figure>\n<p>The only thing you need to know is that, there’s no such thing as an <code>id</code> in the model, which means django and postgresql will take care of the primary key. It seems fine, right? Until I ran a test, which created a category:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewTest</span><span class=\"params\">(TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cache.clear()</div><div class=\"line\">        self.category = utils.create_category()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_test</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<p>This is a very simple test, <code>create_category</code> is only responsible for creating a brand new category. Everything should work fine. Then I got an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;spirit_category_category_pkey&quot;</div><div class=\"line\">DETAIL:  Key (id)=(1) already exists.</div></pre></td></tr></table></figure>\n<h1 id=\"Try-to-find-the-reason\"><a href=\"#Try-to-find-the-reason\" class=\"headerlink\" title=\"Try to find the reason\"></a>Try to find the reason</h1><p>Is there an already existing <code>Key (id)=(1)</code>? I leafed through the migration file, and found this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> Category.objects.filter(pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK).exists():</div><div class=\"line\">\t\tCategory.objects.create(</div><div class=\"line\">\t\t\t\tpk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,</div><div class=\"line\">\t\t\t\ttitle=<span class=\"string\">\"Private\"</span>,</div><div class=\"line\">\t\t\t\tslug=<span class=\"string\">\"private\"</span>,</div><div class=\"line\">\t\t\t\tis_private=<span class=\"keyword\">True</span></div><div class=\"line\">\t\t)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> Category.objects.filter(pk=settings.ST_UNCATEGORIZED_CATEGORY_PK).exists():</div><div class=\"line\">\t\tCategory.objects.create(</div><div class=\"line\">\t\t\t\tpk=settings.ST_UNCATEGORIZED_CATEGORY_PK,</div><div class=\"line\">\t\t\t\ttitle=<span class=\"string\">\"Uncategorized\"</span>,</div><div class=\"line\">\t\t\t\tslug=<span class=\"string\">\"uncategorized\"</span></div><div class=\"line\">\t\t)</div></pre></td></tr></table></figure>\n<p>So django will create two default categories due to the migration file. OK, that’s fine. But why did postgresql insert a record with a <code>Key (id)=(1)</code> instead of <code>Key (id)=(3)</code>? Maybe it’s django’s fault? Maybe django was trying to insert a specified record with <code>Key (id)=(1)</code>? To find out the reason, I debugged all the way to this part:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(self, sql, params=None)</span>:</span></div><div class=\"line\">\tself.db.validate_no_broken_transaction()</div><div class=\"line\">\t<span class=\"keyword\">with</span> self.db.wrap_database_errors:</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> params <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.cursor.execute(sql)</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.cursor.execute(sql, params)</div></pre></td></tr></table></figure>\n<p>This was where the insert happened. I checked the sql and params, which was:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sql = <span class=\"string\">'INSERT INTO \"spirit_category_category\" (\"parent_id\", \"title\", \"slug\", \"description\", \"is_global\", \"is_closed\", \"is_removed\", \"is_private\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING \"spirit_category_category\".\"id\"'</span></div><div class=\"line\">params = (<span class=\"keyword\">None</span>, <span class=\"string\">'category_foo2'</span>, <span class=\"string\">'categoryfoo2'</span>, <span class=\"string\">''</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure>\n<p>So django didn’t include the <code>id</code> part, but why didn’t postgresql auto increment the <code>id</code>? After searching online for a long time, I found <a href=\"http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/\" target=\"_blank\" rel=\"external\">this website</a>. I followed its process and ran the following code to find out the <code>last_value</code> of the <code>id</code> sequence(the primary key is usually a sequence in postgresql if you use django to generate the tables automatically)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">last_value</span> <span class=\"keyword\">from</span> spirit_category_category_id_seq;</div></pre></td></tr></table></figure>\n<p>And the answer I got was <code>1</code>. It’s ONE! What does it mean? It means the next <code>id</code> to be generated will be <code>1</code>. This is so not what we want. This is why the error happened.</p>\n<h1 id=\"Fix-the-problem\"><a href=\"#Fix-the-problem\" class=\"headerlink\" title=\"Fix the problem\"></a>Fix the problem</h1><p>Let’s alter it to <code>3</code>.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">sequence</span> spirit_category_category_id_seq restart <span class=\"keyword\">with</span> <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>Continue the test, and you will pass it. Wait, this is a test, right? So the next time you run the test, it will create all kinds of brand new tables again in order to start a fresh test. So it’s meaningless to alter the sequence, because it would be flushed. Don’t believe it? Run the test again, and it will fail.</p>\n<h1 id=\"Fix-it-for-a-test\"><a href=\"#Fix-it-for-a-test\" class=\"headerlink\" title=\"Fix it for a test\"></a>Fix it for a test</h1><p>So how to fix this? Just remove the line which <code>id</code> was specified in the migration file, i.e. let postgresql handle the primary key for us. Don’t insert the primary key manually, don’t try to calculate the next avaible id number, you will mess it up. In my case, I just need to remove the following two lines in file <code>0002_auto_20150728_0442.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,</div><div class=\"line\">pk=settings.ST_UNCATEGORIZED_CATEGORY_PK,</div></pre></td></tr></table></figure>\n<p>Run the test again, it will pass.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>It’s a long story, I’ve debugged for days to find out the reason, but it’s totally fine. Though the solution is quite simple, I have to fight all the way to find. During the process, I read a lot of django source code, I learned a lot of python features. I learned how postgresql’s sequence worked. It’s very helpful to me.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h1><p>Recently I ran into a problem, which bugged me for days. I’m using django and spirit to build a website, there’s a model called category in spirit, which is like this</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Category</span><span class=\"params\">(models.Model)</span>:</span></div><div class=\"line\">\t\t...</div><div class=\"line\">    title = models.CharField(_(<span class=\"string\">\"title\"</span>), max_length=<span class=\"number\">75</span>)</div><div class=\"line\">    description = models.CharField(_(<span class=\"string\">\"description\"</span>), max_length=<span class=\"number\">255</span>, blank=<span class=\"keyword\">True</span>)</div><div class=\"line\">\t\t...</div></pre></td></tr></table></figure>\n<p>The only thing you need to know is that, there’s no such thing as an <code>id</code> in the model, which means django and postgresql will take care of the primary key. It seems fine, right? Until I ran a test, which created a category:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewTest</span><span class=\"params\">(TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        cache.clear()</div><div class=\"line\">        self.category = utils.create_category()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">simple_test</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.assertEqual(<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<p>This is a very simple test, <code>create_category</code> is only responsible for creating a brand new category. Everything should work fine. Then I got an error:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">django.db.utils.IntegrityError: duplicate key value violates unique constraint &quot;spirit_category_category_pkey&quot;</div><div class=\"line\">DETAIL:  Key (id)=(1) already exists.</div></pre></td></tr></table></figure>\n<h1 id=\"Try-to-find-the-reason\"><a href=\"#Try-to-find-the-reason\" class=\"headerlink\" title=\"Try to find the reason\"></a>Try to find the reason</h1><p>Is there an already existing <code>Key (id)=(1)</code>? I leafed through the migration file, and found this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> Category.objects.filter(pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK).exists():</div><div class=\"line\">\t\tCategory.objects.create(</div><div class=\"line\">\t\t\t\tpk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,</div><div class=\"line\">\t\t\t\ttitle=<span class=\"string\">\"Private\"</span>,</div><div class=\"line\">\t\t\t\tslug=<span class=\"string\">\"private\"</span>,</div><div class=\"line\">\t\t\t\tis_private=<span class=\"keyword\">True</span></div><div class=\"line\">\t\t)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> Category.objects.filter(pk=settings.ST_UNCATEGORIZED_CATEGORY_PK).exists():</div><div class=\"line\">\t\tCategory.objects.create(</div><div class=\"line\">\t\t\t\tpk=settings.ST_UNCATEGORIZED_CATEGORY_PK,</div><div class=\"line\">\t\t\t\ttitle=<span class=\"string\">\"Uncategorized\"</span>,</div><div class=\"line\">\t\t\t\tslug=<span class=\"string\">\"uncategorized\"</span></div><div class=\"line\">\t\t)</div></pre></td></tr></table></figure>\n<p>So django will create two default categories due to the migration file. OK, that’s fine. But why did postgresql insert a record with a <code>Key (id)=(1)</code> instead of <code>Key (id)=(3)</code>? Maybe it’s django’s fault? Maybe django was trying to insert a specified record with <code>Key (id)=(1)</code>? To find out the reason, I debugged all the way to this part:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(self, sql, params=None)</span>:</span></div><div class=\"line\">\tself.db.validate_no_broken_transaction()</div><div class=\"line\">\t<span class=\"keyword\">with</span> self.db.wrap_database_errors:</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> params <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.cursor.execute(sql)</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> self.cursor.execute(sql, params)</div></pre></td></tr></table></figure>\n<p>This was where the insert happened. I checked the sql and params, which was:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sql = <span class=\"string\">'INSERT INTO \"spirit_category_category\" (\"parent_id\", \"title\", \"slug\", \"description\", \"is_global\", \"is_closed\", \"is_removed\", \"is_private\") VALUES (%s, %s, %s, %s, %s, %s, %s, %s) RETURNING \"spirit_category_category\".\"id\"'</span></div><div class=\"line\">params = (<span class=\"keyword\">None</span>, <span class=\"string\">'category_foo2'</span>, <span class=\"string\">'categoryfoo2'</span>, <span class=\"string\">''</span>, <span class=\"keyword\">True</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>, <span class=\"keyword\">False</span>)</div></pre></td></tr></table></figure>\n<p>So django didn’t include the <code>id</code> part, but why didn’t postgresql auto increment the <code>id</code>? After searching online for a long time, I found <a href=\"http://centoshowtos.org/web-services/django-and-postgres-duplicate-key/\" target=\"_blank\" rel=\"external\">this website</a>. I followed its process and ran the following code to find out the <code>last_value</code> of the <code>id</code> sequence(the primary key is usually a sequence in postgresql if you use django to generate the tables automatically)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">last_value</span> <span class=\"keyword\">from</span> spirit_category_category_id_seq;</div></pre></td></tr></table></figure>\n<p>And the answer I got was <code>1</code>. It’s ONE! What does it mean? It means the next <code>id</code> to be generated will be <code>1</code>. This is so not what we want. This is why the error happened.</p>\n<h1 id=\"Fix-the-problem\"><a href=\"#Fix-the-problem\" class=\"headerlink\" title=\"Fix the problem\"></a>Fix the problem</h1><p>Let’s alter it to <code>3</code>.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">sequence</span> spirit_category_category_id_seq restart <span class=\"keyword\">with</span> <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n<p>Continue the test, and you will pass it. Wait, this is a test, right? So the next time you run the test, it will create all kinds of brand new tables again in order to start a fresh test. So it’s meaningless to alter the sequence, because it would be flushed. Don’t believe it? Run the test again, and it will fail.</p>\n<h1 id=\"Fix-it-for-a-test\"><a href=\"#Fix-it-for-a-test\" class=\"headerlink\" title=\"Fix it for a test\"></a>Fix it for a test</h1><p>So how to fix this? Just remove the line which <code>id</code> was specified in the migration file, i.e. let postgresql handle the primary key for us. Don’t insert the primary key manually, don’t try to calculate the next avaible id number, you will mess it up. In my case, I just need to remove the following two lines in file <code>0002_auto_20150728_0442.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">pk=settings.ST_TOPIC_PRIVATE_CATEGORY_PK,</div><div class=\"line\">pk=settings.ST_UNCATEGORIZED_CATEGORY_PK,</div></pre></td></tr></table></figure>\n<p>Run the test again, it will pass.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>It’s a long story, I’ve debugged for days to find out the reason, but it’s totally fine. Though the solution is quite simple, I have to fight all the way to find. During the process, I read a lot of django source code, I learned a lot of python features. I learned how postgresql’s sequence worked. It’s very helpful to me.</p>\n"},{"title":"install flash plugin in firefox on arch linux","date":"2016-06-14T23:06:33.000Z","thumbnail":"https://www.mozilla.org/media/img/firefox/firefox-256.e2c1fc556816.jpg","_content":"\nFirst, install `flashplugin`.\n\n``` shell\nsudo pacman -S flashplugin\n```\n\nThen if you launch firefox, you will find out that there's no sound when playing flash in it. Launch it from the terminal, you will find out the reason.\n\n``` shell\nFailed to open VDPAU backend libvdpau_va_gl.so: cannot open shared object file: No such file or directory\n```\n\nSo you need to install `libvdpau-va-gl`\n\n``` shell\nsudo pacman -S libvdpau-va-gl\n```\n\nLaunch again, everything is fine now.\n","source":"_posts/install-flash-plugin-in-firefox-on-arch-linux.md","raw":"title: install flash plugin in firefox on arch linux\ndate: 2016-06-15 07:06:33\ntags: [linux, firefox]\ncategories: Coding\nthumbnail: https://www.mozilla.org/media/img/firefox/firefox-256.e2c1fc556816.jpg\n---\n\nFirst, install `flashplugin`.\n\n``` shell\nsudo pacman -S flashplugin\n```\n\nThen if you launch firefox, you will find out that there's no sound when playing flash in it. Launch it from the terminal, you will find out the reason.\n\n``` shell\nFailed to open VDPAU backend libvdpau_va_gl.so: cannot open shared object file: No such file or directory\n```\n\nSo you need to install `libvdpau-va-gl`\n\n``` shell\nsudo pacman -S libvdpau-va-gl\n```\n\nLaunch again, everything is fine now.\n","slug":"install-flash-plugin-in-firefox-on-arch-linux","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqed004y8arfo4mmr88b","content":"<p>First, install <code>flashplugin</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S flashplugin</div></pre></td></tr></table></figure>\n<p>Then if you launch firefox, you will find out that there’s no sound when playing flash in it. Launch it from the terminal, you will find out the reason.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Failed to open VDPAU backend libvdpau_va_gl.so: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>\n<p>So you need to install <code>libvdpau-va-gl</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S libvdpau-va-gl</div></pre></td></tr></table></figure>\n<p>Launch again, everything is fine now.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>First, install <code>flashplugin</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S flashplugin</div></pre></td></tr></table></figure>\n<p>Then if you launch firefox, you will find out that there’s no sound when playing flash in it. Launch it from the terminal, you will find out the reason.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Failed to open VDPAU backend libvdpau_va_gl.so: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>\n<p>So you need to install <code>libvdpau-va-gl</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pacman -S libvdpau-va-gl</div></pre></td></tr></table></figure>\n<p>Launch again, everything is fine now.</p>\n"},{"title":"Write Machine Learning Algorithms From Scratch: Random Forest","date":"2017-12-23T02:14:33.000Z","thumbnail":"/images/forest.jpg","_content":"\n# Introduction\n\nRandom Forest is a supervised classification algorithm, it can classify data according to various given features.\n\nAssuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.\n\n| Person | Weight(kg) | Height(meter) | 100m-race time(second) | Gender |\n| ------ | ---------- | ------------- | ---------------------- | ------ |\n| A      | 50         | 1.62          | 18                     | Female |\n| B      | 70         | 1.81          | 16                     | Male   |\n| C      | 60         | 1.72          | 15                     | Female |\n| D      | 70         | 1.71          | 19                     | Male   |\n| E      | 52         | 1.69          | 17                     | Female |\n\nWe can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person's gender using the trained model.\n\n| Weight(kg) | Height(meter) | 100m-race time(second) |\n| ---------- | ------------- | ---------------------- |\n| 60         | 1.62          | 16                     |\n\nNotice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won't dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.\n\nAll the code mentioned in the post is available for download. So please refer to the code if there's anything unclear in the post.\n\n# Execution\n\nLet's first run the code that we will write, so we could know what it's like.\n\n1. Install Python3\n\n2. Download code\n\n   ```bash\n   git clone git@github.com:searene/demos.git && cd demos/RandomForest\n   ```\n\n3. Download Dependencies\n\n   ```bash\n   pip install numpy pandas\n   ```\n\n4. Execution\n\n   ```bash\n   python evaluate_random_forest.py\n   Average cross validation accuracy for 1 trees: 0.6887700534759359\n   Test accuracy for 1 trees: 0.6190476190476191\n   Average cross validation accuracy for 3 trees: 0.6898395721925135\n   Test accuracy for 3 trees: 0.8571428571428571\n   Average cross validation accuracy for 10 trees: 0.6983957219251338\n   Test accuracy for 10 trees: 0.7619047619047619\n   ```\n\nSo you can see that, we get the highest accuracy with 3 trees, which is about 85%.\n\n# How It Works\n\nRandom Forest is rather complex, so let's use an example.\n\n| Person | Weight(kg) | Height(meter) | 100m-race time(second) | Gender |\n| ------ | ---------- | ------------- | ---------------------- | ------ |\n| A      | 50         | 1.62          | 18                     | Female |\n| B      | 70         | 1.81          | 16                     | Male   |\n| C      | 60         | 1.72          | 15                     | Female |\n| D      | 70         | 1.71          | 19                     | Male   |\n| E      | 52         | 1.69          | 17                     | Female |\n\nWe mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.\n\n1. Based on D's height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don't think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).\n\n   ```\n        A, B, C, D, E\n       /             \\\n      /               \\\n   A, D, E           B, C\n   ```\n\n2. For group `A, D, E`, based on A's 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group `B, C`. Based on C's height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.\n\n   ```\n          A, B, C, D, E\n         /             \\\n        /               \\\n      B, C            A, D, E\n     /    \\          /      \\\n    /      \\        /        \\\n   C        B     A, E        D\n   ```\n\n3. Now only group `A, E` could be further split. So let's base on A's weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.\n\n   ```\n             A, B, C, D, E\n            /             \\\n           /               \\\n         B, C            A, D, E\n        /    \\          /      \\\n       /      \\        /        \\\n   C(F)       B(M)   A, E       D(M)\n                     /   \\\n                    /     \\\n                  A(F)   E(M)\n   ```\n\n   That's it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person's gender:\n\n| Weight(kg) | Height(meter) | 100m-race time(second) |\n| ---------- | ------------- | ---------------------- |\n| 60         | 1.62          | 16                     |\n\n   Just like training, this person's height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group `B, C` in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is `Female`. This is the whole process of prediction.\n\n   # The Principle To Split A Tree Into Two Groups\n\n   In the above example, we first split the whole data into two groups according to D's height, then continue to split them according to D's height, A's weight, etc. What's going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it's true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A's weight, we will get two groups of data: `A` and `B, C, D, E`. Let's call them group1 and group2 respectively, then we can calculate gini index according to the following equation.\n\n   <div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\\times$ (the number of people in group2 / the total number of people in both groups)</div>\n\n   So the gini index should be calculated as follows if we split the data based on A's weight.\n$$\n   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4\n$$\n\n   We can also split the data based on A's height, to get another gini index.\n$$\n   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4\n$$\nWe can also split based on A's 100m-race time, B's weight, B's height, ..., E's 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D's weight if we got the smallest gini index based on D's weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it's more about the math rather than the implementation.\n\nThe code to calculate gini index is as follows.\n\n   ```python\n   def get_gini_index(left, right, categories):\n       gini_index = 0\n       for group in left, right:\n           if len(group) == 0:\n               continue\n           score = 0\n           for category in categories:\n               p = [row[-1] for row in group].count(category) / len(group)\n               score += p * p\n           gini_index += (1 - score) * (len(group) / len(left + right))\n       return gini_index\n   ```\n   We use the above piece of code in this way:\n\n   ```python\n   A = [50, 1.62, 18, 'Female']\n   B = [70, 1.81, 16, 'Male']\n   C = [60, 1.72, 15, 'Female']\n   D = [70, 1.71, 19, 'Male']\n   E = [52, 1.69, 17, 'Female']\n   left = [A]\n   right = [B, C, D, E]\n   gini_index = get_gini_index(left, right, ['Male', 'Female'])\n   print(gini_index) # 0.4\n   ```\n\n# Use multiple trees to boost the accuracy\n\nYou may wonder why it's called the random forest when we only used one tree? Good question! In fact, we shouldn't only use one tree. The correct process is as follows.\n\n1. Choose 90% of the data randomly for training.\n2. Train those data, i.e. the process of building a tree shown above.\n3. Use this tree to predict, get the prediction `x`.\n4. Repeat the above three steps, build another tree, get another prediction `y`.\n5. Repeat the first three steps again, get another prediction `z`.\n6. Choose the one that appears the most in `x, y, z`, which should be our final prediction, return it.\n\nSo you should know why it's call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.\n\nThe purpose of building multiple trees is to avoid overfitting. From Wikipedia:\n\n> In statistics, **overfitting** is \"the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably\".\n\n# Code\n\nNow that we know how it works, it's time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let's review them together.\n\n1. min_size: when the number of data in some node is less than `min_size`, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.\n2. max_depth: The maximum depth of a tree, further splitting is not allowed when `max_depth` is exceeded, the value of the node is determined by the category that appears the most in the group.\n3. n_features: The number of features chosen to build the current tree. In case if you don't know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose `n_features` features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.\n\nCode to implement random forest is as follows.\n\n```python\nimport random\n\n\nclass Node:\n    def __init__(self, data):\n\n        # all the data that is held by this node\n        self.data = data\n\n        # left child node\n        self.left = None\n\n        # right child node\n        self.right = None\n\n        # category if the current node is a leaf node\n        self.category = None\n\n        # a tuple: (row, column), representing the point where we split the data\n        # into the left/right node\n        self.split_point = None\n\n\ndef build_model(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate):\n    trees = []\n    for i in range(n_trees):\n        random.shuffle(train_data)\n        n_samples = int(len(train_data) * n_sample_rate)\n        tree = build_tree(train_data[: n_samples], 1, max_depth, min_size, n_features)\n        trees.append(tree)\n    return trees\n\n\ndef predict_with_single_tree(tree, row):\n    if tree.category is not None:\n        return tree.category\n    x, y = tree.split_point\n    split_value = tree.data[x][y]\n    if row[y] <= split_value:\n        return predict_with_single_tree(tree.left, row)\n    else:\n        return predict_with_single_tree(tree.right, row)\n\n\ndef predict(trees, row):\n    prediction = []\n    for tree in trees:\n        prediction.append(predict_with_single_tree(tree, row))\n    return max(set(prediction), key=prediction.count)\n\n\ndef get_most_common_category(data):\n    categories = [row[-1] for row in data]\n    return max(set(categories), key=categories.count)\n\n\ndef build_tree(train_data, depth, max_depth, min_size, n_features):\n    root = Node(train_data)\n    x, y = get_split_point(train_data, n_features)\n    left_group, right_group = split(train_data, x, y)\n    if len(left_group) == 0 or len(right_group) == 0 or depth >= max_depth:\n        root.category = get_most_common_category(left_group + right_group)\n    else:\n        root.split_point = (x, y)\n        if len(left_group) < min_size:\n            root.left = Node(left_group)\n            root.left.category = get_most_common_category(left_group)\n        else:\n            root.left = build_tree(left_group, depth + 1, max_depth, min_size, n_features)\n\n        if len(right_group) < min_size:\n            root.right = Node(right_group)\n            root.right.category = get_most_common_category(right_group)\n        else:\n            root.right = build_tree(right_group, depth + 1, max_depth, min_size, n_features)\n    return root\n\n\ndef get_features(n_selected_features, n_total_features):\n    features = [i for i in range(n_total_features)]\n    random.shuffle(features)\n    return features[:n_selected_features]\n\n\ndef get_categories(data):\n    return set([row[-1] for row in data])\n\n\ndef get_split_point(data, n_features):\n    n_total_features = len(data[0]) - 1\n    features = get_features(n_features, n_total_features)\n    categories = get_categories(data)\n    x, y, gini_index = None, None, None\n    for index in range(len(data)):\n        for feature in features:\n            left, right = split(data, index, feature)\n            current_gini_index = get_gini_index(left, right, categories)\n            if gini_index is None or current_gini_index < gini_index:\n                x, y, gini_index = index, feature, current_gini_index\n    return x, y\n\n\ndef get_gini_index(left, right, categories):\n    gini_index = 0\n    for group in left, right:\n        if len(group) == 0:\n            continue\n        score = 0\n        for category in categories:\n            p = [row[-1] for row in group].count(category) / len(group)\n            score += p * p\n        gini_index += (1 - score) * (len(group) / len(left + right))\n    return gini_index\n\n\ndef split(data, x, y):\n    split_value = data[x][y]\n    left, right = [], []\n    for row in data:\n        if row[y] <= split_value:\n            left.append(row)\n        else:\n            right.append(row)\n    return left, right\n\n```\n\nSo how to use this piece of code? Let's take [Sonar](https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29), which is real-life data as an example(You can have a glimpse of its contents in [here](https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv)). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let's load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.\n\nThe code is as follows.\n\n```python\nimport random\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\n\nfrom random_forest import build_model, predict\n\n\nclass CrossValidationSplitter:\n    def __init__(self, data, k_fold):\n        self.data = data\n        self.k_fold = k_fold\n        self.n_iteration = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.n_iteration >= self.k_fold:\n            raise StopIteration\n        self.n_iteration += 1\n        return self.__load_data()\n\n    def __load_data(self):\n        n_train_data = (1 / self.k_fold) * len(self.data)\n        data_copy = self.data[:]\n        train_data = []\n        while len(train_data) < n_train_data:\n            train_data.append(self.__pop_random_row(data_copy))\n        test_data = data_copy\n        return train_data, test_data\n\n    def __pop_random_row(self, data):\n        random.shuffle(data)\n        return data[0]\n\n\ndef split_data(data, rate):\n    random.shuffle(data)\n    n_train_data = int(len(data) * rate)\n    return data[: n_train_data], data[n_train_data:]\n\n\ndef calculate_accuracy(model, validate_data):\n    n_total = 0\n    n_correct = 0\n    predicted_categories = [predict(model, row[:-1]) for row in validate_data]\n    correct_categories = [row[-1] for row in validate_data]\n    for predicted_category, correct_category in zip(predicted_categories, correct_categories):\n        n_total += 1\n        if predicted_category == correct_category:\n            n_correct += 1\n    return n_correct / n_total\n\n\ndf = pd.read_csv('resources/sonar.all-data.csv', header=None)\ndata = df.values.tolist()\ntrain_data_all, test_data = split_data(data, 0.9)\n\nfor n_tree in [1, 3, 10]:\n    accuracies = []\n    cross_validation_splitter = CrossValidationSplitter(train_data_all, 5)\n    model = None\n    for train_data, validate_data in cross_validation_splitter:\n        n_features = int(sqrt(len(train_data[0]) - 1))\n        model = build_model(\n            train_data=train_data,\n            n_trees=n_tree,\n            max_depth=5,\n            min_size=1,\n            n_features=n_features,\n            n_sample_rate=0.9\n        )\n        accuracies.append(calculate_accuracy(model, validate_data))\n    print(\"Average cross validation accuracy for {} trees: {}\".format(n_tree, np.mean(accuracies)))\n    print(\"Test accuracy for {} trees: {}\".format(n_tree, calculate_accuracy(model, test_data)))\n```\nThe result is as follows.\n\n```\nAverage cross validation accuracy for 1 trees: 0.6887700534759359\nTest accuracy for 1 trees: 0.6190476190476191\nAverage cross validation accuracy for 3 trees: 0.6898395721925135\nTest accuracy for 3 trees: 0.8571428571428571\nAverage cross validation accuracy for 10 trees: 0.6983957219251338\nTest accuracy for 10 trees: 0.7619047619047619\n```\nAs you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.\n","source":"_posts/Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest.md","raw":"title: 'Write Machine Learning Algorithms From Scratch: Random Forest'\ndate: 2017-12-23 10:14:33\ntags: 'machine learning'\ncategories: Coding\nthumbnail: /images/forest.jpg\n---\n\n# Introduction\n\nRandom Forest is a supervised classification algorithm, it can classify data according to various given features.\n\nAssuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.\n\n| Person | Weight(kg) | Height(meter) | 100m-race time(second) | Gender |\n| ------ | ---------- | ------------- | ---------------------- | ------ |\n| A      | 50         | 1.62          | 18                     | Female |\n| B      | 70         | 1.81          | 16                     | Male   |\n| C      | 60         | 1.72          | 15                     | Female |\n| D      | 70         | 1.71          | 19                     | Male   |\n| E      | 52         | 1.69          | 17                     | Female |\n\nWe can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person's gender using the trained model.\n\n| Weight(kg) | Height(meter) | 100m-race time(second) |\n| ---------- | ------------- | ---------------------- |\n| 60         | 1.62          | 16                     |\n\nNotice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won't dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.\n\nAll the code mentioned in the post is available for download. So please refer to the code if there's anything unclear in the post.\n\n# Execution\n\nLet's first run the code that we will write, so we could know what it's like.\n\n1. Install Python3\n\n2. Download code\n\n   ```bash\n   git clone git@github.com:searene/demos.git && cd demos/RandomForest\n   ```\n\n3. Download Dependencies\n\n   ```bash\n   pip install numpy pandas\n   ```\n\n4. Execution\n\n   ```bash\n   python evaluate_random_forest.py\n   Average cross validation accuracy for 1 trees: 0.6887700534759359\n   Test accuracy for 1 trees: 0.6190476190476191\n   Average cross validation accuracy for 3 trees: 0.6898395721925135\n   Test accuracy for 3 trees: 0.8571428571428571\n   Average cross validation accuracy for 10 trees: 0.6983957219251338\n   Test accuracy for 10 trees: 0.7619047619047619\n   ```\n\nSo you can see that, we get the highest accuracy with 3 trees, which is about 85%.\n\n# How It Works\n\nRandom Forest is rather complex, so let's use an example.\n\n| Person | Weight(kg) | Height(meter) | 100m-race time(second) | Gender |\n| ------ | ---------- | ------------- | ---------------------- | ------ |\n| A      | 50         | 1.62          | 18                     | Female |\n| B      | 70         | 1.81          | 16                     | Male   |\n| C      | 60         | 1.72          | 15                     | Female |\n| D      | 70         | 1.71          | 19                     | Male   |\n| E      | 52         | 1.69          | 17                     | Female |\n\nWe mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.\n\n1. Based on D's height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don't think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).\n\n   ```\n        A, B, C, D, E\n       /             \\\n      /               \\\n   A, D, E           B, C\n   ```\n\n2. For group `A, D, E`, based on A's 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group `B, C`. Based on C's height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.\n\n   ```\n          A, B, C, D, E\n         /             \\\n        /               \\\n      B, C            A, D, E\n     /    \\          /      \\\n    /      \\        /        \\\n   C        B     A, E        D\n   ```\n\n3. Now only group `A, E` could be further split. So let's base on A's weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.\n\n   ```\n             A, B, C, D, E\n            /             \\\n           /               \\\n         B, C            A, D, E\n        /    \\          /      \\\n       /      \\        /        \\\n   C(F)       B(M)   A, E       D(M)\n                     /   \\\n                    /     \\\n                  A(F)   E(M)\n   ```\n\n   That's it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person's gender:\n\n| Weight(kg) | Height(meter) | 100m-race time(second) |\n| ---------- | ------------- | ---------------------- |\n| 60         | 1.62          | 16                     |\n\n   Just like training, this person's height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group `B, C` in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is `Female`. This is the whole process of prediction.\n\n   # The Principle To Split A Tree Into Two Groups\n\n   In the above example, we first split the whole data into two groups according to D's height, then continue to split them according to D's height, A's weight, etc. What's going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it's true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A's weight, we will get two groups of data: `A` and `B, C, D, E`. Let's call them group1 and group2 respectively, then we can calculate gini index according to the following equation.\n\n   <div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\\times$ (the number of people in group2 / the total number of people in both groups)</div>\n\n   So the gini index should be calculated as follows if we split the data based on A's weight.\n$$\n   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4\n$$\n\n   We can also split the data based on A's height, to get another gini index.\n$$\n   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4\n$$\nWe can also split based on A's 100m-race time, B's weight, B's height, ..., E's 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D's weight if we got the smallest gini index based on D's weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it's more about the math rather than the implementation.\n\nThe code to calculate gini index is as follows.\n\n   ```python\n   def get_gini_index(left, right, categories):\n       gini_index = 0\n       for group in left, right:\n           if len(group) == 0:\n               continue\n           score = 0\n           for category in categories:\n               p = [row[-1] for row in group].count(category) / len(group)\n               score += p * p\n           gini_index += (1 - score) * (len(group) / len(left + right))\n       return gini_index\n   ```\n   We use the above piece of code in this way:\n\n   ```python\n   A = [50, 1.62, 18, 'Female']\n   B = [70, 1.81, 16, 'Male']\n   C = [60, 1.72, 15, 'Female']\n   D = [70, 1.71, 19, 'Male']\n   E = [52, 1.69, 17, 'Female']\n   left = [A]\n   right = [B, C, D, E]\n   gini_index = get_gini_index(left, right, ['Male', 'Female'])\n   print(gini_index) # 0.4\n   ```\n\n# Use multiple trees to boost the accuracy\n\nYou may wonder why it's called the random forest when we only used one tree? Good question! In fact, we shouldn't only use one tree. The correct process is as follows.\n\n1. Choose 90% of the data randomly for training.\n2. Train those data, i.e. the process of building a tree shown above.\n3. Use this tree to predict, get the prediction `x`.\n4. Repeat the above three steps, build another tree, get another prediction `y`.\n5. Repeat the first three steps again, get another prediction `z`.\n6. Choose the one that appears the most in `x, y, z`, which should be our final prediction, return it.\n\nSo you should know why it's call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.\n\nThe purpose of building multiple trees is to avoid overfitting. From Wikipedia:\n\n> In statistics, **overfitting** is \"the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably\".\n\n# Code\n\nNow that we know how it works, it's time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let's review them together.\n\n1. min_size: when the number of data in some node is less than `min_size`, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.\n2. max_depth: The maximum depth of a tree, further splitting is not allowed when `max_depth` is exceeded, the value of the node is determined by the category that appears the most in the group.\n3. n_features: The number of features chosen to build the current tree. In case if you don't know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose `n_features` features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.\n\nCode to implement random forest is as follows.\n\n```python\nimport random\n\n\nclass Node:\n    def __init__(self, data):\n\n        # all the data that is held by this node\n        self.data = data\n\n        # left child node\n        self.left = None\n\n        # right child node\n        self.right = None\n\n        # category if the current node is a leaf node\n        self.category = None\n\n        # a tuple: (row, column), representing the point where we split the data\n        # into the left/right node\n        self.split_point = None\n\n\ndef build_model(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate):\n    trees = []\n    for i in range(n_trees):\n        random.shuffle(train_data)\n        n_samples = int(len(train_data) * n_sample_rate)\n        tree = build_tree(train_data[: n_samples], 1, max_depth, min_size, n_features)\n        trees.append(tree)\n    return trees\n\n\ndef predict_with_single_tree(tree, row):\n    if tree.category is not None:\n        return tree.category\n    x, y = tree.split_point\n    split_value = tree.data[x][y]\n    if row[y] <= split_value:\n        return predict_with_single_tree(tree.left, row)\n    else:\n        return predict_with_single_tree(tree.right, row)\n\n\ndef predict(trees, row):\n    prediction = []\n    for tree in trees:\n        prediction.append(predict_with_single_tree(tree, row))\n    return max(set(prediction), key=prediction.count)\n\n\ndef get_most_common_category(data):\n    categories = [row[-1] for row in data]\n    return max(set(categories), key=categories.count)\n\n\ndef build_tree(train_data, depth, max_depth, min_size, n_features):\n    root = Node(train_data)\n    x, y = get_split_point(train_data, n_features)\n    left_group, right_group = split(train_data, x, y)\n    if len(left_group) == 0 or len(right_group) == 0 or depth >= max_depth:\n        root.category = get_most_common_category(left_group + right_group)\n    else:\n        root.split_point = (x, y)\n        if len(left_group) < min_size:\n            root.left = Node(left_group)\n            root.left.category = get_most_common_category(left_group)\n        else:\n            root.left = build_tree(left_group, depth + 1, max_depth, min_size, n_features)\n\n        if len(right_group) < min_size:\n            root.right = Node(right_group)\n            root.right.category = get_most_common_category(right_group)\n        else:\n            root.right = build_tree(right_group, depth + 1, max_depth, min_size, n_features)\n    return root\n\n\ndef get_features(n_selected_features, n_total_features):\n    features = [i for i in range(n_total_features)]\n    random.shuffle(features)\n    return features[:n_selected_features]\n\n\ndef get_categories(data):\n    return set([row[-1] for row in data])\n\n\ndef get_split_point(data, n_features):\n    n_total_features = len(data[0]) - 1\n    features = get_features(n_features, n_total_features)\n    categories = get_categories(data)\n    x, y, gini_index = None, None, None\n    for index in range(len(data)):\n        for feature in features:\n            left, right = split(data, index, feature)\n            current_gini_index = get_gini_index(left, right, categories)\n            if gini_index is None or current_gini_index < gini_index:\n                x, y, gini_index = index, feature, current_gini_index\n    return x, y\n\n\ndef get_gini_index(left, right, categories):\n    gini_index = 0\n    for group in left, right:\n        if len(group) == 0:\n            continue\n        score = 0\n        for category in categories:\n            p = [row[-1] for row in group].count(category) / len(group)\n            score += p * p\n        gini_index += (1 - score) * (len(group) / len(left + right))\n    return gini_index\n\n\ndef split(data, x, y):\n    split_value = data[x][y]\n    left, right = [], []\n    for row in data:\n        if row[y] <= split_value:\n            left.append(row)\n        else:\n            right.append(row)\n    return left, right\n\n```\n\nSo how to use this piece of code? Let's take [Sonar](https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29), which is real-life data as an example(You can have a glimpse of its contents in [here](https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv)). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let's load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.\n\nThe code is as follows.\n\n```python\nimport random\nimport numpy as np\nimport pandas as pd\nfrom math import sqrt\n\nfrom random_forest import build_model, predict\n\n\nclass CrossValidationSplitter:\n    def __init__(self, data, k_fold):\n        self.data = data\n        self.k_fold = k_fold\n        self.n_iteration = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.n_iteration >= self.k_fold:\n            raise StopIteration\n        self.n_iteration += 1\n        return self.__load_data()\n\n    def __load_data(self):\n        n_train_data = (1 / self.k_fold) * len(self.data)\n        data_copy = self.data[:]\n        train_data = []\n        while len(train_data) < n_train_data:\n            train_data.append(self.__pop_random_row(data_copy))\n        test_data = data_copy\n        return train_data, test_data\n\n    def __pop_random_row(self, data):\n        random.shuffle(data)\n        return data[0]\n\n\ndef split_data(data, rate):\n    random.shuffle(data)\n    n_train_data = int(len(data) * rate)\n    return data[: n_train_data], data[n_train_data:]\n\n\ndef calculate_accuracy(model, validate_data):\n    n_total = 0\n    n_correct = 0\n    predicted_categories = [predict(model, row[:-1]) for row in validate_data]\n    correct_categories = [row[-1] for row in validate_data]\n    for predicted_category, correct_category in zip(predicted_categories, correct_categories):\n        n_total += 1\n        if predicted_category == correct_category:\n            n_correct += 1\n    return n_correct / n_total\n\n\ndf = pd.read_csv('resources/sonar.all-data.csv', header=None)\ndata = df.values.tolist()\ntrain_data_all, test_data = split_data(data, 0.9)\n\nfor n_tree in [1, 3, 10]:\n    accuracies = []\n    cross_validation_splitter = CrossValidationSplitter(train_data_all, 5)\n    model = None\n    for train_data, validate_data in cross_validation_splitter:\n        n_features = int(sqrt(len(train_data[0]) - 1))\n        model = build_model(\n            train_data=train_data,\n            n_trees=n_tree,\n            max_depth=5,\n            min_size=1,\n            n_features=n_features,\n            n_sample_rate=0.9\n        )\n        accuracies.append(calculate_accuracy(model, validate_data))\n    print(\"Average cross validation accuracy for {} trees: {}\".format(n_tree, np.mean(accuracies)))\n    print(\"Test accuracy for {} trees: {}\".format(n_tree, calculate_accuracy(model, test_data)))\n```\nThe result is as follows.\n\n```\nAverage cross validation accuracy for 1 trees: 0.6887700534759359\nTest accuracy for 1 trees: 0.6190476190476191\nAverage cross validation accuracy for 3 trees: 0.6898395721925135\nTest accuracy for 3 trees: 0.8571428571428571\nAverage cross validation accuracy for 10 trees: 0.6983957219251338\nTest accuracy for 10 trees: 0.7619047619047619\n```\nAs you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.\n","slug":"Write-Machine-Learning-Algorithms-From-Scratch-Random-Forest","published":1,"updated":"2018-01-09T15:24:17.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqee00528arfwgkamihw","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Random Forest is a supervised classification algorithm, it can classify data according to various given features.</p>\n<p>Assuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.</p>\n<table>\n<thead>\n<tr>\n<th>Person</th>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n<th>Gender</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>50</td>\n<td>1.62</td>\n<td>18</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>B</td>\n<td>70</td>\n<td>1.81</td>\n<td>16</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>C</td>\n<td>60</td>\n<td>1.72</td>\n<td>15</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>D</td>\n<td>70</td>\n<td>1.71</td>\n<td>19</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>E</td>\n<td>52</td>\n<td>1.69</td>\n<td>17</td>\n<td>Female</td>\n</tr>\n</tbody>\n</table>\n<p>We can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person’s gender using the trained model.</p>\n<table>\n<thead>\n<tr>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>1.62</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<p>Notice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won’t dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.</p>\n<p>All the code mentioned in the post is available for download. So please refer to the code if there’s anything unclear in the post.</p>\n<h1 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h1><p>Let’s first run the code that we will write, so we could know what it’s like.</p>\n<ol>\n<li><p>Install Python3</p>\n</li>\n<li><p>Download code</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class=\"built_in\">cd</span> demos/RandomForest</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download Dependencies</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install numpy pandas</div></pre></td></tr></table></figure>\n</li>\n<li><p>Execution</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">python evaluate_random_forest.py</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 1 trees: 0.6887700534759359</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 1 trees: 0.6190476190476191</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 3 trees: 0.6898395721925135</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 3 trees: 0.8571428571428571</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 10 trees: 0.6983957219251338</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>So you can see that, we get the highest accuracy with 3 trees, which is about 85%.</p>\n<h1 id=\"How-It-Works\"><a href=\"#How-It-Works\" class=\"headerlink\" title=\"How It Works\"></a>How It Works</h1><p>Random Forest is rather complex, so let’s use an example.</p>\n<table>\n<thead>\n<tr>\n<th>Person</th>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n<th>Gender</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>50</td>\n<td>1.62</td>\n<td>18</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>B</td>\n<td>70</td>\n<td>1.81</td>\n<td>16</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>C</td>\n<td>60</td>\n<td>1.72</td>\n<td>15</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>D</td>\n<td>70</td>\n<td>1.71</td>\n<td>19</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>E</td>\n<td>52</td>\n<td>1.69</td>\n<td>17</td>\n<td>Female</td>\n</tr>\n</tbody>\n</table>\n<p>We mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.</p>\n<ol>\n<li><p>Based on D’s height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don’t think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">     A, B, C, D, E</div><div class=\"line\">    /             \\</div><div class=\"line\">   /               \\</div><div class=\"line\">A, D, E           B, C</div></pre></td></tr></table></figure>\n</li>\n<li><p>For group <code>A, D, E</code>, based on A’s 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group <code>B, C</code>. Based on C’s height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">       A, B, C, D, E</div><div class=\"line\">      /             \\</div><div class=\"line\">     /               \\</div><div class=\"line\">   B, C            A, D, E</div><div class=\"line\">  /    \\          /      \\</div><div class=\"line\"> /      \\        /        \\</div><div class=\"line\">C        B     A, E        D</div></pre></td></tr></table></figure>\n</li>\n<li><p>Now only group <code>A, E</code> could be further split. So let’s base on A’s weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">          A, B, C, D, E</div><div class=\"line\">         /             \\</div><div class=\"line\">        /               \\</div><div class=\"line\">      B, C            A, D, E</div><div class=\"line\">     /    \\          /      \\</div><div class=\"line\">    /      \\        /        \\</div><div class=\"line\">C(F)       B(M)   A, E       D(M)</div><div class=\"line\">                  /   \\</div><div class=\"line\">                 /     \\</div><div class=\"line\">               A(F)   E(M)</div></pre></td></tr></table></figure>\n<p>That’s it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person’s gender:</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>1.62</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<p>   Just like training, this person’s height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group <code>B, C</code> in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is <code>Female</code>. This is the whole process of prediction.</p>\n<h1 id=\"The-Principle-To-Split-A-Tree-Into-Two-Groups\"><a href=\"#The-Principle-To-Split-A-Tree-Into-Two-Groups\" class=\"headerlink\" title=\"The Principle To Split A Tree Into Two Groups\"></a>The Principle To Split A Tree Into Two Groups</h1><p>   In the above example, we first split the whole data into two groups according to D’s height, then continue to split them according to D’s height, A’s weight, etc. What’s going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it’s true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A’s weight, we will get two groups of data: <code>A</code> and <code>B, C, D, E</code>. Let’s call them group1 and group2 respectively, then we can calculate gini index according to the following equation.</p>\n   <div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\\times$ (the number of people in group2 / the total number of people in both groups)</div>\n\n<p>   So the gini index should be calculated as follows if we split the data based on A’s weight.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4<br>$$</p>\n<p>   We can also split the data based on A’s height, to get another gini index.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4<br>$$<br>We can also split based on A’s 100m-race time, B’s weight, B’s height, …, E’s 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D’s weight if we got the smallest gini index based on D’s weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it’s more about the math rather than the implementation.</p>\n<p>The code to calculate gini index is as follows.</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_gini_index</span><span class=\"params\">(left, right, categories)</span>:</span></div><div class=\"line\">    gini_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> group <span class=\"keyword\">in</span> left, right:</div><div class=\"line\">        <span class=\"keyword\">if</span> len(group) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        score = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</div><div class=\"line\">            p = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> group].count(category) / len(group)</div><div class=\"line\">            score += p * p</div><div class=\"line\">        gini_index += (<span class=\"number\">1</span> - score) * (len(group) / len(left + right))</div><div class=\"line\">    <span class=\"keyword\">return</span> gini_index</div></pre></td></tr></table></figure>\n<p>   We use the above piece of code in this way:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [<span class=\"number\">50</span>, <span class=\"number\">1.62</span>, <span class=\"number\">18</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">B = [<span class=\"number\">70</span>, <span class=\"number\">1.81</span>, <span class=\"number\">16</span>, <span class=\"string\">'Male'</span>]</div><div class=\"line\">C = [<span class=\"number\">60</span>, <span class=\"number\">1.72</span>, <span class=\"number\">15</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">D = [<span class=\"number\">70</span>, <span class=\"number\">1.71</span>, <span class=\"number\">19</span>, <span class=\"string\">'Male'</span>]</div><div class=\"line\">E = [<span class=\"number\">52</span>, <span class=\"number\">1.69</span>, <span class=\"number\">17</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">left = [A]</div><div class=\"line\">right = [B, C, D, E]</div><div class=\"line\">gini_index = get_gini_index(left, right, [<span class=\"string\">'Male'</span>, <span class=\"string\">'Female'</span>])</div><div class=\"line\">print(gini_index) <span class=\"comment\"># 0.4</span></div></pre></td></tr></table></figure>\n<h1 id=\"Use-multiple-trees-to-boost-the-accuracy\"><a href=\"#Use-multiple-trees-to-boost-the-accuracy\" class=\"headerlink\" title=\"Use multiple trees to boost the accuracy\"></a>Use multiple trees to boost the accuracy</h1><p>You may wonder why it’s called the random forest when we only used one tree? Good question! In fact, we shouldn’t only use one tree. The correct process is as follows.</p>\n<ol>\n<li>Choose 90% of the data randomly for training.</li>\n<li>Train those data, i.e. the process of building a tree shown above.</li>\n<li>Use this tree to predict, get the prediction <code>x</code>.</li>\n<li>Repeat the above three steps, build another tree, get another prediction <code>y</code>.</li>\n<li>Repeat the first three steps again, get another prediction <code>z</code>.</li>\n<li>Choose the one that appears the most in <code>x, y, z</code>, which should be our final prediction, return it.</li>\n</ol>\n<p>So you should know why it’s call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.</p>\n<p>The purpose of building multiple trees is to avoid overfitting. From Wikipedia:</p>\n<blockquote>\n<p>In statistics, <strong>overfitting</strong> is “the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably”.</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p>Now that we know how it works, it’s time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let’s review them together.</p>\n<ol>\n<li>min_size: when the number of data in some node is less than <code>min_size</code>, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.</li>\n<li>max_depth: The maximum depth of a tree, further splitting is not allowed when <code>max_depth</code> is exceeded, the value of the node is determined by the category that appears the most in the group.</li>\n<li>n_features: The number of features chosen to build the current tree. In case if you don’t know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose <code>n_features</code> features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.</li>\n</ol>\n<p>Code to implement random forest is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data)</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># all the data that is held by this node</span></div><div class=\"line\">        self.data = data</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># left child node</span></div><div class=\"line\">        self.left = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># right child node</span></div><div class=\"line\">        self.right = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># category if the current node is a leaf node</span></div><div class=\"line\">        self.category = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># a tuple: (row, column), representing the point where we split the data</span></div><div class=\"line\">        <span class=\"comment\"># into the left/right node</span></div><div class=\"line\">        self.split_point = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_model</span><span class=\"params\">(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate)</span>:</span></div><div class=\"line\">    trees = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n_trees):</div><div class=\"line\">        random.shuffle(train_data)</div><div class=\"line\">        n_samples = int(len(train_data) * n_sample_rate)</div><div class=\"line\">        tree = build_tree(train_data[: n_samples], <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\">        trees.append(tree)</div><div class=\"line\">    <span class=\"keyword\">return</span> trees</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_with_single_tree</span><span class=\"params\">(tree, row)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> tree.category <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> tree.category</div><div class=\"line\">    x, y = tree.split_point</div><div class=\"line\">    split_value = tree.data[x][y]</div><div class=\"line\">    <span class=\"keyword\">if</span> row[y] &lt;= split_value:</div><div class=\"line\">        <span class=\"keyword\">return</span> predict_with_single_tree(tree.left, row)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> predict_with_single_tree(tree.right, row)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(trees, row)</span>:</span></div><div class=\"line\">    prediction = []</div><div class=\"line\">    <span class=\"keyword\">for</span> tree <span class=\"keyword\">in</span> trees:</div><div class=\"line\">        prediction.append(predict_with_single_tree(tree, row))</div><div class=\"line\">    <span class=\"keyword\">return</span> max(set(prediction), key=prediction.count)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_most_common_category</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    categories = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data]</div><div class=\"line\">    <span class=\"keyword\">return</span> max(set(categories), key=categories.count)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_tree</span><span class=\"params\">(train_data, depth, max_depth, min_size, n_features)</span>:</span></div><div class=\"line\">    root = Node(train_data)</div><div class=\"line\">    x, y = get_split_point(train_data, n_features)</div><div class=\"line\">    left_group, right_group = split(train_data, x, y)</div><div class=\"line\">    <span class=\"keyword\">if</span> len(left_group) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> len(right_group) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> depth &gt;= max_depth:</div><div class=\"line\">        root.category = get_most_common_category(left_group + right_group)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        root.split_point = (x, y)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(left_group) &lt; min_size:</div><div class=\"line\">            root.left = Node(left_group)</div><div class=\"line\">            root.left.category = get_most_common_category(left_group)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            root.left = build_tree(left_group, depth + <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> len(right_group) &lt; min_size:</div><div class=\"line\">            root.right = Node(right_group)</div><div class=\"line\">            root.right.category = get_most_common_category(right_group)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            root.right = build_tree(right_group, depth + <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\">    <span class=\"keyword\">return</span> root</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_features</span><span class=\"params\">(n_selected_features, n_total_features)</span>:</span></div><div class=\"line\">    features = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n_total_features)]</div><div class=\"line\">    random.shuffle(features)</div><div class=\"line\">    <span class=\"keyword\">return</span> features[:n_selected_features]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_categories</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> set([row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_split_point</span><span class=\"params\">(data, n_features)</span>:</span></div><div class=\"line\">    n_total_features = len(data[<span class=\"number\">0</span>]) - <span class=\"number\">1</span></div><div class=\"line\">    features = get_features(n_features, n_total_features)</div><div class=\"line\">    categories = get_categories(data)</div><div class=\"line\">    x, y, gini_index = <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(data)):</div><div class=\"line\">        <span class=\"keyword\">for</span> feature <span class=\"keyword\">in</span> features:</div><div class=\"line\">            left, right = split(data, index, feature)</div><div class=\"line\">            current_gini_index = get_gini_index(left, right, categories)</div><div class=\"line\">            <span class=\"keyword\">if</span> gini_index <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> current_gini_index &lt; gini_index:</div><div class=\"line\">                x, y, gini_index = index, feature, current_gini_index</div><div class=\"line\">    <span class=\"keyword\">return</span> x, y</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_gini_index</span><span class=\"params\">(left, right, categories)</span>:</span></div><div class=\"line\">    gini_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> group <span class=\"keyword\">in</span> left, right:</div><div class=\"line\">        <span class=\"keyword\">if</span> len(group) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        score = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</div><div class=\"line\">            p = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> group].count(category) / len(group)</div><div class=\"line\">            score += p * p</div><div class=\"line\">        gini_index += (<span class=\"number\">1</span> - score) * (len(group) / len(left + right))</div><div class=\"line\">    <span class=\"keyword\">return</span> gini_index</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split</span><span class=\"params\">(data, x, y)</span>:</span></div><div class=\"line\">    split_value = data[x][y]</div><div class=\"line\">    left, right = [], []</div><div class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</div><div class=\"line\">        <span class=\"keyword\">if</span> row[y] &lt;= split_value:</div><div class=\"line\">            left.append(row)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            right.append(row)</div><div class=\"line\">    <span class=\"keyword\">return</span> left, right</div></pre></td></tr></table></figure>\n<p>So how to use this piece of code? Let’s take <a href=\"https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29\" target=\"_blank\" rel=\"external\">Sonar</a>, which is real-life data as an example(You can have a glimpse of its contents in <a href=\"https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv\" target=\"_blank\" rel=\"external\">here</a>). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let’s load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.</p>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> random_forest <span class=\"keyword\">import</span> build_model, predict</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossValidationSplitter</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, k_fold)</span>:</span></div><div class=\"line\">        self.data = data</div><div class=\"line\">        self.k_fold = k_fold</div><div class=\"line\">        self.n_iteration = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n_iteration &gt;= self.k_fold:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</div><div class=\"line\">        self.n_iteration += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__load_data()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__load_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        n_train_data = (<span class=\"number\">1</span> / self.k_fold) * len(self.data)</div><div class=\"line\">        data_copy = self.data[:]</div><div class=\"line\">        train_data = []</div><div class=\"line\">        <span class=\"keyword\">while</span> len(train_data) &lt; n_train_data:</div><div class=\"line\">            train_data.append(self.__pop_random_row(data_copy))</div><div class=\"line\">        test_data = data_copy</div><div class=\"line\">        <span class=\"keyword\">return</span> train_data, test_data</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__pop_random_row</span><span class=\"params\">(self, data)</span>:</span></div><div class=\"line\">        random.shuffle(data)</div><div class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split_data</span><span class=\"params\">(data, rate)</span>:</span></div><div class=\"line\">    random.shuffle(data)</div><div class=\"line\">    n_train_data = int(len(data) * rate)</div><div class=\"line\">    <span class=\"keyword\">return</span> data[: n_train_data], data[n_train_data:]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_accuracy</span><span class=\"params\">(model, validate_data)</span>:</span></div><div class=\"line\">    n_total = <span class=\"number\">0</span></div><div class=\"line\">    n_correct = <span class=\"number\">0</span></div><div class=\"line\">    predicted_categories = [predict(model, row[:<span class=\"number\">-1</span>]) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> validate_data]</div><div class=\"line\">    correct_categories = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> validate_data]</div><div class=\"line\">    <span class=\"keyword\">for</span> predicted_category, correct_category <span class=\"keyword\">in</span> zip(predicted_categories, correct_categories):</div><div class=\"line\">        n_total += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> predicted_category == correct_category:</div><div class=\"line\">            n_correct += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n_correct / n_total</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">df = pd.read_csv(<span class=\"string\">'resources/sonar.all-data.csv'</span>, header=<span class=\"keyword\">None</span>)</div><div class=\"line\">data = df.values.tolist()</div><div class=\"line\">train_data_all, test_data = split_data(data, <span class=\"number\">0.9</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n_tree <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>]:</div><div class=\"line\">    accuracies = []</div><div class=\"line\">    cross_validation_splitter = CrossValidationSplitter(train_data_all, <span class=\"number\">5</span>)</div><div class=\"line\">    model = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">for</span> train_data, validate_data <span class=\"keyword\">in</span> cross_validation_splitter:</div><div class=\"line\">        n_features = int(sqrt(len(train_data[<span class=\"number\">0</span>]) - <span class=\"number\">1</span>))</div><div class=\"line\">        model = build_model(</div><div class=\"line\">            train_data=train_data,</div><div class=\"line\">            n_trees=n_tree,</div><div class=\"line\">            max_depth=<span class=\"number\">5</span>,</div><div class=\"line\">            min_size=<span class=\"number\">1</span>,</div><div class=\"line\">            n_features=n_features,</div><div class=\"line\">            n_sample_rate=<span class=\"number\">0.9</span></div><div class=\"line\">        )</div><div class=\"line\">        accuracies.append(calculate_accuracy(model, validate_data))</div><div class=\"line\">    print(<span class=\"string\">\"Average cross validation accuracy for &#123;&#125; trees: &#123;&#125;\"</span>.format(n_tree, np.mean(accuracies)))</div><div class=\"line\">    print(<span class=\"string\">\"Test accuracy for &#123;&#125; trees: &#123;&#125;\"</span>.format(n_tree, calculate_accuracy(model, test_data)))</div></pre></td></tr></table></figure>\n<p>The result is as follows.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Average cross validation accuracy for 1 trees: 0.6887700534759359</div><div class=\"line\">Test accuracy for 1 trees: 0.6190476190476191</div><div class=\"line\">Average cross validation accuracy for 3 trees: 0.6898395721925135</div><div class=\"line\">Test accuracy for 3 trees: 0.8571428571428571</div><div class=\"line\">Average cross validation accuracy for 10 trees: 0.6983957219251338</div><div class=\"line\">Test accuracy for 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure>\n<p>As you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Random Forest is a supervised classification algorithm, it can classify data according to various given features.</p>\n<p>Assuming that we want to determine whether a person is male or female according to his/her weight, height and 100m-race time. Training data is as follows.</p>\n<table>\n<thead>\n<tr>\n<th>Person</th>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n<th>Gender</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>50</td>\n<td>1.62</td>\n<td>18</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>B</td>\n<td>70</td>\n<td>1.81</td>\n<td>16</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>C</td>\n<td>60</td>\n<td>1.72</td>\n<td>15</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>D</td>\n<td>70</td>\n<td>1.71</td>\n<td>19</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>E</td>\n<td>52</td>\n<td>1.69</td>\n<td>17</td>\n<td>Female</td>\n</tr>\n</tbody>\n</table>\n<p>We can load these data and train them with the random forest classification algorithm. The model obtained from training could be used for prediction. E.g., We will be able to predict this person’s gender using the trained model.</p>\n<table>\n<thead>\n<tr>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>1.62</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<p>Notice that we will mainly focus on how to use random forest and how to write the algorithm from scratch. We won’t dive into the esoteric mathematical principles behind it. After finishing this post, you will be able to understand various parameters seen in third-party random forest implementations.</p>\n<p>All the code mentioned in the post is available for download. So please refer to the code if there’s anything unclear in the post.</p>\n<h1 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h1><p>Let’s first run the code that we will write, so we could know what it’s like.</p>\n<ol>\n<li><p>Install Python3</p>\n</li>\n<li><p>Download code</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class=\"built_in\">cd</span> demos/RandomForest</div></pre></td></tr></table></figure>\n</li>\n<li><p>Download Dependencies</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install numpy pandas</div></pre></td></tr></table></figure>\n</li>\n<li><p>Execution</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">python evaluate_random_forest.py</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 1 trees: 0.6887700534759359</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 1 trees: 0.6190476190476191</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 3 trees: 0.6898395721925135</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 3 trees: 0.8571428571428571</div><div class=\"line\">Average cross validation accuracy <span class=\"keyword\">for</span> 10 trees: 0.6983957219251338</div><div class=\"line\">Test accuracy <span class=\"keyword\">for</span> 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>So you can see that, we get the highest accuracy with 3 trees, which is about 85%.</p>\n<h1 id=\"How-It-Works\"><a href=\"#How-It-Works\" class=\"headerlink\" title=\"How It Works\"></a>How It Works</h1><p>Random Forest is rather complex, so let’s use an example.</p>\n<table>\n<thead>\n<tr>\n<th>Person</th>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n<th>Gender</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>50</td>\n<td>1.62</td>\n<td>18</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>B</td>\n<td>70</td>\n<td>1.81</td>\n<td>16</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>C</td>\n<td>60</td>\n<td>1.72</td>\n<td>15</td>\n<td>Female</td>\n</tr>\n<tr>\n<td>D</td>\n<td>70</td>\n<td>1.71</td>\n<td>19</td>\n<td>Male</td>\n</tr>\n<tr>\n<td>E</td>\n<td>52</td>\n<td>1.69</td>\n<td>17</td>\n<td>Female</td>\n</tr>\n</tbody>\n</table>\n<p>We mentioned before that we could use these data to train our random forest model, in order to predict new items. So how to train? In fact, training is equivalent to building a tree here. Steps are as follows.</p>\n<ol>\n<li><p>Based on D’s height, anyone whose height is less or equal to 1.71m belong to one group, and anyone whose height is greater than 1.71m belong to another group, then we get two groups(Don’t think too much about why to split in this way, this is just an example, we will talk about the reason in detail later).</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">     A, B, C, D, E</div><div class=\"line\">    /             \\</div><div class=\"line\">   /               \\</div><div class=\"line\">A, D, E           B, C</div></pre></td></tr></table></figure>\n</li>\n<li><p>For group <code>A, D, E</code>, based on A’s 100m-race time, anyone whose time is less or equal to 18s belong to one group, and anyone whose time is greater than 18s belong to another group. The same goes to group <code>B, C</code>. Based on C’s height, anyone whose height is less than or equal to 1.72m belong to one group, and anyone whose height is greater than 1.72m belong to another group. After splitting, we get a tree like this.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">       A, B, C, D, E</div><div class=\"line\">      /             \\</div><div class=\"line\">     /               \\</div><div class=\"line\">   B, C            A, D, E</div><div class=\"line\">  /    \\          /      \\</div><div class=\"line\"> /      \\        /        \\</div><div class=\"line\">C        B     A, E        D</div></pre></td></tr></table></figure>\n</li>\n<li><p>Now only group <code>A, E</code> could be further split. So let’s base on A’s weight, anyone whose weight is less than or equal to 50kg belong to one group, and anyone whose weight is greater than 50kg belong to another group. After that, we mark each leaf node with their genders.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">          A, B, C, D, E</div><div class=\"line\">         /             \\</div><div class=\"line\">        /               \\</div><div class=\"line\">      B, C            A, D, E</div><div class=\"line\">     /    \\          /      \\</div><div class=\"line\">    /      \\        /        \\</div><div class=\"line\">C(F)       B(M)   A, E       D(M)</div><div class=\"line\">                  /   \\</div><div class=\"line\">                 /     \\</div><div class=\"line\">               A(F)   E(M)</div></pre></td></tr></table></figure>\n<p>That’s it, a tree in the random forest! Now we can use this tree to predict new data. Assuming we want to predict this person’s gender:</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>Weight(kg)</th>\n<th>Height(meter)</th>\n<th>100m-race time(second)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>60</td>\n<td>1.62</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<p>   Just like training, this person’s height is 1.62m, which is less than or equal to 1.71, so he/she belongs to group <code>B, C</code> in the second layer. Again, compare based on his/her height, which is less than or equal to 1.72m, so he/she belongs to leaf node C, which means the prediction result is <code>Female</code>. This is the whole process of prediction.</p>\n<h1 id=\"The-Principle-To-Split-A-Tree-Into-Two-Groups\"><a href=\"#The-Principle-To-Split-A-Tree-Into-Two-Groups\" class=\"headerlink\" title=\"The Principle To Split A Tree Into Two Groups\"></a>The Principle To Split A Tree Into Two Groups</h1><p>   In the above example, we first split the whole data into two groups according to D’s height, then continue to split them according to D’s height, A’s weight, etc. What’s going on here? It seemed that we were casually splitting the data with no principle. OK, I concede that it’s true. I just want to show you guys how to build a random forest tree. In fact, the genuine tree-building-process would split the data according to gini index. E.g., assuming we split the data according to A’s weight, we will get two groups of data: <code>A</code> and <code>B, C, D, E</code>. Let’s call them group1 and group2 respectively, then we can calculate gini index according to the following equation.</p>\n   <div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">$gini$ = [1 - (the number of males in group1 / the number of people in group1)$^2$ - (the number of females in group1 / the number of people in group1)$^2$] $\\times$ (the number of people in group1 / the total number of people in both groups) + [1 - (the number of males in group2 / the number of people in group2)$^2$ - (the number of females in group2 / the number of people in group2)$^2$] $\\times$ (the number of people in group2 / the total number of people in both groups)</div>\n\n<p>   So the gini index should be calculated as follows if we split the data based on A’s weight.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4<br>$$</p>\n<p>   We can also split the data based on A’s height, to get another gini index.<br>$$<br>   gini = 0 + (1 - 0.25 - 0.25) \\times 0.8 = 0.4<br>$$<br>We can also split based on A’s 100m-race time, B’s weight, B’s height, …, E’s 100m-race time, 3 x 5 = 15 ways in total. We calculate the gini index for each of the 15 ways, and choose the one with the smallest gini index. So we should split based on D’s weight if we got the smallest gini index based on D’s weight. Why choose the smallest one? Because the smaller gini index is, the purer each group will be. We are not going to dive into the reason in detail here because it’s more about the math rather than the implementation.</p>\n<p>The code to calculate gini index is as follows.</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_gini_index</span><span class=\"params\">(left, right, categories)</span>:</span></div><div class=\"line\">    gini_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> group <span class=\"keyword\">in</span> left, right:</div><div class=\"line\">        <span class=\"keyword\">if</span> len(group) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        score = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</div><div class=\"line\">            p = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> group].count(category) / len(group)</div><div class=\"line\">            score += p * p</div><div class=\"line\">        gini_index += (<span class=\"number\">1</span> - score) * (len(group) / len(left + right))</div><div class=\"line\">    <span class=\"keyword\">return</span> gini_index</div></pre></td></tr></table></figure>\n<p>   We use the above piece of code in this way:</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">A = [<span class=\"number\">50</span>, <span class=\"number\">1.62</span>, <span class=\"number\">18</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">B = [<span class=\"number\">70</span>, <span class=\"number\">1.81</span>, <span class=\"number\">16</span>, <span class=\"string\">'Male'</span>]</div><div class=\"line\">C = [<span class=\"number\">60</span>, <span class=\"number\">1.72</span>, <span class=\"number\">15</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">D = [<span class=\"number\">70</span>, <span class=\"number\">1.71</span>, <span class=\"number\">19</span>, <span class=\"string\">'Male'</span>]</div><div class=\"line\">E = [<span class=\"number\">52</span>, <span class=\"number\">1.69</span>, <span class=\"number\">17</span>, <span class=\"string\">'Female'</span>]</div><div class=\"line\">left = [A]</div><div class=\"line\">right = [B, C, D, E]</div><div class=\"line\">gini_index = get_gini_index(left, right, [<span class=\"string\">'Male'</span>, <span class=\"string\">'Female'</span>])</div><div class=\"line\">print(gini_index) <span class=\"comment\"># 0.4</span></div></pre></td></tr></table></figure>\n<h1 id=\"Use-multiple-trees-to-boost-the-accuracy\"><a href=\"#Use-multiple-trees-to-boost-the-accuracy\" class=\"headerlink\" title=\"Use multiple trees to boost the accuracy\"></a>Use multiple trees to boost the accuracy</h1><p>You may wonder why it’s called the random forest when we only used one tree? Good question! In fact, we shouldn’t only use one tree. The correct process is as follows.</p>\n<ol>\n<li>Choose 90% of the data randomly for training.</li>\n<li>Train those data, i.e. the process of building a tree shown above.</li>\n<li>Use this tree to predict, get the prediction <code>x</code>.</li>\n<li>Repeat the above three steps, build another tree, get another prediction <code>y</code>.</li>\n<li>Repeat the first three steps again, get another prediction <code>z</code>.</li>\n<li>Choose the one that appears the most in <code>x, y, z</code>, which should be our final prediction, return it.</li>\n</ol>\n<p>So you should know why it’s call random forest, right? We built 3 trees in total, and got the final result based on 3 predictions obtained from 3 trees. The number 3 can be changed, too. You can also build 5 trees, 10 trees, etc., whatever works out for you. Moreover, the sampling ratio 90% can be changed, too. 80%, 70%, whatever you like.</p>\n<p>The purpose of building multiple trees is to avoid overfitting. From Wikipedia:</p>\n<blockquote>\n<p>In statistics, <strong>overfitting</strong> is “the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably”.</p>\n</blockquote>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><p>Now that we know how it works, it’s time for us to dive into the code. Notice that some parameters in the code are not mentioned before, so let’s review them together.</p>\n<ol>\n<li>min_size: when the number of data in some node is less than <code>min_size</code>, further splitting is not allowed. I.e., the current group is taken as a leaf node, the value of the leaf node is determined by the category that appears the most in the group.</li>\n<li>max_depth: The maximum depth of a tree, further splitting is not allowed when <code>max_depth</code> is exceeded, the value of the node is determined by the category that appears the most in the group.</li>\n<li>n_features: The number of features chosen to build the current tree. In case if you don’t know what a feature is, weight, height, 100m-race time are both called features in the previous example. We choose <code>n_features</code> features for training each time we build a tree. In this way, features used in each tree is different, which means the final trees we build will be different, so overfitting could be avoid.</li>\n</ol>\n<p>Code to implement random forest is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data)</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># all the data that is held by this node</span></div><div class=\"line\">        self.data = data</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># left child node</span></div><div class=\"line\">        self.left = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># right child node</span></div><div class=\"line\">        self.right = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># category if the current node is a leaf node</span></div><div class=\"line\">        self.category = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># a tuple: (row, column), representing the point where we split the data</span></div><div class=\"line\">        <span class=\"comment\"># into the left/right node</span></div><div class=\"line\">        self.split_point = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_model</span><span class=\"params\">(train_data, n_trees, max_depth, min_size, n_features, n_sample_rate)</span>:</span></div><div class=\"line\">    trees = []</div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n_trees):</div><div class=\"line\">        random.shuffle(train_data)</div><div class=\"line\">        n_samples = int(len(train_data) * n_sample_rate)</div><div class=\"line\">        tree = build_tree(train_data[: n_samples], <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\">        trees.append(tree)</div><div class=\"line\">    <span class=\"keyword\">return</span> trees</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_with_single_tree</span><span class=\"params\">(tree, row)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> tree.category <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> tree.category</div><div class=\"line\">    x, y = tree.split_point</div><div class=\"line\">    split_value = tree.data[x][y]</div><div class=\"line\">    <span class=\"keyword\">if</span> row[y] &lt;= split_value:</div><div class=\"line\">        <span class=\"keyword\">return</span> predict_with_single_tree(tree.left, row)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> predict_with_single_tree(tree.right, row)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict</span><span class=\"params\">(trees, row)</span>:</span></div><div class=\"line\">    prediction = []</div><div class=\"line\">    <span class=\"keyword\">for</span> tree <span class=\"keyword\">in</span> trees:</div><div class=\"line\">        prediction.append(predict_with_single_tree(tree, row))</div><div class=\"line\">    <span class=\"keyword\">return</span> max(set(prediction), key=prediction.count)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_most_common_category</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    categories = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data]</div><div class=\"line\">    <span class=\"keyword\">return</span> max(set(categories), key=categories.count)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_tree</span><span class=\"params\">(train_data, depth, max_depth, min_size, n_features)</span>:</span></div><div class=\"line\">    root = Node(train_data)</div><div class=\"line\">    x, y = get_split_point(train_data, n_features)</div><div class=\"line\">    left_group, right_group = split(train_data, x, y)</div><div class=\"line\">    <span class=\"keyword\">if</span> len(left_group) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> len(right_group) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> depth &gt;= max_depth:</div><div class=\"line\">        root.category = get_most_common_category(left_group + right_group)</div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">        root.split_point = (x, y)</div><div class=\"line\">        <span class=\"keyword\">if</span> len(left_group) &lt; min_size:</div><div class=\"line\">            root.left = Node(left_group)</div><div class=\"line\">            root.left.category = get_most_common_category(left_group)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            root.left = build_tree(left_group, depth + <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> len(right_group) &lt; min_size:</div><div class=\"line\">            root.right = Node(right_group)</div><div class=\"line\">            root.right.category = get_most_common_category(right_group)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            root.right = build_tree(right_group, depth + <span class=\"number\">1</span>, max_depth, min_size, n_features)</div><div class=\"line\">    <span class=\"keyword\">return</span> root</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_features</span><span class=\"params\">(n_selected_features, n_total_features)</span>:</span></div><div class=\"line\">    features = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n_total_features)]</div><div class=\"line\">    random.shuffle(features)</div><div class=\"line\">    <span class=\"keyword\">return</span> features[:n_selected_features]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_categories</span><span class=\"params\">(data)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> set([row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data])</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_split_point</span><span class=\"params\">(data, n_features)</span>:</span></div><div class=\"line\">    n_total_features = len(data[<span class=\"number\">0</span>]) - <span class=\"number\">1</span></div><div class=\"line\">    features = get_features(n_features, n_total_features)</div><div class=\"line\">    categories = get_categories(data)</div><div class=\"line\">    x, y, gini_index = <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span>, <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(data)):</div><div class=\"line\">        <span class=\"keyword\">for</span> feature <span class=\"keyword\">in</span> features:</div><div class=\"line\">            left, right = split(data, index, feature)</div><div class=\"line\">            current_gini_index = get_gini_index(left, right, categories)</div><div class=\"line\">            <span class=\"keyword\">if</span> gini_index <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> current_gini_index &lt; gini_index:</div><div class=\"line\">                x, y, gini_index = index, feature, current_gini_index</div><div class=\"line\">    <span class=\"keyword\">return</span> x, y</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_gini_index</span><span class=\"params\">(left, right, categories)</span>:</span></div><div class=\"line\">    gini_index = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> group <span class=\"keyword\">in</span> left, right:</div><div class=\"line\">        <span class=\"keyword\">if</span> len(group) == <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">continue</span></div><div class=\"line\">        score = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">for</span> category <span class=\"keyword\">in</span> categories:</div><div class=\"line\">            p = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> group].count(category) / len(group)</div><div class=\"line\">            score += p * p</div><div class=\"line\">        gini_index += (<span class=\"number\">1</span> - score) * (len(group) / len(left + right))</div><div class=\"line\">    <span class=\"keyword\">return</span> gini_index</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split</span><span class=\"params\">(data, x, y)</span>:</span></div><div class=\"line\">    split_value = data[x][y]</div><div class=\"line\">    left, right = [], []</div><div class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</div><div class=\"line\">        <span class=\"keyword\">if</span> row[y] &lt;= split_value:</div><div class=\"line\">            left.append(row)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            right.append(row)</div><div class=\"line\">    <span class=\"keyword\">return</span> left, right</div></pre></td></tr></table></figure>\n<p>So how to use this piece of code? Let’s take <a href=\"https://archive.ics.uci.edu/ml/datasets/connectionist+bench+%28sonar,+mines+vs.+rocks%29\" target=\"_blank\" rel=\"external\">Sonar</a>, which is real-life data as an example(You can have a glimpse of its contents in <a href=\"https://github.com/searene/demos/blob/master/RandomForest/resources/sonar.all-data.csv\" target=\"_blank\" rel=\"external\">here</a>). The last column in Sonar represents category, which are two of them in total, R and M. R means rock and M means metal. The first 60 columns represents data obtained by bouncing sonar signals off a surface(R or M) at various angles and under various conditions. Let’s load these data and split them into two groups, one for training and one for testing. Training data is used to build models, and test data is used to check the accuracy of the model.</p>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> random</div><div class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</div><div class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</div><div class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> sqrt</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> random_forest <span class=\"keyword\">import</span> build_model, predict</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrossValidationSplitter</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, k_fold)</span>:</span></div><div class=\"line\">        self.data = data</div><div class=\"line\">        self.k_fold = k_fold</div><div class=\"line\">        self.n_iteration = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__next__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.n_iteration &gt;= self.k_fold:</div><div class=\"line\">            <span class=\"keyword\">raise</span> StopIteration</div><div class=\"line\">        self.n_iteration += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.__load_data()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__load_data</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        n_train_data = (<span class=\"number\">1</span> / self.k_fold) * len(self.data)</div><div class=\"line\">        data_copy = self.data[:]</div><div class=\"line\">        train_data = []</div><div class=\"line\">        <span class=\"keyword\">while</span> len(train_data) &lt; n_train_data:</div><div class=\"line\">            train_data.append(self.__pop_random_row(data_copy))</div><div class=\"line\">        test_data = data_copy</div><div class=\"line\">        <span class=\"keyword\">return</span> train_data, test_data</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__pop_random_row</span><span class=\"params\">(self, data)</span>:</span></div><div class=\"line\">        random.shuffle(data)</div><div class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"number\">0</span>]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">split_data</span><span class=\"params\">(data, rate)</span>:</span></div><div class=\"line\">    random.shuffle(data)</div><div class=\"line\">    n_train_data = int(len(data) * rate)</div><div class=\"line\">    <span class=\"keyword\">return</span> data[: n_train_data], data[n_train_data:]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calculate_accuracy</span><span class=\"params\">(model, validate_data)</span>:</span></div><div class=\"line\">    n_total = <span class=\"number\">0</span></div><div class=\"line\">    n_correct = <span class=\"number\">0</span></div><div class=\"line\">    predicted_categories = [predict(model, row[:<span class=\"number\">-1</span>]) <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> validate_data]</div><div class=\"line\">    correct_categories = [row[<span class=\"number\">-1</span>] <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> validate_data]</div><div class=\"line\">    <span class=\"keyword\">for</span> predicted_category, correct_category <span class=\"keyword\">in</span> zip(predicted_categories, correct_categories):</div><div class=\"line\">        n_total += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> predicted_category == correct_category:</div><div class=\"line\">            n_correct += <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> n_correct / n_total</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">df = pd.read_csv(<span class=\"string\">'resources/sonar.all-data.csv'</span>, header=<span class=\"keyword\">None</span>)</div><div class=\"line\">data = df.values.tolist()</div><div class=\"line\">train_data_all, test_data = split_data(data, <span class=\"number\">0.9</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> n_tree <span class=\"keyword\">in</span> [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>]:</div><div class=\"line\">    accuracies = []</div><div class=\"line\">    cross_validation_splitter = CrossValidationSplitter(train_data_all, <span class=\"number\">5</span>)</div><div class=\"line\">    model = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">for</span> train_data, validate_data <span class=\"keyword\">in</span> cross_validation_splitter:</div><div class=\"line\">        n_features = int(sqrt(len(train_data[<span class=\"number\">0</span>]) - <span class=\"number\">1</span>))</div><div class=\"line\">        model = build_model(</div><div class=\"line\">            train_data=train_data,</div><div class=\"line\">            n_trees=n_tree,</div><div class=\"line\">            max_depth=<span class=\"number\">5</span>,</div><div class=\"line\">            min_size=<span class=\"number\">1</span>,</div><div class=\"line\">            n_features=n_features,</div><div class=\"line\">            n_sample_rate=<span class=\"number\">0.9</span></div><div class=\"line\">        )</div><div class=\"line\">        accuracies.append(calculate_accuracy(model, validate_data))</div><div class=\"line\">    print(<span class=\"string\">\"Average cross validation accuracy for &#123;&#125; trees: &#123;&#125;\"</span>.format(n_tree, np.mean(accuracies)))</div><div class=\"line\">    print(<span class=\"string\">\"Test accuracy for &#123;&#125; trees: &#123;&#125;\"</span>.format(n_tree, calculate_accuracy(model, test_data)))</div></pre></td></tr></table></figure>\n<p>The result is as follows.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Average cross validation accuracy for 1 trees: 0.6887700534759359</div><div class=\"line\">Test accuracy for 1 trees: 0.6190476190476191</div><div class=\"line\">Average cross validation accuracy for 3 trees: 0.6898395721925135</div><div class=\"line\">Test accuracy for 3 trees: 0.8571428571428571</div><div class=\"line\">Average cross validation accuracy for 10 trees: 0.6983957219251338</div><div class=\"line\">Test accuracy for 10 trees: 0.7619047619047619</div></pre></td></tr></table></figure>\n<p>As you can see, we get the highest accuracy with 3 trees(around 85%), we have reason to believe that we could get a better result if further tunning is conducted.</p>\n"},{"title":"learn redirection the hard way","date":"2016-03-26T13:44:20.000Z","thumbnail":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQeX32vzVc7vazI4vrqXC2Dy1CkeTh4ipgZJkCrRsnyCeNWV30EVw","_content":"\n\nIt's been a long time since the last time I wrote the blog, because I'm not a fan of writing blogs. But today I solved a problem with hours' digging and trying, so I think it might be a good idea to share it.\n\nThe main idea was that I wanted to run a script at boot, which contained the following line,\n\n```zsh\n/path/to/node_modules/.bin/gulp 2>&1 > /tmp/gulp.log\n```\n\nThis line just wouldn't run, and I didn't know why. What's more, the output file `/tmp/gulp.log` was totally empty. Just when I thought I could do nothing about it and I was just going to give up, I found a possible solution online, which was to put `2>&1` immediately before `&`, as follows,\n\n```zsh\n/path/to/node_modules/.bin/gulp > /tmp/gulp.log 2>&1 &\n```\n\nIt worked! Then I got the error, `gulp` couldn't find `node`. I didn't know why, I guessed the script didn't source `~/.zshrc` file before running the script. So I added the following line in the script.\n\n```zsh\nsource ~/.zshrc\n```\n\nIt worked. The original script was executed as perfectly as one could expect. A good lesson. There's no problem that is unsolvable, the only problem is whether you have enough time and whether you want to find it.\n","source":"_posts/learn-redirection-the-hard-way.md","raw":"title: learn redirection the hard way\ndate: 2016-03-26 21:44:20\ntags: [linux, zsh, shell]\ncategories: Coding\nthumbnail: https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQeX32vzVc7vazI4vrqXC2Dy1CkeTh4ipgZJkCrRsnyCeNWV30EVw\n---\n\n\nIt's been a long time since the last time I wrote the blog, because I'm not a fan of writing blogs. But today I solved a problem with hours' digging and trying, so I think it might be a good idea to share it.\n\nThe main idea was that I wanted to run a script at boot, which contained the following line,\n\n```zsh\n/path/to/node_modules/.bin/gulp 2>&1 > /tmp/gulp.log\n```\n\nThis line just wouldn't run, and I didn't know why. What's more, the output file `/tmp/gulp.log` was totally empty. Just when I thought I could do nothing about it and I was just going to give up, I found a possible solution online, which was to put `2>&1` immediately before `&`, as follows,\n\n```zsh\n/path/to/node_modules/.bin/gulp > /tmp/gulp.log 2>&1 &\n```\n\nIt worked! Then I got the error, `gulp` couldn't find `node`. I didn't know why, I guessed the script didn't source `~/.zshrc` file before running the script. So I added the following line in the script.\n\n```zsh\nsource ~/.zshrc\n```\n\nIt worked. The original script was executed as perfectly as one could expect. A good lesson. There's no problem that is unsolvable, the only problem is whether you have enough time and whether you want to find it.\n","slug":"learn-redirection-the-hard-way","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqef00558arfrrqf4arn","content":"<p>It’s been a long time since the last time I wrote the blog, because I’m not a fan of writing blogs. But today I solved a problem with hours’ digging and trying, so I think it might be a good idea to share it.</p>\n<p>The main idea was that I wanted to run a script at boot, which contained the following line,</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/node_modules/.bin/gulp 2&gt;&amp;1 &gt; /tmp/gulp.log</div></pre></td></tr></table></figure>\n<p>This line just wouldn’t run, and I didn’t know why. What’s more, the output file <code>/tmp/gulp.log</code> was totally empty. Just when I thought I could do nothing about it and I was just going to give up, I found a possible solution online, which was to put <code>2&gt;&amp;1</code> immediately before <code>&amp;</code>, as follows,</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/node_modules/.bin/gulp &gt; /tmp/gulp.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>\n<p>It worked! Then I got the error, <code>gulp</code> couldn’t find <code>node</code>. I didn’t know why, I guessed the script didn’t source <code>~/.zshrc</code> file before running the script. So I added the following line in the script.</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</div></pre></td></tr></table></figure>\n<p>It worked. The original script was executed as perfectly as one could expect. A good lesson. There’s no problem that is unsolvable, the only problem is whether you have enough time and whether you want to find it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s been a long time since the last time I wrote the blog, because I’m not a fan of writing blogs. But today I solved a problem with hours’ digging and trying, so I think it might be a good idea to share it.</p>\n<p>The main idea was that I wanted to run a script at boot, which contained the following line,</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/node_modules/.bin/gulp 2&gt;&amp;1 &gt; /tmp/gulp.log</div></pre></td></tr></table></figure>\n<p>This line just wouldn’t run, and I didn’t know why. What’s more, the output file <code>/tmp/gulp.log</code> was totally empty. Just when I thought I could do nothing about it and I was just going to give up, I found a possible solution online, which was to put <code>2&gt;&amp;1</code> immediately before <code>&amp;</code>, as follows,</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/path/to/node_modules/.bin/gulp &gt; /tmp/gulp.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>\n<p>It worked! Then I got the error, <code>gulp</code> couldn’t find <code>node</code>. I didn’t know why, I guessed the script didn’t source <code>~/.zshrc</code> file before running the script. So I added the following line in the script.</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</div></pre></td></tr></table></figure>\n<p>It worked. The original script was executed as perfectly as one could expect. A good lesson. There’s no problem that is unsolvable, the only problem is whether you have enough time and whether you want to find it.</p>\n"},{"title":"get selected text in chrome","date":"2015-12-09T14:32:06.000Z","_content":"\n\n## EDIT\n\nThe method mentioned here is overcomplicated. To see a simple method, please refer to [my answer at stackoverflow.com](https://stackoverflow.com/questions/34170032/how-to-get-selected-text-in-chrome-extension-development/34183944#answer-34181338)\n\n## preface\n\nI want to get the selected text in chrome. After hours of searching and trying, I finally figured it out. It's not as simple as putting the javascript in a file and invoking the script.\n\n## content.js\n\nYou need this file to inject your script into the target webpage. Without this file, it's impossible to get the selected text.\n\n```javascript\nchrome.runtime.sendMessage({\n\t'title': document.title,\n\t'url': window.location.href,\n\t'summary': window.getSelection().toString()\n});\n```\n\nNotice that if you want to get the HTML source code of the selected text, you can use the following `content.js`\n\n## content.js to get the HTML source code instead of plain text\n\n```javascript\n// http://groups.google.com/group/mozilla.dev.tech.dom/browse_thread/thread/7ecbbb066ff2027f\n// Martin Honnen\n//  http://JavaScript.FAQTs.com/ \nvar selection = window.getSelection();\nvar range = selection.getRangeAt(0);\nif (range) {\n\tvar div = document.createElement('div');\n\tdiv.appendChild(range.cloneContents());\n\tvs=div.innerHTML;\n} \nchrome.runtime.sendMessage({\n\t'title': document.title,\n\t'url': window.location.href,\n\t'summary': vs\n});\n\n```\n\nHere you can see, `content.js` sent a message including the selected text. So how we get the message? To achieve this, we need something called background page, which is running in the background. It's usually called `event.js`\n\n## event.js\n\n```javascript\n// This function is called onload in the popup code\nfunction getPageDetails(callback) { \n\t// Inject the content script into the current page \n\tchrome.tabs.executeScript(null, { file: 'content.js' }); \n\t// Perform the callback when a message is received from the content script\n\tchrome.runtime.onMessage.addListener(function(message)  { \n\t\t// Call the callback function\n\t\tcallback(message); \n\t}); \n};\n```\n\n\n`event.js` is not always running, but it will wake up when **another view in the extension (for example, a popup) calls runtime.getBackgroundPage.**, just like the code in `popup.js`\n\n## popup.js\n\n```javascript\nfunction onPageDetailsReceived(details) {\n\tdocument.getElementById('output').innerText = details.summary;\n}\n// When the popup HTML has loaded\nwindow.addEventListener('load', function(evt) {\n\t\t// Get the event page\n\t\tchrome.runtime.getBackgroundPage(function(eventPage) {\n\t\t\t\t// Call the getPageInfo function in the event page, passing in \n\t\t\t\t// our onPageDetailsReceived function as the callback. This injects \n\t\t\t\t// content.js into the current tab's HTML\n\t\t\t\teventPage.getPageDetails(onPageDetailsReceived);\n\t\t\t\t});\n\t\t});\n```\n\nYou have to declare your background page (`event.js`) and relative permissions in `manifest.json`, the sample file is as follows:\n\n## manifest.json\n\n```json\n{\n\t\"manifest_version\": 2,\n\t\t\"name\": \"sample\",\n\t\t\"description\": \"a sample manifest.json\",\n\t\t\"version\": \"1.0\",\n\t\t\"permissions\": [\n\t\t\t\"storage\"\n\t\t],\n\t\t\"icons\": { \n\t\t\t\"16\": \"img/icon16.png\",\n\t\t\t\"48\": \"img/icon48.png\",\n\t\t\t\"128\": \"img/icon128.png\" \n\t\t},\n\t\t\"background\": {\n\t\t\t\"scripts\": [\"event.js\"],\n\t\t\t\"persistent\": false\n\t\t},\n\t\t\"browser_action\": {\n\t\t\t\"default_icon\": {                    \n\t\t\t\t\"19\": \"img/icon48.png\",          \n\t\t\t\t\"38\": \"img/icon48.png\"          \n\t\t\t},\n\t\t\t\"default_popup\": \"popup.html\"\n\t\t},\n\t\t\"content_security_policy\": \"script-src 'self' https://ssl.google-analytics.com; object-src 'self'\",\n\t\t\"web_accessible_resources\": [\n\t\t\t\"img/icon128.png\"\n\t\t],\n\t\t\"permissions\": [\n\t\t\t\"tabs\", \n\t\t\"http://*/*\", \n\t\t\"https://*/*\"\n\t\t]\n}\n```\n\nFinally, this is what `popup.html` looks like\n\n## popup.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n\n<script src=\"popup.js\"></script>\n<title></title>\n</head>\n<body>\n<div id=\"output\"></div>\n</body>\n</html>\n```\n\nYou can find the demo source code [here][1]\n\nThis is the whole picture:\n\n[![the whole picture][2]][2]\n\n\n---\n\n## Reference\n\n[Building a simple Google Chrome extension][3]\n\n  [1]: https://github.com/searene/demos/tree/master/GetSelectedTextInChromeExtention\n  [2]: http://i.stack.imgur.com/mHkC2.png\n  [3]: http://markb.co.uk/building-a-simple-google-chrome-extension.html\n","source":"_posts/get-selected-text-in-chrome.md","raw":"title: get selected text in chrome\ndate: 2015-12-09 22:32:06\ncategories: Coding\ntags: [chrome, javascript]\n---\n\n\n## EDIT\n\nThe method mentioned here is overcomplicated. To see a simple method, please refer to [my answer at stackoverflow.com](https://stackoverflow.com/questions/34170032/how-to-get-selected-text-in-chrome-extension-development/34183944#answer-34181338)\n\n## preface\n\nI want to get the selected text in chrome. After hours of searching and trying, I finally figured it out. It's not as simple as putting the javascript in a file and invoking the script.\n\n## content.js\n\nYou need this file to inject your script into the target webpage. Without this file, it's impossible to get the selected text.\n\n```javascript\nchrome.runtime.sendMessage({\n\t'title': document.title,\n\t'url': window.location.href,\n\t'summary': window.getSelection().toString()\n});\n```\n\nNotice that if you want to get the HTML source code of the selected text, you can use the following `content.js`\n\n## content.js to get the HTML source code instead of plain text\n\n```javascript\n// http://groups.google.com/group/mozilla.dev.tech.dom/browse_thread/thread/7ecbbb066ff2027f\n// Martin Honnen\n//  http://JavaScript.FAQTs.com/ \nvar selection = window.getSelection();\nvar range = selection.getRangeAt(0);\nif (range) {\n\tvar div = document.createElement('div');\n\tdiv.appendChild(range.cloneContents());\n\tvs=div.innerHTML;\n} \nchrome.runtime.sendMessage({\n\t'title': document.title,\n\t'url': window.location.href,\n\t'summary': vs\n});\n\n```\n\nHere you can see, `content.js` sent a message including the selected text. So how we get the message? To achieve this, we need something called background page, which is running in the background. It's usually called `event.js`\n\n## event.js\n\n```javascript\n// This function is called onload in the popup code\nfunction getPageDetails(callback) { \n\t// Inject the content script into the current page \n\tchrome.tabs.executeScript(null, { file: 'content.js' }); \n\t// Perform the callback when a message is received from the content script\n\tchrome.runtime.onMessage.addListener(function(message)  { \n\t\t// Call the callback function\n\t\tcallback(message); \n\t}); \n};\n```\n\n\n`event.js` is not always running, but it will wake up when **another view in the extension (for example, a popup) calls runtime.getBackgroundPage.**, just like the code in `popup.js`\n\n## popup.js\n\n```javascript\nfunction onPageDetailsReceived(details) {\n\tdocument.getElementById('output').innerText = details.summary;\n}\n// When the popup HTML has loaded\nwindow.addEventListener('load', function(evt) {\n\t\t// Get the event page\n\t\tchrome.runtime.getBackgroundPage(function(eventPage) {\n\t\t\t\t// Call the getPageInfo function in the event page, passing in \n\t\t\t\t// our onPageDetailsReceived function as the callback. This injects \n\t\t\t\t// content.js into the current tab's HTML\n\t\t\t\teventPage.getPageDetails(onPageDetailsReceived);\n\t\t\t\t});\n\t\t});\n```\n\nYou have to declare your background page (`event.js`) and relative permissions in `manifest.json`, the sample file is as follows:\n\n## manifest.json\n\n```json\n{\n\t\"manifest_version\": 2,\n\t\t\"name\": \"sample\",\n\t\t\"description\": \"a sample manifest.json\",\n\t\t\"version\": \"1.0\",\n\t\t\"permissions\": [\n\t\t\t\"storage\"\n\t\t],\n\t\t\"icons\": { \n\t\t\t\"16\": \"img/icon16.png\",\n\t\t\t\"48\": \"img/icon48.png\",\n\t\t\t\"128\": \"img/icon128.png\" \n\t\t},\n\t\t\"background\": {\n\t\t\t\"scripts\": [\"event.js\"],\n\t\t\t\"persistent\": false\n\t\t},\n\t\t\"browser_action\": {\n\t\t\t\"default_icon\": {                    \n\t\t\t\t\"19\": \"img/icon48.png\",          \n\t\t\t\t\"38\": \"img/icon48.png\"          \n\t\t\t},\n\t\t\t\"default_popup\": \"popup.html\"\n\t\t},\n\t\t\"content_security_policy\": \"script-src 'self' https://ssl.google-analytics.com; object-src 'self'\",\n\t\t\"web_accessible_resources\": [\n\t\t\t\"img/icon128.png\"\n\t\t],\n\t\t\"permissions\": [\n\t\t\t\"tabs\", \n\t\t\"http://*/*\", \n\t\t\"https://*/*\"\n\t\t]\n}\n```\n\nFinally, this is what `popup.html` looks like\n\n## popup.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n\n<script src=\"popup.js\"></script>\n<title></title>\n</head>\n<body>\n<div id=\"output\"></div>\n</body>\n</html>\n```\n\nYou can find the demo source code [here][1]\n\nThis is the whole picture:\n\n[![the whole picture][2]][2]\n\n\n---\n\n## Reference\n\n[Building a simple Google Chrome extension][3]\n\n  [1]: https://github.com/searene/demos/tree/master/GetSelectedTextInChromeExtention\n  [2]: http://i.stack.imgur.com/mHkC2.png\n  [3]: http://markb.co.uk/building-a-simple-google-chrome-extension.html\n","slug":"get-selected-text-in-chrome","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqeh00588arf0h33esgv","content":"<h2 id=\"EDIT\"><a href=\"#EDIT\" class=\"headerlink\" title=\"EDIT\"></a>EDIT</h2><p>The method mentioned here is overcomplicated. To see a simple method, please refer to <a href=\"https://stackoverflow.com/questions/34170032/how-to-get-selected-text-in-chrome-extension-development/34183944#answer-34181338\" target=\"_blank\" rel=\"external\">my answer at stackoverflow.com</a></p>\n<h2 id=\"preface\"><a href=\"#preface\" class=\"headerlink\" title=\"preface\"></a>preface</h2><p>I want to get the selected text in chrome. After hours of searching and trying, I finally figured it out. It’s not as simple as putting the javascript in a file and invoking the script.</p>\n<h2 id=\"content-js\"><a href=\"#content-js\" class=\"headerlink\" title=\"content.js\"></a>content.js</h2><p>You need this file to inject your script into the target webpage. Without this file, it’s impossible to get the selected text.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">chrome.runtime.sendMessage(&#123;</div><div class=\"line\">\t<span class=\"string\">'title'</span>: <span class=\"built_in\">document</span>.title,</div><div class=\"line\">\t<span class=\"string\">'url'</span>: <span class=\"built_in\">window</span>.location.href,</div><div class=\"line\">\t<span class=\"string\">'summary'</span>: <span class=\"built_in\">window</span>.getSelection().toString()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Notice that if you want to get the HTML source code of the selected text, you can use the following <code>content.js</code></p>\n<h2 id=\"content-js-to-get-the-HTML-source-code-instead-of-plain-text\"><a href=\"#content-js-to-get-the-HTML-source-code-instead-of-plain-text\" class=\"headerlink\" title=\"content.js to get the HTML source code instead of plain text\"></a>content.js to get the HTML source code instead of plain text</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// http://groups.google.com/group/mozilla.dev.tech.dom/browse_thread/thread/7ecbbb066ff2027f</span></div><div class=\"line\"><span class=\"comment\">// Martin Honnen</span></div><div class=\"line\"><span class=\"comment\">//  http://JavaScript.FAQTs.com/ </span></div><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection();</div><div class=\"line\"><span class=\"keyword\">var</span> range = selection.getRangeAt(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (range) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\tdiv.appendChild(range.cloneContents());</div><div class=\"line\">\tvs=div.innerHTML;</div><div class=\"line\">&#125; </div><div class=\"line\">chrome.runtime.sendMessage(&#123;</div><div class=\"line\">\t<span class=\"string\">'title'</span>: <span class=\"built_in\">document</span>.title,</div><div class=\"line\">\t<span class=\"string\">'url'</span>: <span class=\"built_in\">window</span>.location.href,</div><div class=\"line\">\t<span class=\"string\">'summary'</span>: vs</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Here you can see, <code>content.js</code> sent a message including the selected text. So how we get the message? To achieve this, we need something called background page, which is running in the background. It’s usually called <code>event.js</code></p>\n<h2 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This function is called onload in the popup code</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPageDetails</span>(<span class=\"params\">callback</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"comment\">// Inject the content script into the current page </span></div><div class=\"line\">\tchrome.tabs.executeScript(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">file</span>: <span class=\"string\">'content.js'</span> &#125;); </div><div class=\"line\">\t<span class=\"comment\">// Perform the callback when a message is received from the content script</span></div><div class=\"line\">\tchrome.runtime.onMessage.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)  </span>&#123; </div><div class=\"line\">\t\t<span class=\"comment\">// Call the callback function</span></div><div class=\"line\">\t\tcallback(message); </div><div class=\"line\">\t&#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>event.js</code> is not always running, but it will wake up when <strong>another view in the extension (for example, a popup) calls runtime.getBackgroundPage.</strong>, just like the code in <code>popup.js</code></p>\n<h2 id=\"popup-js\"><a href=\"#popup-js\" class=\"headerlink\" title=\"popup.js\"></a>popup.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageDetailsReceived</span>(<span class=\"params\">details</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerText = details.summary;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// When the popup HTML has loaded</span></div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Get the event page</span></div><div class=\"line\">\t\tchrome.runtime.getBackgroundPage(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventPage</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// Call the getPageInfo function in the event page, passing in </span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// our onPageDetailsReceived function as the callback. This injects </span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// content.js into the current tab's HTML</span></div><div class=\"line\">\t\t\t\teventPage.getPageDetails(onPageDetailsReceived);</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure>\n<p>You have to declare your background page (<code>event.js</code>) and relative permissions in <code>manifest.json</code>, the sample file is as follows:</p>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sample\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"a sample manifest.json\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"permissions\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage\"</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t<span class=\"attr\">\"icons\"</span>: &#123; </div><div class=\"line\">\t\t\t<span class=\"attr\">\"16\"</span>: <span class=\"string\">\"img/icon16.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"48\"</span>: <span class=\"string\">\"img/icon48.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"128\"</span>: <span class=\"string\">\"img/icon128.png\"</span> </div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"background\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"scripts\"</span>: [<span class=\"string\">\"event.js\"</span>],</div><div class=\"line\">\t\t\t<span class=\"attr\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"browser_action\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"default_icon\"</span>: &#123;                    </div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"19\"</span>: <span class=\"string\">\"img/icon48.png\"</span>,          </div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"38\"</span>: <span class=\"string\">\"img/icon48.png\"</span>          </div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"content_security_policy\"</span>: <span class=\"string\">\"script-src 'self' https://ssl.google-analytics.com; object-src 'self'\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"web_accessible_resources\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"img/icon128.png\"</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t<span class=\"attr\">\"permissions\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"tabs\"</span>, </div><div class=\"line\">\t\t<span class=\"string\">\"http://*/*\"</span>, </div><div class=\"line\">\t\t<span class=\"string\">\"https://*/*\"</span></div><div class=\"line\">\t\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Finally, this is what <code>popup.html</code> looks like</p>\n<h2 id=\"popup-html\"><a href=\"#popup-html\" class=\"headerlink\" title=\"popup.html\"></a>popup.html</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"popup.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can find the demo source code <a href=\"https://github.com/searene/demos/tree/master/GetSelectedTextInChromeExtention\" target=\"_blank\" rel=\"external\">here</a></p>\n<p>This is the whole picture:</p>\n<p><a href=\"http://i.stack.imgur.com/mHkC2.png\" target=\"_blank\" rel=\"external\"><img src=\"http://i.stack.imgur.com/mHkC2.png\" alt=\"the whole picture\"></a></p>\n<hr>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"http://markb.co.uk/building-a-simple-google-chrome-extension.html\" target=\"_blank\" rel=\"external\">Building a simple Google Chrome extension</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"EDIT\"><a href=\"#EDIT\" class=\"headerlink\" title=\"EDIT\"></a>EDIT</h2><p>The method mentioned here is overcomplicated. To see a simple method, please refer to <a href=\"https://stackoverflow.com/questions/34170032/how-to-get-selected-text-in-chrome-extension-development/34183944#answer-34181338\" target=\"_blank\" rel=\"external\">my answer at stackoverflow.com</a></p>\n<h2 id=\"preface\"><a href=\"#preface\" class=\"headerlink\" title=\"preface\"></a>preface</h2><p>I want to get the selected text in chrome. After hours of searching and trying, I finally figured it out. It’s not as simple as putting the javascript in a file and invoking the script.</p>\n<h2 id=\"content-js\"><a href=\"#content-js\" class=\"headerlink\" title=\"content.js\"></a>content.js</h2><p>You need this file to inject your script into the target webpage. Without this file, it’s impossible to get the selected text.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">chrome.runtime.sendMessage(&#123;</div><div class=\"line\">\t<span class=\"string\">'title'</span>: <span class=\"built_in\">document</span>.title,</div><div class=\"line\">\t<span class=\"string\">'url'</span>: <span class=\"built_in\">window</span>.location.href,</div><div class=\"line\">\t<span class=\"string\">'summary'</span>: <span class=\"built_in\">window</span>.getSelection().toString()</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Notice that if you want to get the HTML source code of the selected text, you can use the following <code>content.js</code></p>\n<h2 id=\"content-js-to-get-the-HTML-source-code-instead-of-plain-text\"><a href=\"#content-js-to-get-the-HTML-source-code-instead-of-plain-text\" class=\"headerlink\" title=\"content.js to get the HTML source code instead of plain text\"></a>content.js to get the HTML source code instead of plain text</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// http://groups.google.com/group/mozilla.dev.tech.dom/browse_thread/thread/7ecbbb066ff2027f</span></div><div class=\"line\"><span class=\"comment\">// Martin Honnen</span></div><div class=\"line\"><span class=\"comment\">//  http://JavaScript.FAQTs.com/ </span></div><div class=\"line\"><span class=\"keyword\">var</span> selection = <span class=\"built_in\">window</span>.getSelection();</div><div class=\"line\"><span class=\"keyword\">var</span> range = selection.getRangeAt(<span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (range) &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\tdiv.appendChild(range.cloneContents());</div><div class=\"line\">\tvs=div.innerHTML;</div><div class=\"line\">&#125; </div><div class=\"line\">chrome.runtime.sendMessage(&#123;</div><div class=\"line\">\t<span class=\"string\">'title'</span>: <span class=\"built_in\">document</span>.title,</div><div class=\"line\">\t<span class=\"string\">'url'</span>: <span class=\"built_in\">window</span>.location.href,</div><div class=\"line\">\t<span class=\"string\">'summary'</span>: vs</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Here you can see, <code>content.js</code> sent a message including the selected text. So how we get the message? To achieve this, we need something called background page, which is running in the background. It’s usually called <code>event.js</code></p>\n<h2 id=\"event-js\"><a href=\"#event-js\" class=\"headerlink\" title=\"event.js\"></a>event.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// This function is called onload in the popup code</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPageDetails</span>(<span class=\"params\">callback</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"comment\">// Inject the content script into the current page </span></div><div class=\"line\">\tchrome.tabs.executeScript(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">file</span>: <span class=\"string\">'content.js'</span> &#125;); </div><div class=\"line\">\t<span class=\"comment\">// Perform the callback when a message is received from the content script</span></div><div class=\"line\">\tchrome.runtime.onMessage.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">message</span>)  </span>&#123; </div><div class=\"line\">\t\t<span class=\"comment\">// Call the callback function</span></div><div class=\"line\">\t\tcallback(message); </div><div class=\"line\">\t&#125;); </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><code>event.js</code> is not always running, but it will wake up when <strong>another view in the extension (for example, a popup) calls runtime.getBackgroundPage.</strong>, just like the code in <code>popup.js</code></p>\n<h2 id=\"popup-js\"><a href=\"#popup-js\" class=\"headerlink\" title=\"popup.js\"></a>popup.js</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPageDetailsReceived</span>(<span class=\"params\">details</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'output'</span>).innerText = details.summary;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// When the popup HTML has loaded</span></div><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'load'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// Get the event page</span></div><div class=\"line\">\t\tchrome.runtime.getBackgroundPage(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">eventPage</span>) </span>&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// Call the getPageInfo function in the event page, passing in </span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// our onPageDetailsReceived function as the callback. This injects </span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// content.js into the current tab's HTML</span></div><div class=\"line\">\t\t\t\teventPage.getPageDetails(onPageDetailsReceived);</div><div class=\"line\">\t\t\t\t&#125;);</div><div class=\"line\">\t\t&#125;);</div></pre></td></tr></table></figure>\n<p>You have to declare your background page (<code>event.js</code>) and relative permissions in <code>manifest.json</code>, the sample file is as follows:</p>\n<h2 id=\"manifest-json\"><a href=\"#manifest-json\" class=\"headerlink\" title=\"manifest.json\"></a>manifest.json</h2><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"manifest_version\"</span>: <span class=\"number\">2</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"name\"</span>: <span class=\"string\">\"sample\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"description\"</span>: <span class=\"string\">\"a sample manifest.json\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"permissions\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"storage\"</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t<span class=\"attr\">\"icons\"</span>: &#123; </div><div class=\"line\">\t\t\t<span class=\"attr\">\"16\"</span>: <span class=\"string\">\"img/icon16.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"48\"</span>: <span class=\"string\">\"img/icon48.png\"</span>,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"128\"</span>: <span class=\"string\">\"img/icon128.png\"</span> </div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"background\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"scripts\"</span>: [<span class=\"string\">\"event.js\"</span>],</div><div class=\"line\">\t\t\t<span class=\"attr\">\"persistent\"</span>: <span class=\"literal\">false</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"browser_action\"</span>: &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">\"default_icon\"</span>: &#123;                    </div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"19\"</span>: <span class=\"string\">\"img/icon48.png\"</span>,          </div><div class=\"line\">\t\t\t\t<span class=\"attr\">\"38\"</span>: <span class=\"string\">\"img/icon48.png\"</span>          </div><div class=\"line\">\t\t\t&#125;,</div><div class=\"line\">\t\t\t<span class=\"attr\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></div><div class=\"line\">\t\t&#125;,</div><div class=\"line\">\t\t<span class=\"attr\">\"content_security_policy\"</span>: <span class=\"string\">\"script-src 'self' https://ssl.google-analytics.com; object-src 'self'\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">\"web_accessible_resources\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"img/icon128.png\"</span></div><div class=\"line\">\t\t],</div><div class=\"line\">\t\t<span class=\"attr\">\"permissions\"</span>: [</div><div class=\"line\">\t\t\t<span class=\"string\">\"tabs\"</span>, </div><div class=\"line\">\t\t<span class=\"string\">\"http://*/*\"</span>, </div><div class=\"line\">\t\t<span class=\"string\">\"https://*/*\"</span></div><div class=\"line\">\t\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Finally, this is what <code>popup.html</code> looks like</p>\n<h2 id=\"popup-html\"><a href=\"#popup-html\" class=\"headerlink\" title=\"popup.html\"></a>popup.html</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"popup.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"output\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>You can find the demo source code <a href=\"https://github.com/searene/demos/tree/master/GetSelectedTextInChromeExtention\" target=\"_blank\" rel=\"external\">here</a></p>\n<p>This is the whole picture:</p>\n<p><a href=\"http://i.stack.imgur.com/mHkC2.png\" target=\"_blank\" rel=\"external\"><img src=\"http://i.stack.imgur.com/mHkC2.png\" alt=\"the whole picture\"></a></p>\n<hr>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"http://markb.co.uk/building-a-simple-google-chrome-extension.html\" target=\"_blank\" rel=\"external\">Building a simple Google Chrome extension</a></p>\n"},{"title":"live a quite life","date":"2018-04-01T01:50:26.000Z","thumbnail":"/images/8608094661_f6fdcc0c83_b.jpg","_content":"\nIt's strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That's all. I'm not saying it's wrong. Actually it couldn't be more correct, especially when living in this world is pretty hard. But I'm not attractive to her any more, I don't know why. Maybe that's who I am.\n\nI found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don't know why. Maybe it's just because she's quite.\n\nI often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It's not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it's a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don't know where to go. Now I understand why depressed people tend to be insomnia, it's caused by despair. You cannot go to sleep when tomorrow also sucks.\n\n","source":"_posts/live-a-quite-life.md","raw":"title: live a quite life\ndate: 2018-04-01 09:50:26\ntags:\ncategories: Journal\nthumbnail: /images/8608094661_f6fdcc0c83_b.jpg\n---\n\nIt's strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That's all. I'm not saying it's wrong. Actually it couldn't be more correct, especially when living in this world is pretty hard. But I'm not attractive to her any more, I don't know why. Maybe that's who I am.\n\nI found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don't know why. Maybe it's just because she's quite.\n\nI often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It's not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it's a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don't know where to go. Now I understand why depressed people tend to be insomnia, it's caused by despair. You cannot go to sleep when tomorrow also sucks.\n\n","slug":"live-a-quite-life","published":1,"updated":"2018-04-01T02:25:06.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqei005b8arf4dxvnpz5","content":"<p>It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That’s all. I’m not saying it’s wrong. Actually it couldn’t be more correct, especially when living in this world is pretty hard. But I’m not attractive to her any more, I don’t know why. Maybe that’s who I am.</p>\n<p>I found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don’t know why. Maybe it’s just because she’s quite.</p>\n<p>I often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It’s not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it’s a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don’t know where to go. Now I understand why depressed people tend to be insomnia, it’s caused by despair. You cannot go to sleep when tomorrow also sucks.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It’s strange that quite girls seem irresistible to me. I found it about a month ago, when I met a girl during the company training. She was always working, and kept quite all the time. I found her attractive because of that. But later I found out that she was actually not quite, she would argue with others when necessary. The reason why she kept quite for the most of her time is simply because she was focusing on her work. She would do everything to accomplish her job, including keeping quite. That’s all. I’m not saying it’s wrong. Actually it couldn’t be more correct, especially when living in this world is pretty hard. But I’m not attractive to her any more, I don’t know why. Maybe that’s who I am.</p>\n<p>I found another quite girl a few days ago. She was sitting opposite me, and she was looking at her laptop quietly. She seemed beautiful back then, I don’t know why. Maybe it’s just because she’s quite.</p>\n<p>I often thought about a quite life, the best life I could imagine. A life without struggling, without fighting, and without loneliness. However, we are not designed to live in this kind of life. It’s not only because we human beings are constantly worried and trying to find something to do, but also because this kind of quite world simply does not exist. The world we are living in is so hard, so I changed my mind, I told myself that I should solve all of my problems. But it’s a pretty ambitious goal. When the night falls, when everyone returns to his/her home, I don’t know where to go. Now I understand why depressed people tend to be insomnia, it’s caused by despair. You cannot go to sleep when tomorrow also sucks.</p>\n"},{"title":"map Ctrl-V as Ctrl-Q in vim","date":"2015-12-25T15:40:23.000Z","thumbnail":"https://blog.unasuke.com/images/2015/vimlogo-70fbd593.png","_content":"\nIf you want to map Ctrl-V as Ctrl-Q, you can add the following line in your `.vimrc` file\n\n```\nnnoremap <C-V> <C-Q>\n```\n\nIt works in gvim, but it wouldn't work in terminal-vim. Why? I'd been confused about it for a long time until I saw [this](https://stackoverflow.com/questions/21806168/vim-use-ctrl-q-for-visual-block-mode-in-vim-gnome):\n\n> If you want to make `<c-q>` work in your terminal vim, you need to understand the default `<C-q>` has special meaning in your terminal settings.\n> \n> In your terminal, pressing `<c-q>` will sent `stty start` signal. This is important when you first `stop` your terminal output scrolling(by `ctrl-s`), and then you want to resume. That is, in terminal vim, if you pressed `C-q`, it will be captured first by terminal. You can of course change that rule, by disable the `stty start` definition. like:\n> \n> `stty start undef`\n>\n> you could add this to your `.bashrc` file (I assume you were using bash) if you want to make it as default.\n> \n> with this line executed, you can create the same mapping `nnoremap <c-q> <c-v>` in your vim, and pressing `<c-q>` in normal mode, vim is gonna enter block-wise selection mode.\n> \n> After all, again, I suggest you forget the windows mapping if you work on linux box.\n\nIn short, add the following line in your `.bashrc` file, and the map will work after that.\n\n```\nstty start undef\n```\n","source":"_posts/map-Ctrl-V-as-Ctrl-Q-in-vim.md","raw":"title: map Ctrl-V as Ctrl-Q in vim\ndate: 2015-12-25 23:40:23\ncategories: Coding\nthumbnail: https://blog.unasuke.com/images/2015/vimlogo-70fbd593.png\ntags: [vim, linux]\n---\n\nIf you want to map Ctrl-V as Ctrl-Q, you can add the following line in your `.vimrc` file\n\n```\nnnoremap <C-V> <C-Q>\n```\n\nIt works in gvim, but it wouldn't work in terminal-vim. Why? I'd been confused about it for a long time until I saw [this](https://stackoverflow.com/questions/21806168/vim-use-ctrl-q-for-visual-block-mode-in-vim-gnome):\n\n> If you want to make `<c-q>` work in your terminal vim, you need to understand the default `<C-q>` has special meaning in your terminal settings.\n> \n> In your terminal, pressing `<c-q>` will sent `stty start` signal. This is important when you first `stop` your terminal output scrolling(by `ctrl-s`), and then you want to resume. That is, in terminal vim, if you pressed `C-q`, it will be captured first by terminal. You can of course change that rule, by disable the `stty start` definition. like:\n> \n> `stty start undef`\n>\n> you could add this to your `.bashrc` file (I assume you were using bash) if you want to make it as default.\n> \n> with this line executed, you can create the same mapping `nnoremap <c-q> <c-v>` in your vim, and pressing `<c-q>` in normal mode, vim is gonna enter block-wise selection mode.\n> \n> After all, again, I suggest you forget the windows mapping if you work on linux box.\n\nIn short, add the following line in your `.bashrc` file, and the map will work after that.\n\n```\nstty start undef\n```\n","slug":"map-Ctrl-V-as-Ctrl-Q-in-vim","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqej005f8arfkri83rwj","content":"<p>If you want to map Ctrl-V as Ctrl-Q, you can add the following line in your <code>.vimrc</code> file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nnoremap &lt;C-V&gt; &lt;C-Q&gt;</div></pre></td></tr></table></figure>\n<p>It works in gvim, but it wouldn’t work in terminal-vim. Why? I’d been confused about it for a long time until I saw <a href=\"https://stackoverflow.com/questions/21806168/vim-use-ctrl-q-for-visual-block-mode-in-vim-gnome\" target=\"_blank\" rel=\"external\">this</a>:</p>\n<blockquote>\n<p>If you want to make <code>&lt;c-q&gt;</code> work in your terminal vim, you need to understand the default <code>&lt;C-q&gt;</code> has special meaning in your terminal settings.</p>\n<p>In your terminal, pressing <code>&lt;c-q&gt;</code> will sent <code>stty start</code> signal. This is important when you first <code>stop</code> your terminal output scrolling(by <code>ctrl-s</code>), and then you want to resume. That is, in terminal vim, if you pressed <code>C-q</code>, it will be captured first by terminal. You can of course change that rule, by disable the <code>stty start</code> definition. like:</p>\n<p><code>stty start undef</code></p>\n<p>you could add this to your <code>.bashrc</code> file (I assume you were using bash) if you want to make it as default.</p>\n<p>with this line executed, you can create the same mapping <code>nnoremap &lt;c-q&gt; &lt;c-v&gt;</code> in your vim, and pressing <code>&lt;c-q&gt;</code> in normal mode, vim is gonna enter block-wise selection mode.</p>\n<p>After all, again, I suggest you forget the windows mapping if you work on linux box.</p>\n</blockquote>\n<p>In short, add the following line in your <code>.bashrc</code> file, and the map will work after that.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stty start undef</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>If you want to map Ctrl-V as Ctrl-Q, you can add the following line in your <code>.vimrc</code> file</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nnoremap &lt;C-V&gt; &lt;C-Q&gt;</div></pre></td></tr></table></figure>\n<p>It works in gvim, but it wouldn’t work in terminal-vim. Why? I’d been confused about it for a long time until I saw <a href=\"https://stackoverflow.com/questions/21806168/vim-use-ctrl-q-for-visual-block-mode-in-vim-gnome\" target=\"_blank\" rel=\"external\">this</a>:</p>\n<blockquote>\n<p>If you want to make <code>&lt;c-q&gt;</code> work in your terminal vim, you need to understand the default <code>&lt;C-q&gt;</code> has special meaning in your terminal settings.</p>\n<p>In your terminal, pressing <code>&lt;c-q&gt;</code> will sent <code>stty start</code> signal. This is important when you first <code>stop</code> your terminal output scrolling(by <code>ctrl-s</code>), and then you want to resume. That is, in terminal vim, if you pressed <code>C-q</code>, it will be captured first by terminal. You can of course change that rule, by disable the <code>stty start</code> definition. like:</p>\n<p><code>stty start undef</code></p>\n<p>you could add this to your <code>.bashrc</code> file (I assume you were using bash) if you want to make it as default.</p>\n<p>with this line executed, you can create the same mapping <code>nnoremap &lt;c-q&gt; &lt;c-v&gt;</code> in your vim, and pressing <code>&lt;c-q&gt;</code> in normal mode, vim is gonna enter block-wise selection mode.</p>\n<p>After all, again, I suggest you forget the windows mapping if you work on linux box.</p>\n</blockquote>\n<p>In short, add the following line in your <code>.bashrc</code> file, and the map will work after that.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">stty start undef</div></pre></td></tr></table></figure>\n"},{"title":"my new goals and my new life","thumbnail":"http://www.besthospitalitydegrees.com/wp-content/uploads/2014/01/travel-adventure-blogs.jpg","date":"2016-05-25T04:29:00.000Z","_content":"I feel pretty bad recently, and it occurred to me that what made me feel bad was not the world, it was me, myself. I have to do something to fill my brain with energy, so I add a new task today, to program for my own project for at least 3 hours, apart from other coding and stuff.\n\nThough I program almost every day, I never set a goal for myself. This is really a problem, sometimes I'm just being lazy, which puts my project off again and again. So I decided to put an end to this bad behavior. There's one thing that could achieve it, which is set a goal, a task, forcing myself to finish it every day.\n\nI reduced my running distance from 4km to 2km, because I figured that 4km is too much for me. I didn't run in a very long time, I have to do it, it's a very efficient way to keep me being energetic.\n\nThis is my everyday task list\n\n```\nID Age  Recur Due Description                             Urg \n 8 2min   P1D 10h run for 2km                              8.6\n11 24s    P1D 10h review the words in anki                 8.6\n12 24s    P1D 10h add 20 new words to anki                 8.6\n 5 2min   P1D 11h play the guitar for at least 30 minutes 8.58\n 6 2min   P1D 11h read 5% of the book in my kindle        8.58\n14 -      P1D 11h program for my project                  8.58\n\n6 tasks\n```\n\nIt would take about 20 + 15 + 30 + 30 + 30 + 180 = 305min ≈ 5 hours, A lot to be done every day, I will see if I can finish all of them.\n\nThen I thought about another thing. Though I created a task to program for at least 3 hours every day, I should have a goal for each hour. I made a list of what I should do about the project right now. Once I finish one of them, I check it.\n\n1. ~~Rename deck~~\n2. ~~Delete deck~~\n3. ~~Add word~~\n4. The click event of *show answer* button in review page\n5. The whole front-end of the review page\n6. Time schedule for *Again*, *Hard*, *Good*, *Easy*\n\nThere are only these goals for now, I will add a new list if I finish all of them on the above list.\n\n**What I want ultimately is the sense of felicity, from the bottom of my heart.**\n","source":"_posts/my-new-goals-and-my-new-life.md","raw":"title: my new goals and my new life\ncategories:\n  - Journal\nthumbnail: http://www.besthospitalitydegrees.com/wp-content/uploads/2014/01/travel-adventure-blogs.jpg\ntags: []\ndate: 2016-05-25 12:29:00\n---\nI feel pretty bad recently, and it occurred to me that what made me feel bad was not the world, it was me, myself. I have to do something to fill my brain with energy, so I add a new task today, to program for my own project for at least 3 hours, apart from other coding and stuff.\n\nThough I program almost every day, I never set a goal for myself. This is really a problem, sometimes I'm just being lazy, which puts my project off again and again. So I decided to put an end to this bad behavior. There's one thing that could achieve it, which is set a goal, a task, forcing myself to finish it every day.\n\nI reduced my running distance from 4km to 2km, because I figured that 4km is too much for me. I didn't run in a very long time, I have to do it, it's a very efficient way to keep me being energetic.\n\nThis is my everyday task list\n\n```\nID Age  Recur Due Description                             Urg \n 8 2min   P1D 10h run for 2km                              8.6\n11 24s    P1D 10h review the words in anki                 8.6\n12 24s    P1D 10h add 20 new words to anki                 8.6\n 5 2min   P1D 11h play the guitar for at least 30 minutes 8.58\n 6 2min   P1D 11h read 5% of the book in my kindle        8.58\n14 -      P1D 11h program for my project                  8.58\n\n6 tasks\n```\n\nIt would take about 20 + 15 + 30 + 30 + 30 + 180 = 305min ≈ 5 hours, A lot to be done every day, I will see if I can finish all of them.\n\nThen I thought about another thing. Though I created a task to program for at least 3 hours every day, I should have a goal for each hour. I made a list of what I should do about the project right now. Once I finish one of them, I check it.\n\n1. ~~Rename deck~~\n2. ~~Delete deck~~\n3. ~~Add word~~\n4. The click event of *show answer* button in review page\n5. The whole front-end of the review page\n6. Time schedule for *Again*, *Hard*, *Good*, *Easy*\n\nThere are only these goals for now, I will add a new list if I finish all of them on the above list.\n\n**What I want ultimately is the sense of felicity, from the bottom of my heart.**\n","slug":"my-new-goals-and-my-new-life","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqel005i8arfe8ekch3e","content":"<p>I feel pretty bad recently, and it occurred to me that what made me feel bad was not the world, it was me, myself. I have to do something to fill my brain with energy, so I add a new task today, to program for my own project for at least 3 hours, apart from other coding and stuff.</p>\n<p>Though I program almost every day, I never set a goal for myself. This is really a problem, sometimes I’m just being lazy, which puts my project off again and again. So I decided to put an end to this bad behavior. There’s one thing that could achieve it, which is set a goal, a task, forcing myself to finish it every day.</p>\n<p>I reduced my running distance from 4km to 2km, because I figured that 4km is too much for me. I didn’t run in a very long time, I have to do it, it’s a very efficient way to keep me being energetic.</p>\n<p>This is my everyday task list</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ID Age  Recur Due Description                             Urg </div><div class=\"line\"> 8 2min   P1D 10h run for 2km                              8.6</div><div class=\"line\">11 24s    P1D 10h review the words in anki                 8.6</div><div class=\"line\">12 24s    P1D 10h add 20 new words to anki                 8.6</div><div class=\"line\"> 5 2min   P1D 11h play the guitar for at least 30 minutes 8.58</div><div class=\"line\"> 6 2min   P1D 11h read 5% of the book in my kindle        8.58</div><div class=\"line\">14 -      P1D 11h program for my project                  8.58</div><div class=\"line\"></div><div class=\"line\">6 tasks</div></pre></td></tr></table></figure>\n<p>It would take about 20 + 15 + 30 + 30 + 30 + 180 = 305min ≈ 5 hours, A lot to be done every day, I will see if I can finish all of them.</p>\n<p>Then I thought about another thing. Though I created a task to program for at least 3 hours every day, I should have a goal for each hour. I made a list of what I should do about the project right now. Once I finish one of them, I check it.</p>\n<ol>\n<li><del>Rename deck</del></li>\n<li><del>Delete deck</del></li>\n<li><del>Add word</del></li>\n<li>The click event of <em>show answer</em> button in review page</li>\n<li>The whole front-end of the review page</li>\n<li>Time schedule for <em>Again</em>, <em>Hard</em>, <em>Good</em>, <em>Easy</em></li>\n</ol>\n<p>There are only these goals for now, I will add a new list if I finish all of them on the above list.</p>\n<p><strong>What I want ultimately is the sense of felicity, from the bottom of my heart.</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I feel pretty bad recently, and it occurred to me that what made me feel bad was not the world, it was me, myself. I have to do something to fill my brain with energy, so I add a new task today, to program for my own project for at least 3 hours, apart from other coding and stuff.</p>\n<p>Though I program almost every day, I never set a goal for myself. This is really a problem, sometimes I’m just being lazy, which puts my project off again and again. So I decided to put an end to this bad behavior. There’s one thing that could achieve it, which is set a goal, a task, forcing myself to finish it every day.</p>\n<p>I reduced my running distance from 4km to 2km, because I figured that 4km is too much for me. I didn’t run in a very long time, I have to do it, it’s a very efficient way to keep me being energetic.</p>\n<p>This is my everyday task list</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">ID Age  Recur Due Description                             Urg </div><div class=\"line\"> 8 2min   P1D 10h run for 2km                              8.6</div><div class=\"line\">11 24s    P1D 10h review the words in anki                 8.6</div><div class=\"line\">12 24s    P1D 10h add 20 new words to anki                 8.6</div><div class=\"line\"> 5 2min   P1D 11h play the guitar for at least 30 minutes 8.58</div><div class=\"line\"> 6 2min   P1D 11h read 5% of the book in my kindle        8.58</div><div class=\"line\">14 -      P1D 11h program for my project                  8.58</div><div class=\"line\"></div><div class=\"line\">6 tasks</div></pre></td></tr></table></figure>\n<p>It would take about 20 + 15 + 30 + 30 + 30 + 180 = 305min ≈ 5 hours, A lot to be done every day, I will see if I can finish all of them.</p>\n<p>Then I thought about another thing. Though I created a task to program for at least 3 hours every day, I should have a goal for each hour. I made a list of what I should do about the project right now. Once I finish one of them, I check it.</p>\n<ol>\n<li><del>Rename deck</del></li>\n<li><del>Delete deck</del></li>\n<li><del>Add word</del></li>\n<li>The click event of <em>show answer</em> button in review page</li>\n<li>The whole front-end of the review page</li>\n<li>Time schedule for <em>Again</em>, <em>Hard</em>, <em>Good</em>, <em>Easy</em></li>\n</ol>\n<p>There are only these goals for now, I will add a new list if I finish all of them on the above list.</p>\n<p><strong>What I want ultimately is the sense of felicity, from the bottom of my heart.</strong></p>\n"},{"title":"kafka in a nutshell","date":"2017-05-18T13:51:28.000Z","thumbnail":"/images/kafka-logo-wide.png","_content":"\n# Introduction\nKafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.\n\n# Basic Model\nBasically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.\n\n![producer-consumer model](/images/producer-consumer.svg)\n\nNotice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.\n\nThere are some keywords you need to about first before getting into some details of Kafka.\n\n**Topic**: When you are sending data to Kafka using producers, you have to tell producers, \"Hey, could you please send these data to *that place* in the Kafka server?\" Here *that place* should be replaced with *topic*. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, *game*, *website* and *log*, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.\n\n**Partition**: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.\n\n**Offset**: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, *offset* starts from 0 and increases by one each time a message is received from producers.\n\n![topic-partition-offset](/images/topic-partition-offset.svg)\n\n**Broker**: Each server in Kafka is called a *broker*.\n\n**Leader & Follower**: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it's safe to say that the same partition is replicated across multiple servers. One of those partitions is called *leader*, and others are called *follower*.\n\nSuppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:\n\n![leader and follower](/images/leader and follower.svg)\n\n# Producer\n\nWhen producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower...until all followers have the same data as the leader.\n\n![replicate](/images/replicate.svg)\n\nEach broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker's commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.\n\n![commit log](/images/commit-log.svg)\n\nSo when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.\n\n1. Producer returns immediately right after the message is written into the leader, don't wait for commit.\n\n  ![no confirm](/images/return-immediately.svg)\n\n2. Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.\n\n  ![wait for leader](/images/wait-for-leader.svg)\n\n3. Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.\n\n  ![wait for all](/images/wait-for-all.svg)\n\n# Consumer\nConsumers in Kafka use the `poll()` function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.\n\n1. Commit At Most Once\n\n  You have to set the following properties to use this mode:\n  \n  ```\n  enable.auto.commit = true\n  auto.commit.interval.ms = 15\n  ```\n\n  The value of `auto.commit.interval.ms` could be any number. Now let's talk about what these properties mean and how the mode works.\n  \n  The following steps will be proceeded if this mode is turned on:\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer checks whether `auto.commit.interval.ms` is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what `enable.auto.commit` means.\n  3. Consumer processes the fetched data.\n  4. Repeat above steps.\n\n  Let's use a picture to illustrate the process.\n\n  ![receive at most once](/images/receive-at-most-once.svg)\n\n  Regarding the above diagram, what will happen if error occurs while processing data?\n\n  ![receive at most once exception](/images/receive-at-most-once-exception.svg)\n\n  Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.\n\n2. Commit At Least Once\n\n  You have to set the following properties to turn on this mode.\n\n  ```\n  enable.auto.commit = false\n  ```\n\n  As you can see, `enable.auto.commit` is set `false`, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer processes those data.\n  3. Consumer commit offsets regarding those data manually.\n  4. Repeat above steps.\n\n  Here is a picture to illustrate the process.\n\n  ![receive at least once](/images/receive-at-least-once.svg)\n\n  What if an exception occurs while we are processing data, just like the last mode mentioned before?\n\n  ![receive at least once exception](/images/receive-at-least-once-exception.svg)\n\n  Well, as you can see, nothing is lost here because we haven't committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That's totally fine as long as we have a proper filter system to filter out those duplicated data.\n\n  Since this mode is safer than the last one, we often choose to use `receive at least once` in Kafka to fetch data.\n \n  There's also another mode called `commit exactly once`, where the committed messages and offsets will get through a transaction system. It's even safer than `receive at least once` but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.\n\n# When Brokers Are Down\nLet's say we have three brokers, one is Leader, the other two are followers. Now one of the follower is down.\n\nWhat will happen? Nothing. We just lost one replica, it's not that a big deal.\n\nOK, the second follower is down.\n\nHow about that? Never mind! The leader is still up and running, this is enough.\n\nNow the Leader is down...\n\nAll right, we have no brokers any more. Producers and consumers will both stop. What will happen next is determined by the type of broker brought back online first.\n\n1. If the Leader is brought back online first, nothing will be lost because producers and consumers stop while the leader is offline.\n2. If one of the follower is brought back online first, it will become Leader, and some data fetched between the time the follower is down and the time the leader is up may be lost. When the leader is up, it will become a follower, and it will find out that some data have been committed in itself which don't belong to other brokers, those data will be discarded.\n\nNow let's say the three brokers are up and running, and the leader is down. What will happen then?\n\nOne of the followers will be elected as the leader. Nothing will be lost. This may take a few seconds and result in `LeaderNotAvailable` error from the client, but it doesn't matter because a new leader will be elected soon.","source":"_posts/kafka-in-a-nutshell.md","raw":"title: kafka in a nutshell\ndate: 2017-05-18 21:51:28\ntags: [kafka]\ncategories: Coding\nthumbnail: /images/kafka-logo-wide.png\n---\n\n# Introduction\nKafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.\n\n# Basic Model\nBasically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.\n\n![producer-consumer model](/images/producer-consumer.svg)\n\nNotice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.\n\nThere are some keywords you need to about first before getting into some details of Kafka.\n\n**Topic**: When you are sending data to Kafka using producers, you have to tell producers, \"Hey, could you please send these data to *that place* in the Kafka server?\" Here *that place* should be replaced with *topic*. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, *game*, *website* and *log*, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.\n\n**Partition**: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.\n\n**Offset**: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, *offset* starts from 0 and increases by one each time a message is received from producers.\n\n![topic-partition-offset](/images/topic-partition-offset.svg)\n\n**Broker**: Each server in Kafka is called a *broker*.\n\n**Leader & Follower**: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it's safe to say that the same partition is replicated across multiple servers. One of those partitions is called *leader*, and others are called *follower*.\n\nSuppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:\n\n![leader and follower](/images/leader and follower.svg)\n\n# Producer\n\nWhen producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower...until all followers have the same data as the leader.\n\n![replicate](/images/replicate.svg)\n\nEach broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker's commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.\n\n![commit log](/images/commit-log.svg)\n\nSo when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.\n\n1. Producer returns immediately right after the message is written into the leader, don't wait for commit.\n\n  ![no confirm](/images/return-immediately.svg)\n\n2. Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.\n\n  ![wait for leader](/images/wait-for-leader.svg)\n\n3. Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.\n\n  ![wait for all](/images/wait-for-all.svg)\n\n# Consumer\nConsumers in Kafka use the `poll()` function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.\n\n1. Commit At Most Once\n\n  You have to set the following properties to use this mode:\n  \n  ```\n  enable.auto.commit = true\n  auto.commit.interval.ms = 15\n  ```\n\n  The value of `auto.commit.interval.ms` could be any number. Now let's talk about what these properties mean and how the mode works.\n  \n  The following steps will be proceeded if this mode is turned on:\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer checks whether `auto.commit.interval.ms` is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what `enable.auto.commit` means.\n  3. Consumer processes the fetched data.\n  4. Repeat above steps.\n\n  Let's use a picture to illustrate the process.\n\n  ![receive at most once](/images/receive-at-most-once.svg)\n\n  Regarding the above diagram, what will happen if error occurs while processing data?\n\n  ![receive at most once exception](/images/receive-at-most-once-exception.svg)\n\n  Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.\n\n2. Commit At Least Once\n\n  You have to set the following properties to turn on this mode.\n\n  ```\n  enable.auto.commit = false\n  ```\n\n  As you can see, `enable.auto.commit` is set `false`, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.\n\n  1. Consumer fetches some data from Kafka.\n  2. Consumer processes those data.\n  3. Consumer commit offsets regarding those data manually.\n  4. Repeat above steps.\n\n  Here is a picture to illustrate the process.\n\n  ![receive at least once](/images/receive-at-least-once.svg)\n\n  What if an exception occurs while we are processing data, just like the last mode mentioned before?\n\n  ![receive at least once exception](/images/receive-at-least-once-exception.svg)\n\n  Well, as you can see, nothing is lost here because we haven't committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That's totally fine as long as we have a proper filter system to filter out those duplicated data.\n\n  Since this mode is safer than the last one, we often choose to use `receive at least once` in Kafka to fetch data.\n \n  There's also another mode called `commit exactly once`, where the committed messages and offsets will get through a transaction system. It's even safer than `receive at least once` but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.\n\n# When Brokers Are Down\nLet's say we have three brokers, one is Leader, the other two are followers. Now one of the follower is down.\n\nWhat will happen? Nothing. We just lost one replica, it's not that a big deal.\n\nOK, the second follower is down.\n\nHow about that? Never mind! The leader is still up and running, this is enough.\n\nNow the Leader is down...\n\nAll right, we have no brokers any more. Producers and consumers will both stop. What will happen next is determined by the type of broker brought back online first.\n\n1. If the Leader is brought back online first, nothing will be lost because producers and consumers stop while the leader is offline.\n2. If one of the follower is brought back online first, it will become Leader, and some data fetched between the time the follower is down and the time the leader is up may be lost. When the leader is up, it will become a follower, and it will find out that some data have been committed in itself which don't belong to other brokers, those data will be discarded.\n\nNow let's say the three brokers are up and running, and the leader is down. What will happen then?\n\nOne of the followers will be elected as the leader. Nothing will be lost. This may take a few seconds and result in `LeaderNotAvailable` error from the client, but it doesn't matter because a new leader will be elected soon.","slug":"kafka-in-a-nutshell","published":1,"updated":"2017-05-21T09:58:15.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqem005l8arf1zurvjt9","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Kafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.</p>\n<h1 id=\"Basic-Model\"><a href=\"#Basic-Model\" class=\"headerlink\" title=\"Basic Model\"></a>Basic Model</h1><p>Basically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.</p>\n<p><img src=\"/images/producer-consumer.svg\" alt=\"producer-consumer model\"></p>\n<p>Notice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.</p>\n<p>There are some keywords you need to about first before getting into some details of Kafka.</p>\n<p><strong>Topic</strong>: When you are sending data to Kafka using producers, you have to tell producers, “Hey, could you please send these data to <em>that place</em> in the Kafka server?” Here <em>that place</em> should be replaced with <em>topic</em>. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, <em>game</em>, <em>website</em> and <em>log</em>, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.</p>\n<p><strong>Partition</strong>: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.</p>\n<p><strong>Offset</strong>: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, <em>offset</em> starts from 0 and increases by one each time a message is received from producers.</p>\n<p><img src=\"/images/topic-partition-offset.svg\" alt=\"topic-partition-offset\"></p>\n<p><strong>Broker</strong>: Each server in Kafka is called a <em>broker</em>.</p>\n<p><strong>Leader &amp; Follower</strong>: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it’s safe to say that the same partition is replicated across multiple servers. One of those partitions is called <em>leader</em>, and others are called <em>follower</em>.</p>\n<p>Suppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:</p>\n<p><img src=\"/images/leader and follower.svg\" alt=\"leader and follower\"></p>\n<h1 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h1><p>When producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower…until all followers have the same data as the leader.</p>\n<p><img src=\"/images/replicate.svg\" alt=\"replicate\"></p>\n<p>Each broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker’s commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.</p>\n<p><img src=\"/images/commit-log.svg\" alt=\"commit log\"></p>\n<p>So when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.</p>\n<ol>\n<li><p>Producer returns immediately right after the message is written into the leader, don’t wait for commit.</p>\n<p><img src=\"/images/return-immediately.svg\" alt=\"no confirm\"></p>\n</li>\n<li><p>Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.</p>\n<p><img src=\"/images/wait-for-leader.svg\" alt=\"wait for leader\"></p>\n</li>\n<li><p>Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.</p>\n<p><img src=\"/images/wait-for-all.svg\" alt=\"wait for all\"></p>\n</li>\n</ol>\n<h1 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h1><p>Consumers in Kafka use the <code>poll()</code> function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.</p>\n<ol>\n<li><p>Commit At Most Once</p>\n<p>You have to set the following properties to use this mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = true</div><div class=\"line\">auto.commit.interval.ms = 15</div></pre></td></tr></table></figure>\n<p>The value of <code>auto.commit.interval.ms</code> could be any number. Now let’s talk about what these properties mean and how the mode works.</p>\n<p>The following steps will be proceeded if this mode is turned on:</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer checks whether <code>auto.commit.interval.ms</code> is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what <code>enable.auto.commit</code> means.</li>\n<li>Consumer processes the fetched data.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Let’s use a picture to illustrate the process.</p>\n<p><img src=\"/images/receive-at-most-once.svg\" alt=\"receive at most once\"></p>\n<p>Regarding the above diagram, what will happen if error occurs while processing data?</p>\n<p><img src=\"/images/receive-at-most-once-exception.svg\" alt=\"receive at most once exception\"></p>\n<p>Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.</p>\n</li>\n<li><p>Commit At Least Once</p>\n<p>You have to set the following properties to turn on this mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = false</div></pre></td></tr></table></figure>\n<p>As you can see, <code>enable.auto.commit</code> is set <code>false</code>, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer processes those data.</li>\n<li>Consumer commit offsets regarding those data manually.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Here is a picture to illustrate the process.</p>\n<p><img src=\"/images/receive-at-least-once.svg\" alt=\"receive at least once\"></p>\n<p>What if an exception occurs while we are processing data, just like the last mode mentioned before?</p>\n<p><img src=\"/images/receive-at-least-once-exception.svg\" alt=\"receive at least once exception\"></p>\n<p>Well, as you can see, nothing is lost here because we haven’t committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That’s totally fine as long as we have a proper filter system to filter out those duplicated data.</p>\n<p>Since this mode is safer than the last one, we often choose to use <code>receive at least once</code> in Kafka to fetch data.</p>\n<p>There’s also another mode called <code>commit exactly once</code>, where the committed messages and offsets will get through a transaction system. It’s even safer than <code>receive at least once</code> but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.</p>\n</li>\n</ol>\n<h1 id=\"When-Brokers-Are-Down\"><a href=\"#When-Brokers-Are-Down\" class=\"headerlink\" title=\"When Brokers Are Down\"></a>When Brokers Are Down</h1><p>Let’s say we have three brokers, one is Leader, the other two are followers. Now one of the follower is down.</p>\n<p>What will happen? Nothing. We just lost one replica, it’s not that a big deal.</p>\n<p>OK, the second follower is down.</p>\n<p>How about that? Never mind! The leader is still up and running, this is enough.</p>\n<p>Now the Leader is down…</p>\n<p>All right, we have no brokers any more. Producers and consumers will both stop. What will happen next is determined by the type of broker brought back online first.</p>\n<ol>\n<li>If the Leader is brought back online first, nothing will be lost because producers and consumers stop while the leader is offline.</li>\n<li>If one of the follower is brought back online first, it will become Leader, and some data fetched between the time the follower is down and the time the leader is up may be lost. When the leader is up, it will become a follower, and it will find out that some data have been committed in itself which don’t belong to other brokers, those data will be discarded.</li>\n</ol>\n<p>Now let’s say the three brokers are up and running, and the leader is down. What will happen then?</p>\n<p>One of the followers will be elected as the leader. Nothing will be lost. This may take a few seconds and result in <code>LeaderNotAvailable</code> error from the client, but it doesn’t matter because a new leader will be elected soon.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>Kafka is a distributed publish-subscribe messaging system that is designed to be fast, scalable and reliable. It can be used in data analysis, stream processing and other similar tasks. This article gives a brief introduction on its components and how these components work together to make Kafka an amazing program.</p>\n<h1 id=\"Basic-Model\"><a href=\"#Basic-Model\" class=\"headerlink\" title=\"Basic Model\"></a>Basic Model</h1><p>Basically you have to provide two things in order to use Kafka: producer and consumer. Producer is used to generate data constantly and write those data to Kafka servers, then consumer reads data from kafka servers and dispatch those data to downstream systems for further processing.</p>\n<p><img src=\"/images/producer-consumer.svg\" alt=\"producer-consumer model\"></p>\n<p>Notice that you can provide multiple producers and multiple consumers to ensure fast data delivery. Usually there are also multiple kafka servers. In this case, same data will be replicated across multiple servers so that Kafka would still work even if one of those servers goes offline.</p>\n<p>There are some keywords you need to about first before getting into some details of Kafka.</p>\n<p><strong>Topic</strong>: When you are sending data to Kafka using producers, you have to tell producers, “Hey, could you please send these data to <em>that place</em> in the Kafka server?” Here <em>that place</em> should be replaced with <em>topic</em>. Topics are just like directories in your computer, different directories store different files. The same goes to Kafka. You may have three different Kafka topics, <em>game</em>, <em>website</em> and <em>log</em>, they are used to stream gaming, website and log data respectively. Typically different producers write data to different topics, but notice that one topic can be fed by multiple producers at the same time.</p>\n<p><strong>Partition</strong>: A topic is divided into multiple partitions, so that if you have multiple producers for a topic, they can write to different partitions concurrently, likewise, consumers can also read from different partitions at the same time, which makes the whole streaming process much faster.</p>\n<p><strong>Offset</strong>: Each message sent by producer will be stored by Kafka servers, and marked with a unique number for each partition, this number is called offset. Just as the name implies, <em>offset</em> starts from 0 and increases by one each time a message is received from producers.</p>\n<p><img src=\"/images/topic-partition-offset.svg\" alt=\"topic-partition-offset\"></p>\n<p><strong>Broker</strong>: Each server in Kafka is called a <em>broker</em>.</p>\n<p><strong>Leader &amp; Follower</strong>: The data stored in a topic will be replicated across multiple servers. Since a topic is made up of partitions, it’s safe to say that the same partition is replicated across multiple servers. One of those partitions is called <em>leader</em>, and others are called <em>follower</em>.</p>\n<p>Suppose we have three brokers, and we mark leader partitions in red, follower partitions in blue, the whole picture is like this:</p>\n<p><img src=\"/images/leader and follower.svg\" alt=\"leader and follower\"></p>\n<h1 id=\"Producer\"><a href=\"#Producer\" class=\"headerlink\" title=\"Producer\"></a>Producer</h1><p>When producers write data to Kafka, they first write to the leader partition, then the data is replicated into the first follower, then the second follower…until all followers have the same data as the leader.</p>\n<p><img src=\"/images/replicate.svg\" alt=\"replicate\"></p>\n<p>Each broker has its own commit log. When data is successfully stored in its respective partition in one broker, a new record will be written into the broker’s commit log. When a message is replicated across all leader and followers for that partition, i.e. we have committed the message in all brokers, we take it that the message has been committed in its respective partition.</p>\n<p><img src=\"/images/commit-log.svg\" alt=\"commit log\"></p>\n<p>So when should the producer consider the message has been written into Kafka successfully? After the message is committed in leader, or in all brokers? In fact, producers have three choices.</p>\n<ol>\n<li><p>Producer returns immediately right after the message is written into the leader, don’t wait for commit.</p>\n<p><img src=\"/images/return-immediately.svg\" alt=\"no confirm\"></p>\n</li>\n<li><p>Producer waits for confirm from the leader, which means the message has been committed in the leader partitionbs.reload.</p>\n<p><img src=\"/images/wait-for-leader.svg\" alt=\"wait for leader\"></p>\n</li>\n<li><p>Producer waits for confirm from all brokers, which means the message has been committed in both leader and follower partitions.</p>\n<p><img src=\"/images/wait-for-all.svg\" alt=\"wait for all\"></p>\n</li>\n</ol>\n<h1 id=\"Consumer\"><a href=\"#Consumer\" class=\"headerlink\" title=\"Consumer\"></a>Consumer</h1><p>Consumers in Kafka use the <code>poll()</code> function to fetch data from Kafka servers. Every once in a while, consumers need to commit messages which they receive. The commit log is stored in a special Kafka topic. So how do consumers commit and when? Basically there are three modes for consumers to choose from.</p>\n<ol>\n<li><p>Commit At Most Once</p>\n<p>You have to set the following properties to use this mode:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = true</div><div class=\"line\">auto.commit.interval.ms = 15</div></pre></td></tr></table></figure>\n<p>The value of <code>auto.commit.interval.ms</code> could be any number. Now let’s talk about what these properties mean and how the mode works.</p>\n<p>The following steps will be proceeded if this mode is turned on:</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer checks whether <code>auto.commit.interval.ms</code> is up. If so, it commits offset fetched between the last commit time and now. The commit is done automatically by Kafka, this is also what <code>enable.auto.commit</code> means.</li>\n<li>Consumer processes the fetched data.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Let’s use a picture to illustrate the process.</p>\n<p><img src=\"/images/receive-at-most-once.svg\" alt=\"receive at most once\"></p>\n<p>Regarding the above diagram, what will happen if error occurs while processing data?</p>\n<p><img src=\"/images/receive-at-most-once-exception.svg\" alt=\"receive at most once exception\"></p>\n<p>Well, as you see, data from offset 10 ~ 14 will be lost because these unsuccessfully-processed data has been committed, when the consumer recovers from the crash, it will continue to fetch and process data from offset 15, which is the next number from the last commit offset.</p>\n</li>\n<li><p>Commit At Least Once</p>\n<p>You have to set the following properties to turn on this mode.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">enable.auto.commit = false</div></pre></td></tr></table></figure>\n<p>As you can see, <code>enable.auto.commit</code> is set <code>false</code>, which means that you have to manually commit offsets. There are the steps to be proceeded if the mode is turned on.</p>\n<ol>\n<li>Consumer fetches some data from Kafka.</li>\n<li>Consumer processes those data.</li>\n<li>Consumer commit offsets regarding those data manually.</li>\n<li>Repeat above steps.</li>\n</ol>\n<p>Here is a picture to illustrate the process.</p>\n<p><img src=\"/images/receive-at-least-once.svg\" alt=\"receive at least once\"></p>\n<p>What if an exception occurs while we are processing data, just like the last mode mentioned before?</p>\n<p><img src=\"/images/receive-at-least-once-exception.svg\" alt=\"receive at least once exception\"></p>\n<p>Well, as you can see, nothing is lost here because we haven’t committed those data at the time of processing. The worst thing for us is that some duplicated data will be appeared in the downstream system. That’s totally fine as long as we have a proper filter system to filter out those duplicated data.</p>\n<p>Since this mode is safer than the last one, we often choose to use <code>receive at least once</code> in Kafka to fetch data.</p>\n<p>There’s also another mode called <code>commit exactly once</code>, where the committed messages and offsets will get through a transaction system. It’s even safer than <code>receive at least once</code> but costs much more resources. Most of the time the second mode would be fine, we will not talk about it in detail for now.</p>\n</li>\n</ol>\n<h1 id=\"When-Brokers-Are-Down\"><a href=\"#When-Brokers-Are-Down\" class=\"headerlink\" title=\"When Brokers Are Down\"></a>When Brokers Are Down</h1><p>Let’s say we have three brokers, one is Leader, the other two are followers. Now one of the follower is down.</p>\n<p>What will happen? Nothing. We just lost one replica, it’s not that a big deal.</p>\n<p>OK, the second follower is down.</p>\n<p>How about that? Never mind! The leader is still up and running, this is enough.</p>\n<p>Now the Leader is down…</p>\n<p>All right, we have no brokers any more. Producers and consumers will both stop. What will happen next is determined by the type of broker brought back online first.</p>\n<ol>\n<li>If the Leader is brought back online first, nothing will be lost because producers and consumers stop while the leader is offline.</li>\n<li>If one of the follower is brought back online first, it will become Leader, and some data fetched between the time the follower is down and the time the leader is up may be lost. When the leader is up, it will become a follower, and it will find out that some data have been committed in itself which don’t belong to other brokers, those data will be discarded.</li>\n</ol>\n<p>Now let’s say the three brokers are up and running, and the leader is down. What will happen then?</p>\n<p>One of the followers will be elected as the leader. Nothing will be lost. This may take a few seconds and result in <code>LeaderNotAvailable</code> error from the client, but it doesn’t matter because a new leader will be elected soon.</p>\n"},{"title":"new task","date":"2016-05-20T07:07:35.000Z","_content":"\nToday I added a new daily-recursive task to my taskwarrior list: \n\n**Read 5% of the book in my kindle**\n\nSo right now I've four tasks I need to finish every day.\n\n1. Read 5% of the book in my kindle\n2. Run for at least 4 kilometers\n3. Play the guitar for at least 30 minutes\n4. Add 20 new cards to anki\n\nI also need to review cards in anki every day. So there are a lot to be done here, but I need to finish all of them, I need my life to be fulfilling.\n\nLet's get back to the beginning. I said I needed to read a book every day, the book is called \"The catcher in the rye\". It is in English, that's why I'm reading it so slowly. A pretty famous book, I've already finished more than 20% of it, but I still have no clue why this book is so wide-spreading. It's about a young man's life, something would probably happen in one's adolescence. Maybe this is way too far from me, after all I'm no longer a child any more. But I'm still determined to finish the book, because I dropped a lot of plans in the past, on account of the so-called meaninglessness of it. So I could barely finish anything in the past. I won't do it again. A promise is a promise. Once I start a plan, I should never drop it unless I think it's totally useless.\n\n![reading](http://www.auburn.edu/academic/education/reading_genie/navig/read.gif)\n","source":"_posts/new-task.md","raw":"title: new task\ndate: 2016-05-20 15:07:35\ntags:\ncategories: Journal\n---\n\nToday I added a new daily-recursive task to my taskwarrior list: \n\n**Read 5% of the book in my kindle**\n\nSo right now I've four tasks I need to finish every day.\n\n1. Read 5% of the book in my kindle\n2. Run for at least 4 kilometers\n3. Play the guitar for at least 30 minutes\n4. Add 20 new cards to anki\n\nI also need to review cards in anki every day. So there are a lot to be done here, but I need to finish all of them, I need my life to be fulfilling.\n\nLet's get back to the beginning. I said I needed to read a book every day, the book is called \"The catcher in the rye\". It is in English, that's why I'm reading it so slowly. A pretty famous book, I've already finished more than 20% of it, but I still have no clue why this book is so wide-spreading. It's about a young man's life, something would probably happen in one's adolescence. Maybe this is way too far from me, after all I'm no longer a child any more. But I'm still determined to finish the book, because I dropped a lot of plans in the past, on account of the so-called meaninglessness of it. So I could barely finish anything in the past. I won't do it again. A promise is a promise. Once I start a plan, I should never drop it unless I think it's totally useless.\n\n![reading](http://www.auburn.edu/academic/education/reading_genie/navig/read.gif)\n","slug":"new-task","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqen005n8arfgnu0ryfb","content":"<p>Today I added a new daily-recursive task to my taskwarrior list: </p>\n<p><strong>Read 5% of the book in my kindle</strong></p>\n<p>So right now I’ve four tasks I need to finish every day.</p>\n<ol>\n<li>Read 5% of the book in my kindle</li>\n<li>Run for at least 4 kilometers</li>\n<li>Play the guitar for at least 30 minutes</li>\n<li>Add 20 new cards to anki</li>\n</ol>\n<p>I also need to review cards in anki every day. So there are a lot to be done here, but I need to finish all of them, I need my life to be fulfilling.</p>\n<p>Let’s get back to the beginning. I said I needed to read a book every day, the book is called “The catcher in the rye”. It is in English, that’s why I’m reading it so slowly. A pretty famous book, I’ve already finished more than 20% of it, but I still have no clue why this book is so wide-spreading. It’s about a young man’s life, something would probably happen in one’s adolescence. Maybe this is way too far from me, after all I’m no longer a child any more. But I’m still determined to finish the book, because I dropped a lot of plans in the past, on account of the so-called meaninglessness of it. So I could barely finish anything in the past. I won’t do it again. A promise is a promise. Once I start a plan, I should never drop it unless I think it’s totally useless.</p>\n<p><img src=\"http://www.auburn.edu/academic/education/reading_genie/navig/read.gif\" alt=\"reading\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I added a new daily-recursive task to my taskwarrior list: </p>\n<p><strong>Read 5% of the book in my kindle</strong></p>\n<p>So right now I’ve four tasks I need to finish every day.</p>\n<ol>\n<li>Read 5% of the book in my kindle</li>\n<li>Run for at least 4 kilometers</li>\n<li>Play the guitar for at least 30 minutes</li>\n<li>Add 20 new cards to anki</li>\n</ol>\n<p>I also need to review cards in anki every day. So there are a lot to be done here, but I need to finish all of them, I need my life to be fulfilling.</p>\n<p>Let’s get back to the beginning. I said I needed to read a book every day, the book is called “The catcher in the rye”. It is in English, that’s why I’m reading it so slowly. A pretty famous book, I’ve already finished more than 20% of it, but I still have no clue why this book is so wide-spreading. It’s about a young man’s life, something would probably happen in one’s adolescence. Maybe this is way too far from me, after all I’m no longer a child any more. But I’m still determined to finish the book, because I dropped a lot of plans in the past, on account of the so-called meaninglessness of it. So I could barely finish anything in the past. I won’t do it again. A promise is a promise. Once I start a plan, I should never drop it unless I think it’s totally useless.</p>\n<p><img src=\"http://www.auburn.edu/academic/education/reading_genie/navig/read.gif\" alt=\"reading\"></p>\n"},{"title":"newInstance in Java","date":"2017-10-03T09:03:53.000Z","thumbnail":"/images/new-bingo-sites.png","_content":"\n# Introduction\n\n`newInstance` is used to instantiate an instance of a class dynamically. Here is an example written in Scala.\n\n```scala\nclass Printer() {\n  def print(): Unit = {\n    println(s\"print something\")\n  }\n}\nobject ScalaTest {\n  def main(args: Array[String]): Unit = {\n    val testClass = Class.forName(\"Printer\").newInstance().asInstanceOf[Printer]\n    testClass.print()\n  }\n}\n```\n\n**Output**\n\n```\nprint something\n```\n\nBy the way, `asInstanceOf[Printer]` is used for casting in Scala, it's just like `(Printer) Class.forName(\"Printer\").newInstance()` in Java.\n\nWhat if we want to call Printer's constructor with arguments? We can use `getDeclaredConstructor`\n\n```scala\nclass Printer(val name: String, val description: String) {\n  def print(): Unit = {\n    println(s\"product name: $name, description: $description\")\n  }\n}\nobject ScalaTest {\n  def main(args: Array[String]): Unit = {\n    val testClass = Class.forName(\"Printer\")\n      .getDeclaredConstructor(classOf[String], classOf[String])\n      .newInstance(\"kindle\", \"used for reading\")\n      .asInstanceOf[Printer]\n    testClass.print()\n  }\n}\n```\n\n**Output**\n\n```\nproduct name: kindle, description: used for reading\n```","source":"_posts/newInstance-in-Java.md","raw":"title: newInstance in Java\ndate: 2017-10-03 17:03:53\ntags: Java, Scala\ncategories: Coding\nthumbnail: /images/new-bingo-sites.png\n---\n\n# Introduction\n\n`newInstance` is used to instantiate an instance of a class dynamically. Here is an example written in Scala.\n\n```scala\nclass Printer() {\n  def print(): Unit = {\n    println(s\"print something\")\n  }\n}\nobject ScalaTest {\n  def main(args: Array[String]): Unit = {\n    val testClass = Class.forName(\"Printer\").newInstance().asInstanceOf[Printer]\n    testClass.print()\n  }\n}\n```\n\n**Output**\n\n```\nprint something\n```\n\nBy the way, `asInstanceOf[Printer]` is used for casting in Scala, it's just like `(Printer) Class.forName(\"Printer\").newInstance()` in Java.\n\nWhat if we want to call Printer's constructor with arguments? We can use `getDeclaredConstructor`\n\n```scala\nclass Printer(val name: String, val description: String) {\n  def print(): Unit = {\n    println(s\"product name: $name, description: $description\")\n  }\n}\nobject ScalaTest {\n  def main(args: Array[String]): Unit = {\n    val testClass = Class.forName(\"Printer\")\n      .getDeclaredConstructor(classOf[String], classOf[String])\n      .newInstance(\"kindle\", \"used for reading\")\n      .asInstanceOf[Printer]\n    testClass.print()\n  }\n}\n```\n\n**Output**\n\n```\nproduct name: kindle, description: used for reading\n```","slug":"newInstance-in-Java","published":1,"updated":"2017-10-03T09:05:46.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqep005r8arfuv7uvj3n","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><code>newInstance</code> is used to instantiate an instance of a class dynamically. Here is an example written in Scala.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    println(<span class=\"string\">s\"print something\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ScalaTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> testClass = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"Printer\"</span>).newInstance().asInstanceOf[<span class=\"type\">Printer</span>]</div><div class=\"line\">    testClass.print()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print something</div></pre></td></tr></table></figure>\n<p>By the way, <code>asInstanceOf[Printer]</code> is used for casting in Scala, it’s just like <code>(Printer) Class.forName(&quot;Printer&quot;).newInstance()</code> in Java.</p>\n<p>What if we want to call Printer’s constructor with arguments? We can use <code>getDeclaredConstructor</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val description: <span class=\"type\">String</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    println(<span class=\"string\">s\"product name: <span class=\"subst\">$name</span>, description: <span class=\"subst\">$description</span>\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ScalaTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> testClass = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"Printer\"</span>)</div><div class=\"line\">      .getDeclaredConstructor(classOf[<span class=\"type\">String</span>], classOf[<span class=\"type\">String</span>])</div><div class=\"line\">      .newInstance(<span class=\"string\">\"kindle\"</span>, <span class=\"string\">\"used for reading\"</span>)</div><div class=\"line\">      .asInstanceOf[<span class=\"type\">Printer</span>]</div><div class=\"line\">    testClass.print()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">product name: kindle, description: used for reading</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><code>newInstance</code> is used to instantiate an instance of a class dynamically. Here is an example written in Scala.</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    println(<span class=\"string\">s\"print something\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ScalaTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> testClass = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"Printer\"</span>).newInstance().asInstanceOf[<span class=\"type\">Printer</span>]</div><div class=\"line\">    testClass.print()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">print something</div></pre></td></tr></table></figure>\n<p>By the way, <code>asInstanceOf[Printer]</code> is used for casting in Scala, it’s just like <code>(Printer) Class.forName(&quot;Printer&quot;).newInstance()</code> in Java.</p>\n<p>What if we want to call Printer’s constructor with arguments? We can use <code>getDeclaredConstructor</code></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Printer</span>(<span class=\"params\">val name: <span class=\"type\">String</span>, val description: <span class=\"type\">String</span></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print</span></span>(): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    println(<span class=\"string\">s\"product name: <span class=\"subst\">$name</span>, description: <span class=\"subst\">$description</span>\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">ScalaTest</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">val</span> testClass = <span class=\"type\">Class</span>.forName(<span class=\"string\">\"Printer\"</span>)</div><div class=\"line\">      .getDeclaredConstructor(classOf[<span class=\"type\">String</span>], classOf[<span class=\"type\">String</span>])</div><div class=\"line\">      .newInstance(<span class=\"string\">\"kindle\"</span>, <span class=\"string\">\"used for reading\"</span>)</div><div class=\"line\">      .asInstanceOf[<span class=\"type\">Printer</span>]</div><div class=\"line\">    testClass.print()</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>Output</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">product name: kindle, description: used for reading</div></pre></td></tr></table></figure>"},{"title":"rc.local stopped running when an error occurred","date":"2015-12-03T07:07:46.000Z","thumbnail":"https://monovm.com/images/unzip-centos.png","_content":"\nToday I found out that `/etc/rc.local` didn't execute all of my commands that were written in the file. The content of the `/etc/rc.local` is like this:\n\n```bash\n#!/bin/bash -e\ncommand1\ncommand2\ncommand3\n\nexit 0\n```\n\nI tried to execute `/etc/rc.local` manually, then I found that `command1` failed in the middle of running and `/etc/rc.local` detected this phenomenon and it stopped running too, without considering the feelings of `command2` and `command3`. This is weird, because normally a bash file will execute every command in its file no matter one of the command fails or not. After searching for a while on the Internet. I found that it was `-e` option that made this happen. `-e` will make sure the script stop running when an error occurrs. It is essential for PC booting, because if a command fails, there's no guarantee that other commands will be running normally. But I don't need this, I just want every command to be executed no matter what happens. so I removed the `-e` option. Then Everything is fine. Now even when `command1` fails, `command2` and `command3` will still get to be executed.\n","source":"_posts/rc-local-stopped-running-when-an-error-occurred.md","raw":"title: rc.local stopped running when an error occurred\ndate: 2015-12-03 15:07:46\ntags: [linux, shell]\ncategories: Coding\nthumbnail: https://monovm.com/images/unzip-centos.png\n---\n\nToday I found out that `/etc/rc.local` didn't execute all of my commands that were written in the file. The content of the `/etc/rc.local` is like this:\n\n```bash\n#!/bin/bash -e\ncommand1\ncommand2\ncommand3\n\nexit 0\n```\n\nI tried to execute `/etc/rc.local` manually, then I found that `command1` failed in the middle of running and `/etc/rc.local` detected this phenomenon and it stopped running too, without considering the feelings of `command2` and `command3`. This is weird, because normally a bash file will execute every command in its file no matter one of the command fails or not. After searching for a while on the Internet. I found that it was `-e` option that made this happen. `-e` will make sure the script stop running when an error occurrs. It is essential for PC booting, because if a command fails, there's no guarantee that other commands will be running normally. But I don't need this, I just want every command to be executed no matter what happens. so I removed the `-e` option. Then Everything is fine. Now even when `command1` fails, `command2` and `command3` will still get to be executed.\n","slug":"rc-local-stopped-running-when-an-error-occurred","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqep005t8arfu8g8gxjw","content":"<p>Today I found out that <code>/etc/rc.local</code> didn’t execute all of my commands that were written in the file. The content of the <code>/etc/rc.local</code> is like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/bash -e</span></div><div class=\"line\"><span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"built_in\">command</span>3</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div></pre></td></tr></table></figure>\n<p>I tried to execute <code>/etc/rc.local</code> manually, then I found that <code>command1</code> failed in the middle of running and <code>/etc/rc.local</code> detected this phenomenon and it stopped running too, without considering the feelings of <code>command2</code> and <code>command3</code>. This is weird, because normally a bash file will execute every command in its file no matter one of the command fails or not. After searching for a while on the Internet. I found that it was <code>-e</code> option that made this happen. <code>-e</code> will make sure the script stop running when an error occurrs. It is essential for PC booting, because if a command fails, there’s no guarantee that other commands will be running normally. But I don’t need this, I just want every command to be executed no matter what happens. so I removed the <code>-e</code> option. Then Everything is fine. Now even when <code>command1</code> fails, <code>command2</code> and <code>command3</code> will still get to be executed.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Today I found out that <code>/etc/rc.local</code> didn’t execute all of my commands that were written in the file. The content of the <code>/etc/rc.local</code> is like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/bin/bash -e</span></div><div class=\"line\"><span class=\"built_in\">command</span>1</div><div class=\"line\"><span class=\"built_in\">command</span>2</div><div class=\"line\"><span class=\"built_in\">command</span>3</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">exit</span> 0</div></pre></td></tr></table></figure>\n<p>I tried to execute <code>/etc/rc.local</code> manually, then I found that <code>command1</code> failed in the middle of running and <code>/etc/rc.local</code> detected this phenomenon and it stopped running too, without considering the feelings of <code>command2</code> and <code>command3</code>. This is weird, because normally a bash file will execute every command in its file no matter one of the command fails or not. After searching for a while on the Internet. I found that it was <code>-e</code> option that made this happen. <code>-e</code> will make sure the script stop running when an error occurrs. It is essential for PC booting, because if a command fails, there’s no guarantee that other commands will be running normally. But I don’t need this, I just want every command to be executed no matter what happens. so I removed the <code>-e</code> option. Then Everything is fine. Now even when <code>command1</code> fails, <code>command2</code> and <code>command3</code> will still get to be executed.</p>\n"},{"title":"re-embrace hexo and hueman","date":"2017-05-15T13:24:18.000Z","thumbnail":"/images/time.jpg","_content":"\nAbout a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use English instead. The reason is unbelievably simple: typing English characters is a lot easier than typing Chinese characters.\n\nNow today, which is about a month later, I decided to abandon WordPress altogether. WordPress is an excellent blogging platform, I have to admit it. But I cannot find a reliable way to use markdown in WordPress, and I also noticed some odd behaviors of the visual editor used in WordPress. Nothing is more convenient and portable than writing my blogs in vim using markdown. So finally I decided to abandon it and embrace hexo and hueman again.\n\nI will consider moving some of the blogs written in WordPress back in here.\n","source":"_posts/re-embrace-hexo-and-hueman.md","raw":"title: re-embrace hexo and hueman\ndate: 2017-05-15 21:24:18\ntags: [hexo, hueman]\ncategories: Journal\nthumbnail: /images/time.jpg\n---\n\nAbout a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use English instead. The reason is unbelievably simple: typing English characters is a lot easier than typing Chinese characters.\n\nNow today, which is about a month later, I decided to abandon WordPress altogether. WordPress is an excellent blogging platform, I have to admit it. But I cannot find a reliable way to use markdown in WordPress, and I also noticed some odd behaviors of the visual editor used in WordPress. Nothing is more convenient and portable than writing my blogs in vim using markdown. So finally I decided to abandon it and embrace hexo and hueman again.\n\nI will consider moving some of the blogs written in WordPress back in here.\n","slug":"re-embrace-hexo-and-hueman","published":1,"updated":"2017-05-15T13:54:21.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqeq005v8arfdnm5ln20","content":"<p>About a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use English instead. The reason is unbelievably simple: typing English characters is a lot easier than typing Chinese characters.</p>\n<p>Now today, which is about a month later, I decided to abandon WordPress altogether. WordPress is an excellent blogging platform, I have to admit it. But I cannot find a reliable way to use markdown in WordPress, and I also noticed some odd behaviors of the visual editor used in WordPress. Nothing is more convenient and portable than writing my blogs in vim using markdown. So finally I decided to abandon it and embrace hexo and hueman again.</p>\n<p>I will consider moving some of the blogs written in WordPress back in here.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>About a month ago, I started writing blogs in Chinese using WordPress. I stuck to the plan for about several days then decided to use English instead. The reason is unbelievably simple: typing English characters is a lot easier than typing Chinese characters.</p>\n<p>Now today, which is about a month later, I decided to abandon WordPress altogether. WordPress is an excellent blogging platform, I have to admit it. But I cannot find a reliable way to use markdown in WordPress, and I also noticed some odd behaviors of the visual editor used in WordPress. Nothing is more convenient and portable than writing my blogs in vim using markdown. So finally I decided to abandon it and embrace hexo and hueman again.</p>\n<p>I will consider moving some of the blogs written in WordPress back in here.</p>\n"},{"title":"make fcitx work in sublime-text-3","date":"2016-02-16T14:43:42.000Z","_content":"\n# Preface\n\nRecently I began to use sublime and I found that fcitx couldn't work in sublime. This is quite weird. After searching online for a while, I found a solution which could solve the problem in a \"dirty\" way.\n\n# Solution\n\nFirst, thanks to cjacker, save the following script as `sublime-imfix.c`\n\n```c\n/*\nsublime-imfix.c\nUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.\nBy Cjacker Huang <jianzhong.huang at i-soft.com.cn>\nBy whitequark@whitequark.org\n \nHow to compile:\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\nHow to use:\nLD_PRELOAD=./libsublime-imfix.so sublime_text\n \nChanges:\n2014 06-09\n1, Fix cursor position update for sublime text 3.\n2, Combine the codes from whitequark(fix for xim immodule) and add cursor update support for XIM immodule.\n*/\n \n/*for RTLD_NEXT*/\n#define _GNU_SOURCE\n \n#include <gtk/gtk.h>\n#include <gdk/gdkx.h>\n#include <assert.h>\n#include <dlfcn.h>\n#include <stdio.h>\n#include <string.h>\n#include <gtk/gtk.h>\n#include <X11/Xlib.h>\n#include <X11/Xutil.h>\n \n#ifdef VERBOSE\n#define DEBUG(fmt, ...) do { \\\n    FILE* err = fopen(\"/tmp/libsublime-immethod-fix.log\", \"a\"); \\\n    if (err) { \\\n      fprintf(err, fmt, __VA_ARGS__); \\\n      fclose(err); \\\n    } \\\n  } while(0)\n#else\n#define DEBUG(fmt, ...)\n#endif\n \n \ntypedef GdkSegment GdkRegionBox;\n \nstruct _GdkRegion\n{\n  long size;\n  long numRects;\n  GdkRegionBox *rects;\n  GdkRegionBox extents;\n};\n \nGtkIMContext *local_context;\n \n \n//this func is interposed to support cursor position update.\nvoid\ngdk_region_get_clipbox (const GdkRegion *region,\n            GdkRectangle    *rectangle)\n{\n  g_return_if_fail (region != NULL);\n  g_return_if_fail (rectangle != NULL);\n \n  rectangle->x = region->extents.x1;\n  rectangle->y = region->extents.y1;\n  rectangle->width = region->extents.x2 - region->extents.x1;\n  rectangle->height = region->extents.y2 - region->extents.y1;\n  GdkRectangle rect;\n  rect.x = rectangle->x;\n  rect.y = rectangle->y;\n  rect.width = 0;\n  rect.height = rectangle->height;\n  //The caret width is 2 in sublime text 2\n  //And is 1 in sublime text 3.\n  //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.\n  if((rectangle->width == 2 || rectangle->width == 1)  && GTK_IS_IM_CONTEXT(local_context)) {\n        gtk_im_context_set_cursor_location(local_context, rectangle);\n  }\n}\n \n//this is needed, for example, if you input something in file dialog and return back the edit area\n//context will lost, so here we set it again.\nstatic GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)\n{\n    XEvent *xev = (XEvent *)xevent;\n    if(xev->type == KeyRelease && GTK_IS_IM_CONTEXT(im_context)) {\n       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),\"window\");\n       if(GDK_IS_WINDOW(win))\n         gtk_im_context_set_client_window(im_context, win);\n    }\n    return GDK_FILTER_CONTINUE;\n}\n \nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n          GdkWindow    *window)\n{\n    GtkIMContextClass *klass;\n    g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n    klass = GTK_IM_CONTEXT_GET_CLASS (context);\n    if (klass->set_client_window)\n        klass->set_client_window (context, window);\n \n    //below is our interposed codes to save the context to local_context.\n    if(!GDK_IS_WINDOW (window))\n        return;\n    g_object_set_data(G_OBJECT(context),\"window\",window);\n    int width = gdk_window_get_width(window);\n    int height = gdk_window_get_height(window);\n    if(width != 0 && height !=0) {\n        gtk_im_context_focus_in(context);\n        local_context = context;\n    }\n    //only add this event_filter when using 'fcitx' immodule.\n    //for xim immodule, this function is as same as original from gtk2.\n    const gchar * immodule = g_getenv(\"GTK_IM_MODULE\");\n    if(immodule && !strcmp(immodule, \"fcitx\")) {\n        gdk_window_add_filter (window, event_filter, context);\n    }\n}\n \n \n/*below codes is from whitequark, fix for xim immodule*/\n \n/* See gtkimcontextxim.c */\nGType gtk_type_im_context_xim = 0;\n \n#define GTK_TYPE_IM_CONTEXT_XIM            (gtk_type_im_context_xim)\n#define GTK_IM_CONTEXT_XIM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIM))\n#define GTK_IM_CONTEXT_XIM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\n#define GTK_IS_IM_CONTEXT_XIM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IS_IM_CONTEXT_XIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IM_CONTEXT_XIM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\n \ntypedef struct _GtkIMContextXIM       GtkIMContextXIM;\ntypedef struct _GtkIMContextXIMClass  GtkIMContextXIMClass;\n \nstruct _GtkIMContextXIMClass\n{\n  GtkIMContextClass parent_class;\n};\n \ntypedef struct _StatusWindow StatusWindow;\ntypedef struct _GtkXIMInfo GtkXIMInfo;\n \nstruct _GtkIMContextXIM\n{\n  GtkIMContext object;\n \n  GtkXIMInfo *im_info;\n \n  gchar *locale;\n  gchar *mb_charset;\n \n  GdkWindow *client_window;\n  GtkWidget *client_widget;\n \n  /* The status window for this input context; we claim the\n*    * status window when we are focused and have created an XIC\n*       */\n  StatusWindow *status_window;\n \n  gint preedit_size;\n  gint preedit_length;\n  gunichar *preedit_chars;\n  XIMFeedback *feedbacks;\n \n  gint preedit_cursor;\n \n  XIMCallback preedit_start_callback;\n  XIMCallback preedit_done_callback;\n  XIMCallback preedit_draw_callback;\n  XIMCallback preedit_caret_callback;\n \n  XIMCallback status_start_callback;\n  XIMCallback status_done_callback;\n  XIMCallback status_draw_callback;\n \n  XIMCallback string_conversion_callback;\n \n  XIC ic;\n \n  guint filter_key_release : 1;\n  guint use_preedit : 1;\n  guint finalizing : 1;\n  guint in_toplevel : 1;\n  guint has_focus : 1;\n};\n \nstatic GClassInitFunc orig_gtk_im_context_xim_class_init;\nstatic GType (*orig_g_type_module_register_type)(GTypeModule *,\n                                                 GType, const gchar *,\n                                                 const GTypeInfo *, GTypeFlags);\nstatic gboolean (*orig_gtk_im_context_xim_filter_keypress)(GtkIMContext *context,\n                                                           GdkEventKey *event);\n \nstatic gboolean\nhook_gtk_im_context_xim_filter_keypress(GtkIMContext *context, GdkEventKey *event) {\n  GtkIMContextXIM *im_context_xim = GTK_IM_CONTEXT_XIM(context);\n  if (!im_context_xim->client_window) {\n    DEBUG(\"im_context_xim == %p\\n\", im_context_xim);\n    DEBUG(\"event->window == %p\\n\", event->window);\n \n    gtk_im_context_set_client_window(context, event->window);\n  }\n \n  return orig_gtk_im_context_xim_filter_keypress(context, event);\n}\n \nstatic void\nhook_gtk_im_context_xim_class_init (GtkIMContextXIMClass *class) {\n  orig_gtk_im_context_xim_class_init(class, NULL); /* wat? */\n \n  GtkIMContextClass *im_context_class = GTK_IM_CONTEXT_CLASS (class);\n \n  assert(!orig_gtk_im_context_xim_filter_keypress);\n  orig_gtk_im_context_xim_filter_keypress = im_context_class->filter_keypress;\n  im_context_class->filter_keypress = hook_gtk_im_context_xim_filter_keypress;\n  DEBUG(\"orig_gtk_im_context_xim_filter_keypress: %p\\n\",\n        orig_gtk_im_context_xim_filter_keypress);\n}\n \nGType\ng_type_module_register_type (GTypeModule *module,\n                             GType parent_type,\n                             const gchar *type_name,\n                             const GTypeInfo *type_info,\n                             GTypeFlags flags) {\n  if (!orig_g_type_module_register_type) {\n    orig_g_type_module_register_type = dlsym(RTLD_NEXT, \"g_type_module_register_type\");\n    assert(orig_g_type_module_register_type);\n  }\n \n  if (type_name && !strcmp(type_name, \"GtkIMContextXIM\")) {\n    assert(!orig_gtk_im_context_xim_class_init);\n    orig_gtk_im_context_xim_class_init = type_info->class_init;\n \n    assert(sizeof(GtkIMContextXIM) == type_info->instance_size);\n \n    const GTypeInfo hook_im_context_xim_info =\n    {\n      type_info->class_size,\n      type_info->base_init,\n      type_info->base_finalize,\n      (GClassInitFunc) hook_gtk_im_context_xim_class_init,\n      type_info->class_finalize,\n      type_info->class_data,\n      type_info->instance_size,\n      type_info->n_preallocs,\n      type_info->instance_init,\n    };\n \n    DEBUG(\"orig_gtk_im_context_xim_class_init: %p\\n\", orig_gtk_im_context_xim_class_init);\n \n    gtk_type_im_context_xim =\n      orig_g_type_module_register_type(module, parent_type, type_name,\n                                       &hook_im_context_xim_info, flags);\n \n    return gtk_type_im_context_xim;\n  }\n \n  return orig_g_type_module_register_type(module, parent_type, type_name, type_info, flags);\n}\n```\n\nThen compile it.\n\n```bash\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\n```\n\nYou will get a file called `libsublime-imfix.so`, put it in `$HOME/.config/sublime-text-3/Packages/`. In fact, it doesn't matter where you put it, as long as you specify the right location of it in the following code. Put the following code in your `~/.bashrc` file.\n\n```bash\n# sublime fcitx fix\nalias sublime='LD_PRELOAD=$HOME/.config/sublime-text-3/Packages/libsublime-imfix.so /usr/bin/subl > /dev/null 2>&1 &'\n```\n\nSave, re-source it.\n\n```bash\n. ~/.bashrc\n```\n\nType in `sublime` in your terminal and you are good to go!\n\n# Showcase\n\n![fcitx in sublime-text-3](http://i.imgur.com/uN3FHqj.png)\n","source":"_posts/make-fcitx-work-in-sublime-text-3.md","raw":"title: make fcitx work in sublime-text-3\ndate: 2016-02-16 22:43:42\ncategories: Coding\ntags: [sublime, fcitx, linux]\n---\n\n# Preface\n\nRecently I began to use sublime and I found that fcitx couldn't work in sublime. This is quite weird. After searching online for a while, I found a solution which could solve the problem in a \"dirty\" way.\n\n# Solution\n\nFirst, thanks to cjacker, save the following script as `sublime-imfix.c`\n\n```c\n/*\nsublime-imfix.c\nUse LD_PRELOAD to interpose some function to fix sublime input method support for linux.\nBy Cjacker Huang <jianzhong.huang at i-soft.com.cn>\nBy whitequark@whitequark.org\n \nHow to compile:\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\nHow to use:\nLD_PRELOAD=./libsublime-imfix.so sublime_text\n \nChanges:\n2014 06-09\n1, Fix cursor position update for sublime text 3.\n2, Combine the codes from whitequark(fix for xim immodule) and add cursor update support for XIM immodule.\n*/\n \n/*for RTLD_NEXT*/\n#define _GNU_SOURCE\n \n#include <gtk/gtk.h>\n#include <gdk/gdkx.h>\n#include <assert.h>\n#include <dlfcn.h>\n#include <stdio.h>\n#include <string.h>\n#include <gtk/gtk.h>\n#include <X11/Xlib.h>\n#include <X11/Xutil.h>\n \n#ifdef VERBOSE\n#define DEBUG(fmt, ...) do { \\\n    FILE* err = fopen(\"/tmp/libsublime-immethod-fix.log\", \"a\"); \\\n    if (err) { \\\n      fprintf(err, fmt, __VA_ARGS__); \\\n      fclose(err); \\\n    } \\\n  } while(0)\n#else\n#define DEBUG(fmt, ...)\n#endif\n \n \ntypedef GdkSegment GdkRegionBox;\n \nstruct _GdkRegion\n{\n  long size;\n  long numRects;\n  GdkRegionBox *rects;\n  GdkRegionBox extents;\n};\n \nGtkIMContext *local_context;\n \n \n//this func is interposed to support cursor position update.\nvoid\ngdk_region_get_clipbox (const GdkRegion *region,\n            GdkRectangle    *rectangle)\n{\n  g_return_if_fail (region != NULL);\n  g_return_if_fail (rectangle != NULL);\n \n  rectangle->x = region->extents.x1;\n  rectangle->y = region->extents.y1;\n  rectangle->width = region->extents.x2 - region->extents.x1;\n  rectangle->height = region->extents.y2 - region->extents.y1;\n  GdkRectangle rect;\n  rect.x = rectangle->x;\n  rect.y = rectangle->y;\n  rect.width = 0;\n  rect.height = rectangle->height;\n  //The caret width is 2 in sublime text 2\n  //And is 1 in sublime text 3.\n  //Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.\n  if((rectangle->width == 2 || rectangle->width == 1)  && GTK_IS_IM_CONTEXT(local_context)) {\n        gtk_im_context_set_cursor_location(local_context, rectangle);\n  }\n}\n \n//this is needed, for example, if you input something in file dialog and return back the edit area\n//context will lost, so here we set it again.\nstatic GdkFilterReturn event_filter (GdkXEvent *xevent, GdkEvent *event, gpointer im_context)\n{\n    XEvent *xev = (XEvent *)xevent;\n    if(xev->type == KeyRelease && GTK_IS_IM_CONTEXT(im_context)) {\n       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),\"window\");\n       if(GDK_IS_WINDOW(win))\n         gtk_im_context_set_client_window(im_context, win);\n    }\n    return GDK_FILTER_CONTINUE;\n}\n \nvoid gtk_im_context_set_client_window (GtkIMContext *context,\n          GdkWindow    *window)\n{\n    GtkIMContextClass *klass;\n    g_return_if_fail (GTK_IS_IM_CONTEXT (context));\n    klass = GTK_IM_CONTEXT_GET_CLASS (context);\n    if (klass->set_client_window)\n        klass->set_client_window (context, window);\n \n    //below is our interposed codes to save the context to local_context.\n    if(!GDK_IS_WINDOW (window))\n        return;\n    g_object_set_data(G_OBJECT(context),\"window\",window);\n    int width = gdk_window_get_width(window);\n    int height = gdk_window_get_height(window);\n    if(width != 0 && height !=0) {\n        gtk_im_context_focus_in(context);\n        local_context = context;\n    }\n    //only add this event_filter when using 'fcitx' immodule.\n    //for xim immodule, this function is as same as original from gtk2.\n    const gchar * immodule = g_getenv(\"GTK_IM_MODULE\");\n    if(immodule && !strcmp(immodule, \"fcitx\")) {\n        gdk_window_add_filter (window, event_filter, context);\n    }\n}\n \n \n/*below codes is from whitequark, fix for xim immodule*/\n \n/* See gtkimcontextxim.c */\nGType gtk_type_im_context_xim = 0;\n \n#define GTK_TYPE_IM_CONTEXT_XIM            (gtk_type_im_context_xim)\n#define GTK_IM_CONTEXT_XIM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIM))\n#define GTK_IM_CONTEXT_XIM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\n#define GTK_IS_IM_CONTEXT_XIM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IS_IM_CONTEXT_XIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_XIM))\n#define GTK_IM_CONTEXT_XIM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))\n \ntypedef struct _GtkIMContextXIM       GtkIMContextXIM;\ntypedef struct _GtkIMContextXIMClass  GtkIMContextXIMClass;\n \nstruct _GtkIMContextXIMClass\n{\n  GtkIMContextClass parent_class;\n};\n \ntypedef struct _StatusWindow StatusWindow;\ntypedef struct _GtkXIMInfo GtkXIMInfo;\n \nstruct _GtkIMContextXIM\n{\n  GtkIMContext object;\n \n  GtkXIMInfo *im_info;\n \n  gchar *locale;\n  gchar *mb_charset;\n \n  GdkWindow *client_window;\n  GtkWidget *client_widget;\n \n  /* The status window for this input context; we claim the\n*    * status window when we are focused and have created an XIC\n*       */\n  StatusWindow *status_window;\n \n  gint preedit_size;\n  gint preedit_length;\n  gunichar *preedit_chars;\n  XIMFeedback *feedbacks;\n \n  gint preedit_cursor;\n \n  XIMCallback preedit_start_callback;\n  XIMCallback preedit_done_callback;\n  XIMCallback preedit_draw_callback;\n  XIMCallback preedit_caret_callback;\n \n  XIMCallback status_start_callback;\n  XIMCallback status_done_callback;\n  XIMCallback status_draw_callback;\n \n  XIMCallback string_conversion_callback;\n \n  XIC ic;\n \n  guint filter_key_release : 1;\n  guint use_preedit : 1;\n  guint finalizing : 1;\n  guint in_toplevel : 1;\n  guint has_focus : 1;\n};\n \nstatic GClassInitFunc orig_gtk_im_context_xim_class_init;\nstatic GType (*orig_g_type_module_register_type)(GTypeModule *,\n                                                 GType, const gchar *,\n                                                 const GTypeInfo *, GTypeFlags);\nstatic gboolean (*orig_gtk_im_context_xim_filter_keypress)(GtkIMContext *context,\n                                                           GdkEventKey *event);\n \nstatic gboolean\nhook_gtk_im_context_xim_filter_keypress(GtkIMContext *context, GdkEventKey *event) {\n  GtkIMContextXIM *im_context_xim = GTK_IM_CONTEXT_XIM(context);\n  if (!im_context_xim->client_window) {\n    DEBUG(\"im_context_xim == %p\\n\", im_context_xim);\n    DEBUG(\"event->window == %p\\n\", event->window);\n \n    gtk_im_context_set_client_window(context, event->window);\n  }\n \n  return orig_gtk_im_context_xim_filter_keypress(context, event);\n}\n \nstatic void\nhook_gtk_im_context_xim_class_init (GtkIMContextXIMClass *class) {\n  orig_gtk_im_context_xim_class_init(class, NULL); /* wat? */\n \n  GtkIMContextClass *im_context_class = GTK_IM_CONTEXT_CLASS (class);\n \n  assert(!orig_gtk_im_context_xim_filter_keypress);\n  orig_gtk_im_context_xim_filter_keypress = im_context_class->filter_keypress;\n  im_context_class->filter_keypress = hook_gtk_im_context_xim_filter_keypress;\n  DEBUG(\"orig_gtk_im_context_xim_filter_keypress: %p\\n\",\n        orig_gtk_im_context_xim_filter_keypress);\n}\n \nGType\ng_type_module_register_type (GTypeModule *module,\n                             GType parent_type,\n                             const gchar *type_name,\n                             const GTypeInfo *type_info,\n                             GTypeFlags flags) {\n  if (!orig_g_type_module_register_type) {\n    orig_g_type_module_register_type = dlsym(RTLD_NEXT, \"g_type_module_register_type\");\n    assert(orig_g_type_module_register_type);\n  }\n \n  if (type_name && !strcmp(type_name, \"GtkIMContextXIM\")) {\n    assert(!orig_gtk_im_context_xim_class_init);\n    orig_gtk_im_context_xim_class_init = type_info->class_init;\n \n    assert(sizeof(GtkIMContextXIM) == type_info->instance_size);\n \n    const GTypeInfo hook_im_context_xim_info =\n    {\n      type_info->class_size,\n      type_info->base_init,\n      type_info->base_finalize,\n      (GClassInitFunc) hook_gtk_im_context_xim_class_init,\n      type_info->class_finalize,\n      type_info->class_data,\n      type_info->instance_size,\n      type_info->n_preallocs,\n      type_info->instance_init,\n    };\n \n    DEBUG(\"orig_gtk_im_context_xim_class_init: %p\\n\", orig_gtk_im_context_xim_class_init);\n \n    gtk_type_im_context_xim =\n      orig_g_type_module_register_type(module, parent_type, type_name,\n                                       &hook_im_context_xim_info, flags);\n \n    return gtk_type_im_context_xim;\n  }\n \n  return orig_g_type_module_register_type(module, parent_type, type_name, type_info, flags);\n}\n```\n\nThen compile it.\n\n```bash\ngcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC\n```\n\nYou will get a file called `libsublime-imfix.so`, put it in `$HOME/.config/sublime-text-3/Packages/`. In fact, it doesn't matter where you put it, as long as you specify the right location of it in the following code. Put the following code in your `~/.bashrc` file.\n\n```bash\n# sublime fcitx fix\nalias sublime='LD_PRELOAD=$HOME/.config/sublime-text-3/Packages/libsublime-imfix.so /usr/bin/subl > /dev/null 2>&1 &'\n```\n\nSave, re-source it.\n\n```bash\n. ~/.bashrc\n```\n\nType in `sublime` in your terminal and you are good to go!\n\n# Showcase\n\n![fcitx in sublime-text-3](http://i.imgur.com/uN3FHqj.png)\n","slug":"make-fcitx-work-in-sublime-text-3","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqes005z8arfhlcf2mwv","content":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>Recently I began to use sublime and I found that fcitx couldn’t work in sublime. This is quite weird. After searching online for a while, I found a solution which could solve the problem in a “dirty” way.</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>First, thanks to cjacker, save the following script as <code>sublime-imfix.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">sublime-imfix.c</div><div class=\"line\">Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.</div><div class=\"line\">By Cjacker Huang &lt;jianzhong.huang at i-soft.com.cn&gt;</div><div class=\"line\">By whitequark@whitequark.org</div><div class=\"line\"> </div><div class=\"line\">How to compile:</div><div class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</div><div class=\"line\">How to use:</div><div class=\"line\">LD_PRELOAD=./libsublime-imfix.so sublime_text</div><div class=\"line\"> </div><div class=\"line\">Changes:</div><div class=\"line\">2014 06-09</div><div class=\"line\">1, Fix cursor position update for sublime text 3.</div><div class=\"line\">2, Combine the codes from whitequark(fix for xim immodule) and add cursor update support for XIM immodule.</div><div class=\"line\">*/</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*for RTLD_NEXT*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _GNU_SOURCE</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtk/gtk.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gdk/gdkx.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtk/gtk.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;X11/Xlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;X11/Xutil.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> VERBOSE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG(fmt, ...) do &#123; \\</span></div><div class=\"line\">    FILE* err = fopen(<span class=\"meta-string\">\"/tmp/libsublime-immethod-fix.log\"</span>, <span class=\"meta-string\">\"a\"</span>); \\</div><div class=\"line\">    <span class=\"meta-keyword\">if</span> (err) &#123; \\</div><div class=\"line\">      fprintf(err, fmt, __VA_ARGS__); \\</div><div class=\"line\">      fclose(err); \\</div><div class=\"line\">    &#125; \\</div><div class=\"line\">  &#125; while(0)</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG(fmt, ...)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> GdkSegment GdkRegionBox;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GdkRegion</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> size;</div><div class=\"line\">  <span class=\"keyword\">long</span> numRects;</div><div class=\"line\">  GdkRegionBox *rects;</div><div class=\"line\">  GdkRegionBox extents;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">GtkIMContext *local_context;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//this func is interposed to support cursor position update.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">gdk_region_get_clipbox</span> <span class=\"params\">(<span class=\"keyword\">const</span> GdkRegion *region,</span></div><div class=\"line\">            GdkRectangle    *rectangle)</div><div class=\"line\">&#123;</div><div class=\"line\">  g_return_if_fail (region != <span class=\"literal\">NULL</span>);</div><div class=\"line\">  g_return_if_fail (rectangle != <span class=\"literal\">NULL</span>);</div><div class=\"line\"> </div><div class=\"line\">  rectangle-&gt;x = region-&gt;extents.x1;</div><div class=\"line\">  rectangle-&gt;y = region-&gt;extents.y1;</div><div class=\"line\">  rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;</div><div class=\"line\">  rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;</div><div class=\"line\">  GdkRectangle rect;</div><div class=\"line\">  rect.x = rectangle-&gt;x;</div><div class=\"line\">  rect.y = rectangle-&gt;y;</div><div class=\"line\">  rect.width = <span class=\"number\">0</span>;</div><div class=\"line\">  rect.height = rectangle-&gt;height;</div><div class=\"line\">  <span class=\"comment\">//The caret width is 2 in sublime text 2</span></div><div class=\"line\">  <span class=\"comment\">//And is 1 in sublime text 3.</span></div><div class=\"line\">  <span class=\"comment\">//Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.</span></div><div class=\"line\">  <span class=\"keyword\">if</span>((rectangle-&gt;width == <span class=\"number\">2</span> || rectangle-&gt;width == <span class=\"number\">1</span>)  &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123;</div><div class=\"line\">        gtk_im_context_set_cursor_location(local_context, rectangle);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//this is needed, for example, if you input something in file dialog and return back the edit area</span></div><div class=\"line\"><span class=\"comment\">//context will lost, so here we set it again.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> GdkFilterReturn <span class=\"title\">event_filter</span> <span class=\"params\">(GdkXEvent *xevent, GdkEvent *event, gpointer im_context)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    XEvent *xev = (XEvent *)xevent;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123;</div><div class=\"line\">       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),<span class=\"string\">\"window\"</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span>(GDK_IS_WINDOW(win))</div><div class=\"line\">         gtk_im_context_set_client_window(im_context, win);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> GDK_FILTER_CONTINUE;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gtk_im_context_set_client_window</span> <span class=\"params\">(GtkIMContext *context,</span></span></div><div class=\"line\">          GdkWindow    *window)</div><div class=\"line\">&#123;</div><div class=\"line\">    GtkIMContextClass *klass;</div><div class=\"line\">    g_return_if_fail (GTK_IS_IM_CONTEXT (context));</div><div class=\"line\">    klass = GTK_IM_CONTEXT_GET_CLASS (context);</div><div class=\"line\">    <span class=\"keyword\">if</span> (klass-&gt;set_client_window)</div><div class=\"line\">        klass-&gt;set_client_window (context, window);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//below is our interposed codes to save the context to local_context.</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!GDK_IS_WINDOW (window))</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    g_object_set_data(G_OBJECT(context),<span class=\"string\">\"window\"</span>,window);</div><div class=\"line\">    <span class=\"keyword\">int</span> width = gdk_window_get_width(window);</div><div class=\"line\">    <span class=\"keyword\">int</span> height = gdk_window_get_height(window);</div><div class=\"line\">    <span class=\"keyword\">if</span>(width != <span class=\"number\">0</span> &amp;&amp; height !=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        gtk_im_context_focus_in(context);</div><div class=\"line\">        local_context = context;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//only add this event_filter when using 'fcitx' immodule.</span></div><div class=\"line\">    <span class=\"comment\">//for xim immodule, this function is as same as original from gtk2.</span></div><div class=\"line\">    <span class=\"keyword\">const</span> gchar * immodule = g_getenv(<span class=\"string\">\"GTK_IM_MODULE\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(immodule &amp;&amp; !<span class=\"built_in\">strcmp</span>(immodule, <span class=\"string\">\"fcitx\"</span>)) &#123;</div><div class=\"line\">        gdk_window_add_filter (window, event_filter, context);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*below codes is from whitequark, fix for xim immodule*/</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* See gtkimcontextxim.c */</span></div><div class=\"line\">GType gtk_type_im_context_xim = <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_TYPE_IM_CONTEXT_XIM            (gtk_type_im_context_xim)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IS_IM_CONTEXT_XIM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_XIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IS_IM_CONTEXT_XIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_XIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIM</span>       <span class=\"title\">GtkIMContextXIM</span>;</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIMClass</span>  <span class=\"title\">GtkIMContextXIMClass</span>;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIMClass</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  GtkIMContextClass parent_class;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">StatusWindow</span> <span class=\"title\">StatusWindow</span>;</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkXIMInfo</span> <span class=\"title\">GtkXIMInfo</span>;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIM</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  GtkIMContext object;</div><div class=\"line\"> </div><div class=\"line\">  GtkXIMInfo *im_info;</div><div class=\"line\"> </div><div class=\"line\">  gchar *locale;</div><div class=\"line\">  gchar *mb_charset;</div><div class=\"line\"> </div><div class=\"line\">  GdkWindow *client_window;</div><div class=\"line\">  GtkWidget *client_widget;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* The status window for this input context; we claim the</span></div><div class=\"line\">*    * status window when we are focused and have created an XIC</div><div class=\"line\">*       */</div><div class=\"line\">  StatusWindow *status_window;</div><div class=\"line\"> </div><div class=\"line\">  gint preedit_size;</div><div class=\"line\">  gint preedit_length;</div><div class=\"line\">  gunichar *preedit_chars;</div><div class=\"line\">  XIMFeedback *feedbacks;</div><div class=\"line\"> </div><div class=\"line\">  gint preedit_cursor;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback preedit_start_callback;</div><div class=\"line\">  XIMCallback preedit_done_callback;</div><div class=\"line\">  XIMCallback preedit_draw_callback;</div><div class=\"line\">  XIMCallback preedit_caret_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback status_start_callback;</div><div class=\"line\">  XIMCallback status_done_callback;</div><div class=\"line\">  XIMCallback status_draw_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback string_conversion_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIC ic;</div><div class=\"line\"> </div><div class=\"line\">  guint filter_key_release : <span class=\"number\">1</span>;</div><div class=\"line\">  guint use_preedit : <span class=\"number\">1</span>;</div><div class=\"line\">  guint finalizing : <span class=\"number\">1</span>;</div><div class=\"line\">  guint in_toplevel : <span class=\"number\">1</span>;</div><div class=\"line\">  guint has_focus : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">static</span> GClassInitFunc orig_gtk_im_context_xim_class_init;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">GType</span> <span class=\"params\">(*orig_g_type_module_register_type)</span><span class=\"params\">(GTypeModule *,</span></span></div><div class=\"line\">                                                 GType, <span class=\"keyword\">const</span> gchar *,</div><div class=\"line\">                                                 <span class=\"keyword\">const</span> GTypeInfo *, GTypeFlags);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">gboolean</span> <span class=\"params\">(*orig_gtk_im_context_xim_filter_keypress)</span><span class=\"params\">(GtkIMContext *context,</span></span></div><div class=\"line\">                                                           GdkEventKey *event);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> gboolean</span></div><div class=\"line\"><span class=\"title\">hook_gtk_im_context_xim_filter_keypress</span><span class=\"params\">(GtkIMContext *context, GdkEventKey *event)</span> &#123;</div><div class=\"line\">  GtkIMContextXIM *im_context_xim = GTK_IM_CONTEXT_XIM(context);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!im_context_xim-&gt;client_window) &#123;</div><div class=\"line\">    DEBUG(<span class=\"string\">\"im_context_xim == %p\\n\"</span>, im_context_xim);</div><div class=\"line\">    DEBUG(<span class=\"string\">\"event-&gt;window == %p\\n\"</span>, event-&gt;window);</div><div class=\"line\"> </div><div class=\"line\">    gtk_im_context_set_client_window(context, event-&gt;window);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> orig_gtk_im_context_xim_filter_keypress(context, event);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">hook_gtk_im_context_xim_class_init</span> <span class=\"params\">(GtkIMContextXIMClass *class)</span> &#123;</div><div class=\"line\">  orig_gtk_im_context_xim_class_init(class, <span class=\"literal\">NULL</span>); <span class=\"comment\">/* wat? */</span></div><div class=\"line\"> </div><div class=\"line\">  GtkIMContextClass *im_context_class = GTK_IM_CONTEXT_CLASS (class);</div><div class=\"line\"> </div><div class=\"line\">  assert(!orig_gtk_im_context_xim_filter_keypress);</div><div class=\"line\">  orig_gtk_im_context_xim_filter_keypress = im_context_class-&gt;filter_keypress;</div><div class=\"line\">  im_context_class-&gt;filter_keypress = hook_gtk_im_context_xim_filter_keypress;</div><div class=\"line\">  DEBUG(<span class=\"string\">\"orig_gtk_im_context_xim_filter_keypress: %p\\n\"</span>,</div><div class=\"line\">        orig_gtk_im_context_xim_filter_keypress);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">GType</span></div><div class=\"line\"><span class=\"title\">g_type_module_register_type</span> <span class=\"params\">(GTypeModule *<span class=\"keyword\">module</span>,</span></div><div class=\"line\">                             GType parent_type,</div><div class=\"line\">                             <span class=\"keyword\">const</span> gchar *type_name,</div><div class=\"line\">                             <span class=\"keyword\">const</span> GTypeInfo *type_info,</div><div class=\"line\">                             GTypeFlags flags) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!orig_g_type_module_register_type) &#123;</div><div class=\"line\">    orig_g_type_module_register_type = dlsym(RTLD_NEXT, <span class=\"string\">\"g_type_module_register_type\"</span>);</div><div class=\"line\">    assert(orig_g_type_module_register_type);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (type_name &amp;&amp; !<span class=\"built_in\">strcmp</span>(type_name, <span class=\"string\">\"GtkIMContextXIM\"</span>)) &#123;</div><div class=\"line\">    assert(!orig_gtk_im_context_xim_class_init);</div><div class=\"line\">    orig_gtk_im_context_xim_class_init = type_info-&gt;class_init;</div><div class=\"line\"> </div><div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(GtkIMContextXIM) == type_info-&gt;instance_size);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">const</span> GTypeInfo hook_im_context_xim_info =</div><div class=\"line\">    &#123;</div><div class=\"line\">      type_info-&gt;class_size,</div><div class=\"line\">      type_info-&gt;base_init,</div><div class=\"line\">      type_info-&gt;base_finalize,</div><div class=\"line\">      (GClassInitFunc) hook_gtk_im_context_xim_class_init,</div><div class=\"line\">      type_info-&gt;class_finalize,</div><div class=\"line\">      type_info-&gt;class_data,</div><div class=\"line\">      type_info-&gt;instance_size,</div><div class=\"line\">      type_info-&gt;n_preallocs,</div><div class=\"line\">      type_info-&gt;instance_init,</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    DEBUG(<span class=\"string\">\"orig_gtk_im_context_xim_class_init: %p\\n\"</span>, orig_gtk_im_context_xim_class_init);</div><div class=\"line\"> </div><div class=\"line\">    gtk_type_im_context_xim =</div><div class=\"line\">      orig_g_type_module_register_type(<span class=\"keyword\">module</span>, parent_type, type_name,</div><div class=\"line\">                                       &amp;hook_im_context_xim_info, flags);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> gtk_type_im_context_xim;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> orig_g_type_module_register_type(<span class=\"keyword\">module</span>, parent_type, type_name, type_info, flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then compile it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` <span class=\"_\">-f</span>PIC</div></pre></td></tr></table></figure>\n<p>You will get a file called <code>libsublime-imfix.so</code>, put it in <code>$HOME/.config/sublime-text-3/Packages/</code>. In fact, it doesn’t matter where you put it, as long as you specify the right location of it in the following code. Put the following code in your <code>~/.bashrc</code> file.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># sublime fcitx fix</span></div><div class=\"line\"><span class=\"built_in\">alias</span> sublime=<span class=\"string\">'LD_PRELOAD=$HOME/.config/sublime-text-3/Packages/libsublime-imfix.so /usr/bin/subl &gt; /dev/null 2&gt;&amp;1 &amp;'</span></div></pre></td></tr></table></figure>\n<p>Save, re-source it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ~/.bashrc</div></pre></td></tr></table></figure>\n<p>Type in <code>sublime</code> in your terminal and you are good to go!</p>\n<h1 id=\"Showcase\"><a href=\"#Showcase\" class=\"headerlink\" title=\"Showcase\"></a>Showcase</h1><p><img src=\"http://i.imgur.com/uN3FHqj.png\" alt=\"fcitx in sublime-text-3\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>Recently I began to use sublime and I found that fcitx couldn’t work in sublime. This is quite weird. After searching online for a while, I found a solution which could solve the problem in a “dirty” way.</p>\n<h1 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h1><p>First, thanks to cjacker, save the following script as <code>sublime-imfix.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">sublime-imfix.c</div><div class=\"line\">Use LD_PRELOAD to interpose some function to fix sublime input method support for linux.</div><div class=\"line\">By Cjacker Huang &lt;jianzhong.huang at i-soft.com.cn&gt;</div><div class=\"line\">By whitequark@whitequark.org</div><div class=\"line\"> </div><div class=\"line\">How to compile:</div><div class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` -fPIC</div><div class=\"line\">How to use:</div><div class=\"line\">LD_PRELOAD=./libsublime-imfix.so sublime_text</div><div class=\"line\"> </div><div class=\"line\">Changes:</div><div class=\"line\">2014 06-09</div><div class=\"line\">1, Fix cursor position update for sublime text 3.</div><div class=\"line\">2, Combine the codes from whitequark(fix for xim immodule) and add cursor update support for XIM immodule.</div><div class=\"line\">*/</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*for RTLD_NEXT*/</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _GNU_SOURCE</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtk/gtk.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gdk/gdkx.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;assert.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;gtk/gtk.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;X11/Xlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;X11/Xutil.h&gt;</span></span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> VERBOSE</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG(fmt, ...) do &#123; \\</span></div><div class=\"line\">    FILE* err = fopen(<span class=\"meta-string\">\"/tmp/libsublime-immethod-fix.log\"</span>, <span class=\"meta-string\">\"a\"</span>); \\</div><div class=\"line\">    <span class=\"meta-keyword\">if</span> (err) &#123; \\</div><div class=\"line\">      fprintf(err, fmt, __VA_ARGS__); \\</div><div class=\"line\">      fclose(err); \\</div><div class=\"line\">    &#125; \\</div><div class=\"line\">  &#125; while(0)</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> DEBUG(fmt, ...)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> GdkSegment GdkRegionBox;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GdkRegion</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> size;</div><div class=\"line\">  <span class=\"keyword\">long</span> numRects;</div><div class=\"line\">  GdkRegionBox *rects;</div><div class=\"line\">  GdkRegionBox extents;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">GtkIMContext *local_context;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//this func is interposed to support cursor position update.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">gdk_region_get_clipbox</span> <span class=\"params\">(<span class=\"keyword\">const</span> GdkRegion *region,</span></div><div class=\"line\">            GdkRectangle    *rectangle)</div><div class=\"line\">&#123;</div><div class=\"line\">  g_return_if_fail (region != <span class=\"literal\">NULL</span>);</div><div class=\"line\">  g_return_if_fail (rectangle != <span class=\"literal\">NULL</span>);</div><div class=\"line\"> </div><div class=\"line\">  rectangle-&gt;x = region-&gt;extents.x1;</div><div class=\"line\">  rectangle-&gt;y = region-&gt;extents.y1;</div><div class=\"line\">  rectangle-&gt;width = region-&gt;extents.x2 - region-&gt;extents.x1;</div><div class=\"line\">  rectangle-&gt;height = region-&gt;extents.y2 - region-&gt;extents.y1;</div><div class=\"line\">  GdkRectangle rect;</div><div class=\"line\">  rect.x = rectangle-&gt;x;</div><div class=\"line\">  rect.y = rectangle-&gt;y;</div><div class=\"line\">  rect.width = <span class=\"number\">0</span>;</div><div class=\"line\">  rect.height = rectangle-&gt;height;</div><div class=\"line\">  <span class=\"comment\">//The caret width is 2 in sublime text 2</span></div><div class=\"line\">  <span class=\"comment\">//And is 1 in sublime text 3.</span></div><div class=\"line\">  <span class=\"comment\">//Maybe sometimes we will make a mistake, but for most of the time, it should be the caret.</span></div><div class=\"line\">  <span class=\"keyword\">if</span>((rectangle-&gt;width == <span class=\"number\">2</span> || rectangle-&gt;width == <span class=\"number\">1</span>)  &amp;&amp; GTK_IS_IM_CONTEXT(local_context)) &#123;</div><div class=\"line\">        gtk_im_context_set_cursor_location(local_context, rectangle);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//this is needed, for example, if you input something in file dialog and return back the edit area</span></div><div class=\"line\"><span class=\"comment\">//context will lost, so here we set it again.</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> GdkFilterReturn <span class=\"title\">event_filter</span> <span class=\"params\">(GdkXEvent *xevent, GdkEvent *event, gpointer im_context)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    XEvent *xev = (XEvent *)xevent;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xev-&gt;type == KeyRelease &amp;&amp; GTK_IS_IM_CONTEXT(im_context)) &#123;</div><div class=\"line\">       GdkWindow * win = g_object_get_data(G_OBJECT(im_context),<span class=\"string\">\"window\"</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span>(GDK_IS_WINDOW(win))</div><div class=\"line\">         gtk_im_context_set_client_window(im_context, win);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> GDK_FILTER_CONTINUE;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">gtk_im_context_set_client_window</span> <span class=\"params\">(GtkIMContext *context,</span></span></div><div class=\"line\">          GdkWindow    *window)</div><div class=\"line\">&#123;</div><div class=\"line\">    GtkIMContextClass *klass;</div><div class=\"line\">    g_return_if_fail (GTK_IS_IM_CONTEXT (context));</div><div class=\"line\">    klass = GTK_IM_CONTEXT_GET_CLASS (context);</div><div class=\"line\">    <span class=\"keyword\">if</span> (klass-&gt;set_client_window)</div><div class=\"line\">        klass-&gt;set_client_window (context, window);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">//below is our interposed codes to save the context to local_context.</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!GDK_IS_WINDOW (window))</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    g_object_set_data(G_OBJECT(context),<span class=\"string\">\"window\"</span>,window);</div><div class=\"line\">    <span class=\"keyword\">int</span> width = gdk_window_get_width(window);</div><div class=\"line\">    <span class=\"keyword\">int</span> height = gdk_window_get_height(window);</div><div class=\"line\">    <span class=\"keyword\">if</span>(width != <span class=\"number\">0</span> &amp;&amp; height !=<span class=\"number\">0</span>) &#123;</div><div class=\"line\">        gtk_im_context_focus_in(context);</div><div class=\"line\">        local_context = context;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//only add this event_filter when using 'fcitx' immodule.</span></div><div class=\"line\">    <span class=\"comment\">//for xim immodule, this function is as same as original from gtk2.</span></div><div class=\"line\">    <span class=\"keyword\">const</span> gchar * immodule = g_getenv(<span class=\"string\">\"GTK_IM_MODULE\"</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span>(immodule &amp;&amp; !<span class=\"built_in\">strcmp</span>(immodule, <span class=\"string\">\"fcitx\"</span>)) &#123;</div><div class=\"line\">        gdk_window_add_filter (window, event_filter, context);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*below codes is from whitequark, fix for xim immodule*/</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/* See gtkimcontextxim.c */</span></div><div class=\"line\">GType gtk_type_im_context_xim = <span class=\"number\">0</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_TYPE_IM_CONTEXT_XIM            (gtk_type_im_context_xim)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IS_IM_CONTEXT_XIM(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_IM_CONTEXT_XIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IS_IM_CONTEXT_XIM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_IM_CONTEXT_XIM))</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> GTK_IM_CONTEXT_XIM_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_IM_CONTEXT_XIM, GtkIMContextXIMClass))</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIM</span>       <span class=\"title\">GtkIMContextXIM</span>;</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIMClass</span>  <span class=\"title\">GtkIMContextXIMClass</span>;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIMClass</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  GtkIMContextClass parent_class;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">StatusWindow</span> <span class=\"title\">StatusWindow</span>;</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkXIMInfo</span> <span class=\"title\">GtkXIMInfo</span>;</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">GtkIMContextXIM</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  GtkIMContext object;</div><div class=\"line\"> </div><div class=\"line\">  GtkXIMInfo *im_info;</div><div class=\"line\"> </div><div class=\"line\">  gchar *locale;</div><div class=\"line\">  gchar *mb_charset;</div><div class=\"line\"> </div><div class=\"line\">  GdkWindow *client_window;</div><div class=\"line\">  GtkWidget *client_widget;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/* The status window for this input context; we claim the</span></div><div class=\"line\">*    * status window when we are focused and have created an XIC</div><div class=\"line\">*       */</div><div class=\"line\">  StatusWindow *status_window;</div><div class=\"line\"> </div><div class=\"line\">  gint preedit_size;</div><div class=\"line\">  gint preedit_length;</div><div class=\"line\">  gunichar *preedit_chars;</div><div class=\"line\">  XIMFeedback *feedbacks;</div><div class=\"line\"> </div><div class=\"line\">  gint preedit_cursor;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback preedit_start_callback;</div><div class=\"line\">  XIMCallback preedit_done_callback;</div><div class=\"line\">  XIMCallback preedit_draw_callback;</div><div class=\"line\">  XIMCallback preedit_caret_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback status_start_callback;</div><div class=\"line\">  XIMCallback status_done_callback;</div><div class=\"line\">  XIMCallback status_draw_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIMCallback string_conversion_callback;</div><div class=\"line\"> </div><div class=\"line\">  XIC ic;</div><div class=\"line\"> </div><div class=\"line\">  guint filter_key_release : <span class=\"number\">1</span>;</div><div class=\"line\">  guint use_preedit : <span class=\"number\">1</span>;</div><div class=\"line\">  guint finalizing : <span class=\"number\">1</span>;</div><div class=\"line\">  guint in_toplevel : <span class=\"number\">1</span>;</div><div class=\"line\">  guint has_focus : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">static</span> GClassInitFunc orig_gtk_im_context_xim_class_init;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">GType</span> <span class=\"params\">(*orig_g_type_module_register_type)</span><span class=\"params\">(GTypeModule *,</span></span></div><div class=\"line\">                                                 GType, <span class=\"keyword\">const</span> gchar *,</div><div class=\"line\">                                                 <span class=\"keyword\">const</span> GTypeInfo *, GTypeFlags);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">gboolean</span> <span class=\"params\">(*orig_gtk_im_context_xim_filter_keypress)</span><span class=\"params\">(GtkIMContext *context,</span></span></div><div class=\"line\">                                                           GdkEventKey *event);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> gboolean</span></div><div class=\"line\"><span class=\"title\">hook_gtk_im_context_xim_filter_keypress</span><span class=\"params\">(GtkIMContext *context, GdkEventKey *event)</span> &#123;</div><div class=\"line\">  GtkIMContextXIM *im_context_xim = GTK_IM_CONTEXT_XIM(context);</div><div class=\"line\">  <span class=\"keyword\">if</span> (!im_context_xim-&gt;client_window) &#123;</div><div class=\"line\">    DEBUG(<span class=\"string\">\"im_context_xim == %p\\n\"</span>, im_context_xim);</div><div class=\"line\">    DEBUG(<span class=\"string\">\"event-&gt;window == %p\\n\"</span>, event-&gt;window);</div><div class=\"line\"> </div><div class=\"line\">    gtk_im_context_set_client_window(context, event-&gt;window);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> orig_gtk_im_context_xim_filter_keypress(context, event);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">hook_gtk_im_context_xim_class_init</span> <span class=\"params\">(GtkIMContextXIMClass *class)</span> &#123;</div><div class=\"line\">  orig_gtk_im_context_xim_class_init(class, <span class=\"literal\">NULL</span>); <span class=\"comment\">/* wat? */</span></div><div class=\"line\"> </div><div class=\"line\">  GtkIMContextClass *im_context_class = GTK_IM_CONTEXT_CLASS (class);</div><div class=\"line\"> </div><div class=\"line\">  assert(!orig_gtk_im_context_xim_filter_keypress);</div><div class=\"line\">  orig_gtk_im_context_xim_filter_keypress = im_context_class-&gt;filter_keypress;</div><div class=\"line\">  im_context_class-&gt;filter_keypress = hook_gtk_im_context_xim_filter_keypress;</div><div class=\"line\">  DEBUG(<span class=\"string\">\"orig_gtk_im_context_xim_filter_keypress: %p\\n\"</span>,</div><div class=\"line\">        orig_gtk_im_context_xim_filter_keypress);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">GType</span></div><div class=\"line\"><span class=\"title\">g_type_module_register_type</span> <span class=\"params\">(GTypeModule *<span class=\"keyword\">module</span>,</span></div><div class=\"line\">                             GType parent_type,</div><div class=\"line\">                             <span class=\"keyword\">const</span> gchar *type_name,</div><div class=\"line\">                             <span class=\"keyword\">const</span> GTypeInfo *type_info,</div><div class=\"line\">                             GTypeFlags flags) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!orig_g_type_module_register_type) &#123;</div><div class=\"line\">    orig_g_type_module_register_type = dlsym(RTLD_NEXT, <span class=\"string\">\"g_type_module_register_type\"</span>);</div><div class=\"line\">    assert(orig_g_type_module_register_type);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (type_name &amp;&amp; !<span class=\"built_in\">strcmp</span>(type_name, <span class=\"string\">\"GtkIMContextXIM\"</span>)) &#123;</div><div class=\"line\">    assert(!orig_gtk_im_context_xim_class_init);</div><div class=\"line\">    orig_gtk_im_context_xim_class_init = type_info-&gt;class_init;</div><div class=\"line\"> </div><div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(GtkIMContextXIM) == type_info-&gt;instance_size);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">const</span> GTypeInfo hook_im_context_xim_info =</div><div class=\"line\">    &#123;</div><div class=\"line\">      type_info-&gt;class_size,</div><div class=\"line\">      type_info-&gt;base_init,</div><div class=\"line\">      type_info-&gt;base_finalize,</div><div class=\"line\">      (GClassInitFunc) hook_gtk_im_context_xim_class_init,</div><div class=\"line\">      type_info-&gt;class_finalize,</div><div class=\"line\">      type_info-&gt;class_data,</div><div class=\"line\">      type_info-&gt;instance_size,</div><div class=\"line\">      type_info-&gt;n_preallocs,</div><div class=\"line\">      type_info-&gt;instance_init,</div><div class=\"line\">    &#125;;</div><div class=\"line\"> </div><div class=\"line\">    DEBUG(<span class=\"string\">\"orig_gtk_im_context_xim_class_init: %p\\n\"</span>, orig_gtk_im_context_xim_class_init);</div><div class=\"line\"> </div><div class=\"line\">    gtk_type_im_context_xim =</div><div class=\"line\">      orig_g_type_module_register_type(<span class=\"keyword\">module</span>, parent_type, type_name,</div><div class=\"line\">                                       &amp;hook_im_context_xim_info, flags);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">return</span> gtk_type_im_context_xim;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">return</span> orig_g_type_module_register_type(<span class=\"keyword\">module</span>, parent_type, type_name, type_info, flags);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Then compile it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -shared -o libsublime-imfix.so sublime_imfix.c  `pkg-config --libs --cflags gtk+-2.0` <span class=\"_\">-f</span>PIC</div></pre></td></tr></table></figure>\n<p>You will get a file called <code>libsublime-imfix.so</code>, put it in <code>$HOME/.config/sublime-text-3/Packages/</code>. In fact, it doesn’t matter where you put it, as long as you specify the right location of it in the following code. Put the following code in your <code>~/.bashrc</code> file.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># sublime fcitx fix</span></div><div class=\"line\"><span class=\"built_in\">alias</span> sublime=<span class=\"string\">'LD_PRELOAD=$HOME/.config/sublime-text-3/Packages/libsublime-imfix.so /usr/bin/subl &gt; /dev/null 2&gt;&amp;1 &amp;'</span></div></pre></td></tr></table></figure>\n<p>Save, re-source it.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">. ~/.bashrc</div></pre></td></tr></table></figure>\n<p>Type in <code>sublime</code> in your terminal and you are good to go!</p>\n<h1 id=\"Showcase\"><a href=\"#Showcase\" class=\"headerlink\" title=\"Showcase\"></a>Showcase</h1><p><img src=\"http://i.imgur.com/uN3FHqj.png\" alt=\"fcitx in sublime-text-3\"></p>\n"},{"title":"shorten a string without cutting words","date":"2016-05-26T00:24:01.000Z","thumbnail":"http://blog.verticalresponse.com/wp-content/uploads/2015/11/words-blog2.jpg","_content":"\n# Question\nHow to shortening a string without cutting words? For example, I have a string called `Hello World`, whose length is 11. I want to shorten its length to less than 6, which would be `Hello W`, but `W` is not a full word, we need to remove it. So the result is ony a word `Hello`. The following code is to solve the problem, written in python.\n\n# Code\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\n\ndef break_word(src, length):\n    if length <= 0:\n        return ''\n    elif length >= len(src):\n        return src.rstrip()\n\n    for i in range(length, -1, -1):\n        if src[i] == ' ':\n            return src[:i].rstrip()\n\n    return ''\n\nclass TestBreakWord(unittest.TestCase):\n\n    def test_breakword(self):\n\n        # zero length\n        self.assertEqual(break_word('Hello World', 0), '')\n\n        # no word is hit\n        self.assertEqual(break_word('Hello World', 2), '')\n\n        # exactly a word\n        self.assertEqual(break_word('Hello World', 5), 'Hello')\n\n        # exactly a word plus a space\n        self.assertEqual(break_word('Hello World', 6), 'Hello')\n\n        # the second word isn't hit\n        self.assertEqual(break_word('Hello World', 7), 'Hello')\n\n        # exactly two words\n        self.assertEqual(break_word('Hello World', 11), 'Hello World')\n\n        # two spaces\n        self.assertEqual(break_word('Hello  World', 5), 'Hello')\n        self.assertEqual(break_word('Hello  World', 6), 'Hello')\n        self.assertEqual(break_word('Hello  World', 7), 'Hello')\n        self.assertEqual(break_word('Hello  World', 8), 'Hello')\n\n        # space in the end\n        self.assertEqual(break_word('Hello World ', 11), 'Hello World')\n        self.assertEqual(break_word('Hello World ', 12), 'Hello World')\n\n        # two spaces in the end\n        self.assertEqual(break_word('Hello World  ', 11), 'Hello World')\n        self.assertEqual(break_word('Hello World  ', 12), 'Hello World')\n        self.assertEqual(break_word('Hello World  ', 13), 'Hello World')\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n# Result\n\n``` zsh\n./words.py\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\nProcess finished with exit code 0\n```\n","source":"_posts/shorten-a-string-without-cutting-words.md","raw":"title: shorten a string without cutting words\ndate: 2016-05-26 08:24:01\ntags:\ncategories: Coding\nthumbnail: http://blog.verticalresponse.com/wp-content/uploads/2015/11/words-blog2.jpg\n---\n\n# Question\nHow to shortening a string without cutting words? For example, I have a string called `Hello World`, whose length is 11. I want to shorten its length to less than 6, which would be `Hello W`, but `W` is not a full word, we need to remove it. So the result is ony a word `Hello`. The following code is to solve the problem, written in python.\n\n# Code\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport unittest\n\ndef break_word(src, length):\n    if length <= 0:\n        return ''\n    elif length >= len(src):\n        return src.rstrip()\n\n    for i in range(length, -1, -1):\n        if src[i] == ' ':\n            return src[:i].rstrip()\n\n    return ''\n\nclass TestBreakWord(unittest.TestCase):\n\n    def test_breakword(self):\n\n        # zero length\n        self.assertEqual(break_word('Hello World', 0), '')\n\n        # no word is hit\n        self.assertEqual(break_word('Hello World', 2), '')\n\n        # exactly a word\n        self.assertEqual(break_word('Hello World', 5), 'Hello')\n\n        # exactly a word plus a space\n        self.assertEqual(break_word('Hello World', 6), 'Hello')\n\n        # the second word isn't hit\n        self.assertEqual(break_word('Hello World', 7), 'Hello')\n\n        # exactly two words\n        self.assertEqual(break_word('Hello World', 11), 'Hello World')\n\n        # two spaces\n        self.assertEqual(break_word('Hello  World', 5), 'Hello')\n        self.assertEqual(break_word('Hello  World', 6), 'Hello')\n        self.assertEqual(break_word('Hello  World', 7), 'Hello')\n        self.assertEqual(break_word('Hello  World', 8), 'Hello')\n\n        # space in the end\n        self.assertEqual(break_word('Hello World ', 11), 'Hello World')\n        self.assertEqual(break_word('Hello World ', 12), 'Hello World')\n\n        # two spaces in the end\n        self.assertEqual(break_word('Hello World  ', 11), 'Hello World')\n        self.assertEqual(break_word('Hello World  ', 12), 'Hello World')\n        self.assertEqual(break_word('Hello World  ', 13), 'Hello World')\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n# Result\n\n``` zsh\n./words.py\n\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\n\nProcess finished with exit code 0\n```\n","slug":"shorten-a-string-without-cutting-words","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqet00628arfftlyx5ki","content":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>How to shortening a string without cutting words? For example, I have a string called <code>Hello World</code>, whose length is 11. I want to shorten its length to less than 6, which would be <code>Hello W</code>, but <code>W</code> is not a full word, we need to remove it. So the result is ony a word <code>Hello</code>. The following code is to solve the problem, written in python.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_word</span><span class=\"params\">(src, length)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> length &gt;= len(src):</div><div class=\"line\">        <span class=\"keyword\">return</span> src.rstrip()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> src[i] == <span class=\"string\">' '</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> src[:i].rstrip()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreakWord</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_breakword</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># zero length</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">0</span>), <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># no word is hit</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">2</span>), <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly a word</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">5</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly a word plus a space</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">6</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># the second word isn't hit</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">7</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly two words</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># two spaces</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">5</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">6</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">7</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">8</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># space in the end</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World '</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World '</span>, <span class=\"number\">12</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># two spaces in the end</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">12</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">13</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    unittest.main()</div></pre></td></tr></table></figure>\n<h1 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h1><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">./words.py</div><div class=\"line\"></div><div class=\"line\">.</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Ran 1 <span class=\"built_in\">test</span> <span class=\"keyword\">in</span> 0.000s</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"built_in\">exit</span> code 0</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>How to shortening a string without cutting words? For example, I have a string called <code>Hello World</code>, whose length is 11. I want to shorten its length to less than 6, which would be <code>Hello W</code>, but <code>W</code> is not a full word, we need to remove it. So the result is ony a word <code>Hello</code>. The following code is to solve the problem, written in python.</p>\n<h1 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> unittest</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">break_word</span><span class=\"params\">(src, length)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> length &lt;= <span class=\"number\">0</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">elif</span> length &gt;= len(src):</div><div class=\"line\">        <span class=\"keyword\">return</span> src.rstrip()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(length, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>):</div><div class=\"line\">        <span class=\"keyword\">if</span> src[i] == <span class=\"string\">' '</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> src[:i].rstrip()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBreakWord</span><span class=\"params\">(unittest.TestCase)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_breakword</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># zero length</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">0</span>), <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># no word is hit</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">2</span>), <span class=\"string\">''</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly a word</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">5</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly a word plus a space</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">6</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># the second word isn't hit</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">7</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># exactly two words</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World'</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># two spaces</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">5</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">6</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">7</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello  World'</span>, <span class=\"number\">8</span>), <span class=\"string\">'Hello'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># space in the end</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World '</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World '</span>, <span class=\"number\">12</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># two spaces in the end</span></div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">11</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">12</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\">        self.assertEqual(break_word(<span class=\"string\">'Hello World  '</span>, <span class=\"number\">13</span>), <span class=\"string\">'Hello World'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    unittest.main()</div></pre></td></tr></table></figure>\n<h1 id=\"Result\"><a href=\"#Result\" class=\"headerlink\" title=\"Result\"></a>Result</h1><figure class=\"highlight zsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">./words.py</div><div class=\"line\"></div><div class=\"line\">.</div><div class=\"line\">----------------------------------------------------------------------</div><div class=\"line\">Ran 1 <span class=\"built_in\">test</span> <span class=\"keyword\">in</span> 0.000s</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">Process finished with <span class=\"built_in\">exit</span> code 0</div></pre></td></tr></table></figure>\n"},{"title":"watched alien 2 today","date":"2016-05-21T10:08:03.000Z","thumbnail":"https://s-media-cache-ak0.pinimg.com/736x/31/63/30/316330187963407fa046c6be9b7f18a1.jpg","_content":"\nI watched Alien 2 today, this is an excellent film, and I think it's better than Alien 1. So I was even a little surprised when I noticed the score of Alien 2 was less than that of Alien 1 on douban and imdb. But anyway, tastes vary from people to people, and what's more, it's only a small gap.\n\nThere were a lot of words that I didn't know in this movie. So I kept searching and adding those words to anki. It was getting sort of irksome afterwards. Though I omitted some, it was still a lot of words. More than 50 words were added from the film, suppose it took me about 1 minute to add a word, those words could take about 1 hour to be added. Babe, that's a lot of time! But I knew I had also learned a lot from this film, so I was also satisfied.\n","source":"_posts/watched-alien-2-today.md","raw":"title: watched alien 2 today\ndate: 2016-05-21 18:08:03\ntags:\ncategories: Journal\nthumbnail: https://s-media-cache-ak0.pinimg.com/736x/31/63/30/316330187963407fa046c6be9b7f18a1.jpg\n---\n\nI watched Alien 2 today, this is an excellent film, and I think it's better than Alien 1. So I was even a little surprised when I noticed the score of Alien 2 was less than that of Alien 1 on douban and imdb. But anyway, tastes vary from people to people, and what's more, it's only a small gap.\n\nThere were a lot of words that I didn't know in this movie. So I kept searching and adding those words to anki. It was getting sort of irksome afterwards. Though I omitted some, it was still a lot of words. More than 50 words were added from the film, suppose it took me about 1 minute to add a word, those words could take about 1 hour to be added. Babe, that's a lot of time! But I knew I had also learned a lot from this film, so I was also satisfied.\n","slug":"watched-alien-2-today","published":1,"updated":"2016-12-06T14:08:49.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqeu00668arfc6q56yci","content":"<p>I watched Alien 2 today, this is an excellent film, and I think it’s better than Alien 1. So I was even a little surprised when I noticed the score of Alien 2 was less than that of Alien 1 on douban and imdb. But anyway, tastes vary from people to people, and what’s more, it’s only a small gap.</p>\n<p>There were a lot of words that I didn’t know in this movie. So I kept searching and adding those words to anki. It was getting sort of irksome afterwards. Though I omitted some, it was still a lot of words. More than 50 words were added from the film, suppose it took me about 1 minute to add a word, those words could take about 1 hour to be added. Babe, that’s a lot of time! But I knew I had also learned a lot from this film, so I was also satisfied.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I watched Alien 2 today, this is an excellent film, and I think it’s better than Alien 1. So I was even a little surprised when I noticed the score of Alien 2 was less than that of Alien 1 on douban and imdb. But anyway, tastes vary from people to people, and what’s more, it’s only a small gap.</p>\n<p>There were a lot of words that I didn’t know in this movie. So I kept searching and adding those words to anki. It was getting sort of irksome afterwards. Though I omitted some, it was still a lot of words. More than 50 words were added from the film, suppose it took me about 1 minute to add a word, those words could take about 1 hour to be added. Babe, that’s a lot of time! But I knew I had also learned a lot from this film, so I was also satisfied.</p>\n"},{"title":"set up a git server to deploy with hexo","date":"2015-12-05T01:52:25.000Z","thumbnail":"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/03/1458791372git.png","_content":"\n# Preface\n\nI used `rsync` to deploy my website for the past few days, but it seemed that there were some bugs with `hexo rsync deployment`, I could only use rsync by running `rsync -a localfiles username@server:/remote/path` manually instead of simply `hexo deploy`. Instead of looking for the reason why `rsync` doesn't work in hexo, I decided to set up a git server for deployment, because git provides an extra version control feature, which might come in handy sometime in the future. It actually took me a lot of time to do this because there were little information on the Internet regarding it, so writing a blog to record this process is important, I think.\n\n# Nginx\n\nFirst we need to set up an nginx on the server, I use `centos`, so the command works for me\n\n```\nsudo yum install nginx\n```\n\nIf you are using ubuntu, the following command would work for you\n\n```\nsudo apt-get install nginx\n```\n\nWhen the installation finishes, start your nginx\n\n```bash\nsudo service nginx start\n```\n\nYou can test whether `nginx` works or not by typing in your server's IP address on your client.\n\n# Git Server\n\n## Create A User Name On The Server For Git Sync\n\nTo set up a git server, the first thing we need to do is to create a username for it, let's call it `git`, you should run this command on your server.\n\n```bash\nuseradd git\n```\n\nIt will prompt you for a password.\n\n## Create A SSH Key Pair To Avoid Typing In Password Every Time\n\nTo avoid typing in the password every time we use `git`, we need to set up a ssh key pair. Run the command on your client.\n\n```bash\nssh-keygen -t rsa\n```\n\nJust punch `enter` when a prompt shows up. Then you will find a file called `id_rsa.pub` in `.ssh` folder of your home directory, this is the public key. Now turn to the server, switch your username to git.\n\n```bash\nsu git\n```\n\ncreate a `.ssh` foler in your git home directory\n\n```bash\nmkdir ~/.ssh\n```\n\ncreate a file named `authorized_keys` to save the accepted public keys\n\n```bash\ntouch ~/.ssh/authorized_keys\n```\n\nNow turn to your client side, run the following command to add your client's public key to your server, notice that you should replace the IP address with yours.\n\n```bash\ncat .ssh/id_rsa.pub | ssh user@123.45.56.78 \"cat >> ~/.ssh/authorized_keys\"\n```\n\nChange the permissions to avoid others modifying your ssh key pair\n\n```bash\nchmod 700 ~/.ssh && chmod 400 ~/.ssh/authorized_keys\n```\n\n## Set Up A Bare Local Repository On The Server\n\nOK, the next time you log on to your server with the user name `git`, you won't need the password anymore. Now Let's turn to the server side and set up a bare local repository\n\n```bash\ngit init --bare website.git\n```\n\n## Use The Remote Repository On The Client\n\nNow turn to your client, go to the hexo directory, install hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen find the `_config.yml` file and open it. Add the following lines at the end of the file. Notice that you should replace the IP address with your server's. If there is other deployment setting in your file like this, please remove it.\n\n```\ndeploy:\n  type: git\n  repo: git@123.456.78.90:website.git\n  branch: master\n  message:\n```\n\nLet's use git to sync our website to the server\n\n```bash\nhexo generate && hexo deploy\n```\n\nIf nothing error occurs, you're successful till now.\n\n\n\n## Use Git Hook To Deploy Your Website Automatically On Your Server\n\nNow that you've synced your website to the server, but you cannot find these files on your server, why? In fact, it took me a lot of time to search for my website in the `website.git` folder, but I just couldn't find it. After gleaning information on the Internet, I realized that my website is still on my server, but not in the way it is stored on my client. Those website files are stored as the `object` in the `git bare repository`, you cannot *see* those files, but you can `pull` or `clone` them.\n\nSo what we need do is deploy these synced files to our web server's root directory. Go to your nginx's root directory (it's usually `/usr/share/nginx/html`, but I noticed that it's `/var/www/html` on ubuntu 15.10), set up a git repository and add the remote server(localhost, actually)\n\n```bash\ngit init /usr/share/nginx/html && git remote add origin git@localhost:website.git\n```\n\nTo enable `git` user the permission to modify our website, we need to change the ownership of those files to `git`\n\n```bash\nchown git:git /usr/share/nginx/html -R\n```\n\nSet up the git hook for deployment, it will automatically sync your files from `website.git` to `/usr/share/nginx/html` every time it receives a `push` operation.\n\n```bash\nsu git\ncd ~/website.git/hooks/\ncat <<EOT > post-receive\n#!/bin/sh\n\nunset $(git rev-parse --local-env-vars)\ncd /usr/share/nginx/html\ngit fetch origin\ngit reset --hard origin/master\nEOT\n```\n\nThen set the permission to make the git hook work.\n\n```bash\nchmod ug+x ~/website.git/hooks/post-receive\n```\n\nTo avoid the authorization issue, add the public key of `root` to the `authorized_keys` of user `git`\n\n```bash\nsu # switch to user root\ncat ~/.ssh/id_rsa.pub >> /home/git/.ssh/authorized_keys\n```\n\n\n# Test The Result\n\nOK, now we are ready to go. Turn to the client side and deploy your files with hexo-git-deployer\n\n```bash\ncd /path/to/your/hexo/root/directory\nrm .deploy_git #remove the previous deployment info\nhexo generate && hexo deploy\n```\n\nThen check your website on your server.\n\n# Conclusion\n\nThis is a long story for me. So there might be something that I didn't mention, or you get confused about something in the post. If so, please leave a comment below to let me know, I'd like to help you.\n","source":"_posts/set-up-a-git-server-to-deploy-with-hexo.md","raw":"title: set up a git server to deploy with hexo\ndate: 2015-12-05 09:52:25\ntags: [git]\ncategories: Coding\nthumbnail: https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/03/1458791372git.png\n---\n\n# Preface\n\nI used `rsync` to deploy my website for the past few days, but it seemed that there were some bugs with `hexo rsync deployment`, I could only use rsync by running `rsync -a localfiles username@server:/remote/path` manually instead of simply `hexo deploy`. Instead of looking for the reason why `rsync` doesn't work in hexo, I decided to set up a git server for deployment, because git provides an extra version control feature, which might come in handy sometime in the future. It actually took me a lot of time to do this because there were little information on the Internet regarding it, so writing a blog to record this process is important, I think.\n\n# Nginx\n\nFirst we need to set up an nginx on the server, I use `centos`, so the command works for me\n\n```\nsudo yum install nginx\n```\n\nIf you are using ubuntu, the following command would work for you\n\n```\nsudo apt-get install nginx\n```\n\nWhen the installation finishes, start your nginx\n\n```bash\nsudo service nginx start\n```\n\nYou can test whether `nginx` works or not by typing in your server's IP address on your client.\n\n# Git Server\n\n## Create A User Name On The Server For Git Sync\n\nTo set up a git server, the first thing we need to do is to create a username for it, let's call it `git`, you should run this command on your server.\n\n```bash\nuseradd git\n```\n\nIt will prompt you for a password.\n\n## Create A SSH Key Pair To Avoid Typing In Password Every Time\n\nTo avoid typing in the password every time we use `git`, we need to set up a ssh key pair. Run the command on your client.\n\n```bash\nssh-keygen -t rsa\n```\n\nJust punch `enter` when a prompt shows up. Then you will find a file called `id_rsa.pub` in `.ssh` folder of your home directory, this is the public key. Now turn to the server, switch your username to git.\n\n```bash\nsu git\n```\n\ncreate a `.ssh` foler in your git home directory\n\n```bash\nmkdir ~/.ssh\n```\n\ncreate a file named `authorized_keys` to save the accepted public keys\n\n```bash\ntouch ~/.ssh/authorized_keys\n```\n\nNow turn to your client side, run the following command to add your client's public key to your server, notice that you should replace the IP address with yours.\n\n```bash\ncat .ssh/id_rsa.pub | ssh user@123.45.56.78 \"cat >> ~/.ssh/authorized_keys\"\n```\n\nChange the permissions to avoid others modifying your ssh key pair\n\n```bash\nchmod 700 ~/.ssh && chmod 400 ~/.ssh/authorized_keys\n```\n\n## Set Up A Bare Local Repository On The Server\n\nOK, the next time you log on to your server with the user name `git`, you won't need the password anymore. Now Let's turn to the server side and set up a bare local repository\n\n```bash\ngit init --bare website.git\n```\n\n## Use The Remote Repository On The Client\n\nNow turn to your client, go to the hexo directory, install hexo-deployer-git\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen find the `_config.yml` file and open it. Add the following lines at the end of the file. Notice that you should replace the IP address with your server's. If there is other deployment setting in your file like this, please remove it.\n\n```\ndeploy:\n  type: git\n  repo: git@123.456.78.90:website.git\n  branch: master\n  message:\n```\n\nLet's use git to sync our website to the server\n\n```bash\nhexo generate && hexo deploy\n```\n\nIf nothing error occurs, you're successful till now.\n\n\n\n## Use Git Hook To Deploy Your Website Automatically On Your Server\n\nNow that you've synced your website to the server, but you cannot find these files on your server, why? In fact, it took me a lot of time to search for my website in the `website.git` folder, but I just couldn't find it. After gleaning information on the Internet, I realized that my website is still on my server, but not in the way it is stored on my client. Those website files are stored as the `object` in the `git bare repository`, you cannot *see* those files, but you can `pull` or `clone` them.\n\nSo what we need do is deploy these synced files to our web server's root directory. Go to your nginx's root directory (it's usually `/usr/share/nginx/html`, but I noticed that it's `/var/www/html` on ubuntu 15.10), set up a git repository and add the remote server(localhost, actually)\n\n```bash\ngit init /usr/share/nginx/html && git remote add origin git@localhost:website.git\n```\n\nTo enable `git` user the permission to modify our website, we need to change the ownership of those files to `git`\n\n```bash\nchown git:git /usr/share/nginx/html -R\n```\n\nSet up the git hook for deployment, it will automatically sync your files from `website.git` to `/usr/share/nginx/html` every time it receives a `push` operation.\n\n```bash\nsu git\ncd ~/website.git/hooks/\ncat <<EOT > post-receive\n#!/bin/sh\n\nunset $(git rev-parse --local-env-vars)\ncd /usr/share/nginx/html\ngit fetch origin\ngit reset --hard origin/master\nEOT\n```\n\nThen set the permission to make the git hook work.\n\n```bash\nchmod ug+x ~/website.git/hooks/post-receive\n```\n\nTo avoid the authorization issue, add the public key of `root` to the `authorized_keys` of user `git`\n\n```bash\nsu # switch to user root\ncat ~/.ssh/id_rsa.pub >> /home/git/.ssh/authorized_keys\n```\n\n\n# Test The Result\n\nOK, now we are ready to go. Turn to the client side and deploy your files with hexo-git-deployer\n\n```bash\ncd /path/to/your/hexo/root/directory\nrm .deploy_git #remove the previous deployment info\nhexo generate && hexo deploy\n```\n\nThen check your website on your server.\n\n# Conclusion\n\nThis is a long story for me. So there might be something that I didn't mention, or you get confused about something in the post. If so, please leave a comment below to let me know, I'd like to help you.\n","slug":"set-up-a-git-server-to-deploy-with-hexo","published":1,"updated":"2017-12-02T15:34:56.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqev00698arf45ujrpgo","content":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>I used <code>rsync</code> to deploy my website for the past few days, but it seemed that there were some bugs with <code>hexo rsync deployment</code>, I could only use rsync by running <code>rsync -a localfiles username@server:/remote/path</code> manually instead of simply <code>hexo deploy</code>. Instead of looking for the reason why <code>rsync</code> doesn’t work in hexo, I decided to set up a git server for deployment, because git provides an extra version control feature, which might come in handy sometime in the future. It actually took me a lot of time to do this because there were little information on the Internet regarding it, so writing a blog to record this process is important, I think.</p>\n<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><p>First we need to set up an nginx on the server, I use <code>centos</code>, so the command works for me</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install nginx</div></pre></td></tr></table></figure>\n<p>If you are using ubuntu, the following command would work for you</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure>\n<p>When the installation finishes, start your nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service nginx start</div></pre></td></tr></table></figure>\n<p>You can test whether <code>nginx</code> works or not by typing in your server’s IP address on your client.</p>\n<h1 id=\"Git-Server\"><a href=\"#Git-Server\" class=\"headerlink\" title=\"Git Server\"></a>Git Server</h1><h2 id=\"Create-A-User-Name-On-The-Server-For-Git-Sync\"><a href=\"#Create-A-User-Name-On-The-Server-For-Git-Sync\" class=\"headerlink\" title=\"Create A User Name On The Server For Git Sync\"></a>Create A User Name On The Server For Git Sync</h2><p>To set up a git server, the first thing we need to do is to create a username for it, let’s call it <code>git</code>, you should run this command on your server.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd git</div></pre></td></tr></table></figure>\n<p>It will prompt you for a password.</p>\n<h2 id=\"Create-A-SSH-Key-Pair-To-Avoid-Typing-In-Password-Every-Time\"><a href=\"#Create-A-SSH-Key-Pair-To-Avoid-Typing-In-Password-Every-Time\" class=\"headerlink\" title=\"Create A SSH Key Pair To Avoid Typing In Password Every Time\"></a>Create A SSH Key Pair To Avoid Typing In Password Every Time</h2><p>To avoid typing in the password every time we use <code>git</code>, we need to set up a ssh key pair. Run the command on your client.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p>Just punch <code>enter</code> when a prompt shows up. Then you will find a file called <code>id_rsa.pub</code> in <code>.ssh</code> folder of your home directory, this is the public key. Now turn to the server, switch your username to git.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div></pre></td></tr></table></figure>\n<p>create a <code>.ssh</code> foler in your git home directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.ssh</div></pre></td></tr></table></figure>\n<p>create a file named <code>authorized_keys</code> to save the accepted public keys</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<p>Now turn to your client side, run the following command to add your client’s public key to your server, notice that you should replace the IP address with yours.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat .ssh/id_rsa.pub | ssh user@123.45.56.78 <span class=\"string\">\"cat &gt;&gt; ~/.ssh/authorized_keys\"</span></div></pre></td></tr></table></figure>\n<p>Change the permissions to avoid others modifying your ssh key pair</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 700 ~/.ssh &amp;&amp; chmod 400 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h2 id=\"Set-Up-A-Bare-Local-Repository-On-The-Server\"><a href=\"#Set-Up-A-Bare-Local-Repository-On-The-Server\" class=\"headerlink\" title=\"Set Up A Bare Local Repository On The Server\"></a>Set Up A Bare Local Repository On The Server</h2><p>OK, the next time you log on to your server with the user name <code>git</code>, you won’t need the password anymore. Now Let’s turn to the server side and set up a bare local repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init --bare website.git</div></pre></td></tr></table></figure>\n<h2 id=\"Use-The-Remote-Repository-On-The-Client\"><a href=\"#Use-The-Remote-Repository-On-The-Client\" class=\"headerlink\" title=\"Use The Remote Repository On The Client\"></a>Use The Remote Repository On The Client</h2><p>Now turn to your client, go to the hexo directory, install hexo-deployer-git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>Then find the <code>_config.yml</code> file and open it. Add the following lines at the end of the file. Notice that you should replace the IP address with your server’s. If there is other deployment setting in your file like this, please remove it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@123.456.78.90:website.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>Let’s use git to sync our website to the server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>\n<p>If nothing error occurs, you’re successful till now.</p>\n<h2 id=\"Use-Git-Hook-To-Deploy-Your-Website-Automatically-On-Your-Server\"><a href=\"#Use-Git-Hook-To-Deploy-Your-Website-Automatically-On-Your-Server\" class=\"headerlink\" title=\"Use Git Hook To Deploy Your Website Automatically On Your Server\"></a>Use Git Hook To Deploy Your Website Automatically On Your Server</h2><p>Now that you’ve synced your website to the server, but you cannot find these files on your server, why? In fact, it took me a lot of time to search for my website in the <code>website.git</code> folder, but I just couldn’t find it. After gleaning information on the Internet, I realized that my website is still on my server, but not in the way it is stored on my client. Those website files are stored as the <code>object</code> in the <code>git bare repository</code>, you cannot <em>see</em> those files, but you can <code>pull</code> or <code>clone</code> them.</p>\n<p>So what we need do is deploy these synced files to our web server’s root directory. Go to your nginx’s root directory (it’s usually <code>/usr/share/nginx/html</code>, but I noticed that it’s <code>/var/www/html</code> on ubuntu 15.10), set up a git repository and add the remote server(localhost, actually)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init /usr/share/nginx/html &amp;&amp; git remote add origin git@localhost:website.git</div></pre></td></tr></table></figure>\n<p>To enable <code>git</code> user the permission to modify our website, we need to change the ownership of those files to <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown git:git /usr/share/nginx/html -R</div></pre></td></tr></table></figure>\n<p>Set up the git hook for deployment, it will automatically sync your files from <code>website.git</code> to <code>/usr/share/nginx/html</code> every time it receives a <code>push</code> operation.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\"><span class=\"built_in\">cd</span> ~/website.git/hooks/</div><div class=\"line\">cat &lt;&lt;EOT &gt; post-receive</div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">unset</span> $(git rev-parse --local-env-vars)</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</div><div class=\"line\">git fetch origin</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\">EOT</div></pre></td></tr></table></figure>\n<p>Then set the permission to make the git hook work.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod ug+x ~/website.git/hooks/post-receive</div></pre></td></tr></table></figure>\n<p>To avoid the authorization issue, add the public key of <code>root</code> to the <code>authorized_keys</code> of user <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">su <span class=\"comment\"># switch to user root</span></div><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h1 id=\"Test-The-Result\"><a href=\"#Test-The-Result\" class=\"headerlink\" title=\"Test The Result\"></a>Test The Result</h1><p>OK, now we are ready to go. Turn to the client side and deploy your files with hexo-git-deployer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/root/directory</div><div class=\"line\">rm .deploy_git <span class=\"comment\">#remove the previous deployment info</span></div><div class=\"line\">hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>\n<p>Then check your website on your server.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This is a long story for me. So there might be something that I didn’t mention, or you get confused about something in the post. If so, please leave a comment below to let me know, I’d like to help you.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h1><p>I used <code>rsync</code> to deploy my website for the past few days, but it seemed that there were some bugs with <code>hexo rsync deployment</code>, I could only use rsync by running <code>rsync -a localfiles username@server:/remote/path</code> manually instead of simply <code>hexo deploy</code>. Instead of looking for the reason why <code>rsync</code> doesn’t work in hexo, I decided to set up a git server for deployment, because git provides an extra version control feature, which might come in handy sometime in the future. It actually took me a lot of time to do this because there were little information on the Internet regarding it, so writing a blog to record this process is important, I think.</p>\n<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><p>First we need to set up an nginx on the server, I use <code>centos</code>, so the command works for me</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install nginx</div></pre></td></tr></table></figure>\n<p>If you are using ubuntu, the following command would work for you</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nginx</div></pre></td></tr></table></figure>\n<p>When the installation finishes, start your nginx</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service nginx start</div></pre></td></tr></table></figure>\n<p>You can test whether <code>nginx</code> works or not by typing in your server’s IP address on your client.</p>\n<h1 id=\"Git-Server\"><a href=\"#Git-Server\" class=\"headerlink\" title=\"Git Server\"></a>Git Server</h1><h2 id=\"Create-A-User-Name-On-The-Server-For-Git-Sync\"><a href=\"#Create-A-User-Name-On-The-Server-For-Git-Sync\" class=\"headerlink\" title=\"Create A User Name On The Server For Git Sync\"></a>Create A User Name On The Server For Git Sync</h2><p>To set up a git server, the first thing we need to do is to create a username for it, let’s call it <code>git</code>, you should run this command on your server.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd git</div></pre></td></tr></table></figure>\n<p>It will prompt you for a password.</p>\n<h2 id=\"Create-A-SSH-Key-Pair-To-Avoid-Typing-In-Password-Every-Time\"><a href=\"#Create-A-SSH-Key-Pair-To-Avoid-Typing-In-Password-Every-Time\" class=\"headerlink\" title=\"Create A SSH Key Pair To Avoid Typing In Password Every Time\"></a>Create A SSH Key Pair To Avoid Typing In Password Every Time</h2><p>To avoid typing in the password every time we use <code>git</code>, we need to set up a ssh key pair. Run the command on your client.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure>\n<p>Just punch <code>enter</code> when a prompt shows up. Then you will find a file called <code>id_rsa.pub</code> in <code>.ssh</code> folder of your home directory, this is the public key. Now turn to the server, switch your username to git.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div></pre></td></tr></table></figure>\n<p>create a <code>.ssh</code> foler in your git home directory</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.ssh</div></pre></td></tr></table></figure>\n<p>create a file named <code>authorized_keys</code> to save the accepted public keys</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">touch ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<p>Now turn to your client side, run the following command to add your client’s public key to your server, notice that you should replace the IP address with yours.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat .ssh/id_rsa.pub | ssh user@123.45.56.78 <span class=\"string\">\"cat &gt;&gt; ~/.ssh/authorized_keys\"</span></div></pre></td></tr></table></figure>\n<p>Change the permissions to avoid others modifying your ssh key pair</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 700 ~/.ssh &amp;&amp; chmod 400 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h2 id=\"Set-Up-A-Bare-Local-Repository-On-The-Server\"><a href=\"#Set-Up-A-Bare-Local-Repository-On-The-Server\" class=\"headerlink\" title=\"Set Up A Bare Local Repository On The Server\"></a>Set Up A Bare Local Repository On The Server</h2><p>OK, the next time you log on to your server with the user name <code>git</code>, you won’t need the password anymore. Now Let’s turn to the server side and set up a bare local repository</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init --bare website.git</div></pre></td></tr></table></figure>\n<h2 id=\"Use-The-Remote-Repository-On-The-Client\"><a href=\"#Use-The-Remote-Repository-On-The-Client\" class=\"headerlink\" title=\"Use The Remote Repository On The Client\"></a>Use The Remote Repository On The Client</h2><p>Now turn to your client, go to the hexo directory, install hexo-deployer-git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>Then find the <code>_config.yml</code> file and open it. Add the following lines at the end of the file. Notice that you should replace the IP address with your server’s. If there is other deployment setting in your file like this, please remove it.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@123.456.78.90:website.git</div><div class=\"line\">  branch: master</div><div class=\"line\">  message:</div></pre></td></tr></table></figure>\n<p>Let’s use git to sync our website to the server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>\n<p>If nothing error occurs, you’re successful till now.</p>\n<h2 id=\"Use-Git-Hook-To-Deploy-Your-Website-Automatically-On-Your-Server\"><a href=\"#Use-Git-Hook-To-Deploy-Your-Website-Automatically-On-Your-Server\" class=\"headerlink\" title=\"Use Git Hook To Deploy Your Website Automatically On Your Server\"></a>Use Git Hook To Deploy Your Website Automatically On Your Server</h2><p>Now that you’ve synced your website to the server, but you cannot find these files on your server, why? In fact, it took me a lot of time to search for my website in the <code>website.git</code> folder, but I just couldn’t find it. After gleaning information on the Internet, I realized that my website is still on my server, but not in the way it is stored on my client. Those website files are stored as the <code>object</code> in the <code>git bare repository</code>, you cannot <em>see</em> those files, but you can <code>pull</code> or <code>clone</code> them.</p>\n<p>So what we need do is deploy these synced files to our web server’s root directory. Go to your nginx’s root directory (it’s usually <code>/usr/share/nginx/html</code>, but I noticed that it’s <code>/var/www/html</code> on ubuntu 15.10), set up a git repository and add the remote server(localhost, actually)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init /usr/share/nginx/html &amp;&amp; git remote add origin git@localhost:website.git</div></pre></td></tr></table></figure>\n<p>To enable <code>git</code> user the permission to modify our website, we need to change the ownership of those files to <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chown git:git /usr/share/nginx/html -R</div></pre></td></tr></table></figure>\n<p>Set up the git hook for deployment, it will automatically sync your files from <code>website.git</code> to <code>/usr/share/nginx/html</code> every time it receives a <code>push</code> operation.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">su git</div><div class=\"line\"><span class=\"built_in\">cd</span> ~/website.git/hooks/</div><div class=\"line\">cat &lt;&lt;EOT &gt; post-receive</div><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">unset</span> $(git rev-parse --local-env-vars)</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/share/nginx/html</div><div class=\"line\">git fetch origin</div><div class=\"line\">git reset --hard origin/master</div><div class=\"line\">EOT</div></pre></td></tr></table></figure>\n<p>Then set the permission to make the git hook work.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod ug+x ~/website.git/hooks/post-receive</div></pre></td></tr></table></figure>\n<p>To avoid the authorization issue, add the public key of <code>root</code> to the <code>authorized_keys</code> of user <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">su <span class=\"comment\"># switch to user root</span></div><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n<h1 id=\"Test-The-Result\"><a href=\"#Test-The-Result\" class=\"headerlink\" title=\"Test The Result\"></a>Test The Result</h1><p>OK, now we are ready to go. Turn to the client side and deploy your files with hexo-git-deployer</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /path/to/your/hexo/root/directory</div><div class=\"line\">rm .deploy_git <span class=\"comment\">#remove the previous deployment info</span></div><div class=\"line\">hexo generate &amp;&amp; hexo deploy</div></pre></td></tr></table></figure>\n<p>Then check your website on your server.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This is a long story for me. So there might be something that I didn’t mention, or you get confused about something in the post. If so, please leave a comment below to let me know, I’d like to help you.</p>\n"},{"title":"what does \"this\" refer to in javascript?","date":"2017-05-15T15:30:32.000Z","thumbnail":"/images/This-Guy-Rocks1.jpg","_content":"\n# Introduction\n`this` in javascript is always a mysterious thing. Some programmers who have written a lot of javascript code still cannot tell the value of `this` every now and then. So today, I decided to write an article about it to solve the problem once and for all. I think you would be able to fully understand what `this` refers to in almost all situations after you read this article.\n\n# Rule 1: Basic Rule\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 1**: When `this` is used in a normal function(i.e. not an arrow function), `this` refers to the object that calls the function.</div>\n\nThis is the most important rule, let's use several examples to illustrate what it means.\n\n#### when the function is called by an object.\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(this); // this?\n    }\n};\nobj.foo();\n```\n\n`this` is in a normal function `foo`, and `foo` is called by `obj`. So `this` refers to `obj` here.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **obj**</div>\n\n#### when the function is called all by itself.\n\n```javascript\nfunction foo() {\n    console.log(this); // this?\n}\n\nfoo();\n```\n\nThis is different, nothing calls `foo()`, right? Well, not exactly. In fact, `foo()` is the same as `window.foo()`, so `this` refers to `window` here, which is the global object in javascript.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n#### when the function is assigned to another function\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(this); // this?\n    }\n};\nvar bar = obj.foo;\nbar();\n```\n\nThis time the function that gets executed is not `obj.foo`, it's `bar`, because `obj.foo` is assigned to `bar`.\n\n`this` refers to object that calls `bar` instead of `obj.foo` in this case, because `obj.foo` has been assigned to `bar`. Who calls `bar`? `window`. So `this` refers to `window` here.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px; margin-bottom: 30px\">answer: **window**</div>\n\n<div style=\"background-color: #EBF4F7; border-color: #ffe273; padding: 10px;\">**A Gotcha Moment**: `this` is only injected into context when the function which contains `this` is called. We cannot determine the value of `this` only by its definition. We have to see who calls `this` to determine its value. You can find it in the above code that the value of `this` may be different when it's called in different ways.</div>\n\n\n# Rule 2: Eval\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 2**: `this` remains unchanged when evaluated using `eval` directly, and is equal to `window` when evaluated using `eval` indirectly.</div>\n\nUsing `eval` directly means something like: `eval('this')`.\nUsing `eval` indirectly means something like `(1, eval)('this')`.\n\nLet's look at the code first.\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(eval('this')); // this?\n    }\n};\nobj.foo();\n```\n\nTo solve the problem, let's first insert another line in the above code.\n\n```javascript\nvar obj = {\n    foo: function() {\n    \tconsole.log(this) // <-- insert this line\n        console.log(eval('this')); // this?\n    }\n};\nobj.foo();\n```\n\nDo you know what `this` in the inserted line refers to? Of course it's `obj`, we have talked about it a while before. So what's the value of `eval('this')`? It's exactly the same, `obj`! It doesn't change.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **obj**</div>\n\nWhat if we use `eval` indirectly?\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log((1, eval)('this')); // this?\n    }\n};\nobj.foo();\n```\n\nWhen `eval` is used indirectly, `this` in it refers to `window`, simple rule.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n# Rule 3: Arrow Functions\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 3**: `this` in arrow functions is the same as `this` in the outer context.</div>\n\nStill, code first.\n\n```javascript\nfunction bar() {\n    var obj = {\n        foo: () => {\n            console.log(this); // this?\n        }\n    };\n    obj.foo();\n}\nbar();\n```\n\nOK, this time, `this` is used in an arrow function. According to **Rule 3**, we have to find out what `this` is in the outer context with respect to the arrow function `obj.foo`. Some people don't know what *outer context* is. Actually, the outer context can be seen as the context where `obj.foo` gets executed.\n\nLet's insert another line in the above code.\n\n```javascript\nfunction bar() {\n    var obj = {\n        foo: () => {\n            console.log(this); // this?\n        }\n    };\n    console.log(this); // <-- insert this line\n    obj.foo();\n}\nbar();\n```\n\nDo you know what `this` refers to in the inserted line? Of course, it refers to `window`, because it's `window` that calls `bar`. So what `this` refers to in the original code(the 4th line)? It's the same! Because the outer context of `obj.foo` is exactly the context where the inserted line is in.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n# Rule 4: Event handler\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 4**: `this` refers to `window` when used an inline event handler, and refers to the attached DOM element when used in a separate event hanlder.</div>\n\n#### inline event handler\n\n```html\n<html>\n<head></head>\n<body>\n    <button id=\"button\" onclick=\"foo()\">Click me!</button>\n    <script type=\"text/javascript\">\n        function foo() {\n            alert(this);\n        }\n    </script>\n</body>\n</html>\n```\n\n`this` is used in an inline event handler `foo` here, so `this` refers to `window`.\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n#### separate event handler\n\n```html\n<html>\n<head></head>\n<body>\n    <button id=\"button\">Click me!</button>\n    <script type=\"text/javascript\">\n        var button = document.getElementById(\"button\");\n        button.onclick = function foo() {\n            alert(this);\n        }\n    </script>\n</body>\n</html>\n```\n\n`this` is used in a separate event handler `foo` here. So it refers to the DOM element `button` according to **Rule 4**. In fact, we can also use **Rule 1** to get the same answer. Because each time the button is clicked, `button.onclicked` is executed. Who calls the `onclick` function? `button`. So the answer is `button`.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **button(DOM element)**</div>\n\n# Rule 5: JQuery\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 5**: `this` in most JQuery callbacks refers to the attached JQuery element</div>\n\n```html\n<html>\n\n<head>\n    <script src=\"/jquery-2.2.4.js\"></script>\n</head>\n\n<body>\n    <button id=\"button\">Click me!</button>\n    <script type=\"text/javascript\">\n        $(\"button\").click(function() {\n            alert(this);\n        })\n    </script>\n</body>\n</html>\n```\n\nAccording to **Rule 5**, `this` refers to `$(\"button\")` here. You may wonder why it is the case. In fact, JQuery calls the callback using something like this:\n\n```javascript\nfunction click(callback) {\n\tcallback.call($(\"button\"))\n}\n```\n\n`callback.call($(\"button\"))` is the same as `callback()`, except that it sets the `this` in `callback` as `$(\"button\")`, so you can happily use `this` as the JQuery element inside the callback function.\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **button(JQuery object)**</div>\n","source":"_posts/what-does-this-refer-to-in-javascript.md","raw":"title: what does \"this\" refer to in javascript?\ndate: 2017-05-15 23:30:32\ntags: javascript\ncategories: Coding\nthumbnail: /images/This-Guy-Rocks1.jpg\n---\n\n# Introduction\n`this` in javascript is always a mysterious thing. Some programmers who have written a lot of javascript code still cannot tell the value of `this` every now and then. So today, I decided to write an article about it to solve the problem once and for all. I think you would be able to fully understand what `this` refers to in almost all situations after you read this article.\n\n# Rule 1: Basic Rule\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 1**: When `this` is used in a normal function(i.e. not an arrow function), `this` refers to the object that calls the function.</div>\n\nThis is the most important rule, let's use several examples to illustrate what it means.\n\n#### when the function is called by an object.\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(this); // this?\n    }\n};\nobj.foo();\n```\n\n`this` is in a normal function `foo`, and `foo` is called by `obj`. So `this` refers to `obj` here.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **obj**</div>\n\n#### when the function is called all by itself.\n\n```javascript\nfunction foo() {\n    console.log(this); // this?\n}\n\nfoo();\n```\n\nThis is different, nothing calls `foo()`, right? Well, not exactly. In fact, `foo()` is the same as `window.foo()`, so `this` refers to `window` here, which is the global object in javascript.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n#### when the function is assigned to another function\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(this); // this?\n    }\n};\nvar bar = obj.foo;\nbar();\n```\n\nThis time the function that gets executed is not `obj.foo`, it's `bar`, because `obj.foo` is assigned to `bar`.\n\n`this` refers to object that calls `bar` instead of `obj.foo` in this case, because `obj.foo` has been assigned to `bar`. Who calls `bar`? `window`. So `this` refers to `window` here.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px; margin-bottom: 30px\">answer: **window**</div>\n\n<div style=\"background-color: #EBF4F7; border-color: #ffe273; padding: 10px;\">**A Gotcha Moment**: `this` is only injected into context when the function which contains `this` is called. We cannot determine the value of `this` only by its definition. We have to see who calls `this` to determine its value. You can find it in the above code that the value of `this` may be different when it's called in different ways.</div>\n\n\n# Rule 2: Eval\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 2**: `this` remains unchanged when evaluated using `eval` directly, and is equal to `window` when evaluated using `eval` indirectly.</div>\n\nUsing `eval` directly means something like: `eval('this')`.\nUsing `eval` indirectly means something like `(1, eval)('this')`.\n\nLet's look at the code first.\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log(eval('this')); // this?\n    }\n};\nobj.foo();\n```\n\nTo solve the problem, let's first insert another line in the above code.\n\n```javascript\nvar obj = {\n    foo: function() {\n    \tconsole.log(this) // <-- insert this line\n        console.log(eval('this')); // this?\n    }\n};\nobj.foo();\n```\n\nDo you know what `this` in the inserted line refers to? Of course it's `obj`, we have talked about it a while before. So what's the value of `eval('this')`? It's exactly the same, `obj`! It doesn't change.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **obj**</div>\n\nWhat if we use `eval` indirectly?\n\n```javascript\nvar obj = {\n    foo: function() {\n        console.log((1, eval)('this')); // this?\n    }\n};\nobj.foo();\n```\n\nWhen `eval` is used indirectly, `this` in it refers to `window`, simple rule.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n# Rule 3: Arrow Functions\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 3**: `this` in arrow functions is the same as `this` in the outer context.</div>\n\nStill, code first.\n\n```javascript\nfunction bar() {\n    var obj = {\n        foo: () => {\n            console.log(this); // this?\n        }\n    };\n    obj.foo();\n}\nbar();\n```\n\nOK, this time, `this` is used in an arrow function. According to **Rule 3**, we have to find out what `this` is in the outer context with respect to the arrow function `obj.foo`. Some people don't know what *outer context* is. Actually, the outer context can be seen as the context where `obj.foo` gets executed.\n\nLet's insert another line in the above code.\n\n```javascript\nfunction bar() {\n    var obj = {\n        foo: () => {\n            console.log(this); // this?\n        }\n    };\n    console.log(this); // <-- insert this line\n    obj.foo();\n}\nbar();\n```\n\nDo you know what `this` refers to in the inserted line? Of course, it refers to `window`, because it's `window` that calls `bar`. So what `this` refers to in the original code(the 4th line)? It's the same! Because the outer context of `obj.foo` is exactly the context where the inserted line is in.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n# Rule 4: Event handler\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 4**: `this` refers to `window` when used an inline event handler, and refers to the attached DOM element when used in a separate event hanlder.</div>\n\n#### inline event handler\n\n```html\n<html>\n<head></head>\n<body>\n    <button id=\"button\" onclick=\"foo()\">Click me!</button>\n    <script type=\"text/javascript\">\n        function foo() {\n            alert(this);\n        }\n    </script>\n</body>\n</html>\n```\n\n`this` is used in an inline event handler `foo` here, so `this` refers to `window`.\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **window**</div>\n\n#### separate event handler\n\n```html\n<html>\n<head></head>\n<body>\n    <button id=\"button\">Click me!</button>\n    <script type=\"text/javascript\">\n        var button = document.getElementById(\"button\");\n        button.onclick = function foo() {\n            alert(this);\n        }\n    </script>\n</body>\n</html>\n```\n\n`this` is used in a separate event handler `foo` here. So it refers to the DOM element `button` according to **Rule 4**. In fact, we can also use **Rule 1** to get the same answer. Because each time the button is clicked, `button.onclicked` is executed. Who calls the `onclick` function? `button`. So the answer is `button`.\n\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **button(DOM element)**</div>\n\n# Rule 5: JQuery\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**Rule 5**: `this` in most JQuery callbacks refers to the attached JQuery element</div>\n\n```html\n<html>\n\n<head>\n    <script src=\"/jquery-2.2.4.js\"></script>\n</head>\n\n<body>\n    <button id=\"button\">Click me!</button>\n    <script type=\"text/javascript\">\n        $(\"button\").click(function() {\n            alert(this);\n        })\n    </script>\n</body>\n</html>\n```\n\nAccording to **Rule 5**, `this` refers to `$(\"button\")` here. You may wonder why it is the case. In fact, JQuery calls the callback using something like this:\n\n```javascript\nfunction click(callback) {\n\tcallback.call($(\"button\"))\n}\n```\n\n`callback.call($(\"button\"))` is the same as `callback()`, except that it sets the `this` in `callback` as `$(\"button\")`, so you can happily use `this` as the JQuery element inside the callback function.\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: **button(JQuery object)**</div>\n","slug":"what-does-this-refer-to-in-javascript","published":1,"updated":"2017-05-17T12:32:52.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqew006d8arff2kdoga6","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><code>this</code> in javascript is always a mysterious thing. Some programmers who have written a lot of javascript code still cannot tell the value of <code>this</code> every now and then. So today, I decided to write an article about it to solve the problem once and for all. I think you would be able to fully understand what <code>this</code> refers to in almost all situations after you read this article.</p>\n<h1 id=\"Rule-1-Basic-Rule\"><a href=\"#Rule-1-Basic-Rule\" class=\"headerlink\" title=\"Rule 1: Basic Rule\"></a>Rule 1: Basic Rule</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 1</strong>: When <code>this</code> is used in a normal function(i.e. not an arrow function), <code>this</code> refers to the object that calls the function.</div>\n\n<p>This is the most important rule, let’s use several examples to illustrate what it means.</p>\n<h4 id=\"when-the-function-is-called-by-an-object\"><a href=\"#when-the-function-is-called-by-an-object\" class=\"headerlink\" title=\"when the function is called by an object.\"></a>when the function is called by an object.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p><code>this</code> is in a normal function <code>foo</code>, and <code>foo</code> is called by <code>obj</code>. So <code>this</code> refers to <code>obj</code> here.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>obj</strong></div>\n\n<h4 id=\"when-the-function-is-called-all-by-itself\"><a href=\"#when-the-function-is-called-all-by-itself\" class=\"headerlink\" title=\"when the function is called all by itself.\"></a>when the function is called all by itself.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n<p>This is different, nothing calls <code>foo()</code>, right? Well, not exactly. In fact, <code>foo()</code> is the same as <code>window.foo()</code>, so <code>this</code> refers to <code>window</code> here, which is the global object in javascript.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h4 id=\"when-the-function-is-assigned-to-another-function\"><a href=\"#when-the-function-is-assigned-to-another-function\" class=\"headerlink\" title=\"when the function is assigned to another function\"></a>when the function is assigned to another function</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = obj.foo;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>This time the function that gets executed is not <code>obj.foo</code>, it’s <code>bar</code>, because <code>obj.foo</code> is assigned to <code>bar</code>.</p>\n<p><code>this</code> refers to object that calls <code>bar</code> instead of <code>obj.foo</code> in this case, because <code>obj.foo</code> has been assigned to <code>bar</code>. Who calls <code>bar</code>? <code>window</code>. So <code>this</code> refers to <code>window</code> here.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px; margin-bottom: 30px\">answer: <strong>window</strong></div>\n\n<div style=\"background-color: #EBF4F7; border-color: #ffe273; padding: 10px;\"><strong>A Gotcha Moment</strong>: <code>this</code> is only injected into context when the function which contains <code>this</code> is called. We cannot determine the value of <code>this</code> only by its definition. We have to see who calls <code>this</code> to determine its value. You can find it in the above code that the value of <code>this</code> may be different when it’s called in different ways.</div>\n\n\n<h1 id=\"Rule-2-Eval\"><a href=\"#Rule-2-Eval\" class=\"headerlink\" title=\"Rule 2: Eval\"></a>Rule 2: Eval</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 2</strong>: <code>this</code> remains unchanged when evaluated using <code>eval</code> directly, and is equal to <code>window</code> when evaluated using <code>eval</code> indirectly.</div>\n\n<p>Using <code>eval</code> directly means something like: <code>eval(&#39;this&#39;)</code>.<br>Using <code>eval</code> indirectly means something like <code>(1, eval)(&#39;this&#39;)</code>.</p>\n<p>Let’s look at the code first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>To solve the problem, let’s first insert another line in the above code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// &lt;-- insert this line</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>Do you know what <code>this</code> in the inserted line refers to? Of course it’s <code>obj</code>, we have talked about it a while before. So what’s the value of <code>eval(&#39;this&#39;)</code>? It’s exactly the same, <code>obj</code>! It doesn’t change.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>obj</strong></div>\n\n<p>What if we use <code>eval</code> indirectly?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log((<span class=\"number\">1</span>, <span class=\"built_in\">eval</span>)(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>When <code>eval</code> is used indirectly, <code>this</code> in it refers to <code>window</code>, simple rule.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h1 id=\"Rule-3-Arrow-Functions\"><a href=\"#Rule-3-Arrow-Functions\" class=\"headerlink\" title=\"Rule 3: Arrow Functions\"></a>Rule 3: Arrow Functions</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 3</strong>: <code>this</code> in arrow functions is the same as <code>this</code> in the outer context.</div>\n\n<p>Still, code first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    obj.foo();</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>OK, this time, <code>this</code> is used in an arrow function. According to <strong>Rule 3</strong>, we have to find out what <code>this</code> is in the outer context with respect to the arrow function <code>obj.foo</code>. Some people don’t know what <em>outer context</em> is. Actually, the outer context can be seen as the context where <code>obj.foo</code> gets executed.</p>\n<p>Let’s insert another line in the above code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// &lt;-- insert this line</span></div><div class=\"line\">    obj.foo();</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>Do you know what <code>this</code> refers to in the inserted line? Of course, it refers to <code>window</code>, because it’s <code>window</code> that calls <code>bar</code>. So what <code>this</code> refers to in the original code(the 4th line)? It’s the same! Because the outer context of <code>obj.foo</code> is exactly the context where the inserted line is in.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h1 id=\"Rule-4-Event-handler\"><a href=\"#Rule-4-Event-handler\" class=\"headerlink\" title=\"Rule 4: Event handler\"></a>Rule 4: Event handler</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 4</strong>: <code>this</code> refers to <code>window</code> when used an inline event handler, and refers to the attached DOM element when used in a separate event hanlder.</div>\n\n<h4 id=\"inline-event-handler\"><a href=\"#inline-event-handler\" class=\"headerlink\" title=\"inline event handler\"></a>inline event handler</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"foo()\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>this</code> is used in an inline event handler <code>foo</code> here, so <code>this</code> refers to <code>window</code>.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h4 id=\"separate-event-handler\"><a href=\"#separate-event-handler\" class=\"headerlink\" title=\"separate event handler\"></a>separate event handler</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</div><div class=\"line\">        button.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>this</code> is used in a separate event handler <code>foo</code> here. So it refers to the DOM element <code>button</code> according to <strong>Rule 4</strong>. In fact, we can also use <strong>Rule 1</strong> to get the same answer. Because each time the button is clicked, <code>button.onclicked</code> is executed. Who calls the <code>onclick</code> function? <code>button</code>. So the answer is <code>button</code>.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>button(DOM element)</strong></div>\n\n<h1 id=\"Rule-5-JQuery\"><a href=\"#Rule-5-JQuery\" class=\"headerlink\" title=\"Rule 5: JQuery\"></a>Rule 5: JQuery</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 5</strong>: <code>this</code> in most JQuery callbacks refers to the attached JQuery element</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/jquery-2.2.4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>According to <strong>Rule 5</strong>, <code>this</code> refers to <code>$(&quot;button&quot;)</code> here. You may wonder why it is the case. In fact, JQuery calls the callback using something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">\tcallback.call($(<span class=\"string\">\"button\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>callback.call($(&quot;button&quot;))</code> is the same as <code>callback()</code>, except that it sets the <code>this</code> in <code>callback</code> as <code>$(&quot;button&quot;)</code>, so you can happily use <code>this</code> as the JQuery element inside the callback function.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>button(JQuery object)</strong></div>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><code>this</code> in javascript is always a mysterious thing. Some programmers who have written a lot of javascript code still cannot tell the value of <code>this</code> every now and then. So today, I decided to write an article about it to solve the problem once and for all. I think you would be able to fully understand what <code>this</code> refers to in almost all situations after you read this article.</p>\n<h1 id=\"Rule-1-Basic-Rule\"><a href=\"#Rule-1-Basic-Rule\" class=\"headerlink\" title=\"Rule 1: Basic Rule\"></a>Rule 1: Basic Rule</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 1</strong>: When <code>this</code> is used in a normal function(i.e. not an arrow function), <code>this</code> refers to the object that calls the function.</div>\n\n<p>This is the most important rule, let’s use several examples to illustrate what it means.</p>\n<h4 id=\"when-the-function-is-called-by-an-object\"><a href=\"#when-the-function-is-called-by-an-object\" class=\"headerlink\" title=\"when the function is called by an object.\"></a>when the function is called by an object.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p><code>this</code> is in a normal function <code>foo</code>, and <code>foo</code> is called by <code>obj</code>. So <code>this</code> refers to <code>obj</code> here.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>obj</strong></div>\n\n<h4 id=\"when-the-function-is-called-all-by-itself\"><a href=\"#when-the-function-is-called-all-by-itself\" class=\"headerlink\" title=\"when the function is called all by itself.\"></a>when the function is called all by itself.</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">foo();</div></pre></td></tr></table></figure>\n<p>This is different, nothing calls <code>foo()</code>, right? Well, not exactly. In fact, <code>foo()</code> is the same as <code>window.foo()</code>, so <code>this</code> refers to <code>window</code> here, which is the global object in javascript.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h4 id=\"when-the-function-is-assigned-to-another-function\"><a href=\"#when-the-function-is-assigned-to-another-function\" class=\"headerlink\" title=\"when the function is assigned to another function\"></a>when the function is assigned to another function</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = obj.foo;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>This time the function that gets executed is not <code>obj.foo</code>, it’s <code>bar</code>, because <code>obj.foo</code> is assigned to <code>bar</code>.</p>\n<p><code>this</code> refers to object that calls <code>bar</code> instead of <code>obj.foo</code> in this case, because <code>obj.foo</code> has been assigned to <code>bar</code>. Who calls <code>bar</code>? <code>window</code>. So <code>this</code> refers to <code>window</code> here.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px; margin-bottom: 30px\">answer: <strong>window</strong></div>\n\n<div style=\"background-color: #EBF4F7; border-color: #ffe273; padding: 10px;\"><strong>A Gotcha Moment</strong>: <code>this</code> is only injected into context when the function which contains <code>this</code> is called. We cannot determine the value of <code>this</code> only by its definition. We have to see who calls <code>this</code> to determine its value. You can find it in the above code that the value of <code>this</code> may be different when it’s called in different ways.</div>\n\n\n<h1 id=\"Rule-2-Eval\"><a href=\"#Rule-2-Eval\" class=\"headerlink\" title=\"Rule 2: Eval\"></a>Rule 2: Eval</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 2</strong>: <code>this</code> remains unchanged when evaluated using <code>eval</code> directly, and is equal to <code>window</code> when evaluated using <code>eval</code> indirectly.</div>\n\n<p>Using <code>eval</code> directly means something like: <code>eval(&#39;this&#39;)</code>.<br>Using <code>eval</code> indirectly means something like <code>(1, eval)(&#39;this&#39;)</code>.</p>\n<p>Let’s look at the code first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>To solve the problem, let’s first insert another line in the above code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>) <span class=\"comment\">// &lt;-- insert this line</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">eval</span>(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>Do you know what <code>this</code> in the inserted line refers to? Of course it’s <code>obj</code>, we have talked about it a while before. So what’s the value of <code>eval(&#39;this&#39;)</code>? It’s exactly the same, <code>obj</code>! It doesn’t change.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>obj</strong></div>\n\n<p>What if we use <code>eval</code> indirectly?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log((<span class=\"number\">1</span>, <span class=\"built_in\">eval</span>)(<span class=\"string\">'this'</span>)); <span class=\"comment\">// this?</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">obj.foo();</div></pre></td></tr></table></figure>\n<p>When <code>eval</code> is used indirectly, <code>this</code> in it refers to <code>window</code>, simple rule.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h1 id=\"Rule-3-Arrow-Functions\"><a href=\"#Rule-3-Arrow-Functions\" class=\"headerlink\" title=\"Rule 3: Arrow Functions\"></a>Rule 3: Arrow Functions</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 3</strong>: <code>this</code> in arrow functions is the same as <code>this</code> in the outer context.</div>\n\n<p>Still, code first.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    obj.foo();</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>OK, this time, <code>this</code> is used in an arrow function. According to <strong>Rule 3</strong>, we have to find out what <code>this</code> is in the outer context with respect to the arrow function <code>obj.foo</code>. Some people don’t know what <em>outer context</em> is. Actually, the outer context can be seen as the context where <code>obj.foo</code> gets executed.</p>\n<p>Let’s insert another line in the above code.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// this?</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">// &lt;-- insert this line</span></div><div class=\"line\">    obj.foo();</div><div class=\"line\">&#125;</div><div class=\"line\">bar();</div></pre></td></tr></table></figure>\n<p>Do you know what <code>this</code> refers to in the inserted line? Of course, it refers to <code>window</code>, because it’s <code>window</code> that calls <code>bar</code>. So what <code>this</code> refers to in the original code(the 4th line)? It’s the same! Because the outer context of <code>obj.foo</code> is exactly the context where the inserted line is in.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h1 id=\"Rule-4-Event-handler\"><a href=\"#Rule-4-Event-handler\" class=\"headerlink\" title=\"Rule 4: Event handler\"></a>Rule 4: Event handler</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 4</strong>: <code>this</code> refers to <code>window</code> when used an inline event handler, and refers to the attached DOM element when used in a separate event hanlder.</div>\n\n<h4 id=\"inline-event-handler\"><a href=\"#inline-event-handler\" class=\"headerlink\" title=\"inline event handler\"></a>inline event handler</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"foo()\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>this</code> is used in an inline event handler <code>foo</code> here, so <code>this</code> refers to <code>window</code>.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>window</strong></div>\n\n<h4 id=\"separate-event-handler\"><a href=\"#separate-event-handler\" class=\"headerlink\" title=\"separate event handler\"></a>separate event handler</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        <span class=\"keyword\">var</span> button = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"button\"</span>);</div><div class=\"line\">        button.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>this</code> is used in a separate event handler <code>foo</code> here. So it refers to the DOM element <code>button</code> according to <strong>Rule 4</strong>. In fact, we can also use <strong>Rule 1</strong> to get the same answer. Because each time the button is clicked, <code>button.onclicked</code> is executed. Who calls the <code>onclick</code> function? <code>button</code>. So the answer is <code>button</code>.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>button(DOM element)</strong></div>\n\n<h1 id=\"Rule-5-JQuery\"><a href=\"#Rule-5-JQuery\" class=\"headerlink\" title=\"Rule 5: JQuery\"></a>Rule 5: JQuery</h1><div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>Rule 5</strong>: <code>this</code> in most JQuery callbacks refers to the attached JQuery element</div>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/jquery-2.2.4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">\"button\"</span>&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">        $(<span class=\"string\">\"button\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            alert(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>According to <strong>Rule 5</strong>, <code>this</code> refers to <code>$(&quot;button&quot;)</code> here. You may wonder why it is the case. In fact, JQuery calls the callback using something like this:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">click</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">\tcallback.call($(<span class=\"string\">\"button\"</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>callback.call($(&quot;button&quot;))</code> is the same as <code>callback()</code>, except that it sets the <code>this</code> in <code>callback</code> as <code>$(&quot;button&quot;)</code>, so you can happily use <code>this</code> as the JQuery element inside the callback function.</p>\n<div style=\"border: 1px solid #c8c8c8; padding: 10px; border-radius: 5px;\">answer: <strong>button(JQuery object)</strong></div>\n"},{"title":"the machanism of garbage collectors in Java","date":"2017-05-07T14:01:33.000Z","thumbnail":"/images/Blog_Trash-1.jpg","_content":"\nThere are several garbage collectors in Java, each has its specific usage scenario. To understand garbage collection, we first have to understand how heaps are divided in Java.\n\nHeaps are divided into two parts in Java, one is called the Young Generation, and the other one is called the Old Generation. You may have seen something called the Permanent Generation in other tutorials/documentations. It exists in Java 7 and before, Oracle removed it in Java 8.\n\nThe Young Generation is also divided into three parts:\n\n1.  Eden Area\n2.  Survivor Space 1\n3.  Survivor Space 2\n\nThe whole picture in Heap is as follows.\n\n![JVM heap memory](/images/The-Machanism-of-Garbage-Collectors-in-Java.png)\n\nBasically, there are two types of garbage collections for most collectors:\n\n1.  Young Generation Collection\n2.  Old Generation Collection\n\nYoung Generation Collection is meant to be time-efficient and frequent, this is different from the Old Generation Collection, which could take a long time, and it’s done less frequently. The Old Generation usually has larger heap space.\n\n## Serial Collector\n\n**Young Generation Collection Using the Serial Collector**\n    When you `new` an object in the Java code, the space for that object will be allocated in the Eden Area. After a while, the Eden Area may be filled up, so live objects in it will be copied into one of the Survivor Space, let’s say it’s Survivor Space 1\\. Some large objects that won’t be fit in the Survivor Space will be copies into the Old Generation.\n\n![young generation in the Serial Collector - 1](/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png)\n\nAfter a while, some live objects in Survivor Space 1 become dead, i.e., they are not referenced by any other objects anymore, and some more space is allocated in the Eden Area for newly initiated objects.\n\nNow you can see, objects exist in Eden and Survivor Space 1, and Survivor Space 2 is empty. This is where the interesting thing begins. Because from now on, what the Young Generation does is to repeat the following process.\n\nWhen the Eden Area is filled up again. live objects in it will be copied into Survivor Space 2(Some large objects that are too large to fit in Survivor Space will be copied into the Old Generation). The live objects that are relatively young are copied into the Survivor Space 2, live objects that are relatively old(i.e., they survived through several Young Generation Collections) are copied into the Old Generation.\n\n![young generation in the Serial Collector - 2](/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png)\n\nThen all dead objects in the Eden and Survivor Space 1 will be garbage collected, the two survivor spaces swap roles, the Survivor Space 1 is empty while the Survivor Space 2 is not, and the above process will be repeated.\n\n**Old Generation Collection Using the Serial Collector**\n\nOld Generation Collection is divided into three steps, mark-sweep-compact. In the mark phase, the collector identifies live objects, the sweep phase sweeps over the generation and frees space taken by dead objects. Then the collector moves all live objects to the beginning of the old generation, which is called compaction. The compaction is for quick space allocation in the old generation later on.\n\n**When to Use the Serial Collector**\n\nThe Serial Collector is done in a single-threaded way, so it’s meant to be run on client-style machines that do not require low pause times. And since it only takes a small amount of memory, the serial collector can perform very well with only 64MB heaps in most cases.\n\n## Parallel Collector\n\n**Young Generation Collection Using the Parallel Collector**\n\nYoung Generation collection in the parallel collector is the same as the Serial Collector, except that it’s done in parallel. The Parallel Collector fully utilizes the power of multiple threads and make the process of Young Generation Collection faster. Although the Young Generation Collection is still a stop-the-world action, the process would take less time and make less impact to the running program.\n\n**Old Generation Collection Using the Parallel Collector**\n\nOld Generation Collection using the Parallel Collector is the same as the Serial Collector.\n\n**When to Use the Parallel Collector**\n\nYou can use the Parallel Collector when you have multiple CPU cores, whose power could be unleashed and utilized by it. But also notice that the Parallel Collector wouldn’t help you a lot if you need a much shorter pause time in GC, because it still takes a long time to finish the Old Generation Collection, which is done in a single-threaded way in the Parallel Collector.\n\n## Parallel Compacting Collector\n\n**Young Generation Collection Using the Parallel Collector**\n\nYoung Generation Collection using the Parallel Compacting Collector is the same as the Parallel Collector.\n\n**Old Generation Collection Using the Parallel Collector**\n\nOld Generation Collection in the Parallel Compacting Collector is done in a multi-threaded way, this is different from the Parallel Collector, whose uses only a single thread to complete Old Generation Collection.\n\nThere are in total three phases regarding Old Generation Collection.\n\n**1. Mark(multi-thread)**\n\nFirst of all, the old generation is divided into several regions of the same fixed sizes. Then live objects that are directly reachable from the code are divided equally among multiple threads. Those threads work concurrently to mark all live objects in the old generation, storing the size and location of each live object.\n\n**2. Summary(single-thread)**\n\nDue to previous compactions, some portions on the left side of the old generation are typically denser than those on the right side of it. So the collector will search from the left side, calculate the density of live objects in each region until it reaches a point where the density is small enough to be considered eligible for garbage collection. All the regions to the left of the point are not worth garbage collecting, and they will not be moved, those regions are called *dense prefix*. All the regions to the right of the point will be garbage collected. After collection, the collector will store the location of the first live object in each region, which would be helpful in the compaction phase.\n\n**3. Compaction(multi-thread)**\n\nLive objects on the right side will be moved to the left side of the old generation, leaving a huge chunk of contiguous free memory on the right side. This process is called compaction.\n\n**When to Use the Parallel Compacting Collector**\n\nYou can use the Parallel Compacting Collector if you have multiple CPU cores that could be utilized. The collector will take advantage of those CPU cores and make the total pause time shorter.\n\n## Concurrent Mark-Sweep(CMS) Collector\n\n**Young Generation Collection Using the CMS Collector**\n\nYoung Generation Collection using the CMS Collector is the same as the Parallel Collector.\n\n**Old Generation Collection Using the CMS Collector**\n\nThere are four phases in total in the Old Generation Collection using the CMS Collector.\n\n**1. Initial Mark(single thread)**\n\nAll live objects that are directly reachable from the code are marked as alive. It takes a short pause to do it.\n\n**2. Concurrent Mark(multi-thread)**\n\nWhile the application is running, the collector marks live objects that are transitively reachable from the above set obtained from the *Initial Mark*.\n\n**3. Remark(multi-thread)**\n\nBecause the *Concurrent Mark* is conducted while the application is still running, some live objects cannot be detected in the second phase. So the application stops for a while, and the collector checks all objects that are modified during the *Concurrent Mark* phase, and mark all objects that turned garbage during the previous phase. After the *Remark* phase, all live objects are marked.\n\n**4. Sweep(multi-thread)**\n\nThe collector conducts a *Sweep* operation to eliminate all garbage in the Old Generation.\n\n**Disadvantages of the CMS Collector**\n\nThe *CMS Collector* is the only collector that has no *compact* phase, which means it cannot use the *bump-the-pointer* strategy(see reference below) to find free space.\n\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**bump-the-pointer** strategy: This is a strategy used to allocate new space in the Old Generation. With this strategy, you only need to store the position of the last live object after each Old Generation Collection. When you need to allocate a space to store a new object, what you need to do is just to allocate the space right after the position and update the position to the new one. There are no live objects after that position because the Old Generation has been compacted before. The strategy is used in all above collectors except the *CMS Collector* because the *CMS Collector* doesn’t compact the Old Generation.</div>\n\nSo how does the *CMS Collector* find new space to allocate? Basically, it maintains a linked list internally, which connects all free space together. When an allocation is needed, the collector will traverse through the list and find the appropriate region to allocate the space.\n\nAnother disadvantage of the *CMS Collector* is that it needs a bigger heap size because the *Concurrent Mark* phase proceeds while the application is still running, which means more space needs to be allocated when some garbage cannot be collected in time. So enough heap size must be prepared to store both uncollected garbage and newly allocated space.\n\n**When to Use the CMS Collector**\n\nThe *CMS Collector* is typically used in the server side application, where large heap size and multiple CPU cores could be utilized. Those applications usually require a smaller pause time, which is exactly what *the CMS Collector* is good at.\n\n## G1(Garbage First) Collector\n\nG1 Collector is different from previous collectors. All the previous collectors have a young generation and an old generation of fixed-size. This is the not the case for the G1 Collector. For the G1 Collector, the entire heap is divided into approximately 2000 areas, the size of each area is around 1MB ~ 32MB. The type of these areas may be different, it may be eden, survivor area, or the old generation. The whole picture is as follows.\n\n![the CMS Collector](/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png)\n\nAlthough the size of each region is the same in the above picture, in reality, this may not be the case. The size of each region usually depends on how the collector optimizes the collection algorithm, and they are changing constantly.\n\nNotice that *Humongous Region* is used to store objects that are larger than 50% of the normal region size. Currently, no optimization is applied to this type of region, so avoid using objects that are too large.\n\n**Young Generation Collection Using the G1 Collector**\n\n1.  Live objects in eden areas are copied into survivor areas.\n2.  Some live objects that are out of the time threshold are copied into old generations.\n3.  “Accounting” process is performed, which determines how much time is needed for the next Young GC based on the current stats and the predefined pause time.\n4.  Resize eden/survivor regions based on the information obtained above.\n\n**Old Generation Collection Using the G1 Collector**\n\n1.  Initial Mark: mark all survivor regions which may have references to objects in old generations. This step is done concurrently with Young GC. So although it’s still a stop-the-world operation(because the entire Young GC is a stop-the-world operation), it doesn’t take extra time to complete.\n2.  Root region Scan: scan survivor regions for references into the old generation. It happens when the application is still running.\n3.  Concurrent Mark: mark all live objects across the entire heap, this is done while the application is still running.\n4.  Remark: stop the world and complete the marking process.\n5.  Cleanup: \n  * Perform accounting on live objects and completely free regions.(stop-the-world)\n  * Scrubs Remembered Sets.(stop-the-world)\n  * Reset empty regions and return them to the free list.(concurrent)\n6.  Copy: copy live objects from to new regions. This is a stop-the-world step. It can be seen as a kind of compaction.\n\n## Reference\n\n*   [http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf](http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf)\n*   [http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html](http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html)\n*   [http://stackoverflow.com/a/19303535/1031769](http://stackoverflow.com/a/19303535/1031769)\n","source":"_posts/the-machanism-of-garbage-collectors-in-Java.md","raw":"title: the machanism of garbage collectors in Java\ndate: 2017-05-07 22:01:33\ntags: [java, jvm]\ncategories: Coding\nthumbnail: /images/Blog_Trash-1.jpg\n---\n\nThere are several garbage collectors in Java, each has its specific usage scenario. To understand garbage collection, we first have to understand how heaps are divided in Java.\n\nHeaps are divided into two parts in Java, one is called the Young Generation, and the other one is called the Old Generation. You may have seen something called the Permanent Generation in other tutorials/documentations. It exists in Java 7 and before, Oracle removed it in Java 8.\n\nThe Young Generation is also divided into three parts:\n\n1.  Eden Area\n2.  Survivor Space 1\n3.  Survivor Space 2\n\nThe whole picture in Heap is as follows.\n\n![JVM heap memory](/images/The-Machanism-of-Garbage-Collectors-in-Java.png)\n\nBasically, there are two types of garbage collections for most collectors:\n\n1.  Young Generation Collection\n2.  Old Generation Collection\n\nYoung Generation Collection is meant to be time-efficient and frequent, this is different from the Old Generation Collection, which could take a long time, and it’s done less frequently. The Old Generation usually has larger heap space.\n\n## Serial Collector\n\n**Young Generation Collection Using the Serial Collector**\n    When you `new` an object in the Java code, the space for that object will be allocated in the Eden Area. After a while, the Eden Area may be filled up, so live objects in it will be copied into one of the Survivor Space, let’s say it’s Survivor Space 1\\. Some large objects that won’t be fit in the Survivor Space will be copies into the Old Generation.\n\n![young generation in the Serial Collector - 1](/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png)\n\nAfter a while, some live objects in Survivor Space 1 become dead, i.e., they are not referenced by any other objects anymore, and some more space is allocated in the Eden Area for newly initiated objects.\n\nNow you can see, objects exist in Eden and Survivor Space 1, and Survivor Space 2 is empty. This is where the interesting thing begins. Because from now on, what the Young Generation does is to repeat the following process.\n\nWhen the Eden Area is filled up again. live objects in it will be copied into Survivor Space 2(Some large objects that are too large to fit in Survivor Space will be copied into the Old Generation). The live objects that are relatively young are copied into the Survivor Space 2, live objects that are relatively old(i.e., they survived through several Young Generation Collections) are copied into the Old Generation.\n\n![young generation in the Serial Collector - 2](/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png)\n\nThen all dead objects in the Eden and Survivor Space 1 will be garbage collected, the two survivor spaces swap roles, the Survivor Space 1 is empty while the Survivor Space 2 is not, and the above process will be repeated.\n\n**Old Generation Collection Using the Serial Collector**\n\nOld Generation Collection is divided into three steps, mark-sweep-compact. In the mark phase, the collector identifies live objects, the sweep phase sweeps over the generation and frees space taken by dead objects. Then the collector moves all live objects to the beginning of the old generation, which is called compaction. The compaction is for quick space allocation in the old generation later on.\n\n**When to Use the Serial Collector**\n\nThe Serial Collector is done in a single-threaded way, so it’s meant to be run on client-style machines that do not require low pause times. And since it only takes a small amount of memory, the serial collector can perform very well with only 64MB heaps in most cases.\n\n## Parallel Collector\n\n**Young Generation Collection Using the Parallel Collector**\n\nYoung Generation collection in the parallel collector is the same as the Serial Collector, except that it’s done in parallel. The Parallel Collector fully utilizes the power of multiple threads and make the process of Young Generation Collection faster. Although the Young Generation Collection is still a stop-the-world action, the process would take less time and make less impact to the running program.\n\n**Old Generation Collection Using the Parallel Collector**\n\nOld Generation Collection using the Parallel Collector is the same as the Serial Collector.\n\n**When to Use the Parallel Collector**\n\nYou can use the Parallel Collector when you have multiple CPU cores, whose power could be unleashed and utilized by it. But also notice that the Parallel Collector wouldn’t help you a lot if you need a much shorter pause time in GC, because it still takes a long time to finish the Old Generation Collection, which is done in a single-threaded way in the Parallel Collector.\n\n## Parallel Compacting Collector\n\n**Young Generation Collection Using the Parallel Collector**\n\nYoung Generation Collection using the Parallel Compacting Collector is the same as the Parallel Collector.\n\n**Old Generation Collection Using the Parallel Collector**\n\nOld Generation Collection in the Parallel Compacting Collector is done in a multi-threaded way, this is different from the Parallel Collector, whose uses only a single thread to complete Old Generation Collection.\n\nThere are in total three phases regarding Old Generation Collection.\n\n**1. Mark(multi-thread)**\n\nFirst of all, the old generation is divided into several regions of the same fixed sizes. Then live objects that are directly reachable from the code are divided equally among multiple threads. Those threads work concurrently to mark all live objects in the old generation, storing the size and location of each live object.\n\n**2. Summary(single-thread)**\n\nDue to previous compactions, some portions on the left side of the old generation are typically denser than those on the right side of it. So the collector will search from the left side, calculate the density of live objects in each region until it reaches a point where the density is small enough to be considered eligible for garbage collection. All the regions to the left of the point are not worth garbage collecting, and they will not be moved, those regions are called *dense prefix*. All the regions to the right of the point will be garbage collected. After collection, the collector will store the location of the first live object in each region, which would be helpful in the compaction phase.\n\n**3. Compaction(multi-thread)**\n\nLive objects on the right side will be moved to the left side of the old generation, leaving a huge chunk of contiguous free memory on the right side. This process is called compaction.\n\n**When to Use the Parallel Compacting Collector**\n\nYou can use the Parallel Compacting Collector if you have multiple CPU cores that could be utilized. The collector will take advantage of those CPU cores and make the total pause time shorter.\n\n## Concurrent Mark-Sweep(CMS) Collector\n\n**Young Generation Collection Using the CMS Collector**\n\nYoung Generation Collection using the CMS Collector is the same as the Parallel Collector.\n\n**Old Generation Collection Using the CMS Collector**\n\nThere are four phases in total in the Old Generation Collection using the CMS Collector.\n\n**1. Initial Mark(single thread)**\n\nAll live objects that are directly reachable from the code are marked as alive. It takes a short pause to do it.\n\n**2. Concurrent Mark(multi-thread)**\n\nWhile the application is running, the collector marks live objects that are transitively reachable from the above set obtained from the *Initial Mark*.\n\n**3. Remark(multi-thread)**\n\nBecause the *Concurrent Mark* is conducted while the application is still running, some live objects cannot be detected in the second phase. So the application stops for a while, and the collector checks all objects that are modified during the *Concurrent Mark* phase, and mark all objects that turned garbage during the previous phase. After the *Remark* phase, all live objects are marked.\n\n**4. Sweep(multi-thread)**\n\nThe collector conducts a *Sweep* operation to eliminate all garbage in the Old Generation.\n\n**Disadvantages of the CMS Collector**\n\nThe *CMS Collector* is the only collector that has no *compact* phase, which means it cannot use the *bump-the-pointer* strategy(see reference below) to find free space.\n\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\">**bump-the-pointer** strategy: This is a strategy used to allocate new space in the Old Generation. With this strategy, you only need to store the position of the last live object after each Old Generation Collection. When you need to allocate a space to store a new object, what you need to do is just to allocate the space right after the position and update the position to the new one. There are no live objects after that position because the Old Generation has been compacted before. The strategy is used in all above collectors except the *CMS Collector* because the *CMS Collector* doesn’t compact the Old Generation.</div>\n\nSo how does the *CMS Collector* find new space to allocate? Basically, it maintains a linked list internally, which connects all free space together. When an allocation is needed, the collector will traverse through the list and find the appropriate region to allocate the space.\n\nAnother disadvantage of the *CMS Collector* is that it needs a bigger heap size because the *Concurrent Mark* phase proceeds while the application is still running, which means more space needs to be allocated when some garbage cannot be collected in time. So enough heap size must be prepared to store both uncollected garbage and newly allocated space.\n\n**When to Use the CMS Collector**\n\nThe *CMS Collector* is typically used in the server side application, where large heap size and multiple CPU cores could be utilized. Those applications usually require a smaller pause time, which is exactly what *the CMS Collector* is good at.\n\n## G1(Garbage First) Collector\n\nG1 Collector is different from previous collectors. All the previous collectors have a young generation and an old generation of fixed-size. This is the not the case for the G1 Collector. For the G1 Collector, the entire heap is divided into approximately 2000 areas, the size of each area is around 1MB ~ 32MB. The type of these areas may be different, it may be eden, survivor area, or the old generation. The whole picture is as follows.\n\n![the CMS Collector](/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png)\n\nAlthough the size of each region is the same in the above picture, in reality, this may not be the case. The size of each region usually depends on how the collector optimizes the collection algorithm, and they are changing constantly.\n\nNotice that *Humongous Region* is used to store objects that are larger than 50% of the normal region size. Currently, no optimization is applied to this type of region, so avoid using objects that are too large.\n\n**Young Generation Collection Using the G1 Collector**\n\n1.  Live objects in eden areas are copied into survivor areas.\n2.  Some live objects that are out of the time threshold are copied into old generations.\n3.  “Accounting” process is performed, which determines how much time is needed for the next Young GC based on the current stats and the predefined pause time.\n4.  Resize eden/survivor regions based on the information obtained above.\n\n**Old Generation Collection Using the G1 Collector**\n\n1.  Initial Mark: mark all survivor regions which may have references to objects in old generations. This step is done concurrently with Young GC. So although it’s still a stop-the-world operation(because the entire Young GC is a stop-the-world operation), it doesn’t take extra time to complete.\n2.  Root region Scan: scan survivor regions for references into the old generation. It happens when the application is still running.\n3.  Concurrent Mark: mark all live objects across the entire heap, this is done while the application is still running.\n4.  Remark: stop the world and complete the marking process.\n5.  Cleanup: \n  * Perform accounting on live objects and completely free regions.(stop-the-world)\n  * Scrubs Remembered Sets.(stop-the-world)\n  * Reset empty regions and return them to the free list.(concurrent)\n6.  Copy: copy live objects from to new regions. This is a stop-the-world step. It can be seen as a kind of compaction.\n\n## Reference\n\n*   [http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf](http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf)\n*   [http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html](http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html)\n*   [http://stackoverflow.com/a/19303535/1031769](http://stackoverflow.com/a/19303535/1031769)\n","slug":"the-machanism-of-garbage-collectors-in-Java","published":1,"updated":"2017-05-20T17:02:58.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqex006f8arfzou2hmnp","content":"<p>There are several garbage collectors in Java, each has its specific usage scenario. To understand garbage collection, we first have to understand how heaps are divided in Java.</p>\n<p>Heaps are divided into two parts in Java, one is called the Young Generation, and the other one is called the Old Generation. You may have seen something called the Permanent Generation in other tutorials/documentations. It exists in Java 7 and before, Oracle removed it in Java 8.</p>\n<p>The Young Generation is also divided into three parts:</p>\n<ol>\n<li>Eden Area</li>\n<li>Survivor Space 1</li>\n<li>Survivor Space 2</li>\n</ol>\n<p>The whole picture in Heap is as follows.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java.png\" alt=\"JVM heap memory\"></p>\n<p>Basically, there are two types of garbage collections for most collectors:</p>\n<ol>\n<li>Young Generation Collection</li>\n<li>Old Generation Collection</li>\n</ol>\n<p>Young Generation Collection is meant to be time-efficient and frequent, this is different from the Old Generation Collection, which could take a long time, and it’s done less frequently. The Old Generation usually has larger heap space.</p>\n<h2 id=\"Serial-Collector\"><a href=\"#Serial-Collector\" class=\"headerlink\" title=\"Serial Collector\"></a>Serial Collector</h2><p><strong>Young Generation Collection Using the Serial Collector</strong><br>    When you <code>new</code> an object in the Java code, the space for that object will be allocated in the Eden Area. After a while, the Eden Area may be filled up, so live objects in it will be copied into one of the Survivor Space, let’s say it’s Survivor Space 1. Some large objects that won’t be fit in the Survivor Space will be copies into the Old Generation.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png\" alt=\"young generation in the Serial Collector - 1\"></p>\n<p>After a while, some live objects in Survivor Space 1 become dead, i.e., they are not referenced by any other objects anymore, and some more space is allocated in the Eden Area for newly initiated objects.</p>\n<p>Now you can see, objects exist in Eden and Survivor Space 1, and Survivor Space 2 is empty. This is where the interesting thing begins. Because from now on, what the Young Generation does is to repeat the following process.</p>\n<p>When the Eden Area is filled up again. live objects in it will be copied into Survivor Space 2(Some large objects that are too large to fit in Survivor Space will be copied into the Old Generation). The live objects that are relatively young are copied into the Survivor Space 2, live objects that are relatively old(i.e., they survived through several Young Generation Collections) are copied into the Old Generation.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png\" alt=\"young generation in the Serial Collector - 2\"></p>\n<p>Then all dead objects in the Eden and Survivor Space 1 will be garbage collected, the two survivor spaces swap roles, the Survivor Space 1 is empty while the Survivor Space 2 is not, and the above process will be repeated.</p>\n<p><strong>Old Generation Collection Using the Serial Collector</strong></p>\n<p>Old Generation Collection is divided into three steps, mark-sweep-compact. In the mark phase, the collector identifies live objects, the sweep phase sweeps over the generation and frees space taken by dead objects. Then the collector moves all live objects to the beginning of the old generation, which is called compaction. The compaction is for quick space allocation in the old generation later on.</p>\n<p><strong>When to Use the Serial Collector</strong></p>\n<p>The Serial Collector is done in a single-threaded way, so it’s meant to be run on client-style machines that do not require low pause times. And since it only takes a small amount of memory, the serial collector can perform very well with only 64MB heaps in most cases.</p>\n<h2 id=\"Parallel-Collector\"><a href=\"#Parallel-Collector\" class=\"headerlink\" title=\"Parallel Collector\"></a>Parallel Collector</h2><p><strong>Young Generation Collection Using the Parallel Collector</strong></p>\n<p>Young Generation collection in the parallel collector is the same as the Serial Collector, except that it’s done in parallel. The Parallel Collector fully utilizes the power of multiple threads and make the process of Young Generation Collection faster. Although the Young Generation Collection is still a stop-the-world action, the process would take less time and make less impact to the running program.</p>\n<p><strong>Old Generation Collection Using the Parallel Collector</strong></p>\n<p>Old Generation Collection using the Parallel Collector is the same as the Serial Collector.</p>\n<p><strong>When to Use the Parallel Collector</strong></p>\n<p>You can use the Parallel Collector when you have multiple CPU cores, whose power could be unleashed and utilized by it. But also notice that the Parallel Collector wouldn’t help you a lot if you need a much shorter pause time in GC, because it still takes a long time to finish the Old Generation Collection, which is done in a single-threaded way in the Parallel Collector.</p>\n<h2 id=\"Parallel-Compacting-Collector\"><a href=\"#Parallel-Compacting-Collector\" class=\"headerlink\" title=\"Parallel Compacting Collector\"></a>Parallel Compacting Collector</h2><p><strong>Young Generation Collection Using the Parallel Collector</strong></p>\n<p>Young Generation Collection using the Parallel Compacting Collector is the same as the Parallel Collector.</p>\n<p><strong>Old Generation Collection Using the Parallel Collector</strong></p>\n<p>Old Generation Collection in the Parallel Compacting Collector is done in a multi-threaded way, this is different from the Parallel Collector, whose uses only a single thread to complete Old Generation Collection.</p>\n<p>There are in total three phases regarding Old Generation Collection.</p>\n<p><strong>1. Mark(multi-thread)</strong></p>\n<p>First of all, the old generation is divided into several regions of the same fixed sizes. Then live objects that are directly reachable from the code are divided equally among multiple threads. Those threads work concurrently to mark all live objects in the old generation, storing the size and location of each live object.</p>\n<p><strong>2. Summary(single-thread)</strong></p>\n<p>Due to previous compactions, some portions on the left side of the old generation are typically denser than those on the right side of it. So the collector will search from the left side, calculate the density of live objects in each region until it reaches a point where the density is small enough to be considered eligible for garbage collection. All the regions to the left of the point are not worth garbage collecting, and they will not be moved, those regions are called <em>dense prefix</em>. All the regions to the right of the point will be garbage collected. After collection, the collector will store the location of the first live object in each region, which would be helpful in the compaction phase.</p>\n<p><strong>3. Compaction(multi-thread)</strong></p>\n<p>Live objects on the right side will be moved to the left side of the old generation, leaving a huge chunk of contiguous free memory on the right side. This process is called compaction.</p>\n<p><strong>When to Use the Parallel Compacting Collector</strong></p>\n<p>You can use the Parallel Compacting Collector if you have multiple CPU cores that could be utilized. The collector will take advantage of those CPU cores and make the total pause time shorter.</p>\n<h2 id=\"Concurrent-Mark-Sweep-CMS-Collector\"><a href=\"#Concurrent-Mark-Sweep-CMS-Collector\" class=\"headerlink\" title=\"Concurrent Mark-Sweep(CMS) Collector\"></a>Concurrent Mark-Sweep(CMS) Collector</h2><p><strong>Young Generation Collection Using the CMS Collector</strong></p>\n<p>Young Generation Collection using the CMS Collector is the same as the Parallel Collector.</p>\n<p><strong>Old Generation Collection Using the CMS Collector</strong></p>\n<p>There are four phases in total in the Old Generation Collection using the CMS Collector.</p>\n<p><strong>1. Initial Mark(single thread)</strong></p>\n<p>All live objects that are directly reachable from the code are marked as alive. It takes a short pause to do it.</p>\n<p><strong>2. Concurrent Mark(multi-thread)</strong></p>\n<p>While the application is running, the collector marks live objects that are transitively reachable from the above set obtained from the <em>Initial Mark</em>.</p>\n<p><strong>3. Remark(multi-thread)</strong></p>\n<p>Because the <em>Concurrent Mark</em> is conducted while the application is still running, some live objects cannot be detected in the second phase. So the application stops for a while, and the collector checks all objects that are modified during the <em>Concurrent Mark</em> phase, and mark all objects that turned garbage during the previous phase. After the <em>Remark</em> phase, all live objects are marked.</p>\n<p><strong>4. Sweep(multi-thread)</strong></p>\n<p>The collector conducts a <em>Sweep</em> operation to eliminate all garbage in the Old Generation.</p>\n<p><strong>Disadvantages of the CMS Collector</strong></p>\n<p>The <em>CMS Collector</em> is the only collector that has no <em>compact</em> phase, which means it cannot use the <em>bump-the-pointer</em> strategy(see reference below) to find free space.</p>\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>bump-the-pointer</strong> strategy: This is a strategy used to allocate new space in the Old Generation. With this strategy, you only need to store the position of the last live object after each Old Generation Collection. When you need to allocate a space to store a new object, what you need to do is just to allocate the space right after the position and update the position to the new one. There are no live objects after that position because the Old Generation has been compacted before. The strategy is used in all above collectors except the <em>CMS Collector</em> because the <em>CMS Collector</em> doesn’t compact the Old Generation.</div>\n\n<p>So how does the <em>CMS Collector</em> find new space to allocate? Basically, it maintains a linked list internally, which connects all free space together. When an allocation is needed, the collector will traverse through the list and find the appropriate region to allocate the space.</p>\n<p>Another disadvantage of the <em>CMS Collector</em> is that it needs a bigger heap size because the <em>Concurrent Mark</em> phase proceeds while the application is still running, which means more space needs to be allocated when some garbage cannot be collected in time. So enough heap size must be prepared to store both uncollected garbage and newly allocated space.</p>\n<p><strong>When to Use the CMS Collector</strong></p>\n<p>The <em>CMS Collector</em> is typically used in the server side application, where large heap size and multiple CPU cores could be utilized. Those applications usually require a smaller pause time, which is exactly what <em>the CMS Collector</em> is good at.</p>\n<h2 id=\"G1-Garbage-First-Collector\"><a href=\"#G1-Garbage-First-Collector\" class=\"headerlink\" title=\"G1(Garbage First) Collector\"></a>G1(Garbage First) Collector</h2><p>G1 Collector is different from previous collectors. All the previous collectors have a young generation and an old generation of fixed-size. This is the not the case for the G1 Collector. For the G1 Collector, the entire heap is divided into approximately 2000 areas, the size of each area is around 1MB ~ 32MB. The type of these areas may be different, it may be eden, survivor area, or the old generation. The whole picture is as follows.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png\" alt=\"the CMS Collector\"></p>\n<p>Although the size of each region is the same in the above picture, in reality, this may not be the case. The size of each region usually depends on how the collector optimizes the collection algorithm, and they are changing constantly.</p>\n<p>Notice that <em>Humongous Region</em> is used to store objects that are larger than 50% of the normal region size. Currently, no optimization is applied to this type of region, so avoid using objects that are too large.</p>\n<p><strong>Young Generation Collection Using the G1 Collector</strong></p>\n<ol>\n<li>Live objects in eden areas are copied into survivor areas.</li>\n<li>Some live objects that are out of the time threshold are copied into old generations.</li>\n<li>“Accounting” process is performed, which determines how much time is needed for the next Young GC based on the current stats and the predefined pause time.</li>\n<li>Resize eden/survivor regions based on the information obtained above.</li>\n</ol>\n<p><strong>Old Generation Collection Using the G1 Collector</strong></p>\n<ol>\n<li>Initial Mark: mark all survivor regions which may have references to objects in old generations. This step is done concurrently with Young GC. So although it’s still a stop-the-world operation(because the entire Young GC is a stop-the-world operation), it doesn’t take extra time to complete.</li>\n<li>Root region Scan: scan survivor regions for references into the old generation. It happens when the application is still running.</li>\n<li>Concurrent Mark: mark all live objects across the entire heap, this is done while the application is still running.</li>\n<li>Remark: stop the world and complete the marking process.</li>\n<li>Cleanup: <ul>\n<li>Perform accounting on live objects and completely free regions.(stop-the-world)</li>\n<li>Scrubs Remembered Sets.(stop-the-world)</li>\n<li>Reset empty regions and return them to the free list.(concurrent)</li>\n</ul>\n</li>\n<li>Copy: copy live objects from to new regions. This is a stop-the-world step. It can be seen as a kind of compaction.</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></li>\n<li><a href=\"http://stackoverflow.com/a/19303535/1031769\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/a/19303535/1031769</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>There are several garbage collectors in Java, each has its specific usage scenario. To understand garbage collection, we first have to understand how heaps are divided in Java.</p>\n<p>Heaps are divided into two parts in Java, one is called the Young Generation, and the other one is called the Old Generation. You may have seen something called the Permanent Generation in other tutorials/documentations. It exists in Java 7 and before, Oracle removed it in Java 8.</p>\n<p>The Young Generation is also divided into three parts:</p>\n<ol>\n<li>Eden Area</li>\n<li>Survivor Space 1</li>\n<li>Survivor Space 2</li>\n</ol>\n<p>The whole picture in Heap is as follows.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java.png\" alt=\"JVM heap memory\"></p>\n<p>Basically, there are two types of garbage collections for most collectors:</p>\n<ol>\n<li>Young Generation Collection</li>\n<li>Old Generation Collection</li>\n</ol>\n<p>Young Generation Collection is meant to be time-efficient and frequent, this is different from the Old Generation Collection, which could take a long time, and it’s done less frequently. The Old Generation usually has larger heap space.</p>\n<h2 id=\"Serial-Collector\"><a href=\"#Serial-Collector\" class=\"headerlink\" title=\"Serial Collector\"></a>Serial Collector</h2><p><strong>Young Generation Collection Using the Serial Collector</strong><br>    When you <code>new</code> an object in the Java code, the space for that object will be allocated in the Eden Area. After a while, the Eden Area may be filled up, so live objects in it will be copied into one of the Survivor Space, let’s say it’s Survivor Space 1. Some large objects that won’t be fit in the Survivor Space will be copies into the Old Generation.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-1.png\" alt=\"young generation in the Serial Collector - 1\"></p>\n<p>After a while, some live objects in Survivor Space 1 become dead, i.e., they are not referenced by any other objects anymore, and some more space is allocated in the Eden Area for newly initiated objects.</p>\n<p>Now you can see, objects exist in Eden and Survivor Space 1, and Survivor Space 2 is empty. This is where the interesting thing begins. Because from now on, what the Young Generation does is to repeat the following process.</p>\n<p>When the Eden Area is filled up again. live objects in it will be copied into Survivor Space 2(Some large objects that are too large to fit in Survivor Space will be copied into the Old Generation). The live objects that are relatively young are copied into the Survivor Space 2, live objects that are relatively old(i.e., they survived through several Young Generation Collections) are copied into the Old Generation.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-3.png\" alt=\"young generation in the Serial Collector - 2\"></p>\n<p>Then all dead objects in the Eden and Survivor Space 1 will be garbage collected, the two survivor spaces swap roles, the Survivor Space 1 is empty while the Survivor Space 2 is not, and the above process will be repeated.</p>\n<p><strong>Old Generation Collection Using the Serial Collector</strong></p>\n<p>Old Generation Collection is divided into three steps, mark-sweep-compact. In the mark phase, the collector identifies live objects, the sweep phase sweeps over the generation and frees space taken by dead objects. Then the collector moves all live objects to the beginning of the old generation, which is called compaction. The compaction is for quick space allocation in the old generation later on.</p>\n<p><strong>When to Use the Serial Collector</strong></p>\n<p>The Serial Collector is done in a single-threaded way, so it’s meant to be run on client-style machines that do not require low pause times. And since it only takes a small amount of memory, the serial collector can perform very well with only 64MB heaps in most cases.</p>\n<h2 id=\"Parallel-Collector\"><a href=\"#Parallel-Collector\" class=\"headerlink\" title=\"Parallel Collector\"></a>Parallel Collector</h2><p><strong>Young Generation Collection Using the Parallel Collector</strong></p>\n<p>Young Generation collection in the parallel collector is the same as the Serial Collector, except that it’s done in parallel. The Parallel Collector fully utilizes the power of multiple threads and make the process of Young Generation Collection faster. Although the Young Generation Collection is still a stop-the-world action, the process would take less time and make less impact to the running program.</p>\n<p><strong>Old Generation Collection Using the Parallel Collector</strong></p>\n<p>Old Generation Collection using the Parallel Collector is the same as the Serial Collector.</p>\n<p><strong>When to Use the Parallel Collector</strong></p>\n<p>You can use the Parallel Collector when you have multiple CPU cores, whose power could be unleashed and utilized by it. But also notice that the Parallel Collector wouldn’t help you a lot if you need a much shorter pause time in GC, because it still takes a long time to finish the Old Generation Collection, which is done in a single-threaded way in the Parallel Collector.</p>\n<h2 id=\"Parallel-Compacting-Collector\"><a href=\"#Parallel-Compacting-Collector\" class=\"headerlink\" title=\"Parallel Compacting Collector\"></a>Parallel Compacting Collector</h2><p><strong>Young Generation Collection Using the Parallel Collector</strong></p>\n<p>Young Generation Collection using the Parallel Compacting Collector is the same as the Parallel Collector.</p>\n<p><strong>Old Generation Collection Using the Parallel Collector</strong></p>\n<p>Old Generation Collection in the Parallel Compacting Collector is done in a multi-threaded way, this is different from the Parallel Collector, whose uses only a single thread to complete Old Generation Collection.</p>\n<p>There are in total three phases regarding Old Generation Collection.</p>\n<p><strong>1. Mark(multi-thread)</strong></p>\n<p>First of all, the old generation is divided into several regions of the same fixed sizes. Then live objects that are directly reachable from the code are divided equally among multiple threads. Those threads work concurrently to mark all live objects in the old generation, storing the size and location of each live object.</p>\n<p><strong>2. Summary(single-thread)</strong></p>\n<p>Due to previous compactions, some portions on the left side of the old generation are typically denser than those on the right side of it. So the collector will search from the left side, calculate the density of live objects in each region until it reaches a point where the density is small enough to be considered eligible for garbage collection. All the regions to the left of the point are not worth garbage collecting, and they will not be moved, those regions are called <em>dense prefix</em>. All the regions to the right of the point will be garbage collected. After collection, the collector will store the location of the first live object in each region, which would be helpful in the compaction phase.</p>\n<p><strong>3. Compaction(multi-thread)</strong></p>\n<p>Live objects on the right side will be moved to the left side of the old generation, leaving a huge chunk of contiguous free memory on the right side. This process is called compaction.</p>\n<p><strong>When to Use the Parallel Compacting Collector</strong></p>\n<p>You can use the Parallel Compacting Collector if you have multiple CPU cores that could be utilized. The collector will take advantage of those CPU cores and make the total pause time shorter.</p>\n<h2 id=\"Concurrent-Mark-Sweep-CMS-Collector\"><a href=\"#Concurrent-Mark-Sweep-CMS-Collector\" class=\"headerlink\" title=\"Concurrent Mark-Sweep(CMS) Collector\"></a>Concurrent Mark-Sweep(CMS) Collector</h2><p><strong>Young Generation Collection Using the CMS Collector</strong></p>\n<p>Young Generation Collection using the CMS Collector is the same as the Parallel Collector.</p>\n<p><strong>Old Generation Collection Using the CMS Collector</strong></p>\n<p>There are four phases in total in the Old Generation Collection using the CMS Collector.</p>\n<p><strong>1. Initial Mark(single thread)</strong></p>\n<p>All live objects that are directly reachable from the code are marked as alive. It takes a short pause to do it.</p>\n<p><strong>2. Concurrent Mark(multi-thread)</strong></p>\n<p>While the application is running, the collector marks live objects that are transitively reachable from the above set obtained from the <em>Initial Mark</em>.</p>\n<p><strong>3. Remark(multi-thread)</strong></p>\n<p>Because the <em>Concurrent Mark</em> is conducted while the application is still running, some live objects cannot be detected in the second phase. So the application stops for a while, and the collector checks all objects that are modified during the <em>Concurrent Mark</em> phase, and mark all objects that turned garbage during the previous phase. After the <em>Remark</em> phase, all live objects are marked.</p>\n<p><strong>4. Sweep(multi-thread)</strong></p>\n<p>The collector conducts a <em>Sweep</em> operation to eliminate all garbage in the Old Generation.</p>\n<p><strong>Disadvantages of the CMS Collector</strong></p>\n<p>The <em>CMS Collector</em> is the only collector that has no <em>compact</em> phase, which means it cannot use the <em>bump-the-pointer</em> strategy(see reference below) to find free space.</p>\n<div style=\"background-color: #fff5cc; border-color: #ffe273; padding: 10px; border-left: 10px solid #ffe273\"><strong>bump-the-pointer</strong> strategy: This is a strategy used to allocate new space in the Old Generation. With this strategy, you only need to store the position of the last live object after each Old Generation Collection. When you need to allocate a space to store a new object, what you need to do is just to allocate the space right after the position and update the position to the new one. There are no live objects after that position because the Old Generation has been compacted before. The strategy is used in all above collectors except the <em>CMS Collector</em> because the <em>CMS Collector</em> doesn’t compact the Old Generation.</div>\n\n<p>So how does the <em>CMS Collector</em> find new space to allocate? Basically, it maintains a linked list internally, which connects all free space together. When an allocation is needed, the collector will traverse through the list and find the appropriate region to allocate the space.</p>\n<p>Another disadvantage of the <em>CMS Collector</em> is that it needs a bigger heap size because the <em>Concurrent Mark</em> phase proceeds while the application is still running, which means more space needs to be allocated when some garbage cannot be collected in time. So enough heap size must be prepared to store both uncollected garbage and newly allocated space.</p>\n<p><strong>When to Use the CMS Collector</strong></p>\n<p>The <em>CMS Collector</em> is typically used in the server side application, where large heap size and multiple CPU cores could be utilized. Those applications usually require a smaller pause time, which is exactly what <em>the CMS Collector</em> is good at.</p>\n<h2 id=\"G1-Garbage-First-Collector\"><a href=\"#G1-Garbage-First-Collector\" class=\"headerlink\" title=\"G1(Garbage First) Collector\"></a>G1(Garbage First) Collector</h2><p>G1 Collector is different from previous collectors. All the previous collectors have a young generation and an old generation of fixed-size. This is the not the case for the G1 Collector. For the G1 Collector, the entire heap is divided into approximately 2000 areas, the size of each area is around 1MB ~ 32MB. The type of these areas may be different, it may be eden, survivor area, or the old generation. The whole picture is as follows.</p>\n<p><img src=\"/images/The-Machanism-of-Garbage-Collectors-in-Java-4.png\" alt=\"the CMS Collector\"></p>\n<p>Although the size of each region is the same in the above picture, in reality, this may not be the case. The size of each region usually depends on how the collector optimizes the collection algorithm, and they are changing constantly.</p>\n<p>Notice that <em>Humongous Region</em> is used to store objects that are larger than 50% of the normal region size. Currently, no optimization is applied to this type of region, so avoid using objects that are too large.</p>\n<p><strong>Young Generation Collection Using the G1 Collector</strong></p>\n<ol>\n<li>Live objects in eden areas are copied into survivor areas.</li>\n<li>Some live objects that are out of the time threshold are copied into old generations.</li>\n<li>“Accounting” process is performed, which determines how much time is needed for the next Young GC based on the current stats and the predefined pause time.</li>\n<li>Resize eden/survivor regions based on the information obtained above.</li>\n</ol>\n<p><strong>Old Generation Collection Using the G1 Collector</strong></p>\n<ol>\n<li>Initial Mark: mark all survivor regions which may have references to objects in old generations. This step is done concurrently with Young GC. So although it’s still a stop-the-world operation(because the entire Young GC is a stop-the-world operation), it doesn’t take extra time to complete.</li>\n<li>Root region Scan: scan survivor regions for references into the old generation. It happens when the application is still running.</li>\n<li>Concurrent Mark: mark all live objects across the entire heap, this is done while the application is still running.</li>\n<li>Remark: stop the world and complete the marking process.</li>\n<li>Cleanup: <ul>\n<li>Perform accounting on live objects and completely free regions.(stop-the-world)</li>\n<li>Scrubs Remembered Sets.(stop-the-world)</li>\n<li>Reset empty regions and return them to the free list.(concurrent)</li>\n</ul>\n</li>\n<li>Copy: copy live objects from to new regions. This is a stop-the-world step. It can be seen as a kind of compaction.</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li><a href=\"http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></li>\n<li><a href=\"http://stackoverflow.com/a/19303535/1031769\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/a/19303535/1031769</a></li>\n</ul>\n"},{"title":"Use Deep Learning to Detect Programming Languages","date":"2017-11-26T07:56:45.000Z","thumbnail":"/images/deep-learning.jpg","_content":"\n# Introduction\n\nThis post introduces a way to use deep learning to detect programming languages. Take the following code as an example.\n\n```python\ndef test():\n    print(\"something\")\n```\n\nWe will get an answer `python` if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.\n\n# Execution\n\nFirst let's try running the program, so we can have an intuitive perspective on what the program is about.\n\n1. Install third-party libraries\n\n   - [Anaconda(Python 3.6+)](https://www.anaconda.com/download/)\n\n   - Gensim\n\n     ```bash\n     conda install -c anaconda gensim\n     ```\n\n   - Keras\n\n     ```bash\n     conda install -c conda-forge keras\n     ```\n\n   -  Tensorflow\n\n     ```bash\n     pip install tensorflow==1.3.0\n     ```\n\n2. Download the program\n\n  ```bash\n  git clone git@github.com:searene/demos.git && cd demos/PLDetector-demo\n  ```\n\n3. Train the model\n\n   ```bash\n   python -m src.neural_network_trainer                                                  \n   Using TensorFlow backend.                                                                                             \n   ...\n   _________________________________________________________________\n   Layer (type)                 Output Shape              Param #\n   =================================================================\n   embedding_1 (Embedding)      (None, 500, 100)          773100\n   _________________________________________________________________\n   conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          \n   _________________________________________________________________                                                     \n   max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              \n   _________________________________________________________________                                                     \n   flatten_1 (Flatten)          (None, 31744)             0                                                              \n   _________________________________________________________________                                                     \n   dense_1 (Dense)              (None, 8)                 253960                                                         \n   =================================================================                                                     \n   Total params: 1,091,188                                                                                               \n   Trainable params: 318,088\n   Non-trainable params: 773,100\n   _________________________________________________________________\n   INFO:root:None\n   Epoch 1/10\n    - 1s - loss: 0.4304 - acc: 0.8823\n   Epoch 2/10\n    - 1s - loss: 0.1357 - acc: 0.9657\n   Epoch 3/10\n    - 1s - loss: 0.0706 - acc: 0.9788\n   Epoch 4/10\n    - 1s - loss: 0.0392 - acc: 0.9887\n   Epoch 5/10\n    - 1s - loss: 0.0266 - acc: 0.9927\n   Epoch 6/10\n    - 1s - loss: 0.0203 - acc: 0.9945\n   Epoch 7/10\n    - 1s - loss: 0.0169 - acc: 0.9948\n   Epoch 8/10\n    - 1s - loss: 0.0145 - acc: 0.9956\n   Epoch 9/10\n    - 1s - loss: 0.0131 - acc: 0.9959                                                                                    \n   Epoch 10/10                                                                                                           \n    - 1s - loss: 0.0120 - acc: 0.9959                                                                                    \n   INFO:root:Test Accuracy: 94.642857\n   ```\n   We will have three important files as soon as the above step is completed.\n\n   * resources/models/model.h5\n   * resources/models/model.json\n   * resources/vocab_tokenizer\n\n   We will introduce the three files in detail later on.\n\n4. Detection\n\n   ```bash\n   python -m src.detector\n\n   Using TensorFlow backend.\n   Python\n   ```\n\n   The following python code is detected by default by `detector.py`\n\n   ```python\n   def test():\n       print(\"something\")\n   ```\n\n   Of course you can modify `detector.py` to detect other code.\n\n# Project Structure\n\nLet's first have a rough idea of the project structure. Don't worry, it will only take 1 ~ 2 minutes.\n\n- resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.\n\n  ![train文件夹结构](/images/2017-11-26-163206_448x610_scrot.png)\n\n- resources/code/test: the same as `resources/code/train` except that it's used for testing accuracy instead of training.\n- `models` directory & `vocab_tokenizer`: stored training result\n- src/config.py: some constants used in the program\n- src/neural_network_trainer.py: code used to train the model\n- src/detector.py: code used to load the model and detect programming languages\n\n# How It Works\n\n## Construct Vocabulary\n\nlet's first get our heads around the training process, aka the contents in `neural_network_trainer.py`. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.\n\nOK, you might want to ask, why removing words that are not in the vocabulary? Wouldn't it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don't have word vectors to map, which means the neural network is unable to process this word.\n\nSo how do we build the vocabulary? It's fairly easy, we just need to scan all the code in `resources/code/train` and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.\n\n\n```python\ndef build_vocab(train_data_dir):\n    vocabulary = Counter()\n    files = get_files(train_data_dir)\n    for f in files:\n        words = load_words_from_file(f)\n        vocabulary.update(words)\n\n    # remove rare words\n    min_count = 5\n    vocabulary = [word for word, count in vocabulary.items() if count >= min_count]\n    return vocabulary\n```\n\nRun `build_vocab` to get the vocabulary.\n\n```python\nvocab = build_vocab(config.train_data_dir)\nprint(vocab) # [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]\n```\n\nSo, as you can see, the vocabulary is just a list of words, that's it.\n\n## Build vocab_tokenizer\n\nThe next step is to build `vocab_tokenizer`. So what is `vocab_tokenzier`? It's a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.\n\nWe use `Tokenizer` provided by `Keras` to build `vocab_tokenizer`.\n\n```python\ndef build_vocab_tokenizer_from_set(vocab):\n    vocab_tokenizer = Tokenizer(lower=False, filters=\"\")\n    vocab_tokenizer.fit_on_texts(vocab)\n    return vocab_tokenizer\n```\n\nThen we save this `vocab_tokenizer` as a file, to be used later.\n\n```python\ndef save_vocab_tokenizer(vocab_tokenzier_location, vocab_tokenizer):\n    with open(vocab_tokenzier_location, 'wb') as f:\n        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)\n```\n\n## Build Word Vectors\n\nBefore diving into word vectors, we first need to know what they are.\n\nTo put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let's take the following Java code as an example.\n\n```java\npublic static void main(String[] args) {\n    System.out.println(\"something\")\n}\n```\n\nThe `word2vec` variable we are building here is actually a dictionary, which is like this(word -> word_vector).\n\n```python\nword2vec = {\n    'public': [2, 1, 10],\n    'static': [2, 1, 9],\n    'main': [1, 10, 3],\n    'String': [1, 20, 3],\n    'args': [1, 40, 3],\n    'System': [20, 10, 3],\n    'out': [3, 10, 3],\n    'println': [1, 39, 3],\n    'something': [1, 20, 3]\n}\n```\n\nHere comes the question. Why would we build word vectors, instead of just using the number given by `vocab_tokenizer`? This is because word vectors have a very special and useful characteristic: **The more close two words are, the smaller their word vectors are**(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn't matter if you don't know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.\n\nFor example, `public` and `staic` are only seen together in Java, so the distance between their word vectors should be small. However, `public` and `System` is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.\n\nNow that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the `Word2Vec` algorithm provided by `gensim` to achieve it. Steps are as follows.\n\n1. Load all the training data, extract those words which are in the vocabulary.\n2. Map each word into its respective number by using `vocab_tokenizer`.\n3. Put those numbers into `Word2Vec` library and obtain word vectors.\n\nThe code is as follows.\n\n```python\ndef build_word2vec(train_data_dir, vocab_tokenizer):\n    all_words = []\n    files = get_files(train_data_dir)\n    for f in files:\n        words = load_words_from_file(f)\n        all_words.append([word for word in words if is_in_vocab(word, vocab_tokenizer)])\n    model = Word2Vec(all_words, size=100, window=5, workers=8, min_count=1)\n    return {word: model[word] for word in model.wv.index2word}\n```\n\n## Build the Neural Network\n\nEverything is ready, now it's the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.\n\n```python\ndef test():\n    print(\"something\")\n```\n\nMap `def`, `test`, `print` and `something` into their respective numbers, we get the input\n\n```python\ninput = [0, 1, 2, 3]\n```\n\nThe output of the neural network is the probability of each language.\n\n```python\noutput = [0.5, 0.1, 0.04, 0.06, 0.1, 0.1, 0.05, 0.05]\n```\n\nThe code is as follows.\n\n```python\nall_languages = [\"Python\", \"C\", \"Java\", \"Scala\", \"Javascript\", \"CSS\", \"C#\", \"HTML\"]\n```\n\nSo we know the above code is most likely to be written by Python, because Python has the most probability(0.5)\n\nNow that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.\n\n1. Embedding Layer: it's used to map each word into its respective word vector\n2. Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.\n3. Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.\n\nKey code is as follows.\n\n```python\ndef build_model(train_data_dir, vocab_tokenizer, word2vec):\n    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)\n\n    # build the embedding layer\n    input_dim = len(vocab_tokenizer.word_index) + 1\n    output_dim = get_word2vec_dimension(word2vec)\n    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)\n\n    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,\n                                trainable=False)\n    model = Sequential()\n    model.add(embedding_layer)\n    model.add(Conv1D(filters=128, kernel_size=5, activation=\"relu\"))\n    model.add(MaxPooling1D(pool_size=2))\n    model.add(Flatten())\n    model.add(Dense(len(all_languages), activation=\"sigmoid\"))\n    logging.info(model.summary())\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    model.fit(x_train, y_train, epochs=10, verbose=2)\n    return model\n```\n\nAll right, we built our neural network, not a trivial achievement! Then let's write a function, which uses the neural network to detect test code, check out its accuracy.\n\n```python\ndef evaluate_model(test_data_dir, vocab_tokenizer, model):\n    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)\n    loss, acc = model.evaluate(x_test, y_test, verbose=0)\n    logging.info('Test Accuracy: %f' % (acc * 100))\n```\n\nAs what we have got before, the test accuracy is around 94%~95%, which is good enough. Let's save the neural network as files, so we can load it when detecting.\n\n```python\ndef save_model(model, model_file_location, weights_file_location):\n    os.makedirs(os.path.dirname(model_file_location), exist_ok=True)\n    with open(model_file_location, \"w\") as f:\n        f.write(model.to_json())\n    model.save_weights(weights_file_location)\n```\n\n## Load the Neural Network For Detection\n\nThis part is simple, we only need to load `vocab_tokenizer` and the neural network for detection. The code is as follows.\n\n```python\nvocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)\nmodel = load_model(config.model_file_location, config.weights_file_location)\n\ndef to_language(binary_list):\n    i = np.argmax(binary_list)\n    return all_languages[i]\n\ndef get_neural_network_input(code):\n    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)\n    return pad_sequences([encoded_sentence], maxlen=input_length)\n\ndef detect(code):\n    y_proba = model.predict(get_neural_network_input(code))\n    return to_language(y_proba)\n```\n\nUse it like this.\n\n```python\ncode = \"\"\"\ndef test():\n    print(\"something\")\n\"\"\"\nprint(detect(code)) # Python\n```\n\n# Summary\n\nAll in all, here are the steps to build the neural network.\n\n1. Build vocabulary.\n2. Build `vocab_tokenizer` using vocabulary, which is used to convert words into numbers.\n3. Load words into `Word2Vec` to build word vectors.\n4. Load word vectors into the neural network as part of the input layer.\n5. Load all the training data, extract words that are in the vocabulary, convert them into numbers using `vocab_tokenizer`, load them into the neural network for training.\n\nThree steps for detection:\n\n1. Extract words in the code and remove those that are not in the vocabulary.\n2. Convert those words into number through `vocab_tokenizer`, and load them into the neural network.\n3. Choose the language which has the most probability, which the answer we want.\n\n# Exercise\n\nYou may have already found out that, we only saved `vocab_tokenizer` and the neural network(which lies in the model directory), why didn't we save `word2vec` and `vocab`?\n\n# Question\n\nIf you have any question, please leave it in the comment below, I'll try to answer it.\n","source":"_posts/use-neural-networks-to-detect-programming-languages.md","raw":"title: Use Deep Learning to Detect Programming Languages\ndate: 2017-11-26 15:56:45\ntags: ['Neural Network']\nthumbnail: /images/deep-learning.jpg\ncategories: Coding\n---\n\n# Introduction\n\nThis post introduces a way to use deep learning to detect programming languages. Take the following code as an example.\n\n```python\ndef test():\n    print(\"something\")\n```\n\nWe will get an answer `python` if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.\n\n# Execution\n\nFirst let's try running the program, so we can have an intuitive perspective on what the program is about.\n\n1. Install third-party libraries\n\n   - [Anaconda(Python 3.6+)](https://www.anaconda.com/download/)\n\n   - Gensim\n\n     ```bash\n     conda install -c anaconda gensim\n     ```\n\n   - Keras\n\n     ```bash\n     conda install -c conda-forge keras\n     ```\n\n   -  Tensorflow\n\n     ```bash\n     pip install tensorflow==1.3.0\n     ```\n\n2. Download the program\n\n  ```bash\n  git clone git@github.com:searene/demos.git && cd demos/PLDetector-demo\n  ```\n\n3. Train the model\n\n   ```bash\n   python -m src.neural_network_trainer                                                  \n   Using TensorFlow backend.                                                                                             \n   ...\n   _________________________________________________________________\n   Layer (type)                 Output Shape              Param #\n   =================================================================\n   embedding_1 (Embedding)      (None, 500, 100)          773100\n   _________________________________________________________________\n   conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          \n   _________________________________________________________________                                                     \n   max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              \n   _________________________________________________________________                                                     \n   flatten_1 (Flatten)          (None, 31744)             0                                                              \n   _________________________________________________________________                                                     \n   dense_1 (Dense)              (None, 8)                 253960                                                         \n   =================================================================                                                     \n   Total params: 1,091,188                                                                                               \n   Trainable params: 318,088\n   Non-trainable params: 773,100\n   _________________________________________________________________\n   INFO:root:None\n   Epoch 1/10\n    - 1s - loss: 0.4304 - acc: 0.8823\n   Epoch 2/10\n    - 1s - loss: 0.1357 - acc: 0.9657\n   Epoch 3/10\n    - 1s - loss: 0.0706 - acc: 0.9788\n   Epoch 4/10\n    - 1s - loss: 0.0392 - acc: 0.9887\n   Epoch 5/10\n    - 1s - loss: 0.0266 - acc: 0.9927\n   Epoch 6/10\n    - 1s - loss: 0.0203 - acc: 0.9945\n   Epoch 7/10\n    - 1s - loss: 0.0169 - acc: 0.9948\n   Epoch 8/10\n    - 1s - loss: 0.0145 - acc: 0.9956\n   Epoch 9/10\n    - 1s - loss: 0.0131 - acc: 0.9959                                                                                    \n   Epoch 10/10                                                                                                           \n    - 1s - loss: 0.0120 - acc: 0.9959                                                                                    \n   INFO:root:Test Accuracy: 94.642857\n   ```\n   We will have three important files as soon as the above step is completed.\n\n   * resources/models/model.h5\n   * resources/models/model.json\n   * resources/vocab_tokenizer\n\n   We will introduce the three files in detail later on.\n\n4. Detection\n\n   ```bash\n   python -m src.detector\n\n   Using TensorFlow backend.\n   Python\n   ```\n\n   The following python code is detected by default by `detector.py`\n\n   ```python\n   def test():\n       print(\"something\")\n   ```\n\n   Of course you can modify `detector.py` to detect other code.\n\n# Project Structure\n\nLet's first have a rough idea of the project structure. Don't worry, it will only take 1 ~ 2 minutes.\n\n- resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.\n\n  ![train文件夹结构](/images/2017-11-26-163206_448x610_scrot.png)\n\n- resources/code/test: the same as `resources/code/train` except that it's used for testing accuracy instead of training.\n- `models` directory & `vocab_tokenizer`: stored training result\n- src/config.py: some constants used in the program\n- src/neural_network_trainer.py: code used to train the model\n- src/detector.py: code used to load the model and detect programming languages\n\n# How It Works\n\n## Construct Vocabulary\n\nlet's first get our heads around the training process, aka the contents in `neural_network_trainer.py`. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.\n\nOK, you might want to ask, why removing words that are not in the vocabulary? Wouldn't it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don't have word vectors to map, which means the neural network is unable to process this word.\n\nSo how do we build the vocabulary? It's fairly easy, we just need to scan all the code in `resources/code/train` and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.\n\n\n```python\ndef build_vocab(train_data_dir):\n    vocabulary = Counter()\n    files = get_files(train_data_dir)\n    for f in files:\n        words = load_words_from_file(f)\n        vocabulary.update(words)\n\n    # remove rare words\n    min_count = 5\n    vocabulary = [word for word, count in vocabulary.items() if count >= min_count]\n    return vocabulary\n```\n\nRun `build_vocab` to get the vocabulary.\n\n```python\nvocab = build_vocab(config.train_data_dir)\nprint(vocab) # [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]\n```\n\nSo, as you can see, the vocabulary is just a list of words, that's it.\n\n## Build vocab_tokenizer\n\nThe next step is to build `vocab_tokenizer`. So what is `vocab_tokenzier`? It's a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.\n\nWe use `Tokenizer` provided by `Keras` to build `vocab_tokenizer`.\n\n```python\ndef build_vocab_tokenizer_from_set(vocab):\n    vocab_tokenizer = Tokenizer(lower=False, filters=\"\")\n    vocab_tokenizer.fit_on_texts(vocab)\n    return vocab_tokenizer\n```\n\nThen we save this `vocab_tokenizer` as a file, to be used later.\n\n```python\ndef save_vocab_tokenizer(vocab_tokenzier_location, vocab_tokenizer):\n    with open(vocab_tokenzier_location, 'wb') as f:\n        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)\n```\n\n## Build Word Vectors\n\nBefore diving into word vectors, we first need to know what they are.\n\nTo put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let's take the following Java code as an example.\n\n```java\npublic static void main(String[] args) {\n    System.out.println(\"something\")\n}\n```\n\nThe `word2vec` variable we are building here is actually a dictionary, which is like this(word -> word_vector).\n\n```python\nword2vec = {\n    'public': [2, 1, 10],\n    'static': [2, 1, 9],\n    'main': [1, 10, 3],\n    'String': [1, 20, 3],\n    'args': [1, 40, 3],\n    'System': [20, 10, 3],\n    'out': [3, 10, 3],\n    'println': [1, 39, 3],\n    'something': [1, 20, 3]\n}\n```\n\nHere comes the question. Why would we build word vectors, instead of just using the number given by `vocab_tokenizer`? This is because word vectors have a very special and useful characteristic: **The more close two words are, the smaller their word vectors are**(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn't matter if you don't know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.\n\nFor example, `public` and `staic` are only seen together in Java, so the distance between their word vectors should be small. However, `public` and `System` is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.\n\nNow that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the `Word2Vec` algorithm provided by `gensim` to achieve it. Steps are as follows.\n\n1. Load all the training data, extract those words which are in the vocabulary.\n2. Map each word into its respective number by using `vocab_tokenizer`.\n3. Put those numbers into `Word2Vec` library and obtain word vectors.\n\nThe code is as follows.\n\n```python\ndef build_word2vec(train_data_dir, vocab_tokenizer):\n    all_words = []\n    files = get_files(train_data_dir)\n    for f in files:\n        words = load_words_from_file(f)\n        all_words.append([word for word in words if is_in_vocab(word, vocab_tokenizer)])\n    model = Word2Vec(all_words, size=100, window=5, workers=8, min_count=1)\n    return {word: model[word] for word in model.wv.index2word}\n```\n\n## Build the Neural Network\n\nEverything is ready, now it's the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.\n\n```python\ndef test():\n    print(\"something\")\n```\n\nMap `def`, `test`, `print` and `something` into their respective numbers, we get the input\n\n```python\ninput = [0, 1, 2, 3]\n```\n\nThe output of the neural network is the probability of each language.\n\n```python\noutput = [0.5, 0.1, 0.04, 0.06, 0.1, 0.1, 0.05, 0.05]\n```\n\nThe code is as follows.\n\n```python\nall_languages = [\"Python\", \"C\", \"Java\", \"Scala\", \"Javascript\", \"CSS\", \"C#\", \"HTML\"]\n```\n\nSo we know the above code is most likely to be written by Python, because Python has the most probability(0.5)\n\nNow that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.\n\n1. Embedding Layer: it's used to map each word into its respective word vector\n2. Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.\n3. Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.\n\nKey code is as follows.\n\n```python\ndef build_model(train_data_dir, vocab_tokenizer, word2vec):\n    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)\n\n    # build the embedding layer\n    input_dim = len(vocab_tokenizer.word_index) + 1\n    output_dim = get_word2vec_dimension(word2vec)\n    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)\n\n    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,\n                                trainable=False)\n    model = Sequential()\n    model.add(embedding_layer)\n    model.add(Conv1D(filters=128, kernel_size=5, activation=\"relu\"))\n    model.add(MaxPooling1D(pool_size=2))\n    model.add(Flatten())\n    model.add(Dense(len(all_languages), activation=\"sigmoid\"))\n    logging.info(model.summary())\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    model.fit(x_train, y_train, epochs=10, verbose=2)\n    return model\n```\n\nAll right, we built our neural network, not a trivial achievement! Then let's write a function, which uses the neural network to detect test code, check out its accuracy.\n\n```python\ndef evaluate_model(test_data_dir, vocab_tokenizer, model):\n    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)\n    loss, acc = model.evaluate(x_test, y_test, verbose=0)\n    logging.info('Test Accuracy: %f' % (acc * 100))\n```\n\nAs what we have got before, the test accuracy is around 94%~95%, which is good enough. Let's save the neural network as files, so we can load it when detecting.\n\n```python\ndef save_model(model, model_file_location, weights_file_location):\n    os.makedirs(os.path.dirname(model_file_location), exist_ok=True)\n    with open(model_file_location, \"w\") as f:\n        f.write(model.to_json())\n    model.save_weights(weights_file_location)\n```\n\n## Load the Neural Network For Detection\n\nThis part is simple, we only need to load `vocab_tokenizer` and the neural network for detection. The code is as follows.\n\n```python\nvocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)\nmodel = load_model(config.model_file_location, config.weights_file_location)\n\ndef to_language(binary_list):\n    i = np.argmax(binary_list)\n    return all_languages[i]\n\ndef get_neural_network_input(code):\n    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)\n    return pad_sequences([encoded_sentence], maxlen=input_length)\n\ndef detect(code):\n    y_proba = model.predict(get_neural_network_input(code))\n    return to_language(y_proba)\n```\n\nUse it like this.\n\n```python\ncode = \"\"\"\ndef test():\n    print(\"something\")\n\"\"\"\nprint(detect(code)) # Python\n```\n\n# Summary\n\nAll in all, here are the steps to build the neural network.\n\n1. Build vocabulary.\n2. Build `vocab_tokenizer` using vocabulary, which is used to convert words into numbers.\n3. Load words into `Word2Vec` to build word vectors.\n4. Load word vectors into the neural network as part of the input layer.\n5. Load all the training data, extract words that are in the vocabulary, convert them into numbers using `vocab_tokenizer`, load them into the neural network for training.\n\nThree steps for detection:\n\n1. Extract words in the code and remove those that are not in the vocabulary.\n2. Convert those words into number through `vocab_tokenizer`, and load them into the neural network.\n3. Choose the language which has the most probability, which the answer we want.\n\n# Exercise\n\nYou may have already found out that, we only saved `vocab_tokenizer` and the neural network(which lies in the model directory), why didn't we save `word2vec` and `vocab`?\n\n# Question\n\nIf you have any question, please leave it in the comment below, I'll try to answer it.\n","slug":"use-neural-networks-to-detect-programming-languages","published":1,"updated":"2017-12-09T10:10:51.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjhacqey006j8arfapp8j25z","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This post introduces a way to use deep learning to detect programming languages. Take the following code as an example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>We will get an answer <code>python</code> if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.</p>\n<h1 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h1><p>First let’s try running the program, so we can have an intuitive perspective on what the program is about.</p>\n<ol>\n<li><p>Install third-party libraries</p>\n<ul>\n<li><p><a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"external\">Anaconda(Python 3.6+)</a></p>\n</li>\n<li><p>Gensim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conda install -c anaconda gensim</div></pre></td></tr></table></figure>\n</li>\n<li><p>Keras</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conda install -c conda-forge keras</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tensorflow</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install tensorflow==1.3.0</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Download the program</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class=\"built_in\">cd</span> demos/PLDetector-demo</div></pre></td></tr></table></figure>\n</li>\n<li><p>Train the model</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m src.neural_network_trainer                                                  </div><div class=\"line\">Using TensorFlow backend.                                                                                             </div><div class=\"line\">...</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">Layer (<span class=\"built_in\">type</span>)                 Output Shape              Param <span class=\"comment\">#</span></div><div class=\"line\">=================================================================</div><div class=\"line\">embedding_1 (Embedding)      (None, 500, 100)          773100</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">flatten_1 (Flatten)          (None, 31744)             0                                                              </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">dense_1 (Dense)              (None, 8)                 253960                                                         </div><div class=\"line\">=================================================================                                                     </div><div class=\"line\">Total params: 1,091,188                                                                                               </div><div class=\"line\">Trainable params: 318,088</div><div class=\"line\">Non-trainable params: 773,100</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">INFO:root:None</div><div class=\"line\">Epoch 1/10</div><div class=\"line\"> - 1s - loss: 0.4304 - acc: 0.8823</div><div class=\"line\">Epoch 2/10</div><div class=\"line\"> - 1s - loss: 0.1357 - acc: 0.9657</div><div class=\"line\">Epoch 3/10</div><div class=\"line\"> - 1s - loss: 0.0706 - acc: 0.9788</div><div class=\"line\">Epoch 4/10</div><div class=\"line\"> - 1s - loss: 0.0392 - acc: 0.9887</div><div class=\"line\">Epoch 5/10</div><div class=\"line\"> - 1s - loss: 0.0266 - acc: 0.9927</div><div class=\"line\">Epoch 6/10</div><div class=\"line\"> - 1s - loss: 0.0203 - acc: 0.9945</div><div class=\"line\">Epoch 7/10</div><div class=\"line\"> - 1s - loss: 0.0169 - acc: 0.9948</div><div class=\"line\">Epoch 8/10</div><div class=\"line\"> - 1s - loss: 0.0145 - acc: 0.9956</div><div class=\"line\">Epoch 9/10</div><div class=\"line\"> - 1s - loss: 0.0131 - acc: 0.9959                                                                                    </div><div class=\"line\">Epoch 10/10                                                                                                           </div><div class=\"line\"> - 1s - loss: 0.0120 - acc: 0.9959                                                                                    </div><div class=\"line\">INFO:root:Test Accuracy: 94.642857</div></pre></td></tr></table></figure>\n<p>We will have three important files as soon as the above step is completed.</p>\n<ul>\n<li>resources/models/model.h5</li>\n<li>resources/models/model.json</li>\n<li>resources/vocab_tokenizer</li>\n</ul>\n<p>We will introduce the three files in detail later on.</p>\n</li>\n<li><p>Detection</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m src.detector</div><div class=\"line\"></div><div class=\"line\">Using TensorFlow backend.</div><div class=\"line\">Python</div></pre></td></tr></table></figure>\n<p>The following python code is detected by default by <code>detector.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>Of course you can modify <code>detector.py</code> to detect other code.</p>\n</li>\n</ol>\n<h1 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h1><p>Let’s first have a rough idea of the project structure. Don’t worry, it will only take 1 ~ 2 minutes.</p>\n<ul>\n<li><p>resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.</p>\n<p><img src=\"/images/2017-11-26-163206_448x610_scrot.png\" alt=\"train文件夹结构\"></p>\n</li>\n<li><p>resources/code/test: the same as <code>resources/code/train</code> except that it’s used for testing accuracy instead of training.</p>\n</li>\n<li><code>models</code> directory &amp; <code>vocab_tokenizer</code>: stored training result</li>\n<li>src/config.py: some constants used in the program</li>\n<li>src/neural_network_trainer.py: code used to train the model</li>\n<li>src/detector.py: code used to load the model and detect programming languages</li>\n</ul>\n<h1 id=\"How-It-Works\"><a href=\"#How-It-Works\" class=\"headerlink\" title=\"How It Works\"></a>How It Works</h1><h2 id=\"Construct-Vocabulary\"><a href=\"#Construct-Vocabulary\" class=\"headerlink\" title=\"Construct Vocabulary\"></a>Construct Vocabulary</h2><p>let’s first get our heads around the training process, aka the contents in <code>neural_network_trainer.py</code>. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.</p>\n<p>OK, you might want to ask, why removing words that are not in the vocabulary? Wouldn’t it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don’t have word vectors to map, which means the neural network is unable to process this word.</p>\n<p>So how do we build the vocabulary? It’s fairly easy, we just need to scan all the code in <code>resources/code/train</code> and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_vocab</span><span class=\"params\">(train_data_dir)</span>:</span></div><div class=\"line\">    vocabulary = Counter()</div><div class=\"line\">    files = get_files(train_data_dir)</div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">        words = load_words_from_file(f)</div><div class=\"line\">        vocabulary.update(words)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># remove rare words</span></div><div class=\"line\">    min_count = <span class=\"number\">5</span></div><div class=\"line\">    vocabulary = [word <span class=\"keyword\">for</span> word, count <span class=\"keyword\">in</span> vocabulary.items() <span class=\"keyword\">if</span> count &gt;= min_count]</div><div class=\"line\">    <span class=\"keyword\">return</span> vocabulary</div></pre></td></tr></table></figure>\n<p>Run <code>build_vocab</code> to get the vocabulary.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vocab = build_vocab(config.train_data_dir)</div><div class=\"line\">print(vocab) <span class=\"comment\"># [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]</span></div></pre></td></tr></table></figure>\n<p>So, as you can see, the vocabulary is just a list of words, that’s it.</p>\n<h2 id=\"Build-vocab-tokenizer\"><a href=\"#Build-vocab-tokenizer\" class=\"headerlink\" title=\"Build vocab_tokenizer\"></a>Build vocab_tokenizer</h2><p>The next step is to build <code>vocab_tokenizer</code>. So what is <code>vocab_tokenzier</code>? It’s a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.</p>\n<p>We use <code>Tokenizer</code> provided by <code>Keras</code> to build <code>vocab_tokenizer</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_vocab_tokenizer_from_set</span><span class=\"params\">(vocab)</span>:</span></div><div class=\"line\">    vocab_tokenizer = Tokenizer(lower=<span class=\"keyword\">False</span>, filters=<span class=\"string\">\"\"</span>)</div><div class=\"line\">    vocab_tokenizer.fit_on_texts(vocab)</div><div class=\"line\">    <span class=\"keyword\">return</span> vocab_tokenizer</div></pre></td></tr></table></figure>\n<p>Then we save this <code>vocab_tokenizer</code> as a file, to be used later.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_vocab_tokenizer</span><span class=\"params\">(vocab_tokenzier_location, vocab_tokenizer)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(vocab_tokenzier_location, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)</div></pre></td></tr></table></figure>\n<h2 id=\"Build-Word-Vectors\"><a href=\"#Build-Word-Vectors\" class=\"headerlink\" title=\"Build Word Vectors\"></a>Build Word Vectors</h2><p>Before diving into word vectors, we first need to know what they are.</p>\n<p>To put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let’s take the following Java code as an example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"something\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The <code>word2vec</code> variable we are building here is actually a dictionary, which is like this(word -&gt; word_vector).</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">word2vec = &#123;</div><div class=\"line\">    <span class=\"string\">'public'</span>: [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>],</div><div class=\"line\">    <span class=\"string\">'static'</span>: [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"string\">'main'</span>: [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'String'</span>: [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'args'</span>: [<span class=\"number\">1</span>, <span class=\"number\">40</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'System'</span>: [<span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'out'</span>: [<span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'println'</span>: [<span class=\"number\">1</span>, <span class=\"number\">39</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'something'</span>: [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here comes the question. Why would we build word vectors, instead of just using the number given by <code>vocab_tokenizer</code>? This is because word vectors have a very special and useful characteristic: <strong>The more close two words are, the smaller their word vectors are</strong>(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn’t matter if you don’t know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.</p>\n<p>For example, <code>public</code> and <code>staic</code> are only seen together in Java, so the distance between their word vectors should be small. However, <code>public</code> and <code>System</code> is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.</p>\n<p>Now that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the <code>Word2Vec</code> algorithm provided by <code>gensim</code> to achieve it. Steps are as follows.</p>\n<ol>\n<li>Load all the training data, extract those words which are in the vocabulary.</li>\n<li>Map each word into its respective number by using <code>vocab_tokenizer</code>.</li>\n<li>Put those numbers into <code>Word2Vec</code> library and obtain word vectors.</li>\n</ol>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_word2vec</span><span class=\"params\">(train_data_dir, vocab_tokenizer)</span>:</span></div><div class=\"line\">    all_words = []</div><div class=\"line\">    files = get_files(train_data_dir)</div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">        words = load_words_from_file(f)</div><div class=\"line\">        all_words.append([word <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words <span class=\"keyword\">if</span> is_in_vocab(word, vocab_tokenizer)])</div><div class=\"line\">    model = Word2Vec(all_words, size=<span class=\"number\">100</span>, window=<span class=\"number\">5</span>, workers=<span class=\"number\">8</span>, min_count=<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;word: model[word] <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> model.wv.index2word&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Build-the-Neural-Network\"><a href=\"#Build-the-Neural-Network\" class=\"headerlink\" title=\"Build the Neural Network\"></a>Build the Neural Network</h2><p>Everything is ready, now it’s the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>Map <code>def</code>, <code>test</code>, <code>print</code> and <code>something</code> into their respective numbers, we get the input</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">input = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n<p>The output of the neural network is the probability of each language.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">output = [<span class=\"number\">0.5</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0.06</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.05</span>]</div></pre></td></tr></table></figure>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_languages = [<span class=\"string\">\"Python\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"Java\"</span>, <span class=\"string\">\"Scala\"</span>, <span class=\"string\">\"Javascript\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"C#\"</span>, <span class=\"string\">\"HTML\"</span>]</div></pre></td></tr></table></figure>\n<p>So we know the above code is most likely to be written by Python, because Python has the most probability(0.5)</p>\n<p>Now that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.</p>\n<ol>\n<li>Embedding Layer: it’s used to map each word into its respective word vector</li>\n<li>Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.</li>\n<li>Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.</li>\n</ol>\n<p>Key code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_model</span><span class=\"params\">(train_data_dir, vocab_tokenizer, word2vec)</span>:</span></div><div class=\"line\">    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># build the embedding layer</span></div><div class=\"line\">    input_dim = len(vocab_tokenizer.word_index) + <span class=\"number\">1</span></div><div class=\"line\">    output_dim = get_word2vec_dimension(word2vec)</div><div class=\"line\">    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)</div><div class=\"line\"></div><div class=\"line\">    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,</div><div class=\"line\">                                trainable=<span class=\"keyword\">False</span>)</div><div class=\"line\">    model = Sequential()</div><div class=\"line\">    model.add(embedding_layer)</div><div class=\"line\">    model.add(Conv1D(filters=<span class=\"number\">128</span>, kernel_size=<span class=\"number\">5</span>, activation=<span class=\"string\">\"relu\"</span>))</div><div class=\"line\">    model.add(MaxPooling1D(pool_size=<span class=\"number\">2</span>))</div><div class=\"line\">    model.add(Flatten())</div><div class=\"line\">    model.add(Dense(len(all_languages), activation=<span class=\"string\">\"sigmoid\"</span>))</div><div class=\"line\">    logging.info(model.summary())</div><div class=\"line\">    model.compile(loss=<span class=\"string\">'binary_crossentropy'</span>, optimizer=<span class=\"string\">'adam'</span>, metrics=[<span class=\"string\">'accuracy'</span>])</div><div class=\"line\">    model.fit(x_train, y_train, epochs=<span class=\"number\">10</span>, verbose=<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> model</div></pre></td></tr></table></figure>\n<p>All right, we built our neural network, not a trivial achievement! Then let’s write a function, which uses the neural network to detect test code, check out its accuracy.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate_model</span><span class=\"params\">(test_data_dir, vocab_tokenizer, model)</span>:</span></div><div class=\"line\">    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)</div><div class=\"line\">    loss, acc = model.evaluate(x_test, y_test, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">'Test Accuracy: %f'</span> % (acc * <span class=\"number\">100</span>))</div></pre></td></tr></table></figure>\n<p>As what we have got before, the test accuracy is around 94%~95%, which is good enough. Let’s save the neural network as files, so we can load it when detecting.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_model</span><span class=\"params\">(model, model_file_location, weights_file_location)</span>:</span></div><div class=\"line\">    os.makedirs(os.path.dirname(model_file_location), exist_ok=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(model_file_location, <span class=\"string\">\"w\"</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(model.to_json())</div><div class=\"line\">    model.save_weights(weights_file_location)</div></pre></td></tr></table></figure>\n<h2 id=\"Load-the-Neural-Network-For-Detection\"><a href=\"#Load-the-Neural-Network-For-Detection\" class=\"headerlink\" title=\"Load the Neural Network For Detection\"></a>Load the Neural Network For Detection</h2><p>This part is simple, we only need to load <code>vocab_tokenizer</code> and the neural network for detection. The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">vocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)</div><div class=\"line\">model = load_model(config.model_file_location, config.weights_file_location)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_language</span><span class=\"params\">(binary_list)</span>:</span></div><div class=\"line\">    i = np.argmax(binary_list)</div><div class=\"line\">    <span class=\"keyword\">return</span> all_languages[i]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_neural_network_input</span><span class=\"params\">(code)</span>:</span></div><div class=\"line\">    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)</div><div class=\"line\">    <span class=\"keyword\">return</span> pad_sequences([encoded_sentence], maxlen=input_length)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detect</span><span class=\"params\">(code)</span>:</span></div><div class=\"line\">    y_proba = model.predict(get_neural_network_input(code))</div><div class=\"line\">    <span class=\"keyword\">return</span> to_language(y_proba)</div></pre></td></tr></table></figure>\n<p>Use it like this.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">code = <span class=\"string\">\"\"\"</span></div><div class=\"line\">def test():</div><div class=\"line\">    print(\"something\")</div><div class=\"line\">\"\"\"</div><div class=\"line\">print(detect(code)) <span class=\"comment\"># Python</span></div></pre></td></tr></table></figure>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>All in all, here are the steps to build the neural network.</p>\n<ol>\n<li>Build vocabulary.</li>\n<li>Build <code>vocab_tokenizer</code> using vocabulary, which is used to convert words into numbers.</li>\n<li>Load words into <code>Word2Vec</code> to build word vectors.</li>\n<li>Load word vectors into the neural network as part of the input layer.</li>\n<li>Load all the training data, extract words that are in the vocabulary, convert them into numbers using <code>vocab_tokenizer</code>, load them into the neural network for training.</li>\n</ol>\n<p>Three steps for detection:</p>\n<ol>\n<li>Extract words in the code and remove those that are not in the vocabulary.</li>\n<li>Convert those words into number through <code>vocab_tokenizer</code>, and load them into the neural network.</li>\n<li>Choose the language which has the most probability, which the answer we want.</li>\n</ol>\n<h1 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h1><p>You may have already found out that, we only saved <code>vocab_tokenizer</code> and the neural network(which lies in the model directory), why didn’t we save <code>word2vec</code> and <code>vocab</code>?</p>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>If you have any question, please leave it in the comment below, I’ll try to answer it.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>This post introduces a way to use deep learning to detect programming languages. Take the following code as an example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>We will get an answer <code>python</code> if we use the program to be introduced in the post to detect the language of the above code, which is also the correct answer. In fact, through a preliminary test, the accuracy of the program is around 90%. We have reason to believe that we are able to get a better result if the training dataset is larger or further tuning is conducted.</p>\n<h1 id=\"Execution\"><a href=\"#Execution\" class=\"headerlink\" title=\"Execution\"></a>Execution</h1><p>First let’s try running the program, so we can have an intuitive perspective on what the program is about.</p>\n<ol>\n<li><p>Install third-party libraries</p>\n<ul>\n<li><p><a href=\"https://www.anaconda.com/download/\" target=\"_blank\" rel=\"external\">Anaconda(Python 3.6+)</a></p>\n</li>\n<li><p>Gensim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conda install -c anaconda gensim</div></pre></td></tr></table></figure>\n</li>\n<li><p>Keras</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">conda install -c conda-forge keras</div></pre></td></tr></table></figure>\n</li>\n<li><p>Tensorflow</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pip install tensorflow==1.3.0</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>Download the program</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> git@github.com:searene/demos.git &amp;&amp; <span class=\"built_in\">cd</span> demos/PLDetector-demo</div></pre></td></tr></table></figure>\n</li>\n<li><p>Train the model</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m src.neural_network_trainer                                                  </div><div class=\"line\">Using TensorFlow backend.                                                                                             </div><div class=\"line\">...</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">Layer (<span class=\"built_in\">type</span>)                 Output Shape              Param <span class=\"comment\">#</span></div><div class=\"line\">=================================================================</div><div class=\"line\">embedding_1 (Embedding)      (None, 500, 100)          773100</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">conv1d_1 (Conv1D)            (None, 496, 128)          64128                                                          </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">max_pooling1d_1 (MaxPooling1 (None, 248, 128)          0                                                              </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">flatten_1 (Flatten)          (None, 31744)             0                                                              </div><div class=\"line\">_________________________________________________________________                                                     </div><div class=\"line\">dense_1 (Dense)              (None, 8)                 253960                                                         </div><div class=\"line\">=================================================================                                                     </div><div class=\"line\">Total params: 1,091,188                                                                                               </div><div class=\"line\">Trainable params: 318,088</div><div class=\"line\">Non-trainable params: 773,100</div><div class=\"line\">_________________________________________________________________</div><div class=\"line\">INFO:root:None</div><div class=\"line\">Epoch 1/10</div><div class=\"line\"> - 1s - loss: 0.4304 - acc: 0.8823</div><div class=\"line\">Epoch 2/10</div><div class=\"line\"> - 1s - loss: 0.1357 - acc: 0.9657</div><div class=\"line\">Epoch 3/10</div><div class=\"line\"> - 1s - loss: 0.0706 - acc: 0.9788</div><div class=\"line\">Epoch 4/10</div><div class=\"line\"> - 1s - loss: 0.0392 - acc: 0.9887</div><div class=\"line\">Epoch 5/10</div><div class=\"line\"> - 1s - loss: 0.0266 - acc: 0.9927</div><div class=\"line\">Epoch 6/10</div><div class=\"line\"> - 1s - loss: 0.0203 - acc: 0.9945</div><div class=\"line\">Epoch 7/10</div><div class=\"line\"> - 1s - loss: 0.0169 - acc: 0.9948</div><div class=\"line\">Epoch 8/10</div><div class=\"line\"> - 1s - loss: 0.0145 - acc: 0.9956</div><div class=\"line\">Epoch 9/10</div><div class=\"line\"> - 1s - loss: 0.0131 - acc: 0.9959                                                                                    </div><div class=\"line\">Epoch 10/10                                                                                                           </div><div class=\"line\"> - 1s - loss: 0.0120 - acc: 0.9959                                                                                    </div><div class=\"line\">INFO:root:Test Accuracy: 94.642857</div></pre></td></tr></table></figure>\n<p>We will have three important files as soon as the above step is completed.</p>\n<ul>\n<li>resources/models/model.h5</li>\n<li>resources/models/model.json</li>\n<li>resources/vocab_tokenizer</li>\n</ul>\n<p>We will introduce the three files in detail later on.</p>\n</li>\n<li><p>Detection</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">python -m src.detector</div><div class=\"line\"></div><div class=\"line\">Using TensorFlow backend.</div><div class=\"line\">Python</div></pre></td></tr></table></figure>\n<p>The following python code is detected by default by <code>detector.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>Of course you can modify <code>detector.py</code> to detect other code.</p>\n</li>\n</ol>\n<h1 id=\"Project-Structure\"><a href=\"#Project-Structure\" class=\"headerlink\" title=\"Project Structure\"></a>Project Structure</h1><p>Let’s first have a rough idea of the project structure. Don’t worry, it will only take 1 ~ 2 minutes.</p>\n<ul>\n<li><p>resources/code/train: training data. The name of each subfolder representes a programming language. There are around 10 code files in each subfolder, i.e. 10 files per programming language for training.</p>\n<p><img src=\"/images/2017-11-26-163206_448x610_scrot.png\" alt=\"train文件夹结构\"></p>\n</li>\n<li><p>resources/code/test: the same as <code>resources/code/train</code> except that it’s used for testing accuracy instead of training.</p>\n</li>\n<li><code>models</code> directory &amp; <code>vocab_tokenizer</code>: stored training result</li>\n<li>src/config.py: some constants used in the program</li>\n<li>src/neural_network_trainer.py: code used to train the model</li>\n<li>src/detector.py: code used to load the model and detect programming languages</li>\n</ul>\n<h1 id=\"How-It-Works\"><a href=\"#How-It-Works\" class=\"headerlink\" title=\"How It Works\"></a>How It Works</h1><h2 id=\"Construct-Vocabulary\"><a href=\"#Construct-Vocabulary\" class=\"headerlink\" title=\"Construct Vocabulary\"></a>Construct Vocabulary</h2><p>let’s first get our heads around the training process, aka the contents in <code>neural_network_trainer.py</code>. the first step to train the neural network is to build a vocabulary. Vocabulary is actually a list of words, which consists of some common words in the training data. When we are done with building a vocabulary and start detecting the programming language, we will try splitting the code into a list of words, and remove those which are not in the vocabulary, then we put the remaining words into the neural network for detection.</p>\n<p>OK, you might want to ask, why removing words that are not in the vocabulary? Wouldn’t it work if we just put all the words into the neural network? Actually, this is impossible. Because each word in the vocabulary is mapped to a word vector, which is constructed during training. So words that are not in the vocabulary don’t have word vectors to map, which means the neural network is unable to process this word.</p>\n<p>So how do we build the vocabulary? It’s fairly easy, we just need to scan all the code in <code>resources/code/train</code> and extract common words in it. Those common words will make up our vocabulary. Key code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_vocab</span><span class=\"params\">(train_data_dir)</span>:</span></div><div class=\"line\">    vocabulary = Counter()</div><div class=\"line\">    files = get_files(train_data_dir)</div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">        words = load_words_from_file(f)</div><div class=\"line\">        vocabulary.update(words)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># remove rare words</span></div><div class=\"line\">    min_count = <span class=\"number\">5</span></div><div class=\"line\">    vocabulary = [word <span class=\"keyword\">for</span> word, count <span class=\"keyword\">in</span> vocabulary.items() <span class=\"keyword\">if</span> count &gt;= min_count]</div><div class=\"line\">    <span class=\"keyword\">return</span> vocabulary</div></pre></td></tr></table></figure>\n<p>Run <code>build_vocab</code> to get the vocabulary.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">vocab = build_vocab(config.train_data_dir)</div><div class=\"line\">print(vocab) <span class=\"comment\"># [..., 'script', 'text', 'head', 'appendChild', 'parentNode', 'removeChild', ...]</span></div></pre></td></tr></table></figure>\n<p>So, as you can see, the vocabulary is just a list of words, that’s it.</p>\n<h2 id=\"Build-vocab-tokenizer\"><a href=\"#Build-vocab-tokenizer\" class=\"headerlink\" title=\"Build vocab_tokenizer\"></a>Build vocab_tokenizer</h2><p>The next step is to build <code>vocab_tokenizer</code>. So what is <code>vocab_tokenzier</code>? It’s a simple variable, you can imagine it as a dictionary, which maps each word in the vocabulary to a number. Why would we map those words to numbers? Because our neural network is only able to run with numbers, rather than strings.</p>\n<p>We use <code>Tokenizer</code> provided by <code>Keras</code> to build <code>vocab_tokenizer</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_vocab_tokenizer_from_set</span><span class=\"params\">(vocab)</span>:</span></div><div class=\"line\">    vocab_tokenizer = Tokenizer(lower=<span class=\"keyword\">False</span>, filters=<span class=\"string\">\"\"</span>)</div><div class=\"line\">    vocab_tokenizer.fit_on_texts(vocab)</div><div class=\"line\">    <span class=\"keyword\">return</span> vocab_tokenizer</div></pre></td></tr></table></figure>\n<p>Then we save this <code>vocab_tokenizer</code> as a file, to be used later.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_vocab_tokenizer</span><span class=\"params\">(vocab_tokenzier_location, vocab_tokenizer)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">with</span> open(vocab_tokenzier_location, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        pickle.dump(vocab_tokenizer, f, protocol=pickle.HIGHEST_PROTOCOL)</div></pre></td></tr></table></figure>\n<h2 id=\"Build-Word-Vectors\"><a href=\"#Build-Word-Vectors\" class=\"headerlink\" title=\"Build Word Vectors\"></a>Build Word Vectors</h2><p>Before diving into word vectors, we first need to know what they are.</p>\n<p>To put it simply, word vectors are just vectors, and each word in the vocabulary is mapped to a word vector. You may still not get it. This may seem too simple, let’s take the following Java code as an example.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"something\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The <code>word2vec</code> variable we are building here is actually a dictionary, which is like this(word -&gt; word_vector).</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">word2vec = &#123;</div><div class=\"line\">    <span class=\"string\">'public'</span>: [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>],</div><div class=\"line\">    <span class=\"string\">'static'</span>: [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>],</div><div class=\"line\">    <span class=\"string\">'main'</span>: [<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'String'</span>: [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'args'</span>: [<span class=\"number\">1</span>, <span class=\"number\">40</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'System'</span>: [<span class=\"number\">20</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'out'</span>: [<span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'println'</span>: [<span class=\"number\">1</span>, <span class=\"number\">39</span>, <span class=\"number\">3</span>],</div><div class=\"line\">    <span class=\"string\">'something'</span>: [<span class=\"number\">1</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Here comes the question. Why would we build word vectors, instead of just using the number given by <code>vocab_tokenizer</code>? This is because word vectors have a very special and useful characteristic: <strong>The more close two words are, the smaller their word vectors are</strong>(Note that the calculation of the distance between vectors are of the field of math, which can be dealt with using multiple methods. It doesn’t matter if you don’t know how to calculate it, you only need to know the distance between vectors can be calculated). This characteristic will boost the accuracy of our neural network dramatically.</p>\n<p>For example, <code>public</code> and <code>staic</code> are only seen together in Java, so the distance between their word vectors should be small. However, <code>public</code> and <code>System</code> is not that close, i.e. we may only see one of them at a time, so the distance between their word vectors are larger.</p>\n<p>Now that we know why it is necessary to build word vectors, the next problem is how we build them. There are multiple ways to do it. Here we use the <code>Word2Vec</code> algorithm provided by <code>gensim</code> to achieve it. Steps are as follows.</p>\n<ol>\n<li>Load all the training data, extract those words which are in the vocabulary.</li>\n<li>Map each word into its respective number by using <code>vocab_tokenizer</code>.</li>\n<li>Put those numbers into <code>Word2Vec</code> library and obtain word vectors.</li>\n</ol>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_word2vec</span><span class=\"params\">(train_data_dir, vocab_tokenizer)</span>:</span></div><div class=\"line\">    all_words = []</div><div class=\"line\">    files = get_files(train_data_dir)</div><div class=\"line\">    <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> files:</div><div class=\"line\">        words = load_words_from_file(f)</div><div class=\"line\">        all_words.append([word <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words <span class=\"keyword\">if</span> is_in_vocab(word, vocab_tokenizer)])</div><div class=\"line\">    model = Word2Vec(all_words, size=<span class=\"number\">100</span>, window=<span class=\"number\">5</span>, workers=<span class=\"number\">8</span>, min_count=<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;word: model[word] <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> model.wv.index2word&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Build-the-Neural-Network\"><a href=\"#Build-the-Neural-Network\" class=\"headerlink\" title=\"Build the Neural Network\"></a>Build the Neural Network</h2><p>Everything is ready, now it’s the time to train the neural network! First we need to know the input and output of the neural network, take the following code as an example.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    print(<span class=\"string\">\"something\"</span>)</div></pre></td></tr></table></figure>\n<p>Map <code>def</code>, <code>test</code>, <code>print</code> and <code>something</code> into their respective numbers, we get the input</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">input = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</div></pre></td></tr></table></figure>\n<p>The output of the neural network is the probability of each language.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">output = [<span class=\"number\">0.5</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.04</span>, <span class=\"number\">0.06</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.1</span>, <span class=\"number\">0.05</span>, <span class=\"number\">0.05</span>]</div></pre></td></tr></table></figure>\n<p>The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">all_languages = [<span class=\"string\">\"Python\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"Java\"</span>, <span class=\"string\">\"Scala\"</span>, <span class=\"string\">\"Javascript\"</span>, <span class=\"string\">\"CSS\"</span>, <span class=\"string\">\"C#\"</span>, <span class=\"string\">\"HTML\"</span>]</div></pre></td></tr></table></figure>\n<p>So we know the above code is most likely to be written by Python, because Python has the most probability(0.5)</p>\n<p>Now that we know the input and output, let me introduce how the neural network is constructed. There are three parts in total.</p>\n<ol>\n<li>Embedding Layer: it’s used to map each word into its respective word vector</li>\n<li>Conv1D, MaxPooling1D: this part is a classic deep learning layer. To put it simply, what it does is extraction and transformation. Refer to corresponding tutorials of deep learning for details.</li>\n<li>Flatten, Dense: convert the multi-dimensional array into one-dimensional, and output the prediction.</li>\n</ol>\n<p>Key code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build_model</span><span class=\"params\">(train_data_dir, vocab_tokenizer, word2vec)</span>:</span></div><div class=\"line\">    weight_matrix = build_weight_matrix(vocab_tokenizer, word2vec)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\"># build the embedding layer</span></div><div class=\"line\">    input_dim = len(vocab_tokenizer.word_index) + <span class=\"number\">1</span></div><div class=\"line\">    output_dim = get_word2vec_dimension(word2vec)</div><div class=\"line\">    x_train, y_train = load_data(train_data_dir, vocab_tokenizer)</div><div class=\"line\"></div><div class=\"line\">    embedding_layer = Embedding(input_dim, output_dim, weights=[weight_matrix], input_length=input_length,</div><div class=\"line\">                                trainable=<span class=\"keyword\">False</span>)</div><div class=\"line\">    model = Sequential()</div><div class=\"line\">    model.add(embedding_layer)</div><div class=\"line\">    model.add(Conv1D(filters=<span class=\"number\">128</span>, kernel_size=<span class=\"number\">5</span>, activation=<span class=\"string\">\"relu\"</span>))</div><div class=\"line\">    model.add(MaxPooling1D(pool_size=<span class=\"number\">2</span>))</div><div class=\"line\">    model.add(Flatten())</div><div class=\"line\">    model.add(Dense(len(all_languages), activation=<span class=\"string\">\"sigmoid\"</span>))</div><div class=\"line\">    logging.info(model.summary())</div><div class=\"line\">    model.compile(loss=<span class=\"string\">'binary_crossentropy'</span>, optimizer=<span class=\"string\">'adam'</span>, metrics=[<span class=\"string\">'accuracy'</span>])</div><div class=\"line\">    model.fit(x_train, y_train, epochs=<span class=\"number\">10</span>, verbose=<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> model</div></pre></td></tr></table></figure>\n<p>All right, we built our neural network, not a trivial achievement! Then let’s write a function, which uses the neural network to detect test code, check out its accuracy.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate_model</span><span class=\"params\">(test_data_dir, vocab_tokenizer, model)</span>:</span></div><div class=\"line\">    x_test, y_test = load_data(test_data_dir, vocab_tokenizer)</div><div class=\"line\">    loss, acc = model.evaluate(x_test, y_test, verbose=<span class=\"number\">0</span>)</div><div class=\"line\">    logging.info(<span class=\"string\">'Test Accuracy: %f'</span> % (acc * <span class=\"number\">100</span>))</div></pre></td></tr></table></figure>\n<p>As what we have got before, the test accuracy is around 94%~95%, which is good enough. Let’s save the neural network as files, so we can load it when detecting.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">save_model</span><span class=\"params\">(model, model_file_location, weights_file_location)</span>:</span></div><div class=\"line\">    os.makedirs(os.path.dirname(model_file_location), exist_ok=<span class=\"keyword\">True</span>)</div><div class=\"line\">    <span class=\"keyword\">with</span> open(model_file_location, <span class=\"string\">\"w\"</span>) <span class=\"keyword\">as</span> f:</div><div class=\"line\">        f.write(model.to_json())</div><div class=\"line\">    model.save_weights(weights_file_location)</div></pre></td></tr></table></figure>\n<h2 id=\"Load-the-Neural-Network-For-Detection\"><a href=\"#Load-the-Neural-Network-For-Detection\" class=\"headerlink\" title=\"Load the Neural Network For Detection\"></a>Load the Neural Network For Detection</h2><p>This part is simple, we only need to load <code>vocab_tokenizer</code> and the neural network for detection. The code is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">vocab_tokenizer = load_vocab_tokenizer(config.vocab_tokenizer_location)</div><div class=\"line\">model = load_model(config.model_file_location, config.weights_file_location)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_language</span><span class=\"params\">(binary_list)</span>:</span></div><div class=\"line\">    i = np.argmax(binary_list)</div><div class=\"line\">    <span class=\"keyword\">return</span> all_languages[i]</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_neural_network_input</span><span class=\"params\">(code)</span>:</span></div><div class=\"line\">    encoded_sentence = load_encoded_sentence_from_string(code, vocab_tokenizer)</div><div class=\"line\">    <span class=\"keyword\">return</span> pad_sequences([encoded_sentence], maxlen=input_length)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detect</span><span class=\"params\">(code)</span>:</span></div><div class=\"line\">    y_proba = model.predict(get_neural_network_input(code))</div><div class=\"line\">    <span class=\"keyword\">return</span> to_language(y_proba)</div></pre></td></tr></table></figure>\n<p>Use it like this.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">code = <span class=\"string\">\"\"\"</span></div><div class=\"line\">def test():</div><div class=\"line\">    print(\"something\")</div><div class=\"line\">\"\"\"</div><div class=\"line\">print(detect(code)) <span class=\"comment\"># Python</span></div></pre></td></tr></table></figure>\n<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>All in all, here are the steps to build the neural network.</p>\n<ol>\n<li>Build vocabulary.</li>\n<li>Build <code>vocab_tokenizer</code> using vocabulary, which is used to convert words into numbers.</li>\n<li>Load words into <code>Word2Vec</code> to build word vectors.</li>\n<li>Load word vectors into the neural network as part of the input layer.</li>\n<li>Load all the training data, extract words that are in the vocabulary, convert them into numbers using <code>vocab_tokenizer</code>, load them into the neural network for training.</li>\n</ol>\n<p>Three steps for detection:</p>\n<ol>\n<li>Extract words in the code and remove those that are not in the vocabulary.</li>\n<li>Convert those words into number through <code>vocab_tokenizer</code>, and load them into the neural network.</li>\n<li>Choose the language which has the most probability, which the answer we want.</li>\n</ol>\n<h1 id=\"Exercise\"><a href=\"#Exercise\" class=\"headerlink\" title=\"Exercise\"></a>Exercise</h1><p>You may have already found out that, we only saved <code>vocab_tokenizer</code> and the neural network(which lies in the model directory), why didn’t we save <code>word2vec</code> and <code>vocab</code>?</p>\n<h1 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h1><p>If you have any question, please leave it in the comment below, I’ll try to answer it.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjhacqcd00068arflm9vc8un","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqci000c8arfg9lqsv2p"},{"post_id":"cjjhacqc300008arfnri2us31","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqck000g8arf8n0yd4rz"},{"post_id":"cjjhacqce00078arfjajspane","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqcm000i8arfphukudsb"},{"post_id":"cjjhacqc700028arf1fb1zfno","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqcn000m8arfwqnt4xd5"},{"post_id":"cjjhacqcj000d8arf9vn8uxwe","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqco000p8arf43mepaum"},{"post_id":"cjjhacqck000h8arf76wpwtcp","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqcp000t8arfujis19tm"},{"post_id":"cjjhacqcc00058arfsdzv1nso","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqcq000x8arf73f2fo2s"},{"post_id":"cjjhacqch000b8arf3ud1cicc","category_id":"cjjhacqcm000k8arf2o1ireo5","_id":"cjjhacqcr00108arf3e304rj0"},{"post_id":"cjjhacqcp000v8arfiwrvaas9","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqcs00138arf8mv3qbfh"},{"post_id":"cjjhacqcm000j8arflt6cv71w","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqcu00168arf4tlun8td"},{"post_id":"cjjhacqcq000y8arfve8b5103","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqcv00198arft3fr3xbo"},{"post_id":"cjjhacqcr00118arfpepukpkw","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqcw001b8arfsna8iyaj"},{"post_id":"cjjhacqcn000n8arfhyobz1bx","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqcy001e8arfgu4xqqq8"},{"post_id":"cjjhacqct00148arfjtvl4gm3","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqcz001h8arfw8mvrd0d"},{"post_id":"cjjhacqcu00178arf4ka9jnkb","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqd0001k8arfurn0bqgy"},{"post_id":"cjjhacqco000q8arf5r6eb9t6","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqd1001o8arfk6mvmfrm"},{"post_id":"cjjhacqcv001a8arf6745b3pr","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqd2001r8arfff00clyx"},{"post_id":"cjjhacqcx001c8arfi5kcrm2b","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqd3001u8arfs1zzbfk0"},{"post_id":"cjjhacqcy001f8arfibixnxov","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqd5001x8arfenlzrdqk"},{"post_id":"cjjhacqcz001i8arf10cn6nk5","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqd600208arfah2gyfrw"},{"post_id":"cjjhacqd0001m8arfgbo1fmx9","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqd700228arfcukn4rn0"},{"post_id":"cjjhacqd1001p8arfa6ikccn9","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqd900258arf8jxia3mh"},{"post_id":"cjjhacqd2001s8arfmwga3k3i","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdb00288arftfur3p86"},{"post_id":"cjjhacqd4001w8arfktgcgvcg","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdd002c8arfcvrs7o4f"},{"post_id":"cjjhacqd5001y8arfbl4w0j5h","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqde002e8arflc9qs5nu"},{"post_id":"cjjhacqd600218arfi146pmgh","category_id":"cjjhacqcm000k8arf2o1ireo5","_id":"cjjhacqdf002g8arfxubpn2mw"},{"post_id":"cjjhacqd700238arfv8404mn3","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdh002k8arfgg2nhxf4"},{"post_id":"cjjhacqd900268arfbt5icxnz","category_id":"cjjhacqcm000k8arf2o1ireo5","_id":"cjjhacqdi002n8arffoz9iifg"},{"post_id":"cjjhacqdb00298arfpzhr0vup","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdj002r8arfxhqa9g3q"},{"post_id":"cjjhacqdd002d8arf76cm6sbx","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdk002u8arf2r2v5wss"},{"post_id":"cjjhacqde002f8arfp1qz15fu","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdm002y8arfov7fdpo8"},{"post_id":"cjjhacqdg002i8arfiotr9zc7","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdn00318arfxmgvzp9p"},{"post_id":"cjjhacqdh002l8arf03um4ko3","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdo00358arfaawqex2e"},{"post_id":"cjjhacqdi002p8arf8k3paxfc","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdp00388arfacuuwfsq"},{"post_id":"cjjhacqdk002s8arfk9ma7i5a","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdq003c8arfe4oqh5dl"},{"post_id":"cjjhacqdl002v8arfygpvfare","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdr003e8arfyek4p5s5"},{"post_id":"cjjhacqdm002z8arfg6t91j53","category_id":"cjjhacqcm000k8arf2o1ireo5","_id":"cjjhacqds003i8arf2sxrddkf"},{"post_id":"cjjhacqdn00328arfe6or1v8i","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqdu003l8arfvh7za70c"},{"post_id":"cjjhacqdo00368arf6we1jj04","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdw003p8arfqj14ckq6"},{"post_id":"cjjhacqdp00398arfnltqc73a","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdx003t8arfg6lm1k2q"},{"post_id":"cjjhacqdq003d8arfa0g7xxqd","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqdy003w8arfido3p7l8"},{"post_id":"cjjhacqdr003f8arfvx0wpp25","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqe100408arfmnxu17cv"},{"post_id":"cjjhacqds003j8arfkxv5pjuv","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqe200438arfbgfhypvm"},{"post_id":"cjjhacqdw003q8arfal8uav4a","category_id":"cjjhacqcm000k8arf2o1ireo5","_id":"cjjhacqe400478arfyvxcf9de"},{"post_id":"cjjhacqdx003u8arfh81kat3i","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqe5004a8arf6fo1cd81"},{"post_id":"cjjhacqdy003y8arfqcmx6mbn","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqe7004e8arfuwgoge9g"},{"post_id":"cjjhacqdu003m8arf2qsh3bzi","category_id":"cjjhacqdx003r8arf5u2e9q53","_id":"cjjhacqe8004h8arfz7v04rlf"},{"post_id":"cjjhacqe100418arfcqwonmz4","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqe9004l8arf6lt7ig7o"},{"post_id":"cjjhacqe400488arfijtcbtyl","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqeb004r8arfn7tbh83v"},{"post_id":"cjjhacqe5004b8arf66zbflrq","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqec004v8arfavloeeyb"},{"post_id":"cjjhacqe7004f8arfl7ye1tel","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqed004x8arft0fajiwn"},{"post_id":"cjjhacqe8004i8arftuwscl6u","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqee00508arfu0etsnvj"},{"post_id":"cjjhacqea004p8arfjfp6domw","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqef00538arflb6zitte"},{"post_id":"cjjhacqeb004t8arfr7mjnbn7","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqeg00578arfs5b7ujlb"},{"post_id":"cjjhacqec004w8arfarumobij","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqeh005a8arfaew4asti"},{"post_id":"cjjhacqed004y8arfo4mmr88b","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqej005e8arf744jmxfh"},{"post_id":"cjjhacqee00528arfwgkamihw","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqek005h8arfumwnmidc"},{"post_id":"cjjhacqef00558arfrrqf4arn","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqem005k8arfjl41sy93"},{"post_id":"cjjhacqeh00588arf0h33esgv","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqen005m8arfw3gaje54"},{"post_id":"cjjhacqei005b8arf4dxvnpz5","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqeo005p8arfdpn6wc39"},{"post_id":"cjjhacqej005f8arfkri83rwj","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqep005s8arfeb7jzzju"},{"post_id":"cjjhacqel005i8arfe8ekch3e","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqeq005u8arf55ngnmcf"},{"post_id":"cjjhacqem005l8arf1zurvjt9","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqer005x8arfgg0b6dvc"},{"post_id":"cjjhacqen005n8arfgnu0ryfb","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqes00608arfpyc8pe16"},{"post_id":"cjjhacqep005r8arfuv7uvj3n","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqeu00648arfyhwlugk5"},{"post_id":"cjjhacqep005t8arfu8g8gxjw","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqev00678arf58eio2tj"},{"post_id":"cjjhacqeq005v8arfdnm5ln20","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqew006b8arfy9bn3ojo"},{"post_id":"cjjhacqes005z8arfhlcf2mwv","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqex006e8arfgnzvi3xq"},{"post_id":"cjjhacqet00628arfftlyx5ki","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqey006i8arf53yudx36"},{"post_id":"cjjhacqeu00668arfc6q56yci","category_id":"cjjhacqcp000r8arfbvcu14i4","_id":"cjjhacqez006l8arf8lhcvub8"},{"post_id":"cjjhacqev00698arf45ujrpgo","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqez006o8arfmas7x1c3"},{"post_id":"cjjhacqew006d8arff2kdoga6","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqf0006q8arfhzafm28e"},{"post_id":"cjjhacqex006f8arfzou2hmnp","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqf0006s8arfkycjxkj0"},{"post_id":"cjjhacqey006j8arfapp8j25z","category_id":"cjjhacqc900038arfppub3409","_id":"cjjhacqf0006v8arfa8h0eppj"},{"post_id":"cjjhacqe200448arfv5fc0d98","category_id":"cjjhacqc900038arfppub3409","_id":"cjkgarq1k0001fhrf295caecx"}],"PostTag":[{"post_id":"cjjhacqc300008arfnri2us31","tag_id":"cjjhacqcb00048arf3midc4kp","_id":"cjjhacqch000a8arf5rvs1u1x"},{"post_id":"cjjhacqc700028arf1fb1zfno","tag_id":"cjjhacqcf00098arfofo7xa5j","_id":"cjjhacqco000o8arf6u2qezol"},{"post_id":"cjjhacqc700028arf1fb1zfno","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqcp000s8arf7hmeoool"},{"post_id":"cjjhacqcc00058arfsdzv1nso","tag_id":"cjjhacqcn000l8arf6dki6imy","_id":"cjjhacqcq000w8arf2pt6cc1i"},{"post_id":"cjjhacqcd00068arflm9vc8un","tag_id":"cjjhacqcp000u8arf048f89hr","_id":"cjjhacqcz001g8arf7sihpkf7"},{"post_id":"cjjhacqcd00068arflm9vc8un","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqd0001j8arfjv3fal4y"},{"post_id":"cjjhacqcd00068arflm9vc8un","tag_id":"cjjhacqcv00188arf94seuu1a","_id":"cjjhacqd1001n8arf292g6b9z"},{"post_id":"cjjhacqce00078arfjajspane","tag_id":"cjjhacqcx001d8arfoqr3m3nt","_id":"cjjhacqd2001q8arfx2ol7xnd"},{"post_id":"cjjhacqch000b8arf3ud1cicc","tag_id":"cjjhacqd0001l8arf3ze4ea3t","_id":"cjjhacqd4001v8arf5ak28yw6"},{"post_id":"cjjhacqcj000d8arf9vn8uxwe","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqdb00278arfod8im2lb"},{"post_id":"cjjhacqcj000d8arf9vn8uxwe","tag_id":"cjjhacqd6001z8arfg53t1mq7","_id":"cjjhacqdc002a8arfq9yuw047"},{"post_id":"cjjhacqck000h8arf76wpwtcp","tag_id":"cjjhacqd900248arfpk0y5o6m","_id":"cjjhacqdh002j8arfe5rhs2ip"},{"post_id":"cjjhacqck000h8arf76wpwtcp","tag_id":"cjjhacqdc002b8arfq6i4xneo","_id":"cjjhacqdi002m8arffe6btapy"},{"post_id":"cjjhacqde002f8arfp1qz15fu","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqdj002q8arfcksvyv2d"},{"post_id":"cjjhacqdh002l8arf03um4ko3","tag_id":"cjjhacqcf00098arfofo7xa5j","_id":"cjjhacqdk002t8arfcpohouqg"},{"post_id":"cjjhacqdh002l8arf03um4ko3","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqdm002x8arfc048h0tv"},{"post_id":"cjjhacqcp000v8arfiwrvaas9","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqdm00308arfrg6zfcuk"},{"post_id":"cjjhacqcp000v8arfiwrvaas9","tag_id":"cjjhacqdi002o8arf74f0bo32","_id":"cjjhacqdo00348arfub9elzkl"},{"post_id":"cjjhacqcq000y8arfve8b5103","tag_id":"cjjhacqdl002w8arfbymz1n1o","_id":"cjjhacqdp00378arf039lnnf1"},{"post_id":"cjjhacqdo00368arf6we1jj04","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqdq003b8arfaqcl2tzh"},{"post_id":"cjjhacqdq003d8arfa0g7xxqd","tag_id":"cjjhacqdc002b8arfq6i4xneo","_id":"cjjhacqds003h8arfyhfqbws3"},{"post_id":"cjjhacqcu00178arf4ka9jnkb","tag_id":"cjjhacqdn00338arfdtx5n636","_id":"cjjhacqdu003k8arfi76kuzsx"},{"post_id":"cjjhacqcu00178arf4ka9jnkb","tag_id":"cjjhacqdc002b8arfq6i4xneo","_id":"cjjhacqdw003o8arfhl9dt8ij"},{"post_id":"cjjhacqcx001c8arfi5kcrm2b","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqdx003s8arfkkcrho1k"},{"post_id":"cjjhacqcx001c8arfi5kcrm2b","tag_id":"cjjhacqdi002o8arf74f0bo32","_id":"cjjhacqdy003v8arf685lfy87"},{"post_id":"cjjhacqcz001i8arf10cn6nk5","tag_id":"cjjhacqdv003n8arfqwbxxu7g","_id":"cjjhacqe1003z8arfewasptph"},{"post_id":"cjjhacqcz001i8arf10cn6nk5","tag_id":"cjjhacqcf00098arfofo7xa5j","_id":"cjjhacqe200428arft7ov2vnp"},{"post_id":"cjjhacqcz001i8arf10cn6nk5","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqe400468arfaxiizbw5"},{"post_id":"cjjhacqdx003u8arfh81kat3i","tag_id":"cjjhacqdi002o8arf74f0bo32","_id":"cjjhacqe500498arfkag581r2"},{"post_id":"cjjhacqdx003u8arfh81kat3i","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqe7004d8arftwbhx97d"},{"post_id":"cjjhacqd1001p8arfa6ikccn9","tag_id":"cjjhacqdy003x8arfgd9k5veh","_id":"cjjhacqe8004g8arf9t1mmgbh"},{"post_id":"cjjhacqd1001p8arfa6ikccn9","tag_id":"cjjhacqe300458arf3l8qg0r1","_id":"cjjhacqe9004k8arf9oiob5ai"},{"post_id":"cjjhacqe7004f8arfl7ye1tel","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqea004n8arfjbqd52e8"},{"post_id":"cjjhacqe7004f8arfl7ye1tel","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqeb004q8arfmlsfj6hw"},{"post_id":"cjjhacqd2001s8arfmwga3k3i","tag_id":"cjjhacqe6004c8arfh0vigi2p","_id":"cjjhacqec004u8arfip5ph8jv"},{"post_id":"cjjhacqd4001w8arfktgcgvcg","tag_id":"cjjhacqe9004j8arfvceam4w2","_id":"cjjhacqee00518arfnvrwpqm8"},{"post_id":"cjjhacqd4001w8arfktgcgvcg","tag_id":"cjjhacqeb004s8arfytyau8pl","_id":"cjjhacqef00548arfq9n35nrp"},{"post_id":"cjjhacqd600218arfi146pmgh","tag_id":"cjjhacqee004z8arf777b9ii7","_id":"cjjhacqeh00598arf8v0nxf69"},{"post_id":"cjjhacqd600218arfi146pmgh","tag_id":"cjjhacqd0001l8arf3ze4ea3t","_id":"cjjhacqej005c8arffaw8nogo"},{"post_id":"cjjhacqd700238arfv8404mn3","tag_id":"cjjhacqeg00568arfquezcrvn","_id":"cjjhacqek005g8arfnrdv5gzg"},{"post_id":"cjjhacqem005l8arf1zurvjt9","tag_id":"cjjhacqcx001d8arfoqr3m3nt","_id":"cjjhacqeo005o8arfuri5krcu"},{"post_id":"cjjhacqd900268arfbt5icxnz","tag_id":"cjjhacqee004z8arf777b9ii7","_id":"cjjhacqer005y8arfdshjmlb3"},{"post_id":"cjjhacqd900268arfbt5icxnz","tag_id":"cjjhacqem005j8arfuzk60guh","_id":"cjjhacqes00618arfxpsenv55"},{"post_id":"cjjhacqd900268arfbt5icxnz","tag_id":"cjjhacqeo005q8arfpy99o42t","_id":"cjjhacqeu00658arfl5o4ldml"},{"post_id":"cjjhacqdd002d8arf76cm6sbx","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqev00688arfl97i8k4x"},{"post_id":"cjjhacqdd002d8arf76cm6sbx","tag_id":"cjjhacqdi002o8arf74f0bo32","_id":"cjjhacqew006c8arfr4q2koj6"},{"post_id":"cjjhacqew006d8arff2kdoga6","tag_id":"cjjhacqe6004c8arfh0vigi2p","_id":"cjjhacqey006h8arfzpl86t4p"},{"post_id":"cjjhacqdg002i8arfiotr9zc7","tag_id":"cjjhacqe9004j8arfvceam4w2","_id":"cjjhacqez006k8arf493z9mu5"},{"post_id":"cjjhacqdg002i8arfiotr9zc7","tag_id":"cjjhacqev006a8arferxfpz3i","_id":"cjjhacqez006n8arfnkwt5m4v"},{"post_id":"cjjhacqdi002p8arf8k3paxfc","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqf0006p8arf725vhzcd"},{"post_id":"cjjhacqdi002p8arf8k3paxfc","tag_id":"cjjhacqey006g8arf1vfbvrs5","_id":"cjjhacqf0006r8arfhz4appja"},{"post_id":"cjjhacqdk002s8arfk9ma7i5a","tag_id":"cjjhacqez006m8arfcejf0g0m","_id":"cjjhacqf0006u8arfk6tcjudo"},{"post_id":"cjjhacqdk002s8arfk9ma7i5a","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqf1006w8arflu0tfqia"},{"post_id":"cjjhacqdl002v8arfygpvfare","tag_id":"cjjhacqf0006t8arf8mxixcqo","_id":"cjjhacqf1006y8arfxx8l3m2q"},{"post_id":"cjjhacqdm002z8arfg6t91j53","tag_id":"cjjhacqf1006x8arflrbaot4h","_id":"cjjhacqf100708arfvc3295kp"},{"post_id":"cjjhacqdp00398arfnltqc73a","tag_id":"cjjhacqeg00568arfquezcrvn","_id":"cjjhacqf200728arfk2x6pfx1"},{"post_id":"cjjhacqds003j8arfkxv5pjuv","tag_id":"cjjhacqf200718arf44l5ecjz","_id":"cjjhacqf200748arfodn1ejbz"},{"post_id":"cjjhacqdw003q8arfal8uav4a","tag_id":"cjjhacqf200738arf3v80a8cx","_id":"cjjhacqf300778arf1hi1x1if"},{"post_id":"cjjhacqdw003q8arfal8uav4a","tag_id":"cjjhacqf300758arffgswc9zf","_id":"cjjhacqf400788arfvb36t5b8"},{"post_id":"cjjhacqdw003q8arfal8uav4a","tag_id":"cjjhacqd0001l8arf3ze4ea3t","_id":"cjjhacqf4007a8arfilr8qyhy"},{"post_id":"cjjhacqe100418arfcqwonmz4","tag_id":"cjjhacqf300768arf0ors03oz","_id":"cjjhacqf4007b8arfdp9hlopg"},{"post_id":"cjjhacqe400488arfijtcbtyl","tag_id":"cjjhacqf5007d8arfw5bxx0wo","_id":"cjjhacqf6007h8arfs1ab00me"},{"post_id":"cjjhacqe400488arfijtcbtyl","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqf6007i8arfkg9pmpux"},{"post_id":"cjjhacqe8004i8arftuwscl6u","tag_id":"cjjhacqez006m8arfcejf0g0m","_id":"cjjhacqf6007k8arf97srxoim"},{"post_id":"cjjhacqea004p8arfjfp6domw","tag_id":"cjjhacqf6007j8arfl6wvmobh","_id":"cjjhacqf7007m8arf6uo25bgg"},{"post_id":"cjjhacqeb004t8arfr7mjnbn7","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqf7007o8arf0ln41s61"},{"post_id":"cjjhacqeb004t8arfr7mjnbn7","tag_id":"cjjhacqf6007l8arflrlst8fv","_id":"cjjhacqf8007p8arfk7y0y5er"},{"post_id":"cjjhacqec004w8arfarumobij","tag_id":"cjjhacqcs00128arfd2gaabz1","_id":"cjjhacqf8007r8arffexgfjcd"},{"post_id":"cjjhacqec004w8arfarumobij","tag_id":"cjjhacqf7007n8arft0v6jali","_id":"cjjhacqf8007s8arf67vsuiov"},{"post_id":"cjjhacqed004y8arfo4mmr88b","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqf9007u8arfu3hup6zl"},{"post_id":"cjjhacqed004y8arfo4mmr88b","tag_id":"cjjhacqf8007q8arfssfknsp1","_id":"cjjhacqf9007v8arfbejlj0g7"},{"post_id":"cjjhacqee00528arfwgkamihw","tag_id":"cjjhacqf8007t8arflf195n12","_id":"cjjhacqf9007x8arf39zii9by"},{"post_id":"cjjhacqef00558arfrrqf4arn","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqfa00808arf4jwv92ah"},{"post_id":"cjjhacqef00558arfrrqf4arn","tag_id":"cjjhacqf9007w8arfv8l6rx5i","_id":"cjjhacqfa00818arf1qfq80yb"},{"post_id":"cjjhacqef00558arfrrqf4arn","tag_id":"cjjhacqfa007y8arfokr9trfl","_id":"cjjhacqfb00838arfmmcg4ry8"},{"post_id":"cjjhacqeh00588arf0h33esgv","tag_id":"cjjhacqfa007z8arftxqp4blq","_id":"cjjhacqfb00848arfjre8ju2p"},{"post_id":"cjjhacqeh00588arf0h33esgv","tag_id":"cjjhacqe6004c8arfh0vigi2p","_id":"cjjhacqfb00868arfk43rnmeu"},{"post_id":"cjjhacqej005f8arfkri83rwj","tag_id":"cjjhacqez006m8arfcejf0g0m","_id":"cjjhacqfb00878arf9yfdvfyq"},{"post_id":"cjjhacqej005f8arfkri83rwj","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqfc00898arf5qs6ko1j"},{"post_id":"cjjhacqep005r8arfuv7uvj3n","tag_id":"cjjhacqfb00858arfwctjzzgs","_id":"cjjhacqfc008a8arfsq860hg2"},{"post_id":"cjjhacqep005t8arfu8g8gxjw","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqfc008c8arflvlbqs6m"},{"post_id":"cjjhacqep005t8arfu8g8gxjw","tag_id":"cjjhacqfa007y8arfokr9trfl","_id":"cjjhacqfc008d8arf6vhebtyu"},{"post_id":"cjjhacqeq005v8arfdnm5ln20","tag_id":"cjjhacqe9004j8arfvceam4w2","_id":"cjjhacqfd008f8arfxvxds0ct"},{"post_id":"cjjhacqeq005v8arfdnm5ln20","tag_id":"cjjhacqfc008b8arfjlp058zb","_id":"cjjhacqfd008g8arfe3i5m88a"},{"post_id":"cjjhacqes005z8arfhlcf2mwv","tag_id":"cjjhacqfc008e8arfwtqpl8lh","_id":"cjjhacqfd008i8arfu1q6te7j"},{"post_id":"cjjhacqes005z8arfhlcf2mwv","tag_id":"cjjhacqdv003n8arfqwbxxu7g","_id":"cjjhacqfd008j8arf3b21bjv7"},{"post_id":"cjjhacqes005z8arfhlcf2mwv","tag_id":"cjjhacqck000f8arf20fw8vuf","_id":"cjjhacqfe008l8arf9puhwqky"},{"post_id":"cjjhacqev00698arf45ujrpgo","tag_id":"cjjhacqev006a8arferxfpz3i","_id":"cjjhacqfe008m8arf3tll2d1j"},{"post_id":"cjjhacqex006f8arfzou2hmnp","tag_id":"cjjhacqdc002b8arfq6i4xneo","_id":"cjjhacqfe008o8arf0vofm1h4"},{"post_id":"cjjhacqex006f8arfzou2hmnp","tag_id":"cjjhacqfd008k8arf26glw2r7","_id":"cjjhacqfe008p8arftyp3p4ip"},{"post_id":"cjjhacqey006j8arfapp8j25z","tag_id":"cjjhacqfe008n8arfhk32ipdk","_id":"cjjhacqfe008q8arfcqejrn2p"},{"post_id":"cjjhacqe200448arfv5fc0d98","tag_id":"cjjhacqf400798arfbj8x863c","_id":"cjkgarq1j0000fhrfzcy9xp3f"},{"post_id":"cjjhacqe200448arfv5fc0d98","tag_id":"cjjhacqf4007c8arftc8iy42o","_id":"cjkgarq1k0002fhrfian5prbm"}],"Tag":[{"name":"Spark","_id":"cjjhacqcb00048arf3midc4kp"},{"name":"ubuntu","_id":"cjjhacqcf00098arfofo7xa5j"},{"name":"linux","_id":"cjjhacqck000f8arf20fw8vuf"},{"name":"encoding","_id":"cjjhacqcn000l8arf6dki6imy"},{"name":"mysql","_id":"cjjhacqcp000u8arf048f89hr"},{"name":"python","_id":"cjjhacqcs00128arfd2gaabz1"},{"name":"mysqldb","_id":"cjjhacqcv00188arf94seuu1a"},{"name":"kafka","_id":"cjjhacqcx001d8arfoqr3m3nt"},{"name":"math","_id":"cjjhacqd0001l8arf3ze4ea3t"},{"name":"win7","_id":"cjjhacqd6001z8arfg53t1mq7"},{"name":"pycharm","_id":"cjjhacqd900248arfpk0y5o6m"},{"name":"java","_id":"cjjhacqdc002b8arfq6i4xneo"},{"name":"anki","_id":"cjjhacqdi002o8arf74f0bo32"},{"name":"book","_id":"cjjhacqdl002w8arfbymz1n1o"},{"name":"hadoop","_id":"cjjhacqdn00338arfdtx5n636"},{"name":"fcitx","_id":"cjjhacqdv003n8arfqwbxxu7g"},{"name":"leetcode","_id":"cjjhacqdy003x8arfgd9k5veh"},{"name":"algorithm","_id":"cjjhacqe300458arf3l8qg0r1"},{"name":"javascript","_id":"cjjhacqe6004c8arfh0vigi2p"},{"name":"hexo","_id":"cjjhacqe9004j8arfvceam4w2"},{"name":"mathjax","_id":"cjjhacqeb004s8arfytyau8pl"},{"name":"limit","_id":"cjjhacqee004z8arf777b9ii7"},{"name":"Scala","_id":"cjjhacqeg00568arfquezcrvn"},{"name":"composition","_id":"cjjhacqem005j8arfuzk60guh"},{"name":"proof","_id":"cjjhacqeo005q8arfpy99o42t"},{"name":"git","_id":"cjjhacqev006a8arferxfpz3i"},{"name":"dnsmasq","_id":"cjjhacqey006g8arf1vfbvrs5"},{"name":"vim","_id":"cjjhacqez006m8arfcejf0g0m"},{"name":"Java","_id":"cjjhacqf0006t8arf8mxixcqo"},{"name":"set-thoery","_id":"cjjhacqf1006x8arflrbaot4h"},{"name":"life","_id":"cjjhacqf200718arf44l5ecjz"},{"name":"poisson","_id":"cjjhacqf200738arf3v80a8cx"},{"name":"probability","_id":"cjjhacqf300758arffgswc9zf"},{"name":"multi-thread, java, scala","_id":"cjjhacqf300768arf0ors03oz"},{"name":"Big Data","_id":"cjjhacqf400798arfbj8x863c"},{"name":"Kafka","_id":"cjjhacqf4007c8arftc8iy42o"},{"name":"i3","_id":"cjjhacqf5007d8arfw5bxx0wo"},{"name":"virtualbox","_id":"cjjhacqf6007j8arfl6wvmobh"},{"name":"network","_id":"cjjhacqf6007l8arflrlst8fv"},{"name":"django","_id":"cjjhacqf7007n8arft0v6jali"},{"name":"firefox","_id":"cjjhacqf8007q8arfssfknsp1"},{"name":"machine learning","_id":"cjjhacqf8007t8arflf195n12"},{"name":"zsh","_id":"cjjhacqf9007w8arfv8l6rx5i"},{"name":"shell","_id":"cjjhacqfa007y8arfokr9trfl"},{"name":"chrome","_id":"cjjhacqfa007z8arftxqp4blq"},{"name":"Java, Scala","_id":"cjjhacqfb00858arfwctjzzgs"},{"name":"hueman","_id":"cjjhacqfc008b8arfjlp058zb"},{"name":"sublime","_id":"cjjhacqfc008e8arfwtqpl8lh"},{"name":"jvm","_id":"cjjhacqfd008k8arf26glw2r7"},{"name":"Neural Network","_id":"cjjhacqfe008n8arfhk32ipdk"}]}}